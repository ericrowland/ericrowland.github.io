(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 6.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[   2702581,      63901]
NotebookOptionsPosition[   2572617,      61768]
NotebookOutlinePosition[   2573157,      61789]
CellTagsIndexPosition[   2573114,      61786]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["IntegerSequences 1.52", "Title",ExpressionUUID->"6e08e12b-5725-4f06-8125-01c8575b1513"],

Cell["documentation notebook", "Subtitle",ExpressionUUID->"a639fa54-e7bc-4cd8-a824-4a1fe52c05f3"],

Cell[TextData[{
 "Eric Rowland\n",
 ButtonBox["https://ericrowland.github.io/packages.html",
  BaseStyle->"Hyperlink",
  ButtonData:>{
    URL["https://ericrowland.github.io/packages.html"], None}]
}], "Subsubtitle",ExpressionUUID->"307b1658-74d7-4482-947e-ae70b3074aa4"],

Cell[CellGroupData[{

Cell["Introduction", "Section",ExpressionUUID->"b1392040-f036-43c1-b09e-b97a5657ec31"],

Cell["\<\
IntegerSequences is a package for identifying and computing with integer \
sequences from a variety of classes.
This introduction gives an overview of the main features of the package; the \
next section provides a complete list of package symbols along with their \
usage messages and further examples.\
\>", "Text",ExpressionUUID->"de46d2c4-a7a8-45bd-bcbf-79a78bb42308"],

Cell[TextData[{
 "To use IntegerSequences, first you will need to load the package by \
evaluating the following cell.  (If you need help, see ",
 ButtonBox["loading a package",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://people.hofstra.edu/Eric_Rowland/packages/loading_a_package.\
html"], None},
  ButtonNote->
   "http://people.hofstra.edu/Eric_Rowland/packages/loading_a_package.html"],
 ".)"
}], "Text",ExpressionUUID->"3dfddd2f-2379-4736-ba5a-ce02854b8e9d"],

Cell[BoxData[
 RowBox[{"<<", "IntegerSequences`"}]], "Code",ExpressionUUID->"b689aead-4524-41b5-9ffc-74217d72352c"],

Cell[CellGroupData[{

Cell["Named integer sequences", "Subsection",ExpressionUUID->"7664176f-40f8-4637-b63c-3108012d74ac"],

Cell[TextData[{
 "A number of named integer sequences are implemented in IntegerSequences:\n\
\[Bullet] the ",
 Cell[BoxData[
  FormBox["2", TraditionalForm]],ExpressionUUID->
  "3385a06d-0308-4bc1-bd74-ba8cb2d28b85"],
 "-automatic sequence ",
 StyleBox["BaumSweet", "Input"],
 ",\n\[Bullet] the constant-recursive sequences ",
 StyleBox["JacobsthalNumber", "Input"],
 " and ",
 StyleBox["Tribonacci", "Input"],
 ",\n\[Bullet] the ",
 Cell[BoxData[
  FormBox["2", TraditionalForm]],ExpressionUUID->
  "79c74bc6-3593-415a-be7a-1b231d9c1da8"],
 "-regular sequence ",
 StyleBox["SternBrocot", "Input"],
 ",\n\[Bullet] the algebraic sequence ",
 StyleBox["MotzkinNumber", "Input"],
 ", and\n\[Bullet] the holonomic sequence ",
 StyleBox["AperyNumber", "Input"],
 "."
}], "Text",ExpressionUUID->"142106e5-1110-4b58-90b2-02ee56626a13"],

Cell[TextData[{
 "The ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "2e4b6ffa-ea67-4708-9118-12819febe1cb"],
 "th term of the Baum\[Dash]Sweet sequence is ",
 Cell[BoxData[
  FormBox["1", TraditionalForm]],ExpressionUUID->
  "94a589b0-3b3f-41c8-b283-601dfdd04741"],
 " if the binary representation of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "a6dea233-1668-48c6-98bc-a29cb664aa3d"],
 " contains no block of zeros of odd length, and ",
 Cell[BoxData[
  FormBox["0", TraditionalForm]],ExpressionUUID->
  "2a08656d-5552-4a6f-90f6-cf1598889b14"],
 " otherwise."
}], "Text",ExpressionUUID->"09cf9d7d-6920-4d8d-adc6-e4308e0ca369"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"BaumSweet", "[", "n", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "15"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"3d099fee-7e67-42ca-a768-6db2d5a70d74"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", 
   ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
   "1"}], "}"}]], "Output",ExpressionUUID->"a5d918fd-5642-4e01-b03a-\
64bb13de5d3d"]
}, Open  ]],

Cell[TextData[{
 "The sequence of Jacobsthal numbers satisfies a linear recurrence of order ",
 Cell[BoxData[
  FormBox["2", TraditionalForm]],ExpressionUUID->
  "8377858f-906e-448a-be74-e72cca957c6b"],
 ":"
}], "Text",ExpressionUUID->"58baac3a-0ea3-4372-8386-2e6b777f32e9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"JacobsthalNumber", "[", "n", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "10"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"791c5f06-20b0-4717-bf64-88fa1cae6f95"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "1", ",", "3", ",", "5", ",", "11", ",", "21", ",", 
   "43", ",", "85", ",", "171", ",", "341"}], "}"}]], "Output",ExpressionUUID->\
"98860e05-b2ca-4437-854f-964ee5152c79"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindLinearRecurrence", "[", "%", "]"}]], "Input",ExpressionUUID->"8d94ea3b-0167-45cd-a006-70788101774c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2"}], "}"}]], "Output",ExpressionUUID->"0b721ca4-21cf-42e3-b1fb-bbf57ac074b8"]
}, Open  ]],

Cell[TextData[{
 "The Tribonacci sequence satisfies a linear recurrence of order ",
 Cell[BoxData[
  FormBox["3", TraditionalForm]],ExpressionUUID->
  "2389e080-6461-472e-bf1a-dae2d6294367"],
 ":"
}], "Text",ExpressionUUID->"d78b9d74-5363-447b-835e-de018717b6f9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Tribonacci", "[", "n", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "10"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"ad564eb9-0b64-4170-990c-7b5e9099ce41"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "1", ",", "1", ",", "2", ",", "4", ",", "7", ",", "13", 
   ",", "24", ",", "44", ",", "81"}], "}"}]], "Output",ExpressionUUID->\
"bb0832cc-06c5-46c2-98d7-5a6c38459a3e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindLinearRecurrence", "[", "%", "]"}]], "Input",ExpressionUUID->"928fd85c-e077-4258-9a65-6c7be8b635b4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "1", ",", "1"}], "}"}]], "Output",ExpressionUUID->\
"c8c77e86-c8b9-46e7-ace1-59587f52ff8f"]
}, Open  ]],

Cell["\<\
The Stern\[Dash]Brocot sequence satisfies a recurrence that reflects the \
binary representation of integers.\
\>", "Text",ExpressionUUID->"201e4605-4ac5-4b35-8f24-1bc560d5f942"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"SternBrocot", "[", "n", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "15"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"c6d37d1f-f1f1-4a5d-81fc-1c2a7957a739"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "1", ",", "2", ",", "1", ",", "3", ",", "2", ",", "3", 
   ",", "1", ",", "4", ",", "3", ",", "5", ",", "2", ",", "5", ",", "3", ",", 
   "4"}], "}"}]], "Output",ExpressionUUID->"16b3d958-5d67-4c32-a3a0-\
7608baa32c36"]
}, Open  ]],

Cell["\<\
The Motzkin numbers are closely related to the Catalan numbers.\
\>", "Text",ExpressionUUID->"201e4605-4ac5-4b35-8f24-1bc560d5f942"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"MotzkinNumber", "[", "n", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "10"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"a355a718-f2fa-4812-a03c-95ab1cff0746"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "2", ",", "4", ",", "9", ",", "21", ",", "51", ",", 
   "127", ",", "323", ",", "835", ",", "2188"}], "}"}]], "Output",ExpressionUU\
ID->"6334cce5-6e49-45eb-ba19-7c2a7533f7a4"]
}, Open  ]],

Cell[TextData[{
 "The Ap\[EAcute]ry numbers arose in Ap\[EAcute]ry\[CloseCurlyQuote]s proof \
that ",
 Cell[BoxData[
  FormBox[
   RowBox[{"Zeta", "[", "3", "]"}], TraditionalForm]],ExpressionUUID->
  "3ef23bd5-5b19-4c53-a923-75bb78ea5ffe"],
 " is irrational."
}], "Text",ExpressionUUID->"ceafcd48-76c9-476f-8a94-72f054a06ef8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"AperyNumber", "[", "n", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "10"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"924d645c-0cba-468b-bf0c-36ca657aee18"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "5", ",", "73", ",", "1445", ",", "33001", ",", "819005", ",", 
   "21460825", ",", "584307365", ",", "16367912425", ",", "468690849005", ",",
    "13657436403073"}], "}"}]], "Output",ExpressionUUID->"35f49593-fbda-4eec-\
b2e9-30f07e26ccff"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["OEIS lookup", "Subsection",ExpressionUUID->"173dee0f-4c68-440a-b25f-158ca957a6f6"],

Cell[TextData[{
 "The function ",
 StyleBox["OEISWebLookup", "Input"],
 " can be used to look up the first few terms of a sequence in ",
 ButtonBox["The On\[Hyphen]Line Encyclopedia of Integer Sequences",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://oeis.org"], None},
  ButtonNote->"https://oeis.org"],
 ".\nIt opens a web browser to the results page."
}], "Text",ExpressionUUID->"e52a5d15-5991-4ccc-a028-2a3df33e82e7"],

Cell[BoxData[
 RowBox[{"OEISWebLookup", "[", 
  RowBox[{"{", 
   RowBox[{
   "1", ",", "1", ",", "2", ",", "3", ",", "5", ",", "8", ",", "13", ",", 
    "21"}], "}"}], "]"}]], "Input",ExpressionUUID->"345beaf4-693c-4e13-bee5-\
e24065e2fc4a"],

Cell[TextData[{
 "Additionally, ",
 StyleBox["OEISWebLookup", "Input"],
 " can open the page corresponding to a sequence:"
}], "Text",ExpressionUUID->"6d2bd72c-a420-44c6-bb39-c08493d356ef"],

Cell[BoxData[
 RowBox[{"OEISWebLookup", "[", "\"\<A000002\>\"", "]"}]], "Input",ExpressionUU\
ID->"997aa027-e96c-4951-ae89-87cd491edb5a"]
}, Closed]],

Cell[CellGroupData[{

Cell["Elementary number theory", "Subsection",ExpressionUUID->"8a790dda-b9b0-4885-9219-35c8ed97f66b"],

Cell["\<\
The radical of an integer is the product of its prime divisors.\
\>", "Text",ExpressionUUID->"fdc9f5e8-0b3a-416d-a788-84fa5471f0c1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Radical", "[", "200", "]"}]], "Input",ExpressionUUID->"cec1b136-3a33-460e-b035-40b177b5e3d9"],

Cell[BoxData["10"], "Output",ExpressionUUID->"6577a2d6-a5fc-4dc8-bb9d-7b4dcc96eed4"]
}, Open  ]],

Cell[TextData[{
 "IntegerSequences extends built-in Wolfram Language functionality for number \
theoretic functions on integers such as ",
 StyleBox["DigitCount", "Input"],
 ", ",
 StyleBox["IntegerDigits", "Input"],
 ", and ",
 StyleBox["BitGet", "Input"],
 "."
}], "Text",ExpressionUUID->"31c27d20-d06c-4bdf-b4e2-808d8e36d8cc"],

Cell[TextData[{
 StyleBox["DigitsCount", "Input"],
 " counts subwords in the base-",
 Cell[BoxData[
  FormBox["b", TraditionalForm]],ExpressionUUID->
  "f18c8cfc-1788-4dff-802a-d0e2317be46d"],
 " representation of a number:"
}], "Text",ExpressionUUID->"b455e242-ea98-4989-9910-c1bc6942f065"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DigitsCount", "[", 
  RowBox[{"1000", ",", "10", ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0"}], "}"}]}], "]"}]], "Input",ExpressionUUID->\
"78c2b59d-fcd5-4475-9dfb-0654fd368bd6"],

Cell[BoxData["2"], "Output",ExpressionUUID->"5f0d2361-e0a6-4a92-b4b3-ce2afa22b469"]
}, Open  ]],

Cell[TextData[{
 StyleBox["DigitList", "Input"],
 " allows the base to be negative:"
}], "Text",ExpressionUUID->"c89cd879-2caf-4e62-ab67-2b693ecf63b1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DigitList", "[", 
  RowBox[{"27", ",", 
   RowBox[{"-", "3"}]}], "]"}]], "Input",ExpressionUUID->"65309c35-c23d-41ff-\
9130-4799c3063e00"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "0", ",", "2", ",", "1"}], "}"}]], "Output",Expr\
essionUUID->"a39c433b-06b0-47ad-a7b0-1e2481740570"]
}, Open  ]],

Cell[TextData[{
 "Use ",
 StyleBox["FromDigitList", "Input"],
 " to reconstruct the integer:"
}], "Text",ExpressionUUID->"97601a38-ee5d-46ae-afd1-88ec650548aa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromDigitList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"-", "3"}]}], "]"}]], "Input",ExpressionUUID->"712cdb6f-e4ec-47da-\
aa7e-427108664dc0"],

Cell[BoxData["27"], "Output",ExpressionUUID->"fccc2c02-25df-44c9-a453-1b5a561a9975"]
}, Open  ]],

Cell[TextData[{
 StyleBox["DigitGet", "Input"],
 " extracts digits in any base (positive or negative):"
}], "Text",ExpressionUUID->"a0e635ea-270b-4aea-a33d-49c52cde4b74"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DigitGet", "[", 
  RowBox[{"27", ",", 
   RowBox[{"-", "3"}], ",", "3"}], "]"}]], "Input",ExpressionUUID->"223e2908-\
a927-41fb-9219-a8dd6ae71621"],

Cell[BoxData["2"], "Output",ExpressionUUID->"f8f73f4b-a2a9-4643-82ed-09715831b626"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Polynomials and formal power series", "Subsection",ExpressionUUID->"0af05587-db62-4cf5-8d45-0184b0ba9f76"],

Cell[TextData[{
 StyleBox["FromCoefficientList", "Input"],
 " provides an inverse to the Wolfram Language function ",
 StyleBox["CoefficientList", "Input"],
 "."
}], "Text",ExpressionUUID->"8b65bda4-4aa1-4bec-80e2-2b822af54476"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromCoefficientList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", "x"}], 
  "]"}]], "Input",ExpressionUUID->"693ef3c6-3236-4243-be1d-a7d19ba8e491"],

Cell[BoxData[
 RowBox[{"1", "+", 
  RowBox[{"2", " ", "x"}], "+", 
  RowBox[{"3", " ", 
   SuperscriptBox["x", "2"]}], "+", 
  RowBox[{"4", " ", 
   SuperscriptBox["x", "3"]}], "+", 
  RowBox[{"5", " ", 
   SuperscriptBox["x", "4"]}]}]], "Output",ExpressionUUID->"63061c12-8892-\
4a07-bd59-d68159e7045a"]
}, Open  ]],

Cell[TextData[{
 StyleBox["SeriesSolve", "Input"],
 " produces series solutions for a function defined implicitly by an equation."
}], "Text",ExpressionUUID->"1d5014e1-2298-4cc5-b18b-fa0260b5b1d2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SeriesSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"f", "[", "x", "]"}], "\[Equal]", 
    RowBox[{"x", "+", 
     SuperscriptBox[
      RowBox[{"f", "[", "x", "]"}], "5"]}]}], ",", 
   RowBox[{"f", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "5"}], "}"}]}], "]"}]], "Input",ExpressionUUID\
->"d62cbc2b-a767-4db9-8e56-fa54468bd8ec"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
     InterpretationBox[
      RowBox[{"x", "+", 
       SuperscriptBox["x", "5"], "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", "x", "]"}], "6"],
        SeriesData[$CellContext`x, 0, {}, 1, 6, 1],
        Editable->False]}],
      SeriesData[$CellContext`x, 0, {1, 0, 0, 0, 1}, 1, 6, 1],
      Editable->False]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
     InterpretationBox[
      RowBox[{
       RowBox[{"-", "1"}], "-", 
       FractionBox["x", "4"], "+", 
       FractionBox[
        RowBox[{"5", " ", 
         SuperscriptBox["x", "2"]}], "32"], "-", 
       FractionBox[
        RowBox[{"5", " ", 
         SuperscriptBox["x", "3"]}], "32"], "+", 
       FractionBox[
        RowBox[{"385", " ", 
         SuperscriptBox["x", "4"]}], "2048"], "-", 
       FractionBox[
        SuperscriptBox["x", "5"], "4"], "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", "x", "]"}], "6"],
        SeriesData[$CellContext`x, 0, {}, 0, 6, 1],
        Editable->False]}],
      SeriesData[$CellContext`x, 0, {-1, 
        Rational[-1, 4], 
        Rational[5, 32], 
        Rational[-5, 32], 
        Rational[385, 2048], 
        Rational[-1, 4]}, 0, 6, 1],
      Editable->False]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
     InterpretationBox[
      RowBox[{
       RowBox[{"-", "\[ImaginaryI]"}], "-", 
       FractionBox["x", "4"], "-", 
       FractionBox[
        RowBox[{"5", " ", "\[ImaginaryI]", " ", 
         SuperscriptBox["x", "2"]}], "32"], "+", 
       FractionBox[
        RowBox[{"5", " ", 
         SuperscriptBox["x", "3"]}], "32"], "+", 
       FractionBox[
        RowBox[{"385", " ", "\[ImaginaryI]", " ", 
         SuperscriptBox["x", "4"]}], "2048"], "-", 
       FractionBox[
        SuperscriptBox["x", "5"], "4"], "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", "x", "]"}], "6"],
        SeriesData[$CellContext`x, 0, {}, 0, 6, 1],
        Editable->False]}],
      SeriesData[$CellContext`x, 0, {
        Complex[0, -1], 
        Rational[-1, 4], 
        Complex[0, 
         Rational[-5, 32]], 
        Rational[5, 32], 
        Complex[0, 
         Rational[385, 2048]], 
        Rational[-1, 4]}, 0, 6, 1],
      Editable->False]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
     InterpretationBox[
      RowBox[{"\[ImaginaryI]", "-", 
       FractionBox["x", "4"], "+", 
       FractionBox[
        RowBox[{"5", " ", "\[ImaginaryI]", " ", 
         SuperscriptBox["x", "2"]}], "32"], "+", 
       FractionBox[
        RowBox[{"5", " ", 
         SuperscriptBox["x", "3"]}], "32"], "-", 
       FractionBox[
        RowBox[{"385", " ", "\[ImaginaryI]", " ", 
         SuperscriptBox["x", "4"]}], "2048"], "-", 
       FractionBox[
        SuperscriptBox["x", "5"], "4"], "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", "x", "]"}], "6"],
        SeriesData[$CellContext`x, 0, {}, 0, 6, 1],
        Editable->False]}],
      SeriesData[$CellContext`x, 0, {
        Complex[0, 1], 
        Rational[-1, 4], 
        Complex[0, 
         Rational[5, 32]], 
        Rational[5, 32], 
        Complex[0, 
         Rational[-385, 2048]], 
        Rational[-1, 4]}, 0, 6, 1],
      Editable->False]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
     InterpretationBox[
      RowBox[{"1", "-", 
       FractionBox["x", "4"], "-", 
       FractionBox[
        RowBox[{"5", " ", 
         SuperscriptBox["x", "2"]}], "32"], "-", 
       FractionBox[
        RowBox[{"5", " ", 
         SuperscriptBox["x", "3"]}], "32"], "-", 
       FractionBox[
        RowBox[{"385", " ", 
         SuperscriptBox["x", "4"]}], "2048"], "-", 
       FractionBox[
        SuperscriptBox["x", "5"], "4"], "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", "x", "]"}], "6"],
        SeriesData[$CellContext`x, 0, {}, 0, 6, 1],
        Editable->False]}],
      SeriesData[$CellContext`x, 0, {1, 
        Rational[-1, 4], 
        Rational[-5, 32], 
        Rational[-5, 32], 
        Rational[-385, 2048], 
        Rational[-1, 4]}, 0, 6, 1],
      Editable->False]}], "}"}]}], "}"}]], "Output",ExpressionUUID->"00cb5218-\
6c13-4473-8dff-9f8b241140c5"]
}, Open  ]],

Cell[TextData[{
 "In counting combinatorial objects one frequently encounters systems of \
linear recurrences in a multidimensional counting function.  One technique is \
then to use generating functions to rewrite the system and in some cases \
solve it algebraically.  ",
 StyleBox["GeneratingFunctionRelations", "Input"],
 " automates the process of converting a linear system of partial recurrence \
equations into a system of equations in the generating function."
}], "Text",ExpressionUUID->"ffe74731-b532-4e99-af14-60248d40bfcf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GeneratingFunctionRelations", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"s", "[", 
      RowBox[{"n", ",", "0"}], "]"}], "\[Equal]", 
     RowBox[{"2", 
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"n", "-", "1"}], ",", "1"}], "]"}]}]}], "&&", 
    RowBox[{
     RowBox[{"s", "[", 
      RowBox[{"n", ",", "m"}], "]"}], "\[Equal]", 
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"n", "+", "1"}], ",", "m"}], "]"}], "-", 
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"n", "-", "1"}], ",", 
        RowBox[{"m", "-", "1"}]}], "]"}], "+", 
      RowBox[{"3", " ", 
       RowBox[{"s", "[", 
        RowBox[{
         RowBox[{"n", "-", "1"}], ",", 
         RowBox[{"m", "+", "1"}]}], "]"}]}]}]}]}], ",", 
   RowBox[{"s", "[", 
    RowBox[{"n", ",", "m"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"x", ",", "y"}], "]"}]}], "]"}]], "Input",ExpressionUUID->\
"4320ab36-259f-40f0-9cc7-31ae8bd370a4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"x", ",", "0"}], "]"}], "-", 
     RowBox[{"s", "[", 
      RowBox[{"0", ",", "0"}], "]"}], "-", 
     RowBox[{"2", " ", "x", " ", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"n", "=", "0"}], "\[Infinity]"], 
       RowBox[{
        SuperscriptBox["x", "n"], " ", 
        RowBox[{"s", "[", 
         RowBox[{"n", ",", "1"}], "]"}]}]}]}]}], "\[Equal]", "0"}], ",", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"x", " ", 
         SuperscriptBox["y", "3"]}], "-", 
        RowBox[{
         SuperscriptBox["x", "2"], " ", 
         SuperscriptBox["y", "3"]}]}], ")"}], " ", 
      RowBox[{"f", "[", 
       RowBox[{"0", ",", "y"}], "]"}]}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"3", " ", 
         SuperscriptBox["x", "3"], " ", 
         SuperscriptBox["y", "2"]}], "+", 
        RowBox[{"x", " ", 
         SuperscriptBox["y", "3"]}], "-", 
        RowBox[{
         SuperscriptBox["x", "2"], " ", 
         SuperscriptBox["y", "3"]}]}], ")"}], " ", 
      RowBox[{"f", "[", 
       RowBox[{"x", ",", "0"}], "]"}]}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "3"}], " ", 
         SuperscriptBox["x", "3"], " ", 
         SuperscriptBox["y", "2"]}], "-", 
        RowBox[{"x", " ", 
         SuperscriptBox["y", "3"]}], "+", 
        RowBox[{
         SuperscriptBox["x", "2"], " ", 
         SuperscriptBox["y", "3"]}], "+", 
        RowBox[{
         SuperscriptBox["x", "3"], " ", 
         SuperscriptBox["y", "4"]}]}], ")"}], " ", 
      RowBox[{"f", "[", 
       RowBox[{"x", ",", "y"}], "]"}]}], "-", 
     RowBox[{"x", " ", 
      SuperscriptBox["y", "3"], " ", 
      RowBox[{"s", "[", 
       RowBox[{"0", ",", "0"}], "]"}]}], "+", 
     RowBox[{
      SuperscriptBox["x", "2"], " ", 
      SuperscriptBox["y", "3"], " ", 
      RowBox[{"s", "[", 
       RowBox[{"0", ",", "0"}], "]"}]}], "-", 
     RowBox[{
      SuperscriptBox["x", "2"], " ", 
      SuperscriptBox["y", "3"], " ", 
      RowBox[{"s", "[", 
       RowBox[{"1", ",", "0"}], "]"}]}], "+", 
     RowBox[{
      SuperscriptBox["x", "2"], " ", 
      SuperscriptBox["y", "3"], " ", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"m", "=", "0"}], "\[Infinity]"], 
       RowBox[{
        SuperscriptBox["y", "m"], " ", 
        RowBox[{"s", "[", 
         RowBox[{"1", ",", "m"}], "]"}]}]}]}], "+", 
     RowBox[{"3", " ", 
      SuperscriptBox["x", "3"], " ", 
      SuperscriptBox["y", "3"], " ", 
      RowBox[{
       UnderoverscriptBox["\[Sum]", 
        RowBox[{"n", "=", "0"}], "\[Infinity]"], 
       RowBox[{
        SuperscriptBox["x", "n"], " ", 
        RowBox[{"s", "[", 
         RowBox[{"n", ",", "1"}], "]"}]}]}]}]}], "\[Equal]", "0"}]}], 
  "}"}]], "Output",ExpressionUUID->"f68babe0-1858-4b2a-acd9-fc2ba4211b33"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Identifying integer sequences", "Subsection",ExpressionUUID->"c021540d-4405-4137-8993-93af1dbf275a"],

Cell[TextData[{
 "The Wolfram Language has several powerful built-in symbols for sequence \
identification, including ",
 StyleBox["InterpolatingPolynomial", "Input"],
 ", ",
 StyleBox["FindSequenceFunction", "Input"],
 ", and ",
 StyleBox["FindGeneratingFunction", "Input"],
 ".  IntegerSequences generalizes ",
 StyleBox["InterpolatingPolynomial", "Input"],
 " to multidimensional arrays."
}], "Text",ExpressionUUID->"69588d93-620a-488f-9441-6d898497d28b"],

Cell[TextData[{
 "Find the polynomial in ",
 Cell[BoxData[
  FormBox["x", TraditionalForm]],ExpressionUUID->
  "443830bc-f7bc-4f46-873f-151f25329e09"],
 " and ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "a0db9281-9008-42d9-bbb8-60ed5016706c"],
 " that reproduces an array of values for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "\[LessEqual]", "x", "\[LessEqual]", "3"}], TraditionalForm]],
  ExpressionUUID->"d6e8f932-327a-4368-b148-4596415535e3"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"1", "\[LessEqual]", "y", "\[LessEqual]", "4"}], TraditionalForm]],
  ExpressionUUID->"c730fb36-7ac8-4793-bbc4-55234b25ff29"],
 ":"
}], "Text",ExpressionUUID->"3c7971a6-c920-432c-b755-ba8dc5477fb5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindPolynomial", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5", ",", "29", ",", "83", ",", "179"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"11", ",", "78", ",", "247", ",", "566"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"21", ",", "159", ",", "519", ",", "1209"}], "}"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]], "Input",ExpressionUUID->\
"1a05f1ea-e248-414f-91a0-acb8905d04ee"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "x"}], "+", 
  RowBox[{"x", " ", "y"}], "+", 
  RowBox[{"3", " ", 
   SuperscriptBox["y", "2"]}], "+", 
  RowBox[{"2", " ", 
   SuperscriptBox["x", "2"], " ", 
   SuperscriptBox["y", "3"]}]}]], "Output",ExpressionUUID->"c426d0ec-508d-\
41a8-ad7f-093b6040f7fe"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "x"}], "+", 
    RowBox[{"x", " ", "y"}], "+", 
    RowBox[{"3", " ", 
     SuperscriptBox["y", "2"]}], "+", 
    RowBox[{"2", " ", 
     SuperscriptBox["x", "2"], " ", 
     SuperscriptBox["y", "3"]}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "4"}], "}"}]}], "]"}]], "Input",ExpressionUUID->\
"bfcef6ac-1c1c-43b8-93a2-d4ae8f352838"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "29", ",", "83", ",", "179"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"11", ",", "78", ",", "247", ",", "566"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"21", ",", "159", ",", "519", ",", "1209"}], "}"}]}], 
  "}"}]], "Output",ExpressionUUID->"8d671338-b263-46d4-bd00-32d6b98ce778"]
}, Open  ]],

Cell["\<\
IntegerSequences includes several symbols for identifying sequences.\
\>", "Text",ExpressionUUID->"cabfeb9d-9634-45b4-9fcb-3ad801fc659b"],

Cell[TextData[{
 "A quasi-polynomial is a function that, when restricted to each residue \
class modulo ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "eec76d6b-3bab-4d03-8402-9d17aaa5d78b"],
 ", is a polynomial.  For example, the coefficients of some rational series \
are quasi-polynomials."
}], "Text",ExpressionUUID->"3e9dfc14-1859-4817-b639-49af4c1945a8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Series", "[", 
  RowBox[{
   FractionBox["1", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "+", "x", "+", 
       SuperscriptBox["x", "2"], "+", 
       SuperscriptBox["x", "3"], "+", 
       SuperscriptBox["x", "4"]}], ")"}], "2"]], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "20"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"80cdd2bf-00cc-4ca4-98e3-8c4e026125b7"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{"1", "-", 
   RowBox[{"2", " ", "x"}], "+", 
   SuperscriptBox["x", "2"], "+", 
   RowBox[{"2", " ", 
    SuperscriptBox["x", "5"]}], "-", 
   RowBox[{"4", " ", 
    SuperscriptBox["x", "6"]}], "+", 
   RowBox[{"2", " ", 
    SuperscriptBox["x", "7"]}], "+", 
   RowBox[{"3", " ", 
    SuperscriptBox["x", "10"]}], "-", 
   RowBox[{"6", " ", 
    SuperscriptBox["x", "11"]}], "+", 
   RowBox[{"3", " ", 
    SuperscriptBox["x", "12"]}], "+", 
   RowBox[{"4", " ", 
    SuperscriptBox["x", "15"]}], "-", 
   RowBox[{"8", " ", 
    SuperscriptBox["x", "16"]}], "+", 
   RowBox[{"4", " ", 
    SuperscriptBox["x", "17"]}], "+", 
   RowBox[{"5", " ", 
    SuperscriptBox["x", "20"]}], "+", 
   InterpretationBox[
    SuperscriptBox[
     RowBox[{"O", "[", "x", "]"}], "21"],
    SeriesData[$CellContext`x, 0, {}, 0, 21, 1],
    Editable->False]}],
  SeriesData[$CellContext`x, 0, {1, -2, 1, 0, 0, 2, -4, 2, 0, 0, 3, -6, 3, 0, 
   0, 4, -8, 4, 0, 0, 5}, 0, 21, 1],
  Editable->False]], "Output",ExpressionUUID->"1ef2ca7c-0cbb-4785-bf73-\
7a389ebf2c82"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindQuasiPolynomial", "[", 
  RowBox[{
   RowBox[{"CoefficientList", "[", 
    RowBox[{
     RowBox[{"Normal", "[", 
      RowBox[{"Series", "[", 
       RowBox[{
        FractionBox["1", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"1", "+", "x", "+", 
            SuperscriptBox["x", "2"], "+", 
            SuperscriptBox["x", "3"], "+", 
            SuperscriptBox["x", "4"]}], ")"}], "2"]], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "0", ",", "20"}], "}"}]}], "]"}], "]"}], ",", 
     "x"}], "]"}], ",", 
   RowBox[{"n", "+", "1"}], ",", "5"}], "]"}]], "Input",ExpressionUUID->\
"e889e3ad-8948-484d-ae92-1e6ec407c95d"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\[Piecewise]", GridBox[{
       {"0", 
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{
           RowBox[{"1", "+", "n"}], ",", "5"}], "]"}], "\[Equal]", "0"}]},
       {
        RowBox[{"1", "+", 
         FractionBox["n", "5"]}], 
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{
           RowBox[{"1", "+", "n"}], ",", "5"}], "]"}], "\[Equal]", "1"}]},
       {
        RowBox[{
         RowBox[{"-", 
          FractionBox["8", "5"]}], "-", 
         FractionBox[
          RowBox[{"2", " ", "n"}], "5"]}], 
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{
           RowBox[{"1", "+", "n"}], ",", "5"}], "]"}], "\[Equal]", "2"}]},
       {
        RowBox[{
         FractionBox["3", "5"], "+", 
         FractionBox["n", "5"]}], 
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{
           RowBox[{"1", "+", "n"}], ",", "5"}], "]"}], "\[Equal]", "3"}]},
       {"0", 
        TagBox["True",
         "PiecewiseDefault",
         AutoDelete->True]}
      },
      AllowedDimensions->{2, Automatic},
      Editable->True,
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.84]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}},
      Selectable->True]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.35]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  "Piecewise",
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True,
  Selectable->False,
  StripWrapperBoxes->True]], "Output",ExpressionUUID->"1a7e955b-fac1-4a7a-\
980d-d78d62492061"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  UnderoverscriptBox["\[Sum]", 
   RowBox[{"n", "=", "0"}], "20"], 
  RowBox[{
   SuperscriptBox["x", "n"], 
   RowBox[{"\[Piecewise]", GridBox[{
      {"0", 
       RowBox[{
        RowBox[{"Mod", "[", 
         RowBox[{
          RowBox[{"1", "+", "n"}], ",", "5"}], "]"}], "\[Equal]", "0"}]},
      {
       RowBox[{"1", "+", 
        FractionBox["n", "5"]}], 
       RowBox[{
        RowBox[{"Mod", "[", 
         RowBox[{
          RowBox[{"1", "+", "n"}], ",", "5"}], "]"}], "\[Equal]", "1"}]},
      {
       RowBox[{
        RowBox[{"-", 
         FractionBox["8", "5"]}], "-", 
        FractionBox[
         RowBox[{"2", " ", "n"}], "5"]}], 
       RowBox[{
        RowBox[{"Mod", "[", 
         RowBox[{
          RowBox[{"1", "+", "n"}], ",", "5"}], "]"}], "\[Equal]", "2"}]},
      {
       RowBox[{
        FractionBox["3", "5"], "+", 
        FractionBox["n", "5"]}], 
       RowBox[{
        RowBox[{"Mod", "[", 
         RowBox[{
          RowBox[{"1", "+", "n"}], ",", "5"}], "]"}], "\[Equal]", "3"}]},
      {"0", 
       TagBox["True",
        "PiecewiseDefault",
        DeletionWarning -> True,
        AutoDelete->False]}
     },
     GridBoxAlignment->{
      "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
       "RowsIndexed" -> {}},
     GridBoxItemSize->{
      "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
       "RowsIndexed" -> {}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.84]}, 
         Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
         Offset[0.2], {
          Offset[0.4]}, 
         Offset[0.2]}, "RowsIndexed" -> {}}]}]}]}]], "Input",ExpressionUUID->\
"43deb060-7c89-4aaa-9cf8-6659eec2164f"],

Cell[BoxData[
 RowBox[{"1", "-", 
  RowBox[{"2", " ", "x"}], "+", 
  SuperscriptBox["x", "2"], "+", 
  RowBox[{"2", " ", 
   SuperscriptBox["x", "5"]}], "-", 
  RowBox[{"4", " ", 
   SuperscriptBox["x", "6"]}], "+", 
  RowBox[{"2", " ", 
   SuperscriptBox["x", "7"]}], "+", 
  RowBox[{"3", " ", 
   SuperscriptBox["x", "10"]}], "-", 
  RowBox[{"6", " ", 
   SuperscriptBox["x", "11"]}], "+", 
  RowBox[{"3", " ", 
   SuperscriptBox["x", "12"]}], "+", 
  RowBox[{"4", " ", 
   SuperscriptBox["x", "15"]}], "-", 
  RowBox[{"8", " ", 
   SuperscriptBox["x", "16"]}], "+", 
  RowBox[{"4", " ", 
   SuperscriptBox["x", "17"]}], "+", 
  RowBox[{"5", " ", 
   SuperscriptBox["x", "20"]}]}]], "Output",ExpressionUUID->"0142a114-9ef5-\
460e-a29c-f62ad17aceea"]
}, Open  ]],

Cell[TextData[{
 "See the next subsections for identifying ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "eb529311-eef7-413a-b29d-9acc46109ae3"],
 "-automatic sequences and ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "1887a528-bc7f-4475-b995-a81951d361a5"],
 "-regular sequences."
}], "Text",ExpressionUUID->"a826136b-f5e8-4710-a575-c3926bf6ecb3"]
}, Closed]],

Cell[CellGroupData[{

Cell["Automata and automatic sequences", "Subsection",ExpressionUUID->"2a525973-f589-4f4e-a81a-293d4c83ba2b"],

Cell[TextData[{
 "A sequence ",
 Cell[BoxData[
  FormBox[
   RowBox[{"s", "(", "n", ")"}], TraditionalForm]],ExpressionUUID->
  "bb34c4f1-8cc1-495b-af56-922050b5795f"],
 " is ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "bf5263b6-3f87-45f4-bd7e-5110f123a880"],
 "-automatic if there is an automaton that outputs ",
 Cell[BoxData[
  FormBox[
   RowBox[{"s", "(", "n", ")"}], TraditionalForm]],ExpressionUUID->
  "8185d2b0-d322-4f1d-8c8b-4967c668c685"],
 " when fed the base-",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "be5c7e28-3701-4ffc-9201-ac23af192f96"],
 " digits of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "8f736935-e887-4bb3-b0ac-3ce70c142343"],
 "."
}], "Text",ExpressionUUID->"06bce80a-4774-43a7-a386-6d898bd6605e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonGraph", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"0", "\[Rule]", "0"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"0", "\[Rule]", "1"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"1", "\[Rule]", "1"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"1", "\[Rule]", "0"}], ",", "1"}], "}"}]}], "}"}], ",", "0"}],
    "]"}], "]"}]], "Input",ExpressionUUID->"a3618847-2978-47e7-9090-\
86ed1e524ac2"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{Null, 0, 1}, {{{1, 2}, {2, 2}, {2, 3}, {3, 3}, {3, 2}}, Null}, {
      EdgeLabels -> {
        DirectedEdge[1, 0] -> 1, DirectedEdge[0, 0] -> 0, DirectedEdge[0, 1] -> 
         1, DirectedEdge[1, 1] -> 0}, 
       EdgeShapeFunction -> {{
         "CorporateShortCarvedArrow", "ArrowSize" -> 0.04, "ArrowPositions" -> 
          1}}, EdgeStyle -> {
         Directive[
          GrayLevel[0.5], 
          Opacity[1]]}, PerformanceGoal -> "Quality", 
       VertexLabels -> {Null -> Placed[Null, {
            Rational[1, 2], 
            Rational[1, 2]}], 1 -> Placed[1, {
            Rational[1, 2], 
            Rational[1, 2]}], 0 -> Placed[0, {
            Rational[1, 2], 
            Rational[1, 2]}]}, 
       VertexShapeFunction -> {1 -> "Circle", Null -> None, 0 -> "Circle"}, 
       VertexSize -> {0.2}, VertexStyle -> {
         Hue[0.6, 0.3, 0.8]}}]], Typeset`boxes, Typeset`boxes$s2d = 
    GraphicsGroupBox[{{
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], 
       Directive[
        GrayLevel[0.5], 
        Opacity[1]], {
        Arrowheads[{{0.04, 1, {
            GraphicsBox[
             
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
               0, 1, 0}}}, {{{-0.12347775660674376`, 
               0.}, {-0.5614144091900695, 
               0.21895451909535257`}, {-0.4738215557948804, 
               0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
               0.}}}]], 0.533327810340424}}}], 
        ArrowBox[{
          DynamicLocation["VertexID$1", Automatic, Center], 
          DynamicLocation["VertexID$2", Automatic, Center]}]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$2", Automatic, Center], {
             1.215969005971036, -0.1425312379880006}, {
             1.2342632844934087`, -0.32493768720862726`}, {
             1.1702710252509327`, -0.431056932977143}, {
             0.8305438002399658, -0.4310569329771431}, {
             0.7665515409974896, -0.32493768720862726`}, {
             0.7848458195198625, -0.1425312379880006}, 
             DynamicLocation["VertexID$2", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$2"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$2", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$2", Automatic, Center], {
             1.5003055284305298`, 0.16440723931737236`}, 
             DynamicLocation["VertexID$3", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$3"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$3", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             1.5003055284305298`, -0.16440723931737236`}, 
             DynamicLocation["VertexID$2", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$4"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$4", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             2.0886828995833713`, 0.1907835323853024}, {2.287561377120962, 
             0.24717977484589673`}, {2.4147320015954197`, 
             0.1882226960710236}, {
             2.4147320015954197`, -0.18822269607102265`}, {
             2.2875613771209626`, -0.2471797748458961}, {
             2.0886828995833717`, -0.19078353238530207`}, 
             DynamicLocation["VertexID$3", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$5"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$5", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       Hue[0.6, 0.3, 0.8], 
       TagBox[{
         TagBox[
          StyleBox[
           CircleBox[{0., 0.}, {0.0999796231370162, 0.0999796231370162}], 
           ShowContents -> False, StripOnInput -> False], "DynamicName", 
          BoxID -> "VertexID$1"], 
         InsetBox["", 
          Dynamic[
          DynamicLocation[
            "VertexID$1", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$1", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$1", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          
          DiskBox[{1.0004074127454492`, 4.666248974332878*^-18}, {
           0.0999796231370162, 0.0999796231370162}], "DynamicName", BoxID -> 
          "VertexID$2"], 
         InsetBox[
          FormBox["0", TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$2", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$2", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$2", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$2"], 
       TagBox[{
         TagBox[
          
          DiskBox[{2.000203644115611, 4.9566794084199865`*^-18}, {
           0.0999796231370162, 0.0999796231370162}], "DynamicName", BoxID -> 
          "VertexID$3"], 
         InsetBox[
          FormBox["1", TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$3", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$3", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$3", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$3"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{3.9406933090100917`, 
       355.2393066909899}, {-52.23930669098989, 47.23930669098989}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",ExpressionUUID->"80753c71-113d-4d9a-b701-\
fd32e6ecd490"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"m", "=", 
   RowBox[{"Automaton", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<0\>\"", "\[Rule]", "\"\<0\>\""}], ",", "0"}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<0\>\"", "\[Rule]", "\"\<1\>\""}], ",", "1"}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<0\>\"", "\[Rule]", "\"\<2\>\""}], ",", "2"}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<1\>\"", "\[Rule]", "\"\<3\>\""}], ",", "0"}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<1\>\"", "\[Rule]", "\"\<1\>\""}], ",", "1"}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<1\>\"", "\[Rule]", "\"\<2\>\""}], ",", "2"}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<2\>\"", "\[Rule]", "\"\<4\>\""}], ",", "0"}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<2\>\"", "\[Rule]", "\"\<3\>\""}], ",", "1"}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<2\>\"", "\[Rule]", "\"\<1\>\""}], ",", "2"}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<3\>\"", "\[Rule]", "\"\<2\>\""}], ",", "0"}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<3\>\"", "\[Rule]", "\"\<4\>\""}], ",", "1"}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<3\>\"", "\[Rule]", "\"\<3\>\""}], ",", "2"}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<4\>\"", "\[Rule]", "\"\<3\>\""}], ",", "0"}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<4\>\"", "\[Rule]", "\"\<2\>\""}], ",", "1"}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"\"\<4\>\"", "\[Rule]", "\"\<4\>\""}], ",", "2"}], "}"}]}], 
      "}"}], ",", "\"\<0\>\"", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"\"\<0\>\"", "|", "\"\<1\>\"", "|", "\"\<4\>\""}], "\[Rule]", 
        "\"\<a\>\""}], ",", 
       RowBox[{"\"\<2\>\"", "\[Rule]", "\"\<b\>\""}], ",", 
       RowBox[{"\"\<3\>\"", "\[Rule]", "\"\<c\>\""}]}], "}"}]}], "]"}]}], 
  ";"}]], "Input",ExpressionUUID->"c3ed8b1a-df74-4e86-bc81-3ea0a023f886"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonGraph", "[", "m", "]"}]], "Input",ExpressionUUID->"13b2883f-ca37-4226-b5e6-397b9aa7e05b"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{Null, 
       Interpretation["a", "0"], 
       Interpretation["a", "1"], 
       Interpretation["b", "2"], 
       Interpretation["c", "3"], 
       Interpretation["a", "4"]}, {{{1, 2}, {2, 2}, {2, 3}, {2, 4}, {3, 5}, {
       3, 3}, {3, 4}, {4, 6}, {4, 5}, {4, 3}, {5, 4}, {5, 6}, {5, 5}, {6, 
       5}, {6, 4}, {6, 6}}, Null}, {EdgeLabels -> {DirectedEdge[
           Interpretation["c", "3"], 
           Interpretation["c", "3"]] -> 2, DirectedEdge[
           Interpretation["a", "4"], 
           Interpretation["c", "3"]] -> 0, DirectedEdge[
           Interpretation["a", "0"], 
           Interpretation["a", "1"]] -> 1, DirectedEdge[
           Interpretation["a", "4"], 
           Interpretation["b", "2"]] -> 1, DirectedEdge[
           Interpretation["c", "3"], 
           Interpretation["a", "4"]] -> 1, DirectedEdge[
           Interpretation["a", "1"], 
           Interpretation["c", "3"]] -> 0, DirectedEdge[
           Interpretation["a", "1"], 
           Interpretation["b", "2"]] -> 2, DirectedEdge[
           Interpretation["a", "0"], 
           Interpretation["b", "2"]] -> 2, DirectedEdge[
           Interpretation["a", "4"], 
           Interpretation["a", "4"]] -> 2, DirectedEdge[
           Interpretation["b", "2"], 
           Interpretation["a", "4"]] -> 0, DirectedEdge[
           Interpretation["b", "2"], 
           Interpretation["a", "1"]] -> 2, DirectedEdge[
           Interpretation["b", "2"], 
           Interpretation["c", "3"]] -> 1, DirectedEdge[
           Interpretation["a", "0"], 
           Interpretation["a", "0"]] -> 0, DirectedEdge[
           Interpretation["a", "1"], 
           Interpretation["a", "1"]] -> 1, DirectedEdge[
           Interpretation["c", "3"], 
           Interpretation["b", "2"]] -> 0}, 
       EdgeShapeFunction -> {{
         "CorporateShortCarvedArrow", "ArrowSize" -> 0.04, "ArrowPositions" -> 
          1}}, EdgeStyle -> {
         Directive[
          GrayLevel[0.5], 
          Opacity[1]]}, PerformanceGoal -> "Quality", 
       VertexLabels -> {Interpretation["a", "1"] -> Placed[
           Interpretation["a", "1"], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation["c", "3"] -> Placed[
           Interpretation["c", "3"], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation["a", "4"] -> Placed[
           Interpretation["a", "4"], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation["a", "0"] -> Placed[
           Interpretation["a", "0"], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation["b", "2"] -> Placed[
           Interpretation["b", "2"], {
            Rational[1, 2], 
            Rational[1, 2]}], Null -> Placed[Null, {
            Rational[1, 2], 
            Rational[1, 2]}]}, 
       VertexShapeFunction -> {
        Interpretation["c", "3"] -> "Circle", Interpretation["a", "1"] -> 
         "Circle", Null -> None, Interpretation["a", "0"] -> "Circle", 
         Interpretation["b", "2"] -> "Circle", Interpretation["a", "4"] -> 
         "Circle"}, VertexSize -> {0.2}, VertexStyle -> {
         Hue[0.6, 0.3, 0.8]}}]], Typeset`boxes, Typeset`boxes$s2d = 
    GraphicsGroupBox[{{
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], 
       Directive[
        GrayLevel[0.5], 
        Opacity[1]], {
        Arrowheads[{{0.04, 1, {
            GraphicsBox[
             
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
               0, 1, 0}}}, {{{-0.12347775660674376`, 
               0.}, {-0.5614144091900695, 
               0.21895451909535257`}, {-0.4738215557948804, 
               0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
               0.}}}]], 0.533327810340424}}}], 
        ArrowBox[{
          DynamicLocation["VertexID$1", Automatic, Center], 
          DynamicLocation["VertexID$2", Automatic, Center]}]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$2", Automatic, Center], {
             2.078668933545515, 0.72790126713309}, {2.0754799665855295`, 
             0.9009490736630174}, {2.1414803953524393`, 0.9974054554763279}, {
             2.4640138268724168`, 0.991312484424779}, {2.5263241552842115`, 
             0.8924321872814894}, {2.516601712367078, 0.7196282898751687}, 
             DynamicLocation["VertexID$2", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$2"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$2", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$3"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$3", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$4"], 
        InsetBox[
         FormBox["2", TraditionalForm], 
         DynamicLocation["EdgeLabelID$4", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             1.6210534835780226`, -0.0500446087058658}, {
             1.7146519801635538`, -0.23419211131313147`}, {
             1.6814063568307784`, -0.37025613804439306`}, {
             1.3123342674946128`, -0.4432764133078927}, {
             1.229781388416488, -0.33012292022428175`}, {
             1.2462065934374889`, -0.12420741833192118`}, 
             DynamicLocation["VertexID$3", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$5"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$5", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             1.1249910367252038`, 0.31574853155180027`}, 
             DynamicLocation["VertexID$4", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$6"], 
        InsetBox[
         FormBox["2", TraditionalForm], 
         DynamicLocation["EdgeLabelID$6", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$3", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$7"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$7", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$4", Automatic, Center], {
             1.3692920842136937`, 0.4270754086010825}, 
             DynamicLocation["VertexID$3", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$8"], 
        InsetBox[
         FormBox["2", TraditionalForm], 
         DynamicLocation["EdgeLabelID$8", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$4", Automatic, Center], {
             0.8303014193082091, 0.34949875119253493`}, 
             DynamicLocation["VertexID$5", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$9"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$9", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$4", Automatic, Center], {
             0.49957820995978264`, 0.6852750187219149}, 
             DynamicLocation["VertexID$6", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$10"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$10", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$5", Automatic, Center], {
             0.645170979918266, 0.5732398667763757}, 
             DynamicLocation["VertexID$4", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$11"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$11", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$5", Automatic, Center], {
             0.49725915856638137`, -0.005264468723596708}, {
             0.4231931547067615, -0.19826035485491011`}, {
             0.2997747038803445, -0.2647147818142733}, \
{-0.0015501801396222425`, -0.03907248184520158}, {0.027484143294998792`, 
             0.09805998305492288}, {0.19183464298496292`, 
             0.22344777449812211`}, 
             DynamicLocation["VertexID$5", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$12"], 
        InsetBox[
         FormBox["2", TraditionalForm], 
         DynamicLocation["EdgeLabelID$12", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$5", Automatic, Center], {
             0.06685837619174373, 0.5156909453454128}, 
             DynamicLocation["VertexID$6", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$13"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$13", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$6", Automatic, Center], {
             0.5783126037265214, 1.0397733602907018`}, 
             DynamicLocation["VertexID$4", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$14"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$14", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$6", Automatic, Center], {
             0.330723209348414, 0.6464481713303538}, 
             DynamicLocation["VertexID$5", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$15"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$15", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation[
             "VertexID$6", Automatic, Center], {-0.18730299180711166`, 
             0.8865974376801096}, {-0.37864395135700635`, 
             0.9648731995097324}, {-0.4423860642353483, 
             1.0897237992246982`}, {-0.21019060877493115`, 
             1.3860578826101781`}, {-0.07371781014771532, 
             1.3540281395853386`}, {0.04805156490286591, 1.186963251020227}, 
             DynamicLocation["VertexID$6", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$16"], 
        InsetBox[
         FormBox["2", TraditionalForm], 
         DynamicLocation["EdgeLabelID$16", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       Hue[0.6, 0.3, 0.8], 
       TagBox[{
         TagBox[
          StyleBox[
           
           CircleBox[{3.469897471804287, 0.6913408944081589}, {
            0.08163152988954972, 0.08163152988954972}], ShowContents -> False,
            StripOnInput -> False], "DynamicName", BoxID -> "VertexID$1"], 
         InsetBox["", 
          Dynamic[
          DynamicLocation[
            "VertexID$1", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$1", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$1", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          
          DiskBox[{2.2944887939716487`, 0.5572022292634646}, {
           0.08163152988954972, 0.08163152988954972}], "DynamicName", BoxID -> 
          "VertexID$2"], 
         InsetBox[
          FormBox[
           InterpretationBox["\"a\"", "0"], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$2", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$2", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$2", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$2"], 
       TagBox[{
         TagBox[
          
          DiskBox[{1.4163923072525855`, 0.}, {0.08163152988954972, 
           0.08163152988954972}], "DynamicName", BoxID -> "VertexID$3"], 
         InsetBox[
          FormBox[
           InterpretationBox["\"a\"", "1"], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$3", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$3", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$3", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$3"], 
       TagBox[{
         TagBox[
          
          DiskBox[{1.0778908136863108`, 0.7428239401528778}, {
           0.08163152988954972, 0.08163152988954972}], "DynamicName", BoxID -> 
          "VertexID$4"], 
         InsetBox[
          FormBox[
           InterpretationBox["\"b\"", "2"], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$4", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$4", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$4", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$4"], 
       TagBox[{
         TagBox[
          
          DiskBox[{0.39758158554015766`, 0.17991467781603065`}, {
           0.08163152988954972, 0.08163152988954972}], "DynamicName", BoxID -> 
          "VertexID$5"], 
         InsetBox[
          FormBox[
           InterpretationBox["\"c\"", "3"], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$5", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$5", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$5", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$5"], 
       TagBox[{
         TagBox[
          
          DiskBox[{0., 0.9822244388597359}, {0.08163152988954972, 
           0.08163152988954972}], "DynamicName", BoxID -> "VertexID$6"], 
         InsetBox[
          FormBox[
           InterpretationBox["\"a\"", "4"], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$6", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$6", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$6", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$6"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{3.7606933090100982`, 
       355.0593066909898}, {-86.2393066909899, 79.2393066909899}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",ExpressionUUID->"5b55204a-1754-4490-9dde-\
9b4ed629ecc7"]
}, Open  ]],

Cell["\<\
This is the sequence before the output (or \[OpenCurlyDoubleQuote]coding\
\[CloseCurlyDoubleQuote]) rules are applied:\
\>", "Text",ExpressionUUID->"3d428347-9c7a-4661-8a4a-0bb360a47b26"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Most", "[", "m", "]"}], "[", 
    RowBox[{"IntegerDigits", "[", 
     RowBox[{"n", ",", "3"}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", 
     RowBox[{
      SuperscriptBox["3", "3"], "-", "1"}]}], "}"}]}], "]"}]], "Input",Express\
ionUUID->"11907389-f56d-4165-982e-02c5bc008de4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"0\"\>", ",", "\<\"1\"\>", ",", "\<\"2\"\>", ",", "\<\"3\"\>", 
   ",", "\<\"1\"\>", ",", "\<\"2\"\>", ",", "\<\"4\"\>", ",", "\<\"3\"\>", 
   ",", "\<\"1\"\>", ",", "\<\"2\"\>", ",", "\<\"4\"\>", ",", "\<\"3\"\>", 
   ",", "\<\"3\"\>", ",", "\<\"1\"\>", ",", "\<\"2\"\>", ",", "\<\"4\"\>", 
   ",", "\<\"3\"\>", ",", "\<\"1\"\>", ",", "\<\"3\"\>", ",", "\<\"2\"\>", 
   ",", "\<\"4\"\>", ",", "\<\"2\"\>", ",", "\<\"4\"\>", ",", "\<\"3\"\>", 
   ",", "\<\"3\"\>", ",", "\<\"1\"\>", ",", "\<\"2\"\>"}], "}"}]], "Output",Ex\
pressionUUID->"031035bc-6bed-42e5-9545-d135aa6b7cb6"]
}, Open  ]],

Cell["And with the output rules:", "Text",ExpressionUUID->"bdc8e727-5f09-48da-b117-594296a70bff"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"m", "[", 
    RowBox[{"IntegerDigits", "[", 
     RowBox[{"n", ",", "3"}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", 
     RowBox[{
      SuperscriptBox["3", "4"], "-", "1"}]}], "}"}]}], "]"}]], "Input",Express\
ionUUID->"eab924ff-1657-4eb2-8ee3-57b7a6e3a438"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", 
   ",", "\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>", 
   ",", "\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>", 
   ",", "\<\"c\"\>", ",", "\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>", 
   ",", "\<\"c\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"b\"\>", 
   ",", "\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>", 
   ",", "\<\"c\"\>", ",", "\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>", 
   ",", "\<\"c\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"b\"\>", 
   ",", "\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>", 
   ",", "\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"c\"\>", 
   ",", "\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>", 
   ",", "\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>", 
   ",", "\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"c\"\>", 
   ",", "\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>", 
   ",", "\<\"c\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"a\"\>", 
   ",", "\<\"c\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"a\"\>", 
   ",", "\<\"c\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"b\"\>", 
   ",", "\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>", 
   ",", "\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>", ",", "\<\"c\"\>", 
   ",", "\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"a\"\>", ",", "\<\"c\"\>", 
   ",", "\<\"a\"\>"}], "}"}]], "Output",ExpressionUUID->"7cb24ea3-2f6c-458c-\
928e-3954d43caf9f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", "m", "]"}]], "Input",ExpressionUUID->"dda682af-80d8-49a6-a463-96391d958fe7"],

Cell[TextData[{
 StyleBox["FindAutomaticSequenceAutomaton", "Input"],
 " takes a list of terms and attempts to find an automaton that produces it:"
}], "Text",ExpressionUUID->"610ecc20-7401-4ef4-894d-3e44d69c676f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"FindAutomaticSequenceAutomaton", "[", 
  RowBox[{
   RowBox[{"ThueMorse", "[", 
    RowBox[{"Range", "[", 
     RowBox[{"0", ",", "100"}], "]"}], "]"}], ",", "2"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"AutomatonGraph", "[", "%", "]"}]}], "Input",ExpressionUUID->\
"6c377b9d-3296-4161-b863-9305fcaf6bbf"],

Cell[BoxData[
 RowBox[{"Automaton", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "1"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "1"}], ",", "1"}], "}"}]}], "}"}], ",", "1", 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "0"}], ",", 
     RowBox[{"2", "\[Rule]", "1"}]}], "}"}]}], "]"}]], "Output",ExpressionUUID\
->"854b11f0-1ac8-499b-a504-dae5ee8036c6"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{Null, 
       Interpretation[0, 1], 
       Interpretation[1, 2]}, {{{1, 2}, {2, 2}, {2, 3}, {3, 3}, {3, 2}}, 
       Null}, {EdgeLabels -> {DirectedEdge[
           Interpretation[1, 2], 
           Interpretation[1, 2]] -> 0, DirectedEdge[
           Interpretation[0, 1], 
           Interpretation[1, 2]] -> 1, DirectedEdge[
           Interpretation[0, 1], 
           Interpretation[0, 1]] -> 0, DirectedEdge[
           Interpretation[1, 2], 
           Interpretation[0, 1]] -> 1}, 
       EdgeShapeFunction -> {{
         "CorporateShortCarvedArrow", "ArrowSize" -> 0.04, "ArrowPositions" -> 
          1}}, EdgeStyle -> {
         Directive[
          GrayLevel[0.5], 
          Opacity[1]]}, PerformanceGoal -> "Quality", 
       VertexLabels -> {Interpretation[0, 1] -> Placed[
           Interpretation[0, 1], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[1, 2] -> Placed[
           Interpretation[1, 2], {
            Rational[1, 2], 
            Rational[1, 2]}], Null -> Placed[Null, {
            Rational[1, 2], 
            Rational[1, 2]}]}, 
       VertexShapeFunction -> {
        Interpretation[1, 2] -> "Circle", Null -> None, Interpretation[0, 1] -> 
         "Circle"}, VertexSize -> {0.2}, VertexStyle -> {
         Hue[0.6, 0.3, 0.8]}}]], Typeset`boxes, Typeset`boxes$s2d = 
    GraphicsGroupBox[{{
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], 
       Directive[
        GrayLevel[0.5], 
        Opacity[1]], {
        Arrowheads[{{0.04, 1, {
            GraphicsBox[
             
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
               0, 1, 0}}}, {{{-0.12347775660674376`, 
               0.}, {-0.5614144091900695, 
               0.21895451909535257`}, {-0.4738215557948804, 
               0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
               0.}}}]], 0.533327810340424}}}], 
        ArrowBox[{
          DynamicLocation["VertexID$1", Automatic, Center], 
          DynamicLocation["VertexID$2", Automatic, Center]}]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$2", Automatic, Center], {
             1.215969005971036, -0.1425312379880006}, {
             1.2342632844934087`, -0.32493768720862726`}, {
             1.1702710252509327`, -0.431056932977143}, {
             0.8305438002399658, -0.4310569329771431}, {
             0.7665515409974896, -0.32493768720862726`}, {
             0.7848458195198625, -0.1425312379880006}, 
             DynamicLocation["VertexID$2", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$2"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$2", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$2", Automatic, Center], {
             1.5003055284305298`, 0.16440723931737236`}, 
             DynamicLocation["VertexID$3", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$3"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$3", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             1.5003055284305298`, -0.16440723931737236`}, 
             DynamicLocation["VertexID$2", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$4"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$4", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             2.0886828995833713`, 0.1907835323853024}, {2.287561377120962, 
             0.24717977484589673`}, {2.4147320015954197`, 
             0.1882226960710236}, {
             2.4147320015954197`, -0.18822269607102265`}, {
             2.2875613771209626`, -0.2471797748458961}, {
             2.0886828995833717`, -0.19078353238530207`}, 
             DynamicLocation["VertexID$3", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$5"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$5", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       Hue[0.6, 0.3, 0.8], 
       TagBox[{
         TagBox[
          StyleBox[
           CircleBox[{0., 0.}, {0.0999796231370162, 0.0999796231370162}], 
           ShowContents -> False, StripOnInput -> False], "DynamicName", 
          BoxID -> "VertexID$1"], 
         InsetBox["", 
          Dynamic[
          DynamicLocation[
            "VertexID$1", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$1", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$1", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          
          DiskBox[{1.0004074127454492`, 4.666248974332878*^-18}, {
           0.0999796231370162, 0.0999796231370162}], "DynamicName", BoxID -> 
          "VertexID$2"], 
         InsetBox[
          FormBox[
           InterpretationBox["0", 1], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$2", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$2", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$2", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$2"], 
       TagBox[{
         TagBox[
          
          DiskBox[{2.000203644115611, 4.9566794084199865`*^-18}, {
           0.0999796231370162, 0.0999796231370162}], "DynamicName", BoxID -> 
          "VertexID$3"], 
         InsetBox[
          FormBox[
           InterpretationBox["1", 2], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$3", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$3", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$3", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$3"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{3.9406933090100917`, 
       355.2393066909899}, {-52.23930669098989, 47.23930669098989}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",ExpressionUUID->"746efd86-36e4-4119-9833-\
a3a2a32ee272"]
}, Open  ]],

Cell[TextData[{
 StyleBox["FindAutomaticSequenceRecurrence", "Input"],
 " finds a recurrence instead:"
}], "Text",ExpressionUUID->"020666f4-ae6e-4c10-98fc-15f2ac7330b6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindAutomaticSequenceRecurrence", "[", 
  RowBox[{
   RowBox[{"ThueMorse", "[", 
    RowBox[{"Range", "[", 
     RowBox[{"0", ",", "100"}], "]"}], "]"}], ",", "2", ",", 
   RowBox[{"T", "[", "n", "]"}]}], "]"}]], "Input",ExpressionUUID->"aabb9ec7-\
0818-4dab-a2a4-3be4414a0c48"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"T", "[", 
     RowBox[{"2", " ", "n"}], "]"}], "\[Equal]", 
    RowBox[{"T", "[", 
     RowBox[{"3", "+", 
      RowBox[{"4", " ", "n"}]}], "]"}], "\[Equal]", 
    RowBox[{"T", "[", "n", "]"}]}], ",", 
   RowBox[{
    RowBox[{"T", "[", 
     RowBox[{"1", "+", 
      RowBox[{"4", " ", "n"}]}], "]"}], "\[Equal]", 
    RowBox[{"T", "[", 
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "n"}]}], "]"}]}], ",", 
   RowBox[{
    RowBox[{"T", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
   RowBox[{
    RowBox[{"T", "[", "1", "]"}], "\[Equal]", "1"}]}], "}"}]], "Output",Expres\
sionUUID->"b1cda223-1aa5-4f90-9850-707384bb77ee"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Regular sequences", "Subsection",ExpressionUUID->"bfae9a4f-e180-4936-b967-5ddf20d825ee"],

Cell[TextData[{
 "Regular sequences are a natural generalization of automatic sequences to \
infinite alphabets.  They were introduced by Allouche and Shallit in the \
paper \"The ring of ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],
  FontSlant->"Plain",ExpressionUUID->"b1a8f618-49be-493c-85b5-f55a38833585"],
 "-regular sequences\" (",
 StyleBox["Theoretical Computer Science",
  FontSlant->"Italic"],
 " ",
 StyleBox["98",
  FontWeight->"Bold"],
 " (1992) 163\[Dash]197); the paper can be found ",
 ButtonBox["here",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.cs.uwaterloo.ca/~shallit/Papers/as0.ps"], None},
  ButtonNote->"http://www.cs.uwaterloo.ca/~shallit/Papers/as0.ps"],
 "."
}], "Text",ExpressionUUID->"560cdb35-8afd-49c8-953c-8dd8326dc682"],

Cell[TextData[{
 "Let ",
 Cell[BoxData[
  FormBox[
   RowBox[{"s", "(", "n", ")"}], TraditionalForm]],ExpressionUUID->
  "8c923f8f-e38f-44ac-b7df-70c78703c195"],
 " be the parity of the number of 1s in the binary representation of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "312fe863-530a-42eb-bf39-d3aa560a59a2"],
 "."
}], "Text",ExpressionUUID->"cfa99fd4-21b4-44bf-8a22-509a67476796"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Mod", "[", 
    RowBox[{
     RowBox[{"DigitCount", "[", 
      RowBox[{"n", ",", "2", ",", "1"}], "]"}], ",", "2"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "31"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"f0ae5b81-93cc-4a3f-98a4-d8ae7975d944"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", 
   ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", 
   ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "1"}], "}"}]], "Output",ExpressionUUID->"fc24aaa7-a04c-4d91-aab8-\
e1c8a555dace"]
}, Open  ]],

Cell[TextData[{
 "That sequence is 2-automatic.  Therefore it is also 2-regular, and ",
 StyleBox["FindRegularSequenceFunction", "Input"],
 " gives a representation for this sequence."
}], "Text",ExpressionUUID->"48f0a5a6-98f4-4419-a0f3-ead02e2d90f7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "=", 
  RowBox[{"FindRegularSequenceFunction", "[", 
   RowBox[{"%", ",", "2"}], "]"}]}]], "Input",ExpressionUUID->"719be6bc-21de-\
473a-8408-7184c08e3270"],

Cell[BoxData[
 RowBox[{"RegularSequence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", "2"}], "]"}]], "Output",ExpressionUUI\
D->"4e9c8f80-0561-4977-8867-3215839117a7"]
}, Open  ]],

Cell[TextData[{
 StyleBox["FindRegularSequenceFunction", "Input"],
 " returns a ",
 StyleBox["RegularSequence", "Input"],
 " object, which behaves as a function like ",
 StyleBox["DifferenceRoot", "Input"],
 "."
}], "Text",ExpressionUUID->"bb2020cf-36d4-4fea-88c2-1c2641969bd8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"Range", "[", 
   RowBox[{"0", ",", "31"}], "]"}], "]"}]], "Input",ExpressionUUID->"07af2ef0-\
4824-4b8b-a95c-d49a325b4079"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", 
   ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", 
   ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "1"}], "}"}]], "Output",ExpressionUUID->"58d174e7-ddf0-43d3-9fd8-\
aba7aef7fe9b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", "f", "]"}]], "Input",ExpressionUUID->"dad07e6b-6fe7-4f45-a5bc-2812b7eb3c9f"],

Cell[TextData[{
 "If we consider instead the total number of 1s in the binary representation \
of ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "9050f231-9804-45eb-b17f-6e23c1920141"],
 ", this sequence does not take finitely many values, so it is not automatic."
}], "Text",ExpressionUUID->"97d302ba-d3ab-46ae-8c22-00bb84068b3f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"DigitCount", "[", 
    RowBox[{"n", ",", "2", ",", "1"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "31"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"175b9eab-33af-4b9a-9e2c-4f40f62c16e3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "1", ",", "2", ",", "1", ",", "2", ",", "2", ",", "3", 
   ",", "1", ",", "2", ",", "2", ",", "3", ",", "2", ",", "3", ",", "3", ",", 
   "4", ",", "1", ",", "2", ",", "2", ",", "3", ",", "2", ",", "3", ",", "3", 
   ",", "4", ",", "2", ",", "3", ",", "3", ",", "4", ",", "3", ",", "4", ",", 
   "4", ",", "5"}], "}"}]], "Output",ExpressionUUID->"f82ddcde-546d-4af5-9f08-\
a3df86595235"]
}, Open  ]],

Cell["However, it is 2-regular:", "Text",ExpressionUUID->"c3622659-5cf0-4ad2-9264-9c49e5f83587"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "=", 
  RowBox[{"FindRegularSequenceFunction", "[", 
   RowBox[{"%", ",", "2"}], "]"}]}]], "Input",ExpressionUUID->"80f206d9-d63d-\
4ead-8160-0a043d3b2efa"],

Cell[BoxData[
 RowBox[{"RegularSequence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "2"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", "2"}], "]"}]], "Output",ExpressionUUI\
D->"0da63c39-915d-4aa7-b5ed-43dcc17da0ee"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"f", "[", 
  RowBox[{"Range", "[", 
   RowBox[{"0", ",", "31"}], "]"}], "]"}]], "Input",ExpressionUUID->"a974e4c4-\
dde7-42b4-b324-11eb5f1dbcef"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "1", ",", "2", ",", "1", ",", "2", ",", "2", ",", "3", 
   ",", "1", ",", "2", ",", "2", ",", "3", ",", "2", ",", "3", ",", "3", ",", 
   "4", ",", "1", ",", "2", ",", "2", ",", "3", ",", "2", ",", "3", ",", "3", 
   ",", "4", ",", "2", ",", "3", ",", "3", ",", "4", ",", "3", ",", "4", ",", 
   "4", ",", "5"}], "}"}]], "Output",ExpressionUUID->"93ffe241-edfa-4d80-9125-\
7d837c2c2a4e"]
}, Open  ]],

Cell[TextData[{
 "The symbol ",
 StyleBox["FindRegularSequenceRecurrence", "Input"],
 " gives the same information as ",
 StyleBox["FindRegularSequenceFunction", "Input"],
 " but in a different form \[LongDash] as a list of linear recurrences and \
initial conditions that determine the sequence."
}], "Text",ExpressionUUID->"7cc2f24b-6070-4362-88b8-9541ee5c9da8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindRegularSequenceRecurrence", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"DigitCount", "[", 
      RowBox[{"n", ",", "2", ",", "1"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "0", ",", "31"}], "}"}]}], "]"}], ",", "2", ",", 
   RowBox[{"s", "[", "n", "]"}]}], "]"}]], "Input",ExpressionUUID->"495dcf2a-\
bb32-4c9f-8049-a61451e5c548"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"s", "[", 
     RowBox[{"2", " ", "n"}], "]"}], "\[Equal]", 
    RowBox[{"s", "[", "n", "]"}]}], ",", 
   RowBox[{
    RowBox[{"s", "[", 
     RowBox[{"1", "+", 
      RowBox[{"4", " ", "n"}]}], "]"}], "\[Equal]", 
    RowBox[{"s", "[", 
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "n"}]}], "]"}]}], ",", 
   RowBox[{
    RowBox[{"s", "[", 
     RowBox[{"3", "+", 
      RowBox[{"4", " ", "n"}]}], "]"}], "\[Equal]", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"s", "[", "n", "]"}]}], "+", 
     RowBox[{"2", " ", 
      RowBox[{"s", "[", 
       RowBox[{"1", "+", 
        RowBox[{"2", " ", "n"}]}], "]"}]}]}]}], ",", 
   RowBox[{
    RowBox[{"s", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
   RowBox[{
    RowBox[{"s", "[", "1", "]"}], "\[Equal]", "1"}]}], "}"}]], "Output",Expres\
sionUUID->"05451f87-0fbc-4188-b61b-e4d25a2cab43"]
}, Open  ]],

Cell[TextData[{
 StyleBox["RegularSequenceRecurrence", "Input"],
 "d produces this information from a ",
 StyleBox["RegularSequence", "Input"],
 " object, with indexed symbolic subsequences for the generators:"
}], "Text",ExpressionUUID->"65d77450-c0dc-479e-954c-fcdd2c1865b9"],

Cell[CellGroupData[{

Cell[BoxData[
 StyleBox[
  RowBox[{"RegularSequenceRecurrence", "[", 
   RowBox[{"f", ",", 
    RowBox[{"s", "[", "n", "]"}]}], "]"}], "Input"]], "Input",ExpressionUUID->\
"988de935-2ae2-4a33-b3ab-b45add136fd6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         SubscriptBox["s", "1"], "[", 
         RowBox[{"2", " ", "n"}], "]"}], "\[Equal]", 
        RowBox[{
         SubscriptBox["s", "1"], "[", "n", "]"}]}], ",", 
       RowBox[{
        RowBox[{
         SubscriptBox["s", "1"], "[", 
         RowBox[{"1", "+", 
          RowBox[{"2", " ", "n"}]}], "]"}], "\[Equal]", 
        RowBox[{
         SubscriptBox["s", "2"], "[", "n", "]"}]}]}], "}"}], ",", 
     RowBox[{
      RowBox[{
       SubscriptBox["s", "1"], "[", "0", "]"}], "\[Equal]", "0"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         SubscriptBox["s", "2"], "[", 
         RowBox[{"2", " ", "n"}], "]"}], "\[Equal]", 
        RowBox[{
         SubscriptBox["s", "2"], "[", "n", "]"}]}], ",", 
       RowBox[{
        RowBox[{
         SubscriptBox["s", "2"], "[", 
         RowBox[{"1", "+", 
          RowBox[{"2", " ", "n"}]}], "]"}], "\[Equal]", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{
           SubscriptBox["s", "1"], "[", "n", "]"}]}], "+", 
         RowBox[{"2", " ", 
          RowBox[{
           SubscriptBox["s", "2"], "[", "n", "]"}]}]}]}]}], "}"}], ",", 
     RowBox[{
      RowBox[{
       SubscriptBox["s", "2"], "[", "0", "]"}], "\[Equal]", "1"}]}], "}"}]}], 
  "}"}]], "Output",ExpressionUUID->"2ce888e0-1a60-4db2-a346-a7aea17932ab"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", "f", "]"}]], "Input",ExpressionUUID->"85385e66-460d-4159-af04-cfbb58783db5"],

Cell[CellGroupData[{

Cell["Studying a regular sequence", "Subsubsection",ExpressionUUID->"e7a7c047-e0e7-487d-be17-c6be8487d6ef"],

Cell["\<\
The Thue\[Dash]Morse sequence is a famous example of a 2-automatic sequence.  \
It is an infinite sequence of 0s and 1s with the property that no block of \
entries ever occurs three times in a row.\
\>", "Text",ExpressionUUID->"8e2ffc9d-97cd-425d-8db2-506c58a59cb8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"ThueMorse", "[", "n", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "31"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"469de554-5718-4965-8f37-a18d895fdd90"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", 
   ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", 
   ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "1"}], "}"}]], "Output",ExpressionUUID->"27a579c2-1f85-44dd-af3d-\
d3487c2605c6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tm", "=", 
  RowBox[{"FindRegularSequenceFunction", "[", 
   RowBox[{"%", ",", "2"}], "]"}]}]], "Input",ExpressionUUID->"a46e22ee-6e54-\
4a46-a783-33a1d79760d5"],

Cell[BoxData[
 RowBox[{"RegularSequence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", "2"}], "]"}]], "Output",ExpressionUUI\
D->"88121df0-916d-4239-8fd3-2ace4edaec05"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"tm", "[", 
  RowBox[{"Range", "[", 
   RowBox[{"0", ",", "31"}], "]"}], "]"}]], "Input",ExpressionUUID->"7fc8490f-\
f6fc-4e41-a166-a55634167e53"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", 
   ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", 
   ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "1"}], "}"}]], "Output",ExpressionUUID->"2e447bf9-f8a9-43ba-b8de-\
515b07197109"]
}, Open  ]],

Cell[TextData[{
 "The Thue\[Dash]Morse sequence ",
 Cell[BoxData[
  FormBox[
   RowBox[{"t", "(", "n", ")"}], TraditionalForm]],ExpressionUUID->
  "3885a7d1-41c1-4a84-9800-eed31e563439"],
 " satisfies the following system of linear recurrences."
}], "Text",ExpressionUUID->"1ba198a3-ae5f-4391-b81c-ca3dc9f261cd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindRegularSequenceRecurrence", "[", 
  RowBox[{
   RowBox[{"ThueMorse", "[", 
    RowBox[{"Range", "[", 
     RowBox[{"0", ",", "31"}], "]"}], "]"}], ",", "2", ",", 
   RowBox[{"t", "[", "n", "]"}]}], "]"}]], "Input",ExpressionUUID->"ee161629-\
5f80-4260-b5e5-6a0a68a116e1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"t", "[", 
     RowBox[{"2", " ", "n"}], "]"}], "\[Equal]", 
    RowBox[{"t", "[", 
     RowBox[{"3", "+", 
      RowBox[{"4", " ", "n"}]}], "]"}], "\[Equal]", 
    RowBox[{"t", "[", "n", "]"}]}], ",", 
   RowBox[{
    RowBox[{"t", "[", 
     RowBox[{"1", "+", 
      RowBox[{"4", " ", "n"}]}], "]"}], "\[Equal]", 
    RowBox[{"t", "[", 
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "n"}]}], "]"}]}], ",", 
   RowBox[{
    RowBox[{"t", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
   RowBox[{
    RowBox[{"t", "[", "1", "]"}], "\[Equal]", "1"}]}], "}"}]], "Output",Expres\
sionUUID->"3f6b2576-a6c8-4574-b257-7587eda054f1"]
}, Open  ]],

Cell["Here are the first few terms of the basis subsequences:", "Text",ExpressionUUID->"07e38d48-e980-4009-8435-00401efc85b4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceGeneratorTable", "[", 
  RowBox[{"tm", ",", "15"}], "]"}]], "Input",ExpressionUUID->"f769959a-ff8d-\
4b5d-9088-1a80e1b43791"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1",
      ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", 
     ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0",
      ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", 
     ",", "1"}], "}"}]}], "}"}]], "Output",ExpressionUUID->"8dd129b2-b91f-\
4394-b669-ca76075462d8"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", "tm", "]"}]], "Input",ExpressionUUID->"839e2479-1d87-44ac-9264-d30aff7f41a2"]
}, Closed]],

Cell[CellGroupData[{

Cell["Other examples of regular sequences", "Subsubsection",ExpressionUUID->"97cbd5f2-c377-49b2-9ef2-66f7dfd04290"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceMatrixForm", "[", 
  RowBox[{"FindRegularSequenceFunction", "[", 
   RowBox[{
    RowBox[{"Accumulate", "[", 
     RowBox[{"ThueMorse", "[", 
      RowBox[{"Range", "[", 
       RowBox[{"0", ",", "31"}], "]"}], "]"}], "]"}], ",", "2"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"f6d4b747-86e6-4d6c-be0a-2422f5df6a6a"],

Cell[BoxData[
 RowBox[{"RegularSequence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "1", "0", "0"},
         {"0", "0", "0", "1"},
         {"0", 
          RowBox[{"-", "1"}], "1", "1"},
         {"0", 
          RowBox[{"-", "2"}], "0", "3"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], ",", 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "1", "0"},
         {"0", 
          RowBox[{"-", "2"}], "2", "1"},
         {"0", "0", "2", "0"},
         {"0", 
          RowBox[{"-", "3"}], "3", "2"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", "2"}], 
  "]"}]], "Output",ExpressionUUID->"30056251-a76c-4476-b1af-3956f2860004"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceMatrixForm", "[", 
  RowBox[{"FindRegularSequenceFunction", "[", 
   RowBox[{
    RowBox[{"IntegerExponent", "[", 
     RowBox[{
      RowBox[{"Range", "[", "64", "]"}], ",", "2"}], "]"}], ",", "2"}], "]"}],
   "]"}]], "Input",ExpressionUUID->"13da3f70-405d-4566-86b9-97ad21835a7e"],

Cell[BoxData[
 RowBox[{"RegularSequence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0"},
         {
          RowBox[{"-", "1"}], "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], ",", 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "1"},
         {
          RowBox[{"-", "1"}], "2"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", "2"}], "]"}]], "Output",ExpressionUUI\
D->"13a7ff0e-8ad5-4098-a8a4-f5b13a7cf511"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceMatrixForm", "[", 
  RowBox[{"FindRegularSequenceFunction", "[", 
   RowBox[{
    RowBox[{"IntegerExponent", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Range", "[", 
        RowBox[{"0", ",", "31"}], "]"}], "!"}], ",", "2"}], "]"}], ",", "2"}],
    "]"}], "]"}]], "Input",ExpressionUUID->"0090bf7d-ab75-4ceb-9340-\
fb97a668bafb"],

Cell[BoxData[
 RowBox[{"RegularSequence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "1", "0"},
         {
          RowBox[{"-", "2"}], "3", "0"},
         {
          RowBox[{"-", "4"}], "4", "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], ",", 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "1", "0"},
         {"0", "0", "1"},
         {"2", 
          RowBox[{"-", "5"}], "4"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", "2"}], "]"}]], "Output",Exp\
ressionUUID->"1613983a-1e53-4166-9ef4-d601ebaa3d98"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceMatrixForm", "[", 
  RowBox[{"FindRegularSequenceFunction", "[", 
   RowBox[{
    RowBox[{"IntegerExponent", "[", 
     RowBox[{
      RowBox[{"Fibonacci", "[", 
       RowBox[{"Range", "[", 
        SuperscriptBox["2", "7"], "]"}], "]"}], ",", "2"}], "]"}], ",", "2"}],
    "]"}], "]"}]], "Input",ExpressionUUID->"cda80266-c49d-45ed-b756-\
1c21eb3a0d46"],

Cell[BoxData[
 RowBox[{"RegularSequence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "1", "0", "0", "0"},
         {"0", "0", "0", "1", "0"},
         {"0", "3", "0", "0", "0"},
         {"0", "1", "0", "0", "0"},
         {"0", "0", "0", "0", "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], ",", 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "1", "0", "0"},
         {"0", "0", "0", "0", "1"},
         {"0", "0", "1", "1", "0"},
         {"0", "0", "0", "1", "0"},
         {"0", "1", "0", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", "2"}], 
  "]"}]], "Output",ExpressionUUID->"4b81d143-22ab-4004-aa3f-3538076bbd2a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceMatrixForm", "[", 
  RowBox[{"FindRegularSequenceFunction", "[", 
   RowBox[{
    RowBox[{"IntegerExponent", "[", 
     RowBox[{
      RowBox[{"Fibonacci", "[", 
       RowBox[{"Range", "[", "1000", "]"}], "]"}], ",", "4"}], "]"}], ",", 
    "4"}], "]"}], "]"}]], "Input",ExpressionUUID->"6c704f3c-a10d-4f39-9ad3-\
d9efef1d94ca"],

Cell[BoxData[
 RowBox[{"RegularSequence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "0", "0", "0"},
         {"0", "1", "0", "0", "0"},
         {"0", "0", "0", "0", "2"},
         {"0", "0", "0", "1", "0"},
         {"0", "0", "0", "0", "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], ",", 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "1", "0", "0", "0"},
         {"0", "0", "0", "1", "0"},
         {"0", "2", "0", "0", "0"},
         {"0", "0", "0", "0", "1"},
         {"0", "1", "0", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], ",", 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "0", "0", "0"},
         {"0", "0", "0", "0", "1"},
         {"0", "0", "0", "2", "0"},
         {"0", "1", "0", "0", "0"},
         {"0", "0", "0", "1", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], ",", 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "1", "0", "0"},
         {"0", "1", "0", "0", "0"},
         {"0", "0", "1", "0", "1"},
         {"0", "0", "0", "1", "0"},
         {"0", "0", "0", "0", "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "1", ",", "0"}], "}"}], ",", "4"}], 
  "]"}]], "Output",ExpressionUUID->"59c4f3e4-abac-4653-82c0-f3e64d85ad16"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceMatrixForm", "[", 
  RowBox[{"FindRegularSequenceFunction", "[", 
   RowBox[{
    RowBox[{"Accumulate", "[", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Boole", "[", 
        RowBox[{
         RowBox[{"Length", "[", 
          RowBox[{"PowersRepresentations", "[", 
           RowBox[{"n", ",", "3", ",", "2"}], "]"}], "]"}], ">", "0"}], "]"}],
        ",", 
       RowBox[{"{", 
        RowBox[{"n", ",", "0", ",", 
         SuperscriptBox["2", "6"]}], "}"}]}], "]"}], "]"}], ",", "2"}], "]"}],
   "]"}]], "Input",ExpressionUUID->"cea6e230-373a-47ef-a4d1-345ddc959659"],

Cell[BoxData[
 RowBox[{"RegularSequence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "1", "0", "0", "0", "0"},
         {"0", "0", "0", "1", "0", "0"},
         {"0", "0", "0", 
          FractionBox["1", "2"], 
          FractionBox["1", "2"], "0"},
         {
          RowBox[{"-", "2"}], "1", "0", 
          FractionBox["5", "2"], 
          RowBox[{"-", 
           FractionBox["3", "2"]}], "1"},
         {
          RowBox[{"-", "2"}], "1", "0", 
          FractionBox["3", "2"], 
          RowBox[{"-", 
           FractionBox["1", "2"]}], "1"},
         {
          RowBox[{"-", "2"}], "1", "0", "1", "0", "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], ",", 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "1", "0", "0", "0"},
         {"0", "0", "0", "0", "1", "0"},
         {"0", "0", "0", "0", "0", "1"},
         {
          RowBox[{"-", "2"}], "0", "1", "1", "0", "1"},
         {
          RowBox[{"-", "2"}], "0", "1", "0", "1", "1"},
         {
          RowBox[{"-", "2"}], "0", "1", "0", "1", "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "2", ",", "1", ",", "3", ",", "4"}], "}"}], 
   ",", "2"}], "]"}]], "Output",ExpressionUUID->"0872d204-fc08-44c5-8d84-\
7ac37bfde982"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceMatrixForm", "[", 
  RowBox[{"FindRegularSequenceFunction", "[", 
   RowBox[{
    RowBox[{"CellularAutomaton", "[", 
     RowBox[{"90", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", "1", "}"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         SuperscriptBox["2", "5"], "-", "1"}], ",", 
        RowBox[{"{", 
         RowBox[{"{", "3", "}"}], "}"}]}], "}"}]}], "]"}], ",", "2"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"3f5e7a63-f566-4080-95af-cef34187c77e"],

Cell[BoxData[
 RowBox[{"RegularSequence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "0", "0", "0"},
         {"0", "0", "1", "0"},
         {"0", "0", "0", "0"},
         {"0", "0", 
          RowBox[{"-", "1"}], "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], ",", 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "1", "0", "0"},
         {"0", "0", "0", "1"},
         {"0", "0", "0", "1"},
         {"0", "0", "0", "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "1"}], "}"}], ",", "2"}], 
  "]"}]], "Output",ExpressionUUID->"ae227ff4-afeb-4956-92c5-9024ebe3c067"]
}, Open  ]],

Cell[TextData[{
 "The number of nonzero entries in the ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "bb984db3-f135-45d0-aba0-1829b41c02db"],
 "th row of an additive cellular automaton is a regular sequence:"
}], "Text",ExpressionUUID->"7247f0f3-f007-4a3a-8681-fee4bfefa4e8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceMatrixForm", "[", 
  RowBox[{"FindRegularSequenceFunction", "[", 
   RowBox[{
    RowBox[{"Total", "/@", 
     RowBox[{"CellularAutomaton", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"27030", ",", "2", ",", 
         FractionBox["3", "2"]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "1", "}"}], ",", "0"}], "}"}], ",", 
       RowBox[{
        SuperscriptBox["2", "5"], "-", "1"}]}], "]"}]}], ",", "2"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"6ac7903d-62e4-49d6-94da-85554ae8063c"],

Cell[BoxData[
 RowBox[{"RegularSequence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "0", "0"},
         {"4", "0", "0"},
         {"0", "1", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], ",", 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "1", "0"},
         {"0", "0", "1"},
         {"0", "0", "2"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "4"}], "}"}], ",", "2"}], "]"}]], "Output",Exp\
ressionUUID->"e664e226-3b86-4f1c-8c3b-2a5344108c1f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceMatrixForm", "[", 
  RowBox[{"FindRegularSequenceFunction", "[", 
   RowBox[{
    RowBox[{"Total", "/@", 
     RowBox[{"CellularAutomaton", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"39270", ",", "2", ",", 
         FractionBox["3", "2"]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", "1", "}"}], ",", "0"}], "}"}], ",", 
       RowBox[{
        SuperscriptBox["2", "6"], "-", "1"}]}], "]"}]}], ",", "2"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"4443b92c-c48f-436c-9517-8d7b27c11897"],

Cell[BoxData[
 RowBox[{"RegularSequence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "0", "0", "0"},
         {"3", "0", "0", "0"},
         {"4", "1", "0", "0"},
         {"7", "2", "0", "0"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], ",", 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "1", "0", "0"},
         {"0", "0", "1", "0"},
         {"0", "0", "0", "1"},
         {
          RowBox[{"-", "2"}], "1", "0", "2"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "7", ",", "13"}], "}"}], ",", "2"}], 
  "]"}]], "Output",ExpressionUUID->"b6968783-773a-461b-9745-d964b61c853e"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Multidimensional regular sequences", "Subsubsection",ExpressionUUID->"3d0f5a72-f2a7-4246-bf1e-13ec13e19e45"],

Cell["\<\
IntegerSequences also supports multidimensional regular sequences.\
\>", "Text",ExpressionUUID->"414e669d-409a-4b45-a10a-48b15ea08ce6"],

Cell[TextData[{
 "Pascal\[CloseCurlyQuote]s triangle modulo ",
 Cell[BoxData[
  FormBox["2", TraditionalForm]],ExpressionUUID->
  "6bf906c9-769e-4ecd-b011-5a2757ab2c0c"],
 " is ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"2", ",", "2"}], ")"}], TraditionalForm]],ExpressionUUID->
  "16c0ff18-5f64-40b7-909b-2c047c4ca034"],
 "-regular:"
}], "Text",ExpressionUUID->"c1ac2c60-a84f-4abe-ac97-a24e55f0e2b5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceMatrixForm", "[", 
  RowBox[{"FindRegularSequenceFunction", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{
        RowBox[{"Binomial", "[", 
         RowBox[{"n", ",", "m"}], "]"}], ",", "2"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "0", ",", 
        RowBox[{
         SuperscriptBox["2", "5"], "-", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"m", ",", "0", ",", 
        RowBox[{
         SuperscriptBox["2", "5"], "-", "1"}]}], "}"}]}], "]"}], ",", "2"}], 
   "]"}], "]"}]], "Input",ExpressionUUID->"5838e3c5-154b-4cc7-882e-\
36b80bc40a72"],

Cell[BoxData[
 RowBox[{"RegularSequence", "[", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"1"}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}],
        Function[BoxForm`e$, 
         MatrixForm[BoxForm`e$]]], ",", 
       TagBox[
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"0"}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}],
        Function[BoxForm`e$, 
         MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"1"}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}],
        Function[BoxForm`e$, 
         MatrixForm[BoxForm`e$]]], ",", 
       TagBox[
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"1"}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}],
        Function[BoxForm`e$, 
         MatrixForm[BoxForm`e$]]]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}]}], "]"}]], "Output",ExpressionUUID->\
"8f68528a-072f-44ec-8bfd-d839f499a6de"]
}, Open  ]],

Cell[TextData[{
 "More generally, sequences obtained by iterating a morphism are regular.  \
This is a ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"2", ",", "3"}], ")"}], TraditionalForm]],ExpressionUUID->
  "cfa5b253-b799-4a16-b78e-26932d3efd51"],
 "-regular sequence:"
}], "Text",ExpressionUUID->"d5f6613a-d75c-4dab-a38b-19d639f6e500"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceMatrixForm", "[", 
  RowBox[{"FindRegularSequenceFunction", "[", 
   RowBox[{
    RowBox[{"Nest", "[", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"matrix", ",", 
        RowBox[{"ArrayFlatten", "[", 
         RowBox[{
          RowBox[{"matrix", "/.", "\[InvisibleSpace]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"1", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"1", ",", "0", ",", "1"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"0", ",", "1", ",", "1"}], "}"}]}], "}"}]}], ",", 
             RowBox[{"0", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{"1", ",", "1", ",", "1"}], "}"}]}], "}"}]}]}], 
            "}"}]}], ",", "2"}], "]"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"{", "1", "}"}], "}"}], ",", "4"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}]}], "]"}], "]"}]], "Input",ExpressionUUID->\
"fe8c1810-bf29-42d0-92c8-a6dfebbc948c"],

Cell[BoxData[
 RowBox[{"RegularSequence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"1", "0"},
           {"0", "1"}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}],
        Function[BoxForm`e$, 
         MatrixForm[BoxForm`e$]]], ",", 
       TagBox[
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"0", "1"},
           {"1", "0"}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}],
        Function[BoxForm`e$, 
         MatrixForm[BoxForm`e$]]], ",", 
       TagBox[
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"1", "0"},
           {"0", "1"}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}],
        Function[BoxForm`e$, 
         MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       TagBox[
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"0", "1"},
           {"1", "0"}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}],
        Function[BoxForm`e$, 
         MatrixForm[BoxForm`e$]]], ",", 
       TagBox[
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"1", "1"},
           {"0", "0"}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}],
        Function[BoxForm`e$, 
         MatrixForm[BoxForm`e$]]], ",", 
       TagBox[
        RowBox[{"(", "\[NoBreak]", GridBox[{
           {"1", "1"},
           {"0", "0"}
          },
          GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
          GridBoxSpacings->{"Columns" -> {
              Offset[0.27999999999999997`], {
               Offset[0.7]}, 
              Offset[0.27999999999999997`]}, "Rows" -> {
              Offset[0.2], {
               Offset[0.4]}, 
              Offset[0.2]}}], "\[NoBreak]", ")"}],
        Function[BoxForm`e$, 
         MatrixForm[BoxForm`e$]]]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}]}], "]"}]], "Output",ExpressionUUID->"e6ce1f57-acaa-415e-a32a-ce87b6e98d84"]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Package symbols", "Section",ExpressionUUID->"8b3a5229-8d69-4a75-badb-ab6af8d32602"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["AlgebraicSequence", "Input"]], "Subsubsection",ExpressionUUID->"53ae11ab-c73b-406e-b101-477f944e5ec0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "AlgebraicSequence"}]], "Input",ExpressionUUID->"6e2b6be5-7d37-49c2-9db9-f81d1307b602"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[RowBox[List[\\\"\
AlgebraicSequence\\\", \\\"[\\\", RowBox[List[\\\"SeriesRoot\\\", \\\"[\\\", \
RowBox[List[\\\"{\\\", RowBox[List[StyleBox[\\\"f\\\", \\\"TI\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"y\\\", \\\"TI\\\"], StyleBox[\\\"0\\\", \
\\\"TR\\\"]]]], \\\"}\\\"]], \\\"]\\\"]], \\\"]\\\"]], \\\"[\\\", StyleBox[\\\
\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the \\!\\(\\*StyleBox[\\\"n\\\", \
\\\"TI\\\"]\\)th coefficient in the power series solution \
\\!\\(\\*StyleBox[\\\"y\\\", \\\"TI\\\"]\\) of the equation \
\\!\\(\\*RowBox[List[RowBox[List[StyleBox[\\\"f\\\", \\\"TI\\\"], \\\"[\\\", \
StyleBox[\\\"y\\\", \\\"TI\\\"], \\\"]\\\"]], \\\"\\\\[Equal]\\\", \
StyleBox[\\\"0\\\", \\\"TR\\\"]]]\\) approximated by \
\\!\\(\\*SubscriptBox[StyleBox[\\\"y\\\", \\\"TI\\\"], StyleBox[\\\"0\\\", \\\
\"TR\\\"]]\\).\\n\\!\\(\\*RowBox[List[RowBox[List[\\\"AlgebraicSequence\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"f\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"x\\\", \\\"TI\\\"]]], \\\"]\\\"]], \\\"[\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) uses \
\\!\\(\\*RowBox[List[SubscriptBox[StyleBox[\\\"y\\\", \\\"TI\\\"], \
StyleBox[\\\"0\\\", \\\"TR\\\"]], \\\"=\\\", RowBox[List[StyleBox[\\\"0\\\", \
\\\"TR\\\"], \\\"+\\\", SuperscriptBox[RowBox[List[\\\"O\\\", \\\"[\\\", \
StyleBox[\\\"x\\\", \\\"TI\\\"], \\\"]\\\"]], StyleBox[\\\"1\\\", \
\\\"TR\\\"]]]]]]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" SubValue Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"SubValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "SubValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"IntegerSequences`Private`sequence", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"AlgebraicSequence", "[", 
                    RowBox[{
                    RowBox[{"SeriesRoot", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`polynomialfunction_Function", 
                    ",", 
                    RowBox[{"IntegerSequences`Private`root", ":", 
                    RowBox[{
                    RowBox[{"HoldPattern", "[", "SeriesData", "]"}], "[", 
                    RowBox[{
                    "IntegerSequences`Private`x_", ",", 
                    "IntegerSequences`Private`x0_", ",", "__"}], "]"}]}]}], 
                    "}"}], ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ")"}], "?",
                     "IntegerSequences`Private`\
SeriesRootAlgebraicSequenceObjectQ"}]}], ")"}], "[", 
                    RowBox[{
                    "IntegerSequences`Private`n_Integer", "?", 
                    "NonNegative"}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`modulus", ",", 
                    "IntegerSequences`Private`serieslist", ",", 
                    "IntegerSequences`Private`y", ",", 
                    "IntegerSequences`Private`failed"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`failed", "=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`modulus", "=", 
                    RowBox[{
                    "IntegerSequences`Private`\
SeriesRootAlgebraicSequenceModulus", "[", "IntegerSequences`Private`sequence",
                     "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`serieslist", "=", 
                    RowBox[{
                    "IntegerSequences`Private`SeriesRootSeriesList", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`y", ",", 
                    RowBox[{
                    "IntegerSequences`Private`polynomialfunction", "[", 
                    "IntegerSequences`Private`y", "]"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "Normal", "[", "IntegerSequences`Private`root", "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`SeriesAccuracy", "[", 
                    "IntegerSequences`Private`root", "]"}], "-", "1"}]}], 
                    "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`x", ",", 
                    "IntegerSequences`Private`x0", ",", 
                    "IntegerSequences`Private`n"}], "}"}], ",", 
                    RowBox[{"MaxDenominator", "\[Rule]", "1"}], ",", 
                    RowBox[{
                    "Modulus", "\[Rule]", 
                    "IntegerSequences`Private`modulus"}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    "DeleteDuplicates", "[", 
                    "IntegerSequences`Private`serieslist", "]"}], "]"}], 
                    "\[NotEqual]", "1"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"AlgebraicSequence", "::", "soln"}], 
                    "MessageName"], ",", 
                    "IntegerSequences`Private`polynomialfunction", ",", 
                    "IntegerSequences`Private`root"}], "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ";", 
                    "False"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"Coefficient", "[", 
                    RowBox[{
                    RowBox[{
                    "First", "[", "IntegerSequences`Private`serieslist", 
                    "]"}], ",", "IntegerSequences`Private`x", ",", 
                    "IntegerSequences`Private`n"}], "]"}], "/;", 
                    RowBox[{"!", "IntegerSequences`Private`failed"}]}]}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"AlgebraicSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`polynomialfunction_Function", 
                    ",", 
                    RowBox[{"IntegerSequences`Private`x", ":", 
                    RowBox[{"Except", "[", "_Rule", "]"}]}], ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "[", 
                    RowBox[{
                    "IntegerSequences`Private`n_Integer", "?", 
                    "NonNegative"}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`polynomial", ",", 
                    "IntegerSequences`Private`serieslist", ",", 
                    "IntegerSequences`Private`y", ",", 
                    "IntegerSequences`Private`failed"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`failed", "=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`polynomial", "=", 
                    RowBox[{
                    "IntegerSequences`Private`polynomialfunction", "[", 
                    "IntegerSequences`Private`y", "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{
                    "IntegerSequences`Private`\
ImplicitFunctionTheoremPolynomialQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`polynomial", ",", 
                    "IntegerSequences`Private`x", ",", 
                    "IntegerSequences`Private`y", ",", 
                    RowBox[{"Modulus", "\[Rule]", 
                    RowBox[{"OptionValue", "[", "Modulus", "]"}]}]}], "]"}]}],
                     ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"AlgebraicSequence", "::", "ift"}], "MessageName"],
                     ",", "IntegerSequences`Private`polynomialfunction"}], 
                    "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ";", 
                    RowBox[{"IntegerSequences`Private`serieslist", "=", 
                    RowBox[{"IntegerSequences`Private`SeriesRootSeriesList", 
                    "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`y", ",", 
                    "IntegerSequences`Private`polynomial"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`x", ",", "0", ",", 
                    "IntegerSequences`Private`n"}], "}"}], ",", 
                    RowBox[{"MaxDenominator", "\[Rule]", "1"}], ",", 
                    RowBox[{"Modulus", "\[Rule]", 
                    RowBox[{"OptionValue", "[", "Modulus", "]"}]}]}], "]"}]}],
                     ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{
                    "DeleteDuplicates", "[", 
                    "IntegerSequences`Private`serieslist", "]"}], "]"}], 
                    "\[NotEqual]", "1"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"AlgebraicSequence", "::", "soln"}], 
                    "MessageName"], ",", 
                    "IntegerSequences`Private`polynomialfunction", ",", 
                    RowBox[{"IntegerSequences`Private`ZeroSeries", "[", 
                    RowBox[{"IntegerSequences`Private`x", ",", "1"}], "]"}]}],
                     "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ";", 
                    "False"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"Coefficient", "[", 
                    RowBox[{
                    RowBox[{
                    "First", "[", "IntegerSequences`Private`serieslist", 
                    "]"}], ",", "IntegerSequences`Private`x", ",", 
                    "IntegerSequences`Private`n"}], "]"}], "/;", 
                    RowBox[{"!", "IntegerSequences`Private`failed"}]}]}]}], 
                    "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "AlgebraicSequence", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_.", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`AlgebraicSequence] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Optional[
                    Blank[]], 
                    OptionsPattern[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"Modulus", "\[Rule]", "0"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`AlgebraicSequence\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[RowBox[List[\\\"\
AlgebraicSequence\\\", \\\"[\\\", RowBox[List[\\\"SeriesRoot\\\", \\\"[\\\", \
RowBox[List[\\\"{\\\", RowBox[List[StyleBox[\\\"f\\\", \\\"TI\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"y\\\", \\\"TI\\\"], StyleBox[\\\"0\\\", \
\\\"TR\\\"]]]], \\\"}\\\"]], \\\"]\\\"]], \\\"]\\\"]], \\\"[\\\", StyleBox[\\\
\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the \\!\\(\\*StyleBox[\\\"n\\\", \
\\\"TI\\\"]\\)th coefficient in the power series solution \
\\!\\(\\*StyleBox[\\\"y\\\", \\\"TI\\\"]\\) of the equation \
\\!\\(\\*RowBox[List[RowBox[List[StyleBox[\\\"f\\\", \\\"TI\\\"], \\\"[\\\", \
StyleBox[\\\"y\\\", \\\"TI\\\"], \\\"]\\\"]], \\\"\\\\[Equal]\\\", \
StyleBox[\\\"0\\\", \\\"TR\\\"]]]\\) approximated by \
\\!\\(\\*SubscriptBox[StyleBox[\\\"y\\\", \\\"TI\\\"], StyleBox[\\\"0\\\", \\\
\"TR\\\"]]\\).\\n\\!\\(\\*RowBox[List[RowBox[List[\\\"AlgebraicSequence\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"f\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"x\\\", \\\"TI\\\"]]], \\\"]\\\"]], \\\"[\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) uses \
\\!\\(\\*RowBox[List[SubscriptBox[StyleBox[\\\"y\\\", \\\"TI\\\"], \
StyleBox[\\\"0\\\", \\\"TR\\\"]], \\\"=\\\", RowBox[List[StyleBox[\\\"0\\\", \
\\\"TR\\\"], \\\"+\\\", SuperscriptBox[RowBox[List[\\\"O\\\", \\\"[\\\", \
StyleBox[\\\"x\\\", \\\"TI\\\"], \\\"]\\\"]], StyleBox[\\\"1\\\", \
\\\"TR\\\"]]]]]]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[RowBox[List[\"AlgebraicSequence\", \"[\", RowBox[List[\
\"SeriesRoot\", \"[\", RowBox[List[\"{\", RowBox[List[StyleBox[\"f\", \
\"TI\"], \",\", SubscriptBox[StyleBox[\"y\", \"TI\"], StyleBox[\"0\", \
\"TR\"]]]], \"}\"]], \"]\"]], \"]\"]], \"[\", StyleBox[\"n\", \"TI\"], \
\"]\"]]\) gives the \!\(\*StyleBox[\"n\", \"TI\"]\)th coefficient in the \
power series solution \!\(\*StyleBox[\"y\", \"TI\"]\) of the equation \
\!\(\*RowBox[List[RowBox[List[StyleBox[\"f\", \"TI\"], \"[\", StyleBox[\"y\", \
\"TI\"], \"]\"]], \"\\[Equal]\", StyleBox[\"0\", \"TR\"]]]\) approximated by \
\!\(\*SubscriptBox[StyleBox[\"y\", \"TI\"], StyleBox[\"0\", \"TR\"]]\).\n\!\(\
\*RowBox[List[RowBox[List[\"AlgebraicSequence\", \"[\", RowBox[List[StyleBox[\
\"f\", \"TI\"], \",\", StyleBox[\"x\", \"TI\"]]], \"]\"]], \"[\", \
StyleBox[\"n\", \"TI\"], \"]\"]]\) uses \
\!\(\*RowBox[List[SubscriptBox[StyleBox[\"y\", \"TI\"], StyleBox[\"0\", \
\"TR\"]], \"=\", RowBox[List[StyleBox[\"0\", \"TR\"], \"+\", \
SuperscriptBox[RowBox[List[\"O\", \"[\", StyleBox[\"x\", \"TI\"], \"]\"]], \
StyleBox[\"1\", \"TR\"]]]]]]\).", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> None, "SubValues" -> 
    Information`InformationValueForm[
     SubValues, IntegerSequences`AlgebraicSequence, {
      Pattern[IntegerSequences`Private`sequence, 
         PatternTest[
          IntegerSequences`AlgebraicSequence[
           IntegerSequences`SeriesRoot[{
             Pattern[IntegerSequences`Private`polynomialfunction, 
              Blank[Function]], 
             Pattern[IntegerSequences`Private`root, 
              HoldPattern[SeriesData][
               Pattern[IntegerSequences`Private`x, 
                Blank[]], 
               Pattern[IntegerSequences`Private`x0, 
                Blank[]], 
               BlankSequence[]]]}, 
            OptionsPattern[]], 
           OptionsPattern[]], 
          IntegerSequences`Private`SeriesRootAlgebraicSequenceObjectQ]][
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[Integer]], NonNegative]] :> 
       Module[{IntegerSequences`Private`modulus, 
          IntegerSequences`Private`serieslist, IntegerSequences`Private`y, 
          IntegerSequences`Private`failed}, 
         IntegerSequences`Private`failed = 
          Catch[IntegerSequences`Private`modulus = 
             IntegerSequences`Private`SeriesRootAlgebraicSequenceModulus[
              IntegerSequences`Private`sequence]; 
            IntegerSequences`Private`serieslist = 
             IntegerSequences`Private`SeriesRootSeriesList[{{
                IntegerSequences`Private`y, 
                 IntegerSequences`Private`polynomialfunction[
                 IntegerSequences`Private`y]}, {
                 Normal[IntegerSequences`Private`root], 
                 IntegerSequences`Private`SeriesAccuracy[
                  IntegerSequences`Private`root] - 1}}, {
               IntegerSequences`Private`x, IntegerSequences`Private`x0, 
                IntegerSequences`Private`n}, IntegerSequences`MaxDenominator -> 
               1, Modulus -> IntegerSequences`Private`modulus]; If[Length[
                DeleteDuplicates[IntegerSequences`Private`serieslist]] != 1, 
              Message[
                MessageName[IntegerSequences`AlgebraicSequence, "soln"], 
                IntegerSequences`Private`polynomialfunction, 
                IntegerSequences`Private`root]; Throw[True]]; False]; 
         Condition[
           Coefficient[
            First[IntegerSequences`Private`serieslist], 
            IntegerSequences`Private`x, IntegerSequences`Private`n], 
           Not[IntegerSequences`Private`failed]]], 
       IntegerSequences`AlgebraicSequence[
         Pattern[IntegerSequences`Private`polynomialfunction, 
          Blank[Function]], 
         Pattern[IntegerSequences`Private`x, 
          Except[
           Blank[Rule]]], 
         OptionsPattern[]][
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[Integer]], NonNegative]] :> 
       Module[{IntegerSequences`Private`polynomial, 
          IntegerSequences`Private`serieslist, IntegerSequences`Private`y, 
          IntegerSequences`Private`failed}, 
         IntegerSequences`Private`failed = 
          Catch[IntegerSequences`Private`polynomial = 
             IntegerSequences`Private`polynomialfunction[
              IntegerSequences`Private`y]; If[
              Not[
               IntegerSequences`Private`ImplicitFunctionTheoremPolynomialQ[
               IntegerSequences`Private`polynomial, 
                IntegerSequences`Private`x, IntegerSequences`Private`y, 
                Modulus -> OptionValue[Modulus]]], Message[
                MessageName[IntegerSequences`AlgebraicSequence, "ift"], 
                IntegerSequences`Private`polynomialfunction]; Throw[True]]; 
            IntegerSequences`Private`serieslist = 
             IntegerSequences`Private`SeriesRootSeriesList[{{
                IntegerSequences`Private`y, 
                 IntegerSequences`Private`polynomial}, {0, 0}}, {
               IntegerSequences`Private`x, 0, IntegerSequences`Private`n}, 
               IntegerSequences`MaxDenominator -> 1, Modulus -> 
               OptionValue[Modulus]]; If[Length[
                DeleteDuplicates[IntegerSequences`Private`serieslist]] != 1, 
              Message[
                MessageName[IntegerSequences`AlgebraicSequence, "soln"], 
                IntegerSequences`Private`polynomialfunction, 
                IntegerSequences`Private`ZeroSeries[
                IntegerSequences`Private`x, 1]]; Throw[True]]; False]; 
         Condition[
           Coefficient[
            First[IntegerSequences`Private`serieslist], 
            IntegerSequences`Private`x, IntegerSequences`Private`n], 
           Not[IntegerSequences`Private`failed]]]}], "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`AlgebraicSequence, {
      SyntaxInformation[IntegerSequences`AlgebraicSequence] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           Optional[
            Blank[]], 
           OptionsPattern[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {Modulus -> 0}, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`AlgebraicSequence"], False]]], "Output",ExpressionUUID->\
"42b73617-a04d-43c8-ab1c-57481438b47d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"AlgebraicSequence", "[", 
   RowBox[{
    RowBox[{"Function", "[", 
     RowBox[{"y", ",", 
      RowBox[{
       RowBox[{"x", " ", 
        SuperscriptBox["y", "2"]}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", " ", "x"}], "-", "1"}], ")"}], " ", "y"}], "+", 
       "x"}]}], "]"}], ",", "x"}], "]"}], "[", "10", "]"}]], "Input",Expressio\
nUUID->"7e5a3c45-aed3-4ff6-aa00-4d6444ca52ea"],

Cell[BoxData["16796"], "Output",ExpressionUUID->"47013338-f483-45c1-a065-ee36d4dde586"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"AlgebraicSequence", "[", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"y", ",", 
        RowBox[{
         RowBox[{"x", " ", 
          SuperscriptBox["y", "2"]}], "+", 
         RowBox[{
          RowBox[{"(", 
           RowBox[{
            RowBox[{"2", " ", "x"}], "-", "1"}], ")"}], " ", "y"}], "+", 
         "x"}]}], "]"}], ",", "x"}], "]"}], "[", "n", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "10"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"6a929cc3-1e64-4efe-9a15-976393c616db"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "2", ",", "5", ",", "14", ",", "42", ",", "132", ",", 
   "429", ",", "1430", ",", "4862", ",", "16796"}], "}"}]], "Output",Expressio\
nUUID->"9f213b74-b766-4977-8c67-45fce4f0e816"]
}, Open  ]],

Cell["Those are the coefficients of the power series solution:", "Text",ExpressionUUID->"c90270bf-85eb-4dfd-9478-9fa738f8b1c6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SeriesSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"x", " ", 
      SuperscriptBox[
       RowBox[{"f", "[", "x", "]"}], "2"]}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"2", " ", "x"}], "-", "1"}], ")"}], " ", 
      RowBox[{"f", "[", "x", "]"}]}], "+", "x"}], "\[Equal]", "0"}], ",", 
   RowBox[{"f", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "10"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"3fef69cd-27ec-4753-bc39-e1d08f06ebc9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
     InterpretationBox[
      RowBox[{"x", "+", 
       RowBox[{"2", " ", 
        SuperscriptBox["x", "2"]}], "+", 
       RowBox[{"5", " ", 
        SuperscriptBox["x", "3"]}], "+", 
       RowBox[{"14", " ", 
        SuperscriptBox["x", "4"]}], "+", 
       RowBox[{"42", " ", 
        SuperscriptBox["x", "5"]}], "+", 
       RowBox[{"132", " ", 
        SuperscriptBox["x", "6"]}], "+", 
       RowBox[{"429", " ", 
        SuperscriptBox["x", "7"]}], "+", 
       RowBox[{"1430", " ", 
        SuperscriptBox["x", "8"]}], "+", 
       RowBox[{"4862", " ", 
        SuperscriptBox["x", "9"]}], "+", 
       RowBox[{"16796", " ", 
        SuperscriptBox["x", "10"]}], "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", "x", "]"}], "11"],
        SeriesData[$CellContext`x, 0, {}, 1, 11, 1],
        Editable->False]}],
      SeriesData[$CellContext`x, 0, {1, 2, 5, 14, 42, 132, 429, 1430, 4862, 
       16796}, 1, 11, 1],
      Editable->False]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
     InterpretationBox[
      RowBox[{
       FractionBox["1", "x"], "-", "2", "-", "x", "-", 
       RowBox[{"2", " ", 
        SuperscriptBox["x", "2"]}], "-", 
       RowBox[{"5", " ", 
        SuperscriptBox["x", "3"]}], "-", 
       RowBox[{"14", " ", 
        SuperscriptBox["x", "4"]}], "-", 
       RowBox[{"42", " ", 
        SuperscriptBox["x", "5"]}], "-", 
       RowBox[{"132", " ", 
        SuperscriptBox["x", "6"]}], "-", 
       RowBox[{"429", " ", 
        SuperscriptBox["x", "7"]}], "-", 
       RowBox[{"1430", " ", 
        SuperscriptBox["x", "8"]}], "-", 
       RowBox[{"4862", " ", 
        SuperscriptBox["x", "9"]}], "-", 
       RowBox[{"16796", " ", 
        SuperscriptBox["x", "10"]}], "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", "x", "]"}], "11"],
        SeriesData[$CellContext`x, 0, {}, -1, 11, 1],
        Editable->False]}],
      SeriesData[$CellContext`x, 0, {
       1, -2, -1, -2, -5, -14, -42, -132, -429, -1430, -4862, -16796}, -1, 11,
        1],
      Editable->False]}], "}"}]}], "}"}]], "Output",ExpressionUUID->"f0de9dc1-\
8044-46dc-bb5b-a98326f0a383"]
}, Open  ]],

Cell["\<\
The implicit function theorem does not apply to this polynomial:\
\>", "Text",ExpressionUUID->"32850550-3edd-4933-a0ae-641cee39c0eb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"AlgebraicSequence", "[", 
   RowBox[{
    RowBox[{"Function", "[", 
     RowBox[{"y", ",", 
      RowBox[{
       RowBox[{"x", " ", 
        SuperscriptBox["y", "2"]}], "-", "y", "+", "1"}]}], "]"}], ",", "x"}],
    "]"}], "[", "10", "]"}]], "Input",ExpressionUUID->"1a0662df-ba7f-4582-\
82fe-cfaca34cf172"],

Cell[BoxData[
 TemplateBox[{
  "AlgebraicSequence","ift",
   "\"Polynomial function \\!\\(\\*RowBox[{\\\"Function\\\", \\\"[\\\", \
RowBox[{\\\"y\\\", \\\",\\\", RowBox[{RowBox[{\\\"x\\\", \\\" \\\", \
SuperscriptBox[\\\"y\\\", \\\"2\\\"]}], \\\"-\\\", \\\"y\\\", \\\"+\\\", \
\\\"1\\\"}]}], \\\"]\\\"}]\\) does not satisfy the conditions of implicit \
function theorem. Use SeriesRoot to identify a series.\"",2,49,1,
   18387630869787481076,"Local","IntegerSequences`AlgebraicSequence"},
  "MessageTemplate2"]], "Message", \
"MSG",ExpressionUUID->"76072656-1fa8-4476-ac39-1e21fe5d3360"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AlgebraicSequence", "[", 
   RowBox[{
    RowBox[{"Function", "[", 
     RowBox[{"y", ",", 
      RowBox[{
       RowBox[{"x", " ", 
        SuperscriptBox["y", "2"]}], "-", "y", "+", "1"}]}], "]"}], ",", "x"}],
    "]"}], "[", "10", "]"}]], "Output",ExpressionUUID->"26ff2716-da3c-4b4a-\
a47b-eac7e7d7a719"]
}, Open  ]],

Cell[TextData[{
 "Use ",
 StyleBox["SeriesRoot", "Input"],
 " to identify a particular root by an approximation:"
}], "Text",ExpressionUUID->"a14f81b6-9b81-476b-8c29-3cb05448d5b9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"AlgebraicSequence", "[", 
   RowBox[{"SeriesRoot", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"y", ",", 
        RowBox[{
         RowBox[{"x", " ", 
          SuperscriptBox["y", "2"]}], "-", "y", "+", "1"}]}], "]"}], ",", 
      InterpretationBox[
       RowBox[{"1", "+", "x", "+", 
        RowBox[{"2", " ", 
         SuperscriptBox["x", "2"]}], "+", 
        InterpretationBox[
         SuperscriptBox[
          RowBox[{"O", "[", "x", "]"}], "3"],
         SeriesData[$CellContext`x, 0, {}, 0, 3, 1],
         Editable->False]}],
       SeriesData[$CellContext`x, 0, {1, 1, 2}, 0, 3, 1],
       Editable->False]}], "}"}], "]"}], "]"}], "[", "10", "]"}]], "Input",Exp\
ressionUUID->"6b9c7844-aa9d-4517-97b5-9c2d3caa9fdd"],

Cell[BoxData["16796"], "Output",ExpressionUUID->"53a4d1a9-d849-462f-ae00-ac1324023163"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["AperyNumber", "Input"]], "Subsubsection",ExpressionUUID->"cd1c501a-a053-4406-b490-db4d65387d82"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "AperyNumber"}]], "Input",ExpressionUUID->"b433d976-e750-4f9e-9219-6e17d11f53bf"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AperyNumber\\\", \
\\\"[\\\", StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the \
\\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\)th Ap\[EAcute]ry number \
\\!\\(\\*SubscriptBox[StyleBox[\\\"A\\\", \\\"TI\\\"], StyleBox[\\\"n\\\", \\\
\"TI\\\"]]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"AperyNumber", "[", 
                    RowBox[{"IntegerSequences`Private`n_", "?", "NumericQ"}], 
                    "]"}], ":=", 
                    RowBox[{"HypergeometricPFQ", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "IntegerSequences`Private`n"}], ",", 
                    RowBox[{"-", "IntegerSequences`Private`n"}], ",", 
                    RowBox[{"IntegerSequences`Private`n", "+", "1"}], ",", 
                    RowBox[{"IntegerSequences`Private`n", "+", "1"}]}], "}"}],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", "1"}], 
                    "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "AperyNumber", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`AperyNumber] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{
                    "Listable", ",", "NumericFunction", ",", "Protected"}], 
                    "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`AperyNumber\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AperyNumber\\\", \
\\\"[\\\", StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the \
\\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\)th Ap\[EAcute]ry number \
\\!\\(\\*SubscriptBox[StyleBox[\\\"A\\\", \\\"TI\\\"], StyleBox[\\\"n\\\", \\\
\"TI\\\"]]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"AperyNumber\", \"[\", StyleBox[\"n\", \"TI\"], \
\"]\"]]\) gives the \!\(\*StyleBox[\"n\", \"TI\"]\)th Ap\[EAcute]ry number \!\
\(\*SubscriptBox[StyleBox[\"A\", \"TI\"], StyleBox[\"n\", \"TI\"]]\).", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`AperyNumber, {IntegerSequences`AperyNumber[
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[]], NumericQ]] :> 
       HypergeometricPFQ[{-IntegerSequences`Private`n, -
          IntegerSequences`Private`n, IntegerSequences`Private`n + 1, 
          IntegerSequences`Private`n + 1}, {1, 1, 1}, 1]}], "SubValues" -> 
    None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`AperyNumber, {
      SyntaxInformation[IntegerSequences`AperyNumber] -> {"ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Listable, NumericFunction, Protected}, "FullName" -> 
    "IntegerSequences`AperyNumber"], False]]], "Output",ExpressionUUID->\
"b494c55a-7ff4-4051-b29d-a697b9cf8ea2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"AperyNumber", "[", "n", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "10"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"ac162873-d8b6-456f-aea5-6afc9112bd7e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "5", ",", "73", ",", "1445", ",", "33001", ",", "819005", ",", 
   "21460825", ",", "584307365", ",", "16367912425", ",", "468690849005", ",",
    "13657436403073"}], "}"}]], "Output",ExpressionUUID->"9e123763-edd7-4f01-\
81b3-0a5837704ec7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AperyNumber", "[", "100", "]"}]], "Input",ExpressionUUID->"b084a265-f3cc-42b5-ae7d-33e9b7b8ba0b"],

Cell[BoxData[\
"28246556780857642816931056993651573220075180603038341949745729196560197198153\
9862786355444285161849342718964077377592329055009807990447067426716336001"], \
"Output",ExpressionUUID->"a6da1cbe-55de-413b-94ce-4fe51ca25f5e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AperyNumber", "[", "1.5", "]"}]], "Input",ExpressionUUID->"17ee6aee-9fd3-4461-af82-7058b6e54fc9"],

Cell[BoxData[
 TemplateBox[{
  "General","munfl",
   "\"\\!\\(\\*RowBox[{\\\"1.`\\\", \\\" \\\", \
\\\"5.43954628309471706223965300022418249`15.954589770191005*^-2046\\\"}]\\) \
is too small to represent as a normalized machine number; precision may be \
lost.\"",2,59,6,18387630869787481076,"Local"},
  "MessageTemplate"]], "Message", \
"MSG",ExpressionUUID->"0b7b1cb9-1d3c-4315-89bd-d7b9adcabc6b"],

Cell[BoxData["18.025265329284334`"], "Output",ExpressionUUID->"23216fd1-da50-4360-9b2a-750fb6981973"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["AutomaticSequence", "Input"]], "Subsubsection",ExpressionUUID->"e5d179e4-a2df-4d34-8685-4615af48b0d4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "AutomaticSequence"}]], "Input",ExpressionUUID->"8694db60-37fa-4d27-ba7a-27fabe71f367"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[RowBox[List[\\\"\
AutomaticSequence\\\", \\\"[\\\", RowBox[List[StyleBox[\\\"M\\\", \
\\\"TI\\\"], \\\",\\\", StyleBox[\\\"k\\\", \\\"TI\\\"]]], \\\"]\\\"]], \\\"[\
\\\", StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) evaluates an automaton \
\\!\\(\\*StyleBox[\\\"M\\\", \\\"TI\\\"]\\) on the \
base\[Hyphen]\\!\\(\\*StyleBox[\\\"k\\\", \\\"TI\\\"]\\) digits of \
\\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\), starting with the least \
significant digit.\\n\\!\\(\\*RowBox[List[RowBox[List[\\\"AutomaticSequence\\\
\", \\\"[\\\", RowBox[List[StyleBox[\\\"M\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"d\\\", \
\\\"TI\\\"]]]], \\\"}\\\"]]]], \\\"]\\\"]], \\\"[\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], \
StyleBox[\\\"d\\\", \\\"TI\\\"]]]], \\\"]\\\"]]\\) gives the value of a \
\\!\\(\\*StyleBox[\\\"d\\\", \\\"TI\\\"]\\)\[Hyphen]dimensional \
(\\!\\(\\*RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\
\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\
\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\
\\\", \\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], \
StyleBox[\\\"d\\\", \\\"TI\\\"]]]]\\))\[Hyphen]automatic \
sequence.\\n\\!\\(\\*RowBox[List[RowBox[List[\\\"AutomaticSequence\\\", \\\"[\
\\\", StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]], \\\"[\\\", StyleBox[\\\"n\
\\\", \\\"TI\\\"], \\\"]\\\"]]\\) infers the base \
\\!\\(\\*StyleBox[\\\"k\\\", \\\"TI\\\"]\\) from \\!\\(\\*StyleBox[\\\"M\\\", \
\\\"TI\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" SubValue Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"SubValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "SubValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"AutomaticSequence", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`automaton_", "?", 
                    "AutomatonQ"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystem_", "?", 
                    "IntegerSequences`Private`NumerationSystemQ"}]}], "]"}], 
                    "[", "IntegerSequences`Private`n_Integer", "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`digitlist", "=", 
                    RowBox[{"DigitList", "[", 
                    RowBox[{
                    "IntegerSequences`Private`n", ",", 
                    "IntegerSequences`Private`numerationsystem"}], "]"}]}], 
                    "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`automaton", "[", 
                    "IntegerSequences`Private`digitlist", "]"}], "/;", 
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`digitlist", ",", "_DigitList"}],
                     "]"}]}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"AutomaticSequence", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`automaton_", "?", 
                    "AutomatonQ"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystemlist", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    "__", "?", "IntegerSequences`Private`NumerationSystemQ"}],
                     "}"}]}]}], "]"}], "[", 
                    "IntegerSequences`Private`n__Integer", "]"}], "/;", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "IntegerSequences`Private`n", "}"}], "]"}], 
                    "\[Equal]", 
                    RowBox[{
                    "Length", "[", 
                    "IntegerSequences`Private`numerationsystemlist", 
                    "]"}]}]}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`digitlists", "=", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"DigitList", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "IntegerSequences`Private`n", "}"}], ",", 
                    "IntegerSequences`Private`numerationsystemlist"}], 
                    "}"}]}], "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`automaton", "[", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{
                    "PadRight", "[", "IntegerSequences`Private`digitlists", 
                    "]"}], "]"}], "]"}], "/;", 
                    RowBox[{"!", 
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`digitlists", ",", 
                    "_DigitList"}], "]"}]}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"AutomaticSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`automaton_", "?", 
                    "AutomatonQ"}], "]"}], "[", 
                    "IntegerSequences`Private`n__Integer", "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystemlist", ",", 
                    "IntegerSequences`Private`automatoninput", ",", 
                    "IntegerSequences`Private`digitlists", ",", 
                    RowBox[{
                    "IntegerSequences`Private`failed", "=", "False"}]}], 
                    "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`numerationsystemlist", "=", 
                    RowBox[{
                    "IntegerSequences`Private`\
AutomaticSequenceNumerationSystemList", "[", 
                    RowBox[{
                    "AutomaticSequence", "[", 
                    "IntegerSequences`Private`automaton", "]"}], "]"}]}], ";", 
                    RowBox[{"Switch", "[", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystemlist", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"{", "_", "}"}], "/;", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "IntegerSequences`Private`n", "}"}], "]"}], 
                    "\[Equal]", "1"}], "&&", 
                    RowBox[{"!", 
                    RowBox[{"ListQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`automaton", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "1", ",", "2"}], 
                    "\[RightDoubleBracket]"}], "]"}]}]}]}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`automatoninput", "=", 
                    RowBox[{"DigitList", "[", 
                    RowBox[{"IntegerSequences`Private`n", ",", 
                    RowBox[{
                    "First", "[", 
                    "IntegerSequences`Private`numerationsystemlist", "]"}]}], 
                    "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`automatoninput", ",", 
                    "_DigitList"}], "]"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`failed", "=", "True"}]}], 
                    "]"}]}], ",", "\[IndentingNewLine]", 
                    RowBox[{"_List", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "#1", "]"}], "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "IntegerSequences`Private`n", "}"}], "]"}]}],
                     "&"}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`digitlists", "=", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"DigitList", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "IntegerSequences`Private`n", "}"}], ",", 
                    "IntegerSequences`Private`numerationsystemlist"}], 
                    "}"}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`digitlists", ",", 
                    "_DigitList"}], "]"}], ",", 
                    RowBox[{"IntegerSequences`Private`failed", "=", "True"}], 
                    ",", 
                    RowBox[{"IntegerSequences`Private`automatoninput", "=", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{
                    "PadRight", "[", "IntegerSequences`Private`digitlists", 
                    "]"}], "]"}]}]}], "]"}]}], ",", "\[IndentingNewLine]", 
                    "_", ",", 
                    RowBox[{
                    "IntegerSequences`Private`failed", "=", "True"}]}], "]"}],
                     ";", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`automaton", "[", 
                    "IntegerSequences`Private`automatoninput", "]"}], "/;", 
                    RowBox[{"!", "IntegerSequences`Private`failed"}]}]}]}], 
                    "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "AutomaticSequence", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_."}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`AutomaticSequence] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Optional[
                    Blank[]]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`AutomaticSequence\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[RowBox[List[\\\"\
AutomaticSequence\\\", \\\"[\\\", RowBox[List[StyleBox[\\\"M\\\", \
\\\"TI\\\"], \\\",\\\", StyleBox[\\\"k\\\", \\\"TI\\\"]]], \\\"]\\\"]], \\\"[\
\\\", StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) evaluates an automaton \
\\!\\(\\*StyleBox[\\\"M\\\", \\\"TI\\\"]\\) on the \
base\[Hyphen]\\!\\(\\*StyleBox[\\\"k\\\", \\\"TI\\\"]\\) digits of \
\\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\), starting with the least \
significant digit.\\n\\!\\(\\*RowBox[List[RowBox[List[\\\"AutomaticSequence\\\
\", \\\"[\\\", RowBox[List[StyleBox[\\\"M\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"d\\\", \
\\\"TI\\\"]]]], \\\"}\\\"]]]], \\\"]\\\"]], \\\"[\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], \
StyleBox[\\\"d\\\", \\\"TI\\\"]]]], \\\"]\\\"]]\\) gives the value of a \
\\!\\(\\*StyleBox[\\\"d\\\", \\\"TI\\\"]\\)\[Hyphen]dimensional \
(\\!\\(\\*RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\
\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\
\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\
\\\", \\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], \
StyleBox[\\\"d\\\", \\\"TI\\\"]]]]\\))\[Hyphen]automatic \
sequence.\\n\\!\\(\\*RowBox[List[RowBox[List[\\\"AutomaticSequence\\\", \\\"[\
\\\", StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]], \\\"[\\\", StyleBox[\\\"n\
\\\", \\\"TI\\\"], \\\"]\\\"]]\\) infers the base \
\\!\\(\\*StyleBox[\\\"k\\\", \\\"TI\\\"]\\) from \\!\\(\\*StyleBox[\\\"M\\\", \
\\\"TI\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[RowBox[List[\"AutomaticSequence\", \"[\", \
RowBox[List[StyleBox[\"M\", \"TI\"], \",\", StyleBox[\"k\", \"TI\"]]], \
\"]\"]], \"[\", StyleBox[\"n\", \"TI\"], \"]\"]]\) evaluates an automaton \
\!\(\*StyleBox[\"M\", \"TI\"]\) on the base\[Hyphen]\!\(\*StyleBox[\"k\", \
\"TI\"]\) digits of \!\(\*StyleBox[\"n\", \"TI\"]\), starting with the least \
significant digit.\n\!\(\*RowBox[List[RowBox[List[\"AutomaticSequence\", \
\"[\", RowBox[List[StyleBox[\"M\", \"TI\"], \",\", RowBox[List[\"{\", \
RowBox[List[SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"1\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"2\", \"TR\"]], \",\", \
StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", SubscriptBox[StyleBox[\"k\", \
\"TI\"], StyleBox[\"d\", \"TI\"]]]], \"}\"]]]], \"]\"]], \"[\", \
RowBox[List[SubscriptBox[StyleBox[\"n\", \"TI\"], StyleBox[\"1\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"n\", \"TI\"], StyleBox[\"2\", \"TR\"]], \",\", \
StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", SubscriptBox[StyleBox[\"n\", \
\"TI\"], StyleBox[\"d\", \"TI\"]]]], \"]\"]]\) gives the value of a \
\!\(\*StyleBox[\"d\", \"TI\"]\)\[Hyphen]dimensional \
(\!\(\*RowBox[List[SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"1\", \"TR\
\"]], \",\", SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"2\", \"TR\"]], \
\",\", StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", \
SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"d\", \
\"TI\"]]]]\))\[Hyphen]automatic sequence.\n\
\!\(\*RowBox[List[RowBox[List[\"AutomaticSequence\", \"[\", StyleBox[\"M\", \
\"TI\"], \"]\"]], \"[\", StyleBox[\"n\", \"TI\"], \"]\"]]\) infers the base \
\!\(\*StyleBox[\"k\", \"TI\"]\) from \!\(\*StyleBox[\"M\", \"TI\"]\).", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> None, "SubValues" -> 
    Information`InformationValueForm[
     SubValues, IntegerSequences`AutomaticSequence, {
      IntegerSequences`AutomaticSequence[
         PatternTest[
          Pattern[IntegerSequences`Private`automaton, 
           Blank[]], IntegerSequences`AutomatonQ], 
         PatternTest[
          Pattern[IntegerSequences`Private`numerationsystem, 
           Blank[]], IntegerSequences`Private`NumerationSystemQ]][
         Pattern[IntegerSequences`Private`n, 
          Blank[Integer]]] :> 
       With[{IntegerSequences`Private`digitlist = 
          IntegerSequences`DigitList[
           IntegerSequences`Private`n, 
            IntegerSequences`Private`numerationsystem]}, 
         Condition[
          IntegerSequences`Private`automaton[
          IntegerSequences`Private`digitlist], 
          Not[
           MatchQ[IntegerSequences`Private`digitlist, 
            Blank[IntegerSequences`DigitList]]]]], Condition[
         IntegerSequences`AutomaticSequence[
          PatternTest[
           Pattern[IntegerSequences`Private`automaton, 
            Blank[]], IntegerSequences`AutomatonQ], 
          Pattern[IntegerSequences`Private`numerationsystemlist, {
            PatternTest[
             BlankSequence[], IntegerSequences`Private`NumerationSystemQ]}]][
          Pattern[IntegerSequences`Private`n, 
           BlankSequence[Integer]]], Length[{IntegerSequences`Private`n}] == 
         Length[IntegerSequences`Private`numerationsystemlist]] :> 
       With[{IntegerSequences`Private`digitlists = 
          MapThread[
           IntegerSequences`DigitList, {{IntegerSequences`Private`n}, 
             IntegerSequences`Private`numerationsystemlist}]}, 
         Condition[
          IntegerSequences`Private`automaton[
           Transpose[
            PadRight[IntegerSequences`Private`digitlists]]], 
          Not[
           MemberQ[IntegerSequences`Private`digitlists, 
            Blank[IntegerSequences`DigitList]]]]], 
       IntegerSequences`AutomaticSequence[
         PatternTest[
          Pattern[IntegerSequences`Private`automaton, 
           Blank[]], IntegerSequences`AutomatonQ]][
         Pattern[IntegerSequences`Private`n, 
          BlankSequence[Integer]]] :> 
       Module[{IntegerSequences`Private`numerationsystemlist, 
          IntegerSequences`Private`automatoninput, 
          IntegerSequences`Private`digitlists, 
          IntegerSequences`Private`failed = False}, 
         IntegerSequences`Private`numerationsystemlist = 
          IntegerSequences`Private`AutomaticSequenceNumerationSystemList[
            IntegerSequences`AutomaticSequence[
            IntegerSequences`Private`automaton]]; 
         Switch[IntegerSequences`Private`numerationsystemlist, 
           Condition[{
             Blank[]}, 
            And[Length[{IntegerSequences`Private`n}] == 1, 
             Not[
              ListQ[
               Part[IntegerSequences`Private`automaton, 1, 1, 2]]]]], 
           IntegerSequences`Private`automatoninput = 
            IntegerSequences`DigitList[IntegerSequences`Private`n, 
              First[IntegerSequences`Private`numerationsystemlist]]; If[
             MatchQ[IntegerSequences`Private`automatoninput, 
              Blank[IntegerSequences`DigitList]], 
             IntegerSequences`Private`failed = True], 
           PatternTest[
            Blank[List], Length[#] == Length[{IntegerSequences`Private`n}]& ],
            IntegerSequences`Private`digitlists = 
            MapThread[
             IntegerSequences`DigitList, {{IntegerSequences`Private`n}, 
               IntegerSequences`Private`numerationsystemlist}]; If[
             MemberQ[IntegerSequences`Private`digitlists, 
              Blank[IntegerSequences`DigitList]], 
             IntegerSequences`Private`failed = True, 
             IntegerSequences`Private`automatoninput = Transpose[
               PadRight[IntegerSequences`Private`digitlists]]], 
           Blank[], IntegerSequences`Private`failed = True]; Condition[
           IntegerSequences`Private`automaton[
           IntegerSequences`Private`automatoninput], 
           Not[IntegerSequences`Private`failed]]]}], "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`AutomaticSequence, {
      SyntaxInformation[IntegerSequences`AutomaticSequence] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           Optional[
            Blank[]]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`AutomaticSequence"], False]]], "Output",ExpressionUUID->\
"994d1abf-8b3e-43c0-b3db-9e7182f4f0d0"]
}, Open  ]],

Cell["Compute a term of the Thue\[Dash]Morse sequence:", "Text",ExpressionUUID->"db52ffb6-f569-4b7a-9349-20049bcdf03f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"AutomaticSequence", "[", 
   RowBox[{"Automaton", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"0", "\[Rule]", "0"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"0", "\[Rule]", "1"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "1"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "0"}], ",", "1"}], "}"}]}], "}"}], ",", 
     "0"}], "]"}], "]"}], "[", "27", "]"}]], "Input",ExpressionUUID->\
"f0e155aa-daa3-42da-8c4b-5d4b513c4e0f"],

Cell[BoxData["0"], "Output",ExpressionUUID->"51133284-0e67-4090-8160-e77f07972d3c"]
}, Open  ]],

Cell["Compute the first few terms:", "Text",ExpressionUUID->"730cb0a7-c28f-44dc-a3df-20a1a18db3b3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"AutomaticSequence", "[", 
     RowBox[{"Automaton", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"0", "\[Rule]", "0"}], ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"0", "\[Rule]", "1"}], ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "\[Rule]", "1"}], ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "\[Rule]", "0"}], ",", "1"}], "}"}]}], "}"}], ",", 
       "0"}], "]"}], "]"}], "[", "n", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "31"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"9c9e0624-eed0-4b65-ae94-2f5365790fff"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", 
   ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", 
   ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "1"}], "}"}]], "Output",ExpressionUUID->"284c73ff-154f-422e-b66b-\
ff52a3c924b9"]
}, Open  ]],

Cell[TextData[{
 "This two-dimensional automatic sequence produces Pascal\[CloseCurlyQuote]s \
triangle modulo ",
 Cell[BoxData[
  FormBox["2", TraditionalForm]],ExpressionUUID->
  "54b0085a-f5ca-48fc-b09b-27bf0bdcda69"],
 ":"
}], "Text",ExpressionUUID->"e936a246-349b-4277-bc85-1f5babafe9a2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArrayPlot", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"AutomaticSequence", "[", 
      RowBox[{"Automaton", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], "}"}], "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"0", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", "0"}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], "}"}], "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"1", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], "}"}], "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"0", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "0"}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"0", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], "}"}], "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"0", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}]}], "}"}], "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"1", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", "0"}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}]}], "}"}], "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"1", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}]}], "}"}], "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"1", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "0"}], "}"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}]}], "}"}], "\[Rule]", 
             RowBox[{"{", 
              RowBox[{"1", ",", 
               RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], ",", 
            RowBox[{"{", 
             RowBox[{"1", ",", "1"}], "}"}]}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", 
          RowBox[{"{", 
           RowBox[{"0", ",", "0"}], "}"}]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", "0"}], "}"}]}], "}"}], "\[Rule]", "1"}], ",", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", 
             RowBox[{"{", 
              RowBox[{"0", ",", "1"}], "}"}]}], "}"}], "\[Rule]", "0"}]}], 
         "}"}]}], "]"}], "]"}], "[", 
     RowBox[{"n", ",", "m"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "0", ",", "63"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"m", ",", "0", ",", "63"}], "}"}]}], "]"}], "]"}]], "Input",Expre\
ssionUUID->"571d3bc6-7ab5-476f-9a8a-81a51de25868"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJylldEJAzEMQ+1u0k06Q0foAt3/r7R3JRebSJF9IQgjLg9jhO+v9/N1M7PH
edufN49573rzflvo6O+Vhh5SV2/qf4zV+jzl2kYvpfrSS6m262uFenqtUM+l
XnuzjnFW/XBkP+RZ9sOV/ZBn2Q95lv2QZ9kPKvuLuW77i7lu+4u5bvu+7m3L
B71t+fD1DR/b3Mc298lHfk/5ZnnPfHw5H1/Ox/ud8w0q52PlfKycj/c75+P9
zvl4v3M+3u+cj/c75+P9zvm45nxcc76W98zX8p75Wt4zX8t75mt5z3wt75k/
q86fVefX5j74tbkPfr33g1/v/eB36PW5D37r9ybd/QNaOg9Q
   "], {{0, 0}, {64, 64}}, {0, 1}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic}]], "Output",ExpressionUUID->"8bbfd6ba-fe36-4f4d-aadc-\
a8bbbe659ba0"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["AutomaticSequenceAutomaton", "Input"]], \
"Subsubsection",ExpressionUUID->"b6d872aa-f825-496a-bd8d-eb51019ca3af"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "AutomaticSequenceAutomaton"}]], "Input",ExpressionUUID->"438506d0-f2d2-46e3-bf99-2c16438a2777"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomaticSequenceAutomaton\
\\\", \\\"[\\\", RowBox[List[RowBox[List[\\\"AutomaticSequence\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"M\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"k\\\", \\\"TI\\\"]]], \\\"]\\\"]], \\\"[\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]], \\\"]\\\"]]\\) extracts the \
automaton from an AutomaticSequence object.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"AutomaticSequenceAutomaton", "[", 
                    RowBox[{
                    RowBox[{"AutomaticSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`automaton_", ",", "___"}], 
                    "]"}], "[", "__", "]"}], "]"}], ":=", 
                    "IntegerSequences`Private`automaton"}]},
                    {
                    RowBox[{
                    RowBox[{"AutomaticSequenceAutomaton", "[", 
                    RowBox[{"AutomaticSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`automaton_", ",", "___"}], 
                    "]"}], "]"}], ":=", "IntegerSequences`Private`automaton"}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "AutomaticSequenceAutomaton", 
                    "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`AutomaticSequenceAutomaton] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`AutomaticSequenceAutomaton\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomaticSequenceAutomaton\
\\\", \\\"[\\\", RowBox[List[RowBox[List[\\\"AutomaticSequence\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"M\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"k\\\", \\\"TI\\\"]]], \\\"]\\\"]], \\\"[\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]], \\\"]\\\"]]\\) extracts the \
automaton from an AutomaticSequence object.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"AutomaticSequenceAutomaton\", \"[\", \
RowBox[List[RowBox[List[\"AutomaticSequence\", \"[\", \
RowBox[List[StyleBox[\"M\", \"TI\"], \",\", StyleBox[\"k\", \"TI\"]]], \
\"]\"]], \"[\", StyleBox[\"n\", \"TI\"], \"]\"]], \"]\"]]\) extracts the \
automaton from an AutomaticSequence object.", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`AutomaticSequenceAutomaton, {
      IntegerSequences`AutomaticSequenceAutomaton[
         IntegerSequences`AutomaticSequence[
          Pattern[IntegerSequences`Private`automaton, 
           Blank[]], 
          BlankNullSequence[]][
          BlankSequence[]]] :> IntegerSequences`Private`automaton, 
       IntegerSequences`AutomaticSequenceAutomaton[
         IntegerSequences`AutomaticSequence[
          Pattern[IntegerSequences`Private`automaton, 
           Blank[]], 
          BlankNullSequence[]]] :> IntegerSequences`Private`automaton}], 
    "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`AutomaticSequenceAutomaton, {
      SyntaxInformation[IntegerSequences`AutomaticSequenceAutomaton] -> {
        "ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`AutomaticSequenceAutomaton"], False]]], "Output",Express\
ionUUID->"1bbc9615-6835-4e90-bfad-6d390d7e70b0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomaticSequenceAutomaton", "[", 
  RowBox[{
   RowBox[{"AutomaticSequence", "[", 
    RowBox[{
     RowBox[{"Automaton", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "\[Rule]", "1"}], ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "\[Rule]", "2"}], ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"2", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"2", "\[Rule]", "1"}], ",", "1"}], "}"}]}], "}"}], ",", 
       "1", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "0"}], ",", 
         RowBox[{"2", "\[Rule]", "1"}]}], "}"}]}], "]"}], ",", "2"}], "]"}], 
   "[", "n", "]"}], "]"}]], "Input",ExpressionUUID->"c622d42a-84ed-401d-afab-\
e28949ba7d62"],

Cell[BoxData[
 RowBox[{"Automaton", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "1"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "1"}], ",", "1"}], "}"}]}], "}"}], ",", "1", 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "0"}], ",", 
     RowBox[{"2", "\[Rule]", "1"}]}], "}"}]}], "]"}]], "Output",ExpressionUUID\
->"aca974cc-06c5-4c65-9f66-724de56a22a2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonGraph", "[", "%", "]"}]], "Input",ExpressionUUID->"bb7c30af-60e6-49a6-b257-7be98441fbc9"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{Null, 
       Interpretation[0, 1], 
       Interpretation[1, 2]}, {{{1, 2}, {2, 2}, {2, 3}, {3, 3}, {3, 2}}, 
       Null}, {EdgeLabels -> {DirectedEdge[
           Interpretation[1, 2], 
           Interpretation[1, 2]] -> 0, DirectedEdge[
           Interpretation[0, 1], 
           Interpretation[1, 2]] -> 1, DirectedEdge[
           Interpretation[0, 1], 
           Interpretation[0, 1]] -> 0, DirectedEdge[
           Interpretation[1, 2], 
           Interpretation[0, 1]] -> 1}, 
       EdgeShapeFunction -> {{
         "CorporateShortCarvedArrow", "ArrowSize" -> 0.04, "ArrowPositions" -> 
          1}}, EdgeStyle -> {
         Directive[
          GrayLevel[0.5], 
          Opacity[1]]}, PerformanceGoal -> "Quality", 
       VertexLabels -> {Interpretation[0, 1] -> Placed[
           Interpretation[0, 1], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[1, 2] -> Placed[
           Interpretation[1, 2], {
            Rational[1, 2], 
            Rational[1, 2]}], Null -> Placed[Null, {
            Rational[1, 2], 
            Rational[1, 2]}]}, 
       VertexShapeFunction -> {
        Interpretation[1, 2] -> "Circle", Null -> None, Interpretation[0, 1] -> 
         "Circle"}, VertexSize -> {0.2}, VertexStyle -> {
         Hue[0.6, 0.3, 0.8]}}]], Typeset`boxes, Typeset`boxes$s2d = 
    GraphicsGroupBox[{{
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], 
       Directive[
        GrayLevel[0.5], 
        Opacity[1]], {
        Arrowheads[{{0.04, 1, {
            GraphicsBox[
             
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
               0, 1, 0}}}, {{{-0.12347775660674376`, 
               0.}, {-0.5614144091900695, 
               0.21895451909535257`}, {-0.4738215557948804, 
               0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
               0.}}}]], 0.533327810340424}}}], 
        ArrowBox[{
          DynamicLocation["VertexID$1", Automatic, Center], 
          DynamicLocation["VertexID$2", Automatic, Center]}]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$2", Automatic, Center], {
             1.215969005971036, -0.1425312379880006}, {
             1.2342632844934087`, -0.32493768720862726`}, {
             1.1702710252509327`, -0.431056932977143}, {
             0.8305438002399658, -0.4310569329771431}, {
             0.7665515409974896, -0.32493768720862726`}, {
             0.7848458195198625, -0.1425312379880006}, 
             DynamicLocation["VertexID$2", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$2"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$2", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$2", Automatic, Center], {
             1.5003055284305298`, 0.16440723931737236`}, 
             DynamicLocation["VertexID$3", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$3"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$3", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             1.5003055284305298`, -0.16440723931737236`}, 
             DynamicLocation["VertexID$2", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$4"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$4", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             2.0886828995833713`, 0.1907835323853024}, {2.287561377120962, 
             0.24717977484589673`}, {2.4147320015954197`, 
             0.1882226960710236}, {
             2.4147320015954197`, -0.18822269607102265`}, {
             2.2875613771209626`, -0.2471797748458961}, {
             2.0886828995833717`, -0.19078353238530207`}, 
             DynamicLocation["VertexID$3", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$5"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$5", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       Hue[0.6, 0.3, 0.8], 
       TagBox[{
         TagBox[
          StyleBox[
           CircleBox[{0., 0.}, {0.0999796231370162, 0.0999796231370162}], 
           ShowContents -> False, StripOnInput -> False], "DynamicName", 
          BoxID -> "VertexID$1"], 
         InsetBox["", 
          Dynamic[
          DynamicLocation[
            "VertexID$1", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$1", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$1", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          
          DiskBox[{1.0004074127454492`, 4.666248974332878*^-18}, {
           0.0999796231370162, 0.0999796231370162}], "DynamicName", BoxID -> 
          "VertexID$2"], 
         InsetBox[
          FormBox[
           InterpretationBox["0", 1], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$2", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$2", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$2", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$2"], 
       TagBox[{
         TagBox[
          
          DiskBox[{2.000203644115611, 4.9566794084199865`*^-18}, {
           0.0999796231370162, 0.0999796231370162}], "DynamicName", BoxID -> 
          "VertexID$3"], 
         InsetBox[
          FormBox[
           InterpretationBox["1", 2], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$3", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$3", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$3", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$3"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{3.9406933090100917`, 
       355.2393066909899}, {-52.23930669098989, 47.23930669098989}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",ExpressionUUID->"5fa3158e-94a4-4d95-86bc-\
b936edfe332d"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["AutomaticSequenceReduce", "Input"]], "Subsubsection",ExpressionUUID->"1f644da0-a29e-489c-a44a-efb47f2cbd24"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "AutomaticSequenceReduce"}]], "Input",ExpressionUUID->"e7a7ae1f-7889-47c3-8dbd-ee89b831e323"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomaticSequenceReduce\\\"\
, \\\"[\\\", RowBox[List[StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) attempts to reduce \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) to a single AutomaticSequence \
object as a function of \\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\).\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"AutomaticSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`expression", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "BaumSweet", "|", "RudinShapiro", "|", "ThueMorse"}], 
                    ")"}], "[", "IntegerSequences`Private`n_", "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`n_", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}], "}"}], 
                    ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{"IntegerSequences`Private`expression", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "BaumSweet", "[", "IntegerSequences`Private`x_", "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{
                    RowBox[{
                    "AutomaticSequence", "[", 
                    "IntegerSequences`Private`$BaumSweetAutomaton", "]"}], 
                    "[", "IntegerSequences`Private`x", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    "RudinShapiro", "[", "IntegerSequences`Private`x_", "]"}],
                     "\[RuleDelayed]", 
                    RowBox[{
                    RowBox[{
                    "AutomaticSequence", "[", 
                    "IntegerSequences`Private`$RudinShapiroAutomaton", "]"}], 
                    "[", "IntegerSequences`Private`x", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    "ThueMorse", "[", "IntegerSequences`Private`x_", "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{
                    RowBox[{"AutomaticSequence", "[", 
                    "IntegerSequences`Private`$ThueMorseAutomaton", "]"}], 
                    "[", "IntegerSequences`Private`x", "]"}]}]}], "}"}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"AutomaticSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{"Mod", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`originalsequence_", "[", 
                    "IntegerSequences`Private`nsequence__", "]"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`modulus_", "?", 
                    "PrimePowerQ"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`nsequence__", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}], "}"}], 
                    ",", 
                    RowBox[{"IntegerSequences`Private`options", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    RowBox[{"OptionValue", "[", 
                    RowBox[{"AutomaticSequenceReduce", ",", 
                    RowBox[{"{", "IntegerSequences`Private`options", "}"}], 
                    ",", "Method"}], "]"}], ",", 
                    RowBox[{
                    "Automatic", "|", "\<\"ConstantTerm\"\>", 
                    "|", "\<\"Diagonal\"\>", "|", 
                    RowBox[{"{", 
                    RowBox[{"\<\"Diagonal\"\>", ",", 
                    RowBox[{"\<\"Degree\"\>", "\[Rule]", 
                    RowBox[{"\<\"High\"\>", "|", "\<\"Low\"\>"}]}]}], "}"}], 
                    "|", "\<\"OrePolynomial\"\>"}]}], "]"}], "||", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"AutomaticSequenceReduce", "::", "bdmtd"}], 
                    "MessageName"], ",", 
                    RowBox[{"OptionValue", "[", 
                    RowBox[{"AutomaticSequenceReduce", ",", 
                    RowBox[{"{", "IntegerSequences`Private`options", "}"}], 
                    ",", "Method"}], "]"}]}], "]"}], ";", "False"}], 
                    ")"}]}]}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`method", ",", 
                    "IntegerSequences`Private`sequence", ",", 
                    "IntegerSequences`Private`polynomialfunction", ",", 
                    "IntegerSequences`Private`automaton", ",", 
                    "IntegerSequences`Private`seriesvariables", ",", 
                    "IntegerSequences`Private`y", ",", 
                    "IntegerSequences`Private`failed"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`failed", "=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`method", "=", 
                    RowBox[{"Switch", "[", 
                    RowBox[{
                    RowBox[{"OptionValue", "[", "Method", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"\<\"OrePolynomial\"\>", "/;", 
                    RowBox[{"!", 
                    RowBox[{
                    "PrimeQ", "[", "IntegerSequences`Private`modulus", 
                    "]"}]}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"AutomaticSequenceReduce", "::", "oremod"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Automatic", "/;", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`originalsequence", ",", 
                    "_AlgebraicSequence"}], "]"}]}], "&&", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"IntegerSequences`Private`originalsequence", ",", 
                    RowBox[{
                    "_ConstantTermSequence", "|", "_DiagonalSequence"}]}], 
                    "]"}], "&&", 
                    RowBox[{
                    "PrimeQ", "[", "IntegerSequences`Private`modulus", 
                    "]"}]}]}], ")"}], "|", "\<\"OrePolynomial\"\>"}], 
                    ",", "\<\"OrePolynomial\"\>", ",", "\[IndentingNewLine]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Automatic", "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"IntegerSequences`Private`originalsequence", ",", 
                    RowBox[{
                    "_AlgebraicSequence", "|", "_DiagonalSequence"}]}], 
                    "]"}]}], ")"}], "|", "\<\"ConstantTerm\"\>"}], 
                    ",", "\<\"ConstantTerm\"\>", ",", "\[IndentingNewLine]", 
                    "_", ",", "\<\"Diagonal\"\>"}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`sequence", "=", 
                    RowBox[{
                    RowBox[{"Replace", "[", 
                    RowBox[{"IntegerSequences`Private`originalsequence", ",", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`algebraicsequence_\
AlgebraicSequence", "/;", 
                    RowBox[{"!", 
                    RowBox[{"MemberQ", "[", 
                    RowBox[{"IntegerSequences`Private`algebraicsequence", ",", 
                    RowBox[{"Modulus", "\[Rule]", "_"}]}], "]"}]}]}], 
                    "\[RuleDelayed]", 
                    RowBox[{"Append", "[", 
                    RowBox[{"IntegerSequences`Private`algebraicsequence", ",", 
                    RowBox[{
                    "Modulus", "\[Rule]", 
                    "IntegerSequences`Private`modulus"}]}], "]"}]}]}], "]"}], 
                    "[", "IntegerSequences`Private`nsequence", "]"}]}], ";", 
                    RowBox[{"Switch", "[", 
                    RowBox[{
                    "IntegerSequences`Private`method", ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"\<\"ConstantTerm\"\>", "/;", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "IntegerSequences`Private`nsequence", "}"}], 
                    "]"}], "\[Equal]", "1"}]}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`sequence", "=", 
                    RowBox[{"ConstantTermSequenceReduce", "[", 
                    RowBox[{
                    "IntegerSequences`Private`sequence", ",", 
                    "IntegerSequences`Private`nsequence"}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"IntegerSequences`Private`sequence", ",", 
                    RowBox[{
                    "_ConstantTermSequence", "[", 
                    "IntegerSequences`Private`nsequence", "]"}]}], "]"}]}], 
                    ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"AutomaticSequenceReduce", "::", "method"}], 
                    "MessageName"], ",", 
                    RowBox[{
                    "IntegerSequences`Private`originalsequence", "[", 
                    "IntegerSequences`Private`nsequence", "]"}], ",", 
                    "IntegerSequences`Private`method"}], "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ";", 
                    RowBox[{"IntegerSequences`Private`sequence", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{
                    "Head", "[", "IntegerSequences`Private`sequence", "]"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ConstantTermSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`powerpolynomial_", ",", 
                    "IntegerSequences`Private`varspec_"}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"ConstantTermSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`powerpolynomial", ",", "1", ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "ListQ", "[", "IntegerSequences`Private`varspec", "]"}], 
                    ",", "IntegerSequences`Private`varspec", ",", 
                    RowBox[{"{", "IntegerSequences`Private`varspec", "}"}]}], 
                    "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"ConstantTermSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`powerpolynomial_", ",", 
                    "IntegerSequences`Private`factorpolynomial_", ",", 
                    "IntegerSequences`Private`varspec_"}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"ConstantTermSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`powerpolynomial", ",", 
                    "IntegerSequences`Private`factorpolynomial", ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "ListQ", "[", "IntegerSequences`Private`varspec", "]"}], 
                    ",", "IntegerSequences`Private`varspec", ",", 
                    RowBox[{"{", "IntegerSequences`Private`varspec", "}"}]}], 
                    "]"}]}], "]"}]}]}], "}"}]}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`automaton", "=", 
                    RowBox[{
                    "IntegerSequences`Private`ConstantTermSequenceAutomaton", 
                    "[", 
                    RowBox[{
                    "IntegerSequences`Private`sequence", ",", 
                    "IntegerSequences`Private`modulus", ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"{", "IntegerSequences`Private`options", "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"FlattenInputAlphabet", "\[Rule]", "_"}], ")"}], 
                    "\[Rule]", "Nothing"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "Method", "\[Rule]", "IntegerSequences`Private`method"}], 
                    ")"}], "\[Rule]", "Nothing"}]}], "}"}], ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}]}], "]"}]}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"\<\"Diagonal\"\>", "/;", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "IntegerSequences`Private`nsequence", "}"}], 
                    "]"}], "\[Equal]", "1"}]}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`sequence", "=", 
                    RowBox[{"DiagonalSequenceReduce", "[", 
                    RowBox[{
                    "IntegerSequences`Private`sequence", ",", 
                    "IntegerSequences`Private`nsequence"}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"IntegerSequences`Private`sequence", ",", 
                    RowBox[{
                    "_DiagonalSequence", "[", 
                    "IntegerSequences`Private`nsequence", "]"}]}], "]"}]}], 
                    ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"AutomaticSequenceReduce", "::", "method"}], 
                    "MessageName"], ",", 
                    RowBox[{
                    "IntegerSequences`Private`originalsequence", "[", 
                    "IntegerSequences`Private`nsequence", "]"}], ",", 
                    "IntegerSequences`Private`method"}], "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`originalsequence", ",", 
                    "_DiagonalSequence"}], "]"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`sequence", "=", 
                    RowBox[{"MapAt", "[", 
                    RowBox[{
                    RowBox[{
                    FractionBox[
                    RowBox[{"Numerator", "[", "#1", "]"}], 
                    RowBox[{"Factor", "[", 
                    RowBox[{"Denominator", "[", "#1", "]"}], "]"}]], "&"}], 
                    ",", "IntegerSequences`Private`sequence", ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}]}], "]"}]}]}], "]"}], ";", 
                    RowBox[{"IntegerSequences`Private`sequence", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{
                    "Head", "[", "IntegerSequences`Private`sequence", "]"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"DiagonalSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`rationalexpression_", ",", 
                    RowBox[{"IntegerSequences`Private`variables", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{
                    RowBox[{"{", "__List", "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Except", "[", "_List", "]"}], ".."}], "}"}]}], 
                    "]"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`sequenceoptions", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"DiagonalSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`rationalexpression", ",", 
                    RowBox[{"{", "IntegerSequences`Private`variables", "}"}], 
                    ",", "IntegerSequences`Private`sequenceoptions"}], 
                    "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"DiagonalSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`rationalexpression_", ",", 
                    RowBox[{"IntegerSequences`Private`variable", ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`sequenceoptions", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"DiagonalSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`rationalexpression", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", "IntegerSequences`Private`variable", "}"}], 
                    "}"}], ",", "IntegerSequences`Private`sequenceoptions"}], 
                    "]"}]}]}], "}"}]}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`automaton", "=", 
                    RowBox[{
                    "IntegerSequences`Private`DiagonalSequenceAutomaton", "[", 
                    RowBox[{
                    RowBox[{"MapAt", "[", 
                    RowBox[{
                    "IntegerSequences`Private`FragileTogether", ",", 
                    "IntegerSequences`Private`sequence", ",", "1"}], "]"}], 
                    ",", "IntegerSequences`Private`modulus", ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"{", "IntegerSequences`Private`options", "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "CompressStateNames", "\[Rule]", 
                    "IntegerSequences`Private`compressstatenames_"}], ")"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "TrueQ", "[", 
                    "IntegerSequences`Private`compressstatenames", "]"}], ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"AutomaticSequenceReduce", "::", "cmprss"}], 
                    "MessageName"], ",", "\<\"method Diagonal\"\>"}], "]"}]}],
                     "]"}], ";", "Nothing"}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "Method", "\[Rule]", "IntegerSequences`Private`method"}], 
                    ")"}], "\[Rule]", "Nothing"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Method", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\<\"Diagonal\"\>", ",", 
                    
                    RowBox[{"\<\"Degree\"\>", "\[Rule]", 
                    "IntegerSequences`Private`degree_"}]}], "}"}]}], ")"}], 
                    "\[RuleDelayed]", 
                    
                    RowBox[{"\<\"Degree\"\>", "\[Rule]", 
                    "IntegerSequences`Private`degree"}]}]}], "}"}], ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}]}], "]"}]}]}], ",", 
                    "\[IndentingNewLine]", "\<\"OrePolynomial\"\>", ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`sequence", "=", 
                    RowBox[{"AlgebraicSequenceReduce", "[", 
                    RowBox[{"IntegerSequences`Private`sequence", ",", 
                    RowBox[{
                    "{", "IntegerSequences`Private`nsequence", "}"}]}], 
                    "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"IntegerSequences`Private`sequence", ",", 
                    RowBox[{
                    RowBox[{"AlgebraicSequence", "[", 
                    RowBox[{"_SeriesRoot", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "[", 
                    "IntegerSequences`Private`nsequence", "]"}]}], "]"}]}], 
                    ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"AutomaticSequenceReduce", "::", "method"}], 
                    "MessageName"], ",", 
                    RowBox[{
                    "IntegerSequences`Private`originalsequence", "[", 
                    "IntegerSequences`Private`nsequence", "]"}], ",", 
                    "IntegerSequences`Private`method"}], "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ";", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{
                    "Head", "[", "IntegerSequences`Private`sequence", "]"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"AlgebraicSequence", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`seriesroot", ":", 
                    RowBox[{"SeriesRoot", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`f_Function", ",", 
                    "IntegerSequences`Private`root_"}], "}"}], ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`sequenceoptions", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ")"}], 
                    "?", 
                    "IntegerSequences`Private`\
SeriesRootAlgebraicSequenceObjectQ"}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`seriesvariables", "=", 
                    RowBox[{
                    "IntegerSequences`Private`SeriesVariables", "[", 
                    "IntegerSequences`Private`root", "]"}]}], ";", 
                    RowBox[{
                    "IntegerSequences`Private`polynomialfunction", "=", 
                    "IntegerSequences`Private`f"}], ";", 
                    RowBox[{"IntegerSequences`Private`sequence", "=", 
                    RowBox[{"AlgebraicSequence", "[", 
                    RowBox[{"IntegerSequences`Private`seriesroot", ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`sequenceoptions", ",", 
                    RowBox[{
                    "Modulus", "\[Rule]", 
                    "IntegerSequences`Private`modulus"}]}], "}"}], "]"}]}]}], 
                    "]"}]}]}], ")"}]}], ",", 
                    RowBox[{"_", "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"AutomaticSequenceReduce", "::", "method"}], 
                    "MessageName"], ",", 
                    RowBox[{
                    "IntegerSequences`Private`originalsequence", "[", 
                    "IntegerSequences`Private`nsequence", "]"}], ",", 
                    "IntegerSequences`Private`method"}], "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}], ")"}]}]}], "}"}]}],
                     "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"PolynomialQ", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`polynomialfunction", "[", 
                    "IntegerSequences`Private`y", "]"}], ",", 
                    RowBox[{"Append", "[", 
                    RowBox[{
                    "IntegerSequences`Private`seriesvariables", ",", 
                    "IntegerSequences`Private`y"}], "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"AutomaticSequenceReduce", "::", "method"}], 
                    "MessageName"], ",", 
                    RowBox[{
                    "IntegerSequences`Private`originalsequence", "[", 
                    "IntegerSequences`Private`nsequence", "]"}], ",", 
                    "IntegerSequences`Private`method"}], "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    RowBox[{"CoefficientRules", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`polynomialfunction", "[", 
                    "IntegerSequences`Private`y", "]"}], ",", 
                    RowBox[{"Append", "[", 
                    RowBox[{
                    "IntegerSequences`Private`seriesvariables", ",", 
                    "IntegerSequences`Private`y"}], "]"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_", "\[Rule]", "_Integer"}], ")"}], ".."}], 
                    "}"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"AutomaticSequenceReduce", "::", "coeffs"}], 
                    "MessageName"], ",", 
                    "IntegerSequences`Private`polynomialfunction"}], "]"}], 
                    ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ";", 
                    RowBox[{"Switch", "[", 
                    RowBox[{
                    RowBox[{"CoefficientRules", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`polynomialfunction", "[", 
                    "IntegerSequences`Private`y", "]"}], ",", 
                    "IntegerSequences`Private`y", ",", 
                    RowBox[{
                    "Modulus", "\[Rule]", 
                    "IntegerSequences`Private`modulus"}]}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"0", "\[Rule]", "_"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"AutomaticSequenceReduce", "::", "polymod"}], 
                    "MessageName"], ",", 
                    "IntegerSequences`Private`polynomialfunction", ",", 
                    "IntegerSequences`Private`modulus"}], "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", "_", "}"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"AutomaticSequenceReduce", "::", "polymod"}], 
                    "MessageName"], ",", 
                    "IntegerSequences`Private`polynomialfunction", ",", 
                    "IntegerSequences`Private`modulus"}], "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}], ",", 
                    "\[IndentingNewLine]", "_", ",", "Null"}], "]"}], ";", 
                    RowBox[{"IntegerSequences`Private`automaton", "=", 
                    RowBox[{
                    "IntegerSequences`Private`AlgebraicSequenceAutomaton", 
                    "[", 
                    RowBox[{"IntegerSequences`Private`sequence", ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"{", "IntegerSequences`Private`options", "}"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "Method", "\[Rule]", "IntegerSequences`Private`method"}], 
                    ")"}], "\[Rule]", "Nothing"}], ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`automaton", ",", 
                    "_IntegerSequences`Private`AlgebraicSequenceAutomaton"}], 
                    "]"}], ",", 
                    RowBox[{"Throw", "[", "True", "]"}]}], "]"}]}]}], "]"}], 
                    ";", "False"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "AutomaticSequence", "[", 
                    "IntegerSequences`Private`automaton", "]"}], "[", 
                    "IntegerSequences`Private`nsequence", "]"}], "/;", 
                    RowBox[{
                    RowBox[{"!", "IntegerSequences`Private`failed"}], "&&", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`automaton", ",", "_Automaton"}],
                     "]"}]}]}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"AutomaticSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"IntegerSequences`Private`originalsequence", ":", 
                    RowBox[{"AlgebraicSequence", "[", 
                    RowBox[{"SeriesRoot", "[", 
                    RowBox[{"_", ",", 
                    RowBox[{"Modulus", "\[Rule]", 
                    RowBox[{
                    "IntegerSequences`Private`modulus_", "?", 
                    "PrimePowerQ"}]}]}], "]"}], "]"}]}], ")"}], "[", 
                    "IntegerSequences`Private`nsequence__", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`nsequence__", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}], "}"}], 
                    ",", 
                    RowBox[{"IntegerSequences`Private`options", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`sequence", "=", 
                    RowBox[{"AutomaticSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{"Mod", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`originalsequence", "[", 
                    "IntegerSequences`Private`nsequence", "]"}], ",", 
                    "IntegerSequences`Private`modulus"}], "]"}], ",", 
                    RowBox[{"{", "IntegerSequences`Private`nsequence", "}"}], 
                    ",", "IntegerSequences`Private`options"}], "]"}]}], "}"}],
                     ",", 
                    RowBox[{"IntegerSequences`Private`sequence", "/;", 
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`sequence", ",", 
                    "_AutomaticSequenceReduce"}], "]"}]}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"AutomaticSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`sequence_AutomaticSequence", 
                    "[", "IntegerSequences`Private`n_", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`n_", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}], "}"}], 
                    ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
                    RowBox[{
                    "IntegerSequences`Private`sequence", "[", 
                    "IntegerSequences`Private`n", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"AutomaticSequenceReduce", "[", 
                    RowBox[{"IntegerSequences`Private`expression_", ",", 
                    RowBox[{
                    "IntegerSequences`Private`n_", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}], ",", 
                    RowBox[{"IntegerSequences`Private`options", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`sequence", "=", 
                    RowBox[{"AutomaticSequenceReduce", "[", 
                    RowBox[{"IntegerSequences`Private`expression", ",", 
                    RowBox[{"{", "IntegerSequences`Private`n", "}"}], ",", 
                    "IntegerSequences`Private`options"}], "]"}]}], "}"}], ",", 
                    RowBox[{"IntegerSequences`Private`sequence", "/;", 
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`sequence", ",", 
                    "_AutomaticSequenceReduce"}], "]"}]}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "AutomaticSequenceReduce", 
                    "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`AutomaticSequenceReduce] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Blank[], 
                    OptionsPattern[]}}}],
                    Editable->False]},
                  {
                   PaneSelectorBox[{True->
                    ButtonBox[
                    PaneSelectorBox[{False->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "DownPointerOpener"]]},
                    "RowWithSeparators"], True->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "DownPointerOpenerHot"]]},
                    "RowWithSeparators"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    BaseStyle->None,
                    
                    ButtonFunction:>(Part[System`InformationDump`open$$, 9] = 
                    False),
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->0,
                    Method->"Preemptive"], False->
                    ButtonBox[
                    PaneSelectorBox[{False->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "RightPointerOpener"]]},
                    "RowWithSeparators"], True->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "RightPointerOpenerHot"]]},
                    "RowWithSeparators"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    BaseStyle->None,
                    
                    ButtonFunction:>(Part[System`InformationDump`open$$, 9] = 
                    True),
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->0,
                    Method->"Preemptive"]}, Dynamic[
                    FEPrivate`Part[System`InformationDump`open$$, 9]]], 
                   PaneSelectorBox[{True->GridBox[{
                    {
                    RowBox[{"Compile", "\[Rule]", "True"}]},
                    {
                    RowBox[{"CompressStateNames", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"FlattenInputAlphabet", "\[Rule]", "True"}]},
                    {
                    RowBox[{"HashStateNames", "\[Rule]", "False"}]},
                    {
                    RowBox[{"Method", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"Minimize", "\[Rule]", "True"}]},
                    {
                    RowBox[{"Monitor", "\[Rule]", "False"}]},
                    {
                    RowBox[{"StateStorage", "\[Rule]", "\<\"Memory\"\>"}]},
                    {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"","\"\[InvisibleSpace]\"","8","\" total)\""},
                    "RowDefault"], "InformationRowOpener",
                    StripOnInput->False]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{1.}}}], False->
                    RowBox[{
                    RowBox[{"Compile", "\[Rule]", "True"}], "\[ThinSpace]", 
                    StyleBox["\<\"\[Ellipsis]\"\>", "InformationRowOpener",
                    StripOnInput->False], "\[ThinSpace]", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"","\"\[InvisibleSpace]\"","8","\" total)\""},
                    "RowDefault"], "InformationRowOpener",
                    StripOnInput->False]}]}, Dynamic[
                    FEPrivate`Part[System`InformationDump`open$$, 9]],
                    BaselinePosition->Baseline,
                    ImageSize->Automatic]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`AutomaticSequenceReduce\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomaticSequenceReduce\\\"\
, \\\"[\\\", RowBox[List[StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) attempts to reduce \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) to a single AutomaticSequence \
object as a function of \\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\).\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"AutomaticSequenceReduce\", \"[\", \
RowBox[List[StyleBox[\"expr\", \"TI\"], \",\", StyleBox[\"n\", \"TI\"]]], \"]\
\"]]\) attempts to reduce \!\(\*StyleBox[\"expr\", \"TI\"]\) to a single \
AutomaticSequence object as a function of \!\(\*StyleBox[\"n\", \"TI\"]\).", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`AutomaticSequenceReduce, {
      IntegerSequences`AutomaticSequenceReduce[
         Pattern[IntegerSequences`Private`expression, 
          Alternatives[IntegerSequences`BaumSweet, RudinShapiro, ThueMorse][
           Pattern[IntegerSequences`Private`n, 
            Blank[]]]], {
          PatternTest[
           Pattern[IntegerSequences`Private`n, 
            Blank[]], IntegerSequences`Private`PlausibleVariableQ]}, 
         OptionsPattern[]] :> 
       Replace[IntegerSequences`Private`expression, {
         IntegerSequences`BaumSweet[
            Pattern[IntegerSequences`Private`x, 
             Blank[]]] :> 
          IntegerSequences`AutomaticSequence[
           IntegerSequences`Private`$BaumSweetAutomaton][
           IntegerSequences`Private`x], RudinShapiro[
            Pattern[IntegerSequences`Private`x, 
             Blank[]]] :> 
          IntegerSequences`AutomaticSequence[
           IntegerSequences`Private`$RudinShapiroAutomaton][
           IntegerSequences`Private`x], ThueMorse[
            Pattern[IntegerSequences`Private`x, 
             Blank[]]] :> 
          IntegerSequences`AutomaticSequence[
           IntegerSequences`Private`$ThueMorseAutomaton][
           IntegerSequences`Private`x]}], Condition[
         IntegerSequences`AutomaticSequenceReduce[
          Mod[
           Pattern[IntegerSequences`Private`originalsequence, 
            Blank[]][
            Pattern[IntegerSequences`Private`nsequence, 
             BlankSequence[]]], 
           PatternTest[
            Pattern[IntegerSequences`Private`modulus, 
             Blank[]], PrimePowerQ]], {
           PatternTest[
            Pattern[IntegerSequences`Private`nsequence, 
             BlankSequence[]], IntegerSequences`Private`PlausibleVariableQ]}, 
          Pattern[IntegerSequences`Private`options, 
           OptionsPattern[]]], 
         Or[
          MatchQ[
           OptionValue[
           IntegerSequences`AutomaticSequenceReduce, {
            IntegerSequences`Private`options}, Method], 
           Alternatives[
           Automatic, "ConstantTerm", "Diagonal", {
            "Diagonal", "Degree" -> Alternatives["High", "Low"]}, 
            "OrePolynomial"]], Message[
            MessageName[IntegerSequences`AutomaticSequenceReduce, "bdmtd"], 
            OptionValue[
            IntegerSequences`AutomaticSequenceReduce, {
             IntegerSequences`Private`options}, Method]]; False]] :> 
       Module[{IntegerSequences`Private`method, 
          IntegerSequences`Private`sequence, 
          IntegerSequences`Private`polynomialfunction, 
          IntegerSequences`Private`automaton, 
          IntegerSequences`Private`seriesvariables, 
          IntegerSequences`Private`y, IntegerSequences`Private`failed}, 
         IntegerSequences`Private`failed = 
          Catch[IntegerSequences`Private`method = Switch[
               OptionValue[Method], 
               Condition["OrePolynomial", 
                Not[
                 PrimeQ[IntegerSequences`Private`modulus]]], Message[
                 MessageName[
                 IntegerSequences`AutomaticSequenceReduce, "oremod"]]; 
               Throw[True], 
               Alternatives[
                Condition[Automatic, 
                 And[
                  Not[
                   FreeQ[IntegerSequences`Private`originalsequence, 
                    Blank[IntegerSequences`AlgebraicSequence]]], 
                  FreeQ[IntegerSequences`Private`originalsequence, 
                   Alternatives[
                    Blank[IntegerSequences`ConstantTermSequence], 
                    Blank[IntegerSequences`DiagonalSequence]]], 
                  PrimeQ[IntegerSequences`Private`modulus]]], 
                "OrePolynomial"], "OrePolynomial", 
               Alternatives[
                Condition[Automatic, 
                 FreeQ[IntegerSequences`Private`originalsequence, 
                  Alternatives[
                   Blank[IntegerSequences`AlgebraicSequence], 
                   Blank[IntegerSequences`DiagonalSequence]]]], 
                "ConstantTerm"], "ConstantTerm", 
               Blank[], "Diagonal"]; 
            IntegerSequences`Private`sequence = 
             Replace[IntegerSequences`Private`originalsequence, Condition[
                 Pattern[IntegerSequences`Private`algebraicsequence, 
                  Blank[IntegerSequences`AlgebraicSequence]], 
                 Not[
                  MemberQ[
                  IntegerSequences`Private`algebraicsequence, Modulus -> 
                   Blank[]]]] :> 
               Append[IntegerSequences`Private`algebraicsequence, Modulus -> 
                 IntegerSequences`Private`modulus]][
              IntegerSequences`Private`nsequence]; 
            Switch[IntegerSequences`Private`method, 
              Condition[
              "ConstantTerm", Length[{IntegerSequences`Private`nsequence}] == 
               1], IntegerSequences`Private`sequence = 
               IntegerSequences`ConstantTermSequenceReduce[
                IntegerSequences`Private`sequence, 
                 IntegerSequences`Private`nsequence]; If[
                Not[
                 MatchQ[IntegerSequences`Private`sequence, 
                  Blank[IntegerSequences`ConstantTermSequence][
                  IntegerSequences`Private`nsequence]]], Message[
                  MessageName[
                  IntegerSequences`AutomaticSequenceReduce, "method"], 
                  IntegerSequences`Private`originalsequence[
                  IntegerSequences`Private`nsequence], 
                  IntegerSequences`Private`method]; Throw[True]]; 
              IntegerSequences`Private`sequence = Replace[
                 Head[IntegerSequences`Private`sequence], {
                 IntegerSequences`ConstantTermSequence[
                    Pattern[IntegerSequences`Private`powerpolynomial, 
                    Blank[]], 
                    Pattern[IntegerSequences`Private`varspec, 
                    Blank[]]] :> 
                  IntegerSequences`ConstantTermSequence[
                   IntegerSequences`Private`powerpolynomial, 1, 
                    If[
                    ListQ[IntegerSequences`Private`varspec], 
                    IntegerSequences`Private`varspec, {
                    IntegerSequences`Private`varspec}]], 
                  IntegerSequences`ConstantTermSequence[
                    Pattern[IntegerSequences`Private`powerpolynomial, 
                    Blank[]], 
                    Pattern[IntegerSequences`Private`factorpolynomial, 
                    Blank[]], 
                    Pattern[IntegerSequences`Private`varspec, 
                    Blank[]]] :> 
                  IntegerSequences`ConstantTermSequence[
                   IntegerSequences`Private`powerpolynomial, 
                    IntegerSequences`Private`factorpolynomial, 
                    If[
                    ListQ[IntegerSequences`Private`varspec], 
                    IntegerSequences`Private`varspec, {
                    IntegerSequences`Private`varspec}]]}]; 
              IntegerSequences`Private`automaton = 
               IntegerSequences`Private`ConstantTermSequenceAutomaton[
                IntegerSequences`Private`sequence, 
                 IntegerSequences`Private`modulus, 
                 Apply[Sequence, 
                  
                  Replace[{
                   IntegerSequences`Private`options}, {(
                    IntegerSequences`FlattenInputAlphabet -> Blank[]) -> 
                    Nothing, (Method -> IntegerSequences`Private`method) -> 
                    Nothing}, {1}]]], 
              Condition[
              "Diagonal", Length[{IntegerSequences`Private`nsequence}] == 1], 
              IntegerSequences`Private`sequence = 
               IntegerSequences`DiagonalSequenceReduce[
                IntegerSequences`Private`sequence, 
                 IntegerSequences`Private`nsequence]; If[
                Not[
                 MatchQ[IntegerSequences`Private`sequence, 
                  Blank[IntegerSequences`DiagonalSequence][
                  IntegerSequences`Private`nsequence]]], Message[
                  MessageName[
                  IntegerSequences`AutomaticSequenceReduce, "method"], 
                  IntegerSequences`Private`originalsequence[
                  IntegerSequences`Private`nsequence], 
                  IntegerSequences`Private`method]; Throw[True]]; If[
                Not[
                 MatchQ[IntegerSequences`Private`originalsequence, 
                  Blank[IntegerSequences`DiagonalSequence]]], 
                IntegerSequences`Private`sequence = MapAt[Numerator[#]/Factor[
                   Denominator[#]]& , IntegerSequences`Private`sequence, {0, 
                  1}]]; IntegerSequences`Private`sequence = Replace[
                 Head[IntegerSequences`Private`sequence], {
                 IntegerSequences`DiagonalSequence[
                    Pattern[IntegerSequences`Private`rationalexpression, 
                    Blank[]], 
                    Pattern[IntegerSequences`Private`variables, 
                    Except[{
                    BlankSequence[List]}, {
                    Repeated[
                    Except[
                    Blank[List]]]}]], 
                    Pattern[IntegerSequences`Private`sequenceoptions, 
                    OptionsPattern[]]] :> 
                  IntegerSequences`DiagonalSequence[
                   IntegerSequences`Private`rationalexpression, {
                    IntegerSequences`Private`variables}, 
                    IntegerSequences`Private`sequenceoptions], 
                  IntegerSequences`DiagonalSequence[
                    Pattern[IntegerSequences`Private`rationalexpression, 
                    Blank[]], 
                    Pattern[IntegerSequences`Private`variable, 
                    Except[
                    Blank[List]]], 
                    Pattern[IntegerSequences`Private`sequenceoptions, 
                    OptionsPattern[]]] :> 
                  IntegerSequences`DiagonalSequence[
                   IntegerSequences`Private`rationalexpression, {{
                    IntegerSequences`Private`variable}}, 
                    IntegerSequences`Private`sequenceoptions]}]; 
              IntegerSequences`Private`automaton = 
               IntegerSequences`Private`DiagonalSequenceAutomaton[
                 MapAt[
                 IntegerSequences`Private`FragileTogether, 
                  IntegerSequences`Private`sequence, 1], 
                 IntegerSequences`Private`modulus, 
                 Apply[Sequence, 
                  
                  Replace[{
                   IntegerSequences`Private`options}, {(
                    IntegerSequences`CompressStateNames -> 
                    Pattern[IntegerSequences`Private`compressstatenames, 
                    Blank[]]) :> (If[
                    TrueQ[IntegerSequences`Private`compressstatenames], 
                    Message[
                    MessageName[
                    IntegerSequences`AutomaticSequenceReduce, "cmprss"], 
                    "method Diagonal"]]; Nothing), (Method -> 
                    IntegerSequences`Private`method) -> 
                    Nothing, (
                    Method -> {
                    "Diagonal", "Degree" -> 
                    Pattern[IntegerSequences`Private`degree, 
                    Blank[]]}) :> ("Degree" -> 
                    IntegerSequences`Private`degree)}, {1}]]], 
              "OrePolynomial", 
              IntegerSequences`Private`sequence = 
               IntegerSequences`AlgebraicSequenceReduce[
                IntegerSequences`Private`sequence, {
                 IntegerSequences`Private`nsequence}]; If[
                Not[
                 MatchQ[IntegerSequences`Private`sequence, 
                  IntegerSequences`AlgebraicSequence[
                   Blank[IntegerSequences`SeriesRoot], 
                   OptionsPattern[]][IntegerSequences`Private`nsequence]]], 
                Message[
                  MessageName[
                  IntegerSequences`AutomaticSequenceReduce, "method"], 
                  IntegerSequences`Private`originalsequence[
                  IntegerSequences`Private`nsequence], 
                  IntegerSequences`Private`method]; Throw[True]]; Replace[
                Head[IntegerSequences`Private`sequence], {PatternTest[
                   IntegerSequences`AlgebraicSequence[
                    Pattern[IntegerSequences`Private`seriesroot, 
                    IntegerSequences`SeriesRoot[{
                    Pattern[IntegerSequences`Private`f, 
                    Blank[Function]], 
                    Pattern[IntegerSequences`Private`root, 
                    Blank[]]}, 
                    OptionsPattern[]]], 
                    Pattern[IntegerSequences`Private`sequenceoptions, 
                    OptionsPattern[]]], 
                   IntegerSequences`Private`\
SeriesRootAlgebraicSequenceObjectQ] :> (
                  IntegerSequences`Private`seriesvariables = 
                   IntegerSequences`Private`SeriesVariables[
                    IntegerSequences`Private`root]; 
                  IntegerSequences`Private`polynomialfunction = 
                   IntegerSequences`Private`f; 
                  IntegerSequences`Private`sequence = 
                   IntegerSequences`AlgebraicSequence[
                    IntegerSequences`Private`seriesroot, 
                    Apply[Sequence, 
                    
                    DeleteDuplicates[{
                    IntegerSequences`Private`sequenceoptions, Modulus -> 
                    IntegerSequences`Private`modulus}]]]), Blank[] :> (Message[
                    MessageName[
                    IntegerSequences`AutomaticSequenceReduce, "method"], 
                    IntegerSequences`Private`originalsequence[
                    IntegerSequences`Private`nsequence], 
                    IntegerSequences`Private`method]; Throw[True])}]; If[
                Not[
                 PolynomialQ[
                  IntegerSequences`Private`polynomialfunction[
                  IntegerSequences`Private`y], 
                  Append[
                  IntegerSequences`Private`seriesvariables, 
                   IntegerSequences`Private`y]]], Message[
                  MessageName[
                  IntegerSequences`AutomaticSequenceReduce, "method"], 
                  IntegerSequences`Private`originalsequence[
                  IntegerSequences`Private`nsequence], 
                  IntegerSequences`Private`method]; Throw[True]]; If[
                Not[
                 MatchQ[
                  CoefficientRules[
                   IntegerSequences`Private`polynomialfunction[
                   IntegerSequences`Private`y], 
                   Append[
                   IntegerSequences`Private`seriesvariables, 
                    IntegerSequences`Private`y]], {
                   Repeated[Blank[] -> Blank[Integer]]}]], Message[
                  MessageName[
                  IntegerSequences`AutomaticSequenceReduce, "coeffs"], 
                  IntegerSequences`Private`polynomialfunction]; Throw[True]]; 
              Switch[
                CoefficientRules[
                 IntegerSequences`Private`polynomialfunction[
                 IntegerSequences`Private`y], IntegerSequences`Private`y, 
                 Modulus -> IntegerSequences`Private`modulus], {0 -> Blank[]},
                 Message[
                  MessageName[
                  IntegerSequences`AutomaticSequenceReduce, "polymod"], 
                  IntegerSequences`Private`polynomialfunction, 
                  IntegerSequences`Private`modulus]; Throw[True], {
                 Blank[]}, Message[
                  MessageName[
                  IntegerSequences`AutomaticSequenceReduce, "polymod"], 
                  IntegerSequences`Private`polynomialfunction, 
                  IntegerSequences`Private`modulus]; Throw[True], 
                Blank[], Null]; 
              IntegerSequences`Private`automaton = 
               IntegerSequences`Private`AlgebraicSequenceAutomaton[
                IntegerSequences`Private`sequence, 
                 Apply[Sequence, 
                  
                  Replace[{
                   IntegerSequences`Private`options}, (Method -> 
                    IntegerSequences`Private`method) -> Nothing, {1}]]]; If[
                MatchQ[IntegerSequences`Private`automaton, 
                 Blank[IntegerSequences`Private`AlgebraicSequenceAutomaton]], 
                Throw[True]]]; False]; Condition[
           IntegerSequences`AutomaticSequence[
           IntegerSequences`Private`automaton][
           IntegerSequences`Private`nsequence], 
           And[
            Not[IntegerSequences`Private`failed], 
            MatchQ[IntegerSequences`Private`automaton, 
             Blank[IntegerSequences`Automaton]]]]], 
       IntegerSequences`AutomaticSequenceReduce[
         Pattern[IntegerSequences`Private`originalsequence, 
          IntegerSequences`AlgebraicSequence[
           IntegerSequences`SeriesRoot[
            Blank[], Modulus -> PatternTest[
              Pattern[IntegerSequences`Private`modulus, 
               Blank[]], PrimePowerQ]]]][
          Pattern[IntegerSequences`Private`nsequence, 
           BlankSequence[]]], {
          PatternTest[
           Pattern[IntegerSequences`Private`nsequence, 
            BlankSequence[]], IntegerSequences`Private`PlausibleVariableQ]}, 
         Pattern[IntegerSequences`Private`options, 
          OptionsPattern[]]] :> 
       With[{IntegerSequences`Private`sequence = 
          IntegerSequences`AutomaticSequenceReduce[
            Mod[
             IntegerSequences`Private`originalsequence[
             IntegerSequences`Private`nsequence], 
             IntegerSequences`Private`modulus], {
            IntegerSequences`Private`nsequence}, 
            IntegerSequences`Private`options]}, 
         Condition[IntegerSequences`Private`sequence, 
          Not[
           MatchQ[IntegerSequences`Private`sequence, 
            Blank[IntegerSequences`AutomaticSequenceReduce]]]]], 
       IntegerSequences`AutomaticSequenceReduce[
         Pattern[IntegerSequences`Private`sequence, 
          Blank[IntegerSequences`AutomaticSequence]][
          Pattern[IntegerSequences`Private`n, 
           Blank[]]], {
          PatternTest[
           Pattern[IntegerSequences`Private`n, 
            Blank[]], IntegerSequences`Private`PlausibleVariableQ]}, 
         OptionsPattern[]] :> 
       IntegerSequences`Private`sequence[IntegerSequences`Private`n], 
       IntegerSequences`AutomaticSequenceReduce[
         Pattern[IntegerSequences`Private`expression, 
          Blank[]], 
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[]], IntegerSequences`Private`PlausibleVariableQ], 
         Pattern[IntegerSequences`Private`options, 
          OptionsPattern[]]] :> 
       With[{IntegerSequences`Private`sequence = 
          IntegerSequences`AutomaticSequenceReduce[
           IntegerSequences`Private`expression, {IntegerSequences`Private`n}, 
            IntegerSequences`Private`options]}, 
         Condition[IntegerSequences`Private`sequence, 
          Not[
           MatchQ[IntegerSequences`Private`sequence, 
            Blank[IntegerSequences`AutomaticSequenceReduce]]]]]}], 
    "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`AutomaticSequenceReduce, {
      SyntaxInformation[IntegerSequences`AutomaticSequenceReduce] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           Blank[], 
           OptionsPattern[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {
     Compile -> True, IntegerSequences`CompressStateNames -> Automatic, 
      IntegerSequences`FlattenInputAlphabet -> True, 
      IntegerSequences`HashStateNames -> False, Method -> Automatic, Minimize -> 
      True, Monitor -> False, IntegerSequences`StateStorage -> "Memory"}, 
    "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`AutomaticSequenceReduce"], False]]], "Output",Expression\
UUID->"a2fa24c3-1a6f-41f2-a63b-a79c79190feb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomaticSequenceReduce", "[", 
  RowBox[{
   RowBox[{"ThueMorse", "[", "n", "]"}], ",", "n"}], "]"}]], "Input",Expressio\
nUUID->"aa2251ce-5f75-4640-a637-c4f09d00206e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AutomaticSequence", "[", 
   RowBox[{"Automaton", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "1"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "1"}], ",", "1"}], "}"}]}], "}"}], ",", "1", 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "0"}], ",", 
       RowBox[{"2", "\[Rule]", "1"}]}], "}"}]}], "]"}], "]"}], "[", "n", 
  "]"}]], "Output",ExpressionUUID->"f6d73759-f954-4882-acef-f77490b1deed"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomaticSequenceReduce", "[", 
  RowBox[{
   RowBox[{"RudinShapiro", "[", "n", "]"}], ",", "n"}], "]"}]], "Input",Expres\
sionUUID->"751c371a-01e1-42b5-aa57-c8e2e492b73d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AutomaticSequence", "[", 
   RowBox[{"Automaton", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "1"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "1"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "3"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"3", "\[Rule]", "4"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"3", "\[Rule]", "2"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "4"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "3"}], ",", "1"}], "}"}]}], "}"}], ",", "1", 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "1"}], ",", 
       RowBox[{"2", "\[Rule]", "1"}], ",", 
       RowBox[{"3", "\[Rule]", 
        RowBox[{"-", "1"}]}], ",", 
       RowBox[{"4", "\[Rule]", 
        RowBox[{"-", "1"}]}]}], "}"}]}], "]"}], "]"}], "[", "n", 
  "]"}]], "Output",ExpressionUUID->"adf09458-6b74-47c8-9abc-e63e7d89c7dc"]
}, Open  ]],

Cell["\<\
Write an integer sequence modulo a prime power as an automatic sequence, and \
visualize the automaton as a graph:\
\>", "Text",ExpressionUUID->"c97ae51f-1073-4366-9ace-5a67493bf8d3"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"AutomaticSequenceReduce", "[", 
  RowBox[{
   RowBox[{"Mod", "[", 
    RowBox[{
     RowBox[{"CatalanNumber", "[", "n", "]"}], ",", "4"}], "]"}], ",", "n"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"AutomatonGraph", "[", 
  RowBox[{"AutomaticSequenceAutomaton", "[", "%", "]"}], "]"}]}], "Input",Expr\
essionUUID->"6eae7cfa-3d82-4ccc-b015-4b8b904a47ee"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AutomaticSequence", "[", 
   RowBox[{"Automaton", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "1"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "3"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"3", "\[Rule]", "3"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"3", "\[Rule]", "4"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "4"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "4"}], ",", "1"}], "}"}]}], "}"}], ",", "1", 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "1"}], ",", 
       RowBox[{"2", "\[Rule]", "1"}], ",", 
       RowBox[{"3", "\[Rule]", "2"}], ",", 
       RowBox[{"4", "\[Rule]", "0"}]}], "}"}], ",", 
     RowBox[{"InputAlphabet", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}], "]"}], "[", "n", 
  "]"}]], "Output",ExpressionUUID->"167d908d-95bb-45c2-8850-d5da8ebddcaa"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{Null, 
       Interpretation[1, 1], 
       Interpretation[1, 2], 
       Interpretation[2, 3], 
       Interpretation[0, 4]}, {{{1, 2}, {2, 3}, {2, 2}, {3, 3}, {3, 4}, {4, 
       4}, {4, 5}, {5, 5}}, Null}, {EdgeLabels -> {DirectedEdge[
           Interpretation[1, 2], 
           Interpretation[1, 2]] -> 0, DirectedEdge[
           Interpretation[0, 4], 
           Interpretation[0, 4]] -> Row[{0, ",", 1}], DirectedEdge[
           Interpretation[1, 2], 
           Interpretation[2, 3]] -> 1, DirectedEdge[
           Interpretation[1, 1], 
           Interpretation[1, 2]] -> 0, DirectedEdge[
           Interpretation[1, 1], 
           Interpretation[1, 1]] -> 1, DirectedEdge[
           Interpretation[2, 3], 
           Interpretation[2, 3]] -> 0, DirectedEdge[
           Interpretation[2, 3], 
           Interpretation[0, 4]] -> 1}, 
       EdgeShapeFunction -> {{
         "CorporateShortCarvedArrow", "ArrowSize" -> 0.04, "ArrowPositions" -> 
          1}}, EdgeStyle -> {
         Directive[
          GrayLevel[0.5], 
          Opacity[1]]}, PerformanceGoal -> "Quality", 
       VertexLabels -> {Interpretation[1, 1] -> Placed[
           Interpretation[1, 1], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[1, 2] -> Placed[
           Interpretation[1, 2], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[2, 3] -> Placed[
           Interpretation[2, 3], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[0, 4] -> Placed[
           Interpretation[0, 4], {
            Rational[1, 2], 
            Rational[1, 2]}], Null -> Placed[Null, {
            Rational[1, 2], 
            Rational[1, 2]}]}, 
       VertexShapeFunction -> {
        Interpretation[1, 2] -> "Circle", Interpretation[0, 4] -> "Circle", 
         Interpretation[1, 1] -> "Circle", Null -> None, Interpretation[2, 3] -> 
         "Circle"}, VertexSize -> {0.2}, VertexStyle -> {
         Hue[0.6, 0.3, 0.8]}}]], Typeset`boxes, Typeset`boxes$s2d = 
    GraphicsGroupBox[{{
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], 
       Directive[
        GrayLevel[0.5], 
        Opacity[1]], {
        Arrowheads[{{0.04, 1, {
            GraphicsBox[
             
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
               0, 1, 0}}}, {{{-0.12347775660674376`, 
               0.}, {-0.5614144091900695, 
               0.21895451909535257`}, {-0.4738215557948804, 
               0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
               0.}}}]], 0.533327810340424}}}], 
        ArrowBox[{
          DynamicLocation["VertexID$1", Automatic, Center], 
          DynamicLocation["VertexID$2", Automatic, Center]}]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$2", Automatic, Center], {
             1.2155615932255868`, -0.142531237988}, {
             1.2338558717479595`, -0.32493768720862665`}, {
             1.1698636125054835`, -0.4310569329771424}, {
             0.8301363874945166, -0.43105693297714254`}, {
             0.7661441282520404, -0.32493768720862665`}, {
             0.7844384067744133, -0.142531237988}, 
             DynamicLocation["VertexID$2", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$2"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$2", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$3"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$3", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             2.2155615932255865`, -0.1425312379880001}, {
             2.2338558717479597`, -0.32493768720862676`}, {
             2.1698636125054835`, -0.43105693297714254`}, {
             1.8301363874945167`, -0.43105693297714265`}, {
             1.7661441282520405`, -0.32493768720862676`}, {
             1.7844384067744132`, -0.1425312379880001}, 
             DynamicLocation["VertexID$3", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$4"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$4", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$3", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$5"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$5", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$4", Automatic, Center], {
             3.2155615932255865`, -0.14253123798800038`}, {
             3.2338558717479597`, -0.32493768720862704`}, {
             3.1698636125054835`, -0.43105693297714276`}, {
             2.8301363874945165`, -0.43105693297714287`}, {
             2.7661441282520403`, -0.32493768720862704`}, {
             2.7844384067744135`, -0.14253123798800038`}, 
             DynamicLocation["VertexID$4", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$6"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$6", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$4", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$7"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$7", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$5", Automatic, Center], {
             4.08847925546776, 0.1907835323853024}, {4.287357733005351, 
             0.24717977484589673`}, {4.414528357479808, 0.1882226960710236}, {
             4.414528357479809, -0.18822269607102265`}, {
             4.287357733005352, -0.2471797748458961}, {
             4.08847925546776, -0.19078353238530207`}, 
             DynamicLocation["VertexID$5", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$8"], 
        InsetBox[
         FormBox[
          TemplateBox[{"0", "\",\"", "1"}, "RowDefault"], TraditionalForm], 
         DynamicLocation["EdgeLabelID$8", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       Hue[0.6, 0.3, 0.8], 
       TagBox[{
         TagBox[
          StyleBox[
           CircleBox[{0., 7.347880794884119*^-16}, {0.1, 0.1}], ShowContents -> 
           False, StripOnInput -> False], "DynamicName", BoxID -> 
          "VertexID$1"], 
         InsetBox["", 
          Dynamic[
          DynamicLocation[
            "VertexID$1", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$1", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$1", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          DiskBox[{1., 6.123233995736766*^-16}, {0.1, 0.1}], "DynamicName", 
          BoxID -> "VertexID$2"], 
         InsetBox[
          FormBox[
           InterpretationBox["1", 1], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$2", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$2", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$2", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$2"], 
       TagBox[{
         TagBox[
          DiskBox[{2., 4.898587196589413*^-16}, {0.1, 0.1}], "DynamicName", 
          BoxID -> "VertexID$3"], 
         InsetBox[
          FormBox[
           InterpretationBox["1", 2], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$3", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$3", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$3", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$3"], 
       TagBox[{
         TagBox[
          DiskBox[{3., 2.4492935982947064`*^-16}, {0.1, 0.1}], "DynamicName", 
          BoxID -> "VertexID$4"], 
         InsetBox[
          FormBox[
           InterpretationBox["2", 3], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$4", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$4", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$4", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$4"], 
       TagBox[{
         TagBox[
          DiskBox[{4., 0.}, {0.1, 0.1}], "DynamicName", BoxID -> 
          "VertexID$5"], 
         InsetBox[
          FormBox[
           InterpretationBox["0", 4], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$5", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$5", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$5", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$5"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{3.9406933090100917`, 
       356.2136807639442}, {-32.239306690989906`, 26.901768152886632`}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",ExpressionUUID->"cc38e18a-6b8f-40f0-af52-\
e7cbf76cf66d"]
}, Open  ]],

Cell[TextData[{
 "Specify ",
 StyleBox["Monitor->True", "Input"],
 " to display progress information:"
}], "Text",ExpressionUUID->"21fc87b6-bc41-4822-8a88-e3ee0cc1e05a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomaticSequenceReduce", "[", 
  RowBox[{
   RowBox[{"Mod", "[", 
    RowBox[{
     RowBox[{"CatalanNumber", "[", "n", "]"}], ",", "8"}], "]"}], ",", "n", 
   ",", 
   RowBox[{"Monitor", "\[Rule]", "True"}]}], "]"}]], "Input",ExpressionUUID->\
"24e23a3f-15e3-45b6-9771-32bca320c9ff"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AutomaticSequence", "[", 
   RowBox[{"Automaton", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "3"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "4"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "5"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"3", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"3", "\[Rule]", "6"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "4"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "7"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"5", "\[Rule]", "5"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"5", "\[Rule]", "8"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"6", "\[Rule]", "9"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"6", "\[Rule]", "6"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"9", "\[Rule]", "10"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"9", "\[Rule]", "5"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"10", "\[Rule]", "10"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"10", "\[Rule]", "7"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"7", "\[Rule]", "7"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"7", "\[Rule]", "8"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"8", "\[Rule]", "8"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"8", "\[Rule]", "11"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"11", "\[Rule]", "11"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"11", "\[Rule]", "11"}], ",", "1"}], "}"}]}], "}"}], ",", 
     "1", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "1"}], ",", 
       RowBox[{"2", "\[Rule]", "1"}], ",", 
       RowBox[{"3", "\[Rule]", "1"}], ",", 
       RowBox[{"4", "\[Rule]", "1"}], ",", 
       RowBox[{"5", "\[Rule]", "2"}], ",", 
       RowBox[{"6", "\[Rule]", "5"}], ",", 
       RowBox[{"7", "\[Rule]", "6"}], ",", 
       RowBox[{"8", "\[Rule]", "4"}], ",", 
       RowBox[{"9", "\[Rule]", "5"}], ",", 
       RowBox[{"10", "\[Rule]", "5"}], ",", 
       RowBox[{"11", "\[Rule]", "0"}]}], "}"}], ",", 
     RowBox[{"InputAlphabet", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}], "]"}], "[", "n", 
  "]"}]], "Output",ExpressionUUID->"65f3507d-59fe-4d55-b2eb-c054fe7b64af"]
}, Open  ]],

Cell["\<\
Write an algebraic sequence modulo a prime power as an automatic sequence:\
\>", "Text",ExpressionUUID->"c47ba610-c342-422d-a093-fa3b0134f04d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"AutomaticSequenceReduce", "[", 
  RowBox[{
   RowBox[{"Mod", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"AlgebraicSequence", "[", 
       RowBox[{"SeriesRoot", "[", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Function", "[", 
           RowBox[{"y", ",", 
            RowBox[{
             RowBox[{
              SuperscriptBox["x", "2"], " ", 
              SuperscriptBox["y", "2"]}], "+", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"x", "-", "1"}], ")"}], " ", "y"}], "+", "1"}]}], 
           "]"}], ",", 
          InterpretationBox[
           SuperscriptBox[
            RowBox[{"O", "[", "x", "]"}], "0"],
           SeriesData[x, 0, {}, 0, 0, 1],
           Editable->False]}], "}"}], "]"}], "]"}], "[", "n", "]"}], ",", 
     "4"}], "]"}], ",", "n"}], "]"}], "\n", 
 RowBox[{"AutomatonGraph", "[", 
  RowBox[{
   RowBox[{"AutomaticSequenceAutomaton", "[", "%", "]"}], ",", 
   RowBox[{"VertexSize", "\[Rule]", "0.5"}]}], "]"}]}], "Input",ExpressionUUID\
->"109bf8a6-c3fb-4510-945d-814db424f78c"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AutomaticSequence", "[", 
   RowBox[{"Automaton", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "3"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "5"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "5"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "4"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "6"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"3", "\[Rule]", "4"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"3", "\[Rule]", "7"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"5", "\[Rule]", "5"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"5", "\[Rule]", "8"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"6", "\[Rule]", "9"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"6", "\[Rule]", "10"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"9", "\[Rule]", "11"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"9", "\[Rule]", "12"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"11", "\[Rule]", "11"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"11", "\[Rule]", "11"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"7", "\[Rule]", "13"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"7", "\[Rule]", "14"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"13", "\[Rule]", "12"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"13", "\[Rule]", "11"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"12", "\[Rule]", "12"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"12", "\[Rule]", "12"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"10", "\[Rule]", "15"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"10", "\[Rule]", "6"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"14", "\[Rule]", "15"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"14", "\[Rule]", "7"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"8", "\[Rule]", "8"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"8", "\[Rule]", "5"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"15", "\[Rule]", "8"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"15", "\[Rule]", "8"}], ",", "1"}], "}"}]}], "}"}], ",", "1",
      ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "1"}], ",", 
       RowBox[{"2", "\[Rule]", "1"}], ",", 
       RowBox[{"3", "\[Rule]", "1"}], ",", 
       RowBox[{"4", "\[Rule]", "1"}], ",", 
       RowBox[{"5", "\[Rule]", "1"}], ",", 
       RowBox[{"6", "\[Rule]", "2"}], ",", 
       RowBox[{"7", "\[Rule]", "0"}], ",", 
       RowBox[{"8", "\[Rule]", "3"}], ",", 
       RowBox[{"9", "\[Rule]", "2"}], ",", 
       RowBox[{"10", "\[Rule]", "3"}], ",", 
       RowBox[{"11", "\[Rule]", "2"}], ",", 
       RowBox[{"12", "\[Rule]", "0"}], ",", 
       RowBox[{"13", "\[Rule]", "0"}], ",", 
       RowBox[{"14", "\[Rule]", "3"}], ",", 
       RowBox[{"15", "\[Rule]", "3"}]}], "}"}], ",", 
     RowBox[{"InputAlphabet", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}], "]"}], "[", "n", 
  "]"}]], "Output",ExpressionUUID->"b2e6749a-60d0-4106-8269-0182ff7fb4b7"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{Null, 
       Interpretation[1, 1], 
       Interpretation[1, 2], 
       Interpretation[1, 3], 
       Interpretation[1, 4], 
       Interpretation[1, 5], 
       Interpretation[2, 6], 
       Interpretation[0, 7], 
       Interpretation[3, 8], 
       Interpretation[2, 9], 
       Interpretation[3, 10], 
       Interpretation[2, 11], 
       Interpretation[0, 12], 
       Interpretation[0, 13], 
       Interpretation[3, 14], 
       Interpretation[3, 15]}, {{{1, 2}, {2, 3}, {2, 4}, {5, 6}, {3, 5}, {3, 
       7}, {4, 5}, {4, 8}, {6, 6}, {6, 9}, {7, 10}, {7, 11}, {10, 12}, {10, 
       13}, {12, 12}, {8, 14}, {8, 15}, {14, 13}, {14, 12}, {13, 13}, {11, 
       16}, {11, 7}, {15, 16}, {15, 8}, {9, 9}, {9, 6}, {16, 9}}, Null}, {
      EdgeLabels -> {DirectedEdge[
           Interpretation[2, 9], 
           Interpretation[2, 11]] -> 0, DirectedEdge[
           Interpretation[3, 15], 
           Interpretation[3, 8]] -> Row[{0, ",", 1}], DirectedEdge[
           Interpretation[3, 10], 
           Interpretation[3, 15]] -> 0, DirectedEdge[
           Interpretation[3, 14], 
           Interpretation[0, 7]] -> 1, DirectedEdge[
           Interpretation[1, 2], 
           Interpretation[2, 6]] -> 1, DirectedEdge[
           Interpretation[0, 13], 
           Interpretation[0, 12]] -> 0, DirectedEdge[
           Interpretation[3, 10], 
           Interpretation[2, 6]] -> 1, DirectedEdge[
           Interpretation[1, 3], 
           Interpretation[0, 7]] -> 1, DirectedEdge[
           Interpretation[1, 5], 
           Interpretation[1, 5]] -> 0, DirectedEdge[
           Interpretation[0, 12], 
           Interpretation[0, 12]] -> Row[{0, ",", 1}], DirectedEdge[
           Interpretation[1, 1], 
           Interpretation[1, 2]] -> 0, DirectedEdge[
           Interpretation[3, 8], 
           Interpretation[1, 5]] -> 1, DirectedEdge[
           Interpretation[0, 13], 
           Interpretation[2, 11]] -> 1, DirectedEdge[
           Interpretation[1, 1], 
           Interpretation[1, 3]] -> 1, DirectedEdge[
           Interpretation[1, 2], 
           Interpretation[1, 4]] -> 0, DirectedEdge[
           Interpretation[2, 6], 
           Interpretation[3, 10]] -> 1, DirectedEdge[
           Interpretation[2, 6], 
           Interpretation[2, 9]] -> 0, DirectedEdge[
           Interpretation[1, 3], 
           Interpretation[1, 4]] -> 0, DirectedEdge[
           Interpretation[1, 5], 
           Interpretation[3, 8]] -> 1, DirectedEdge[
           Interpretation[1, 4], 
           Interpretation[1, 5]] -> Row[{0, ",", 1}], DirectedEdge[
           Interpretation[2, 9], 
           Interpretation[0, 12]] -> 1, DirectedEdge[
           Interpretation[3, 8], 
           Interpretation[3, 8]] -> 0, DirectedEdge[
           Interpretation[0, 7], 
           Interpretation[3, 14]] -> 1, DirectedEdge[
           Interpretation[2, 11], 
           Interpretation[2, 11]] -> Row[{0, ",", 1}], DirectedEdge[
           Interpretation[3, 14], 
           Interpretation[3, 15]] -> 0, DirectedEdge[
           Interpretation[0, 7], 
           Interpretation[0, 13]] -> 0}, 
       EdgeShapeFunction -> {{
         "CorporateShortCarvedArrow", "ArrowSize" -> 0.04, "ArrowPositions" -> 
          1}}, EdgeStyle -> {
         Directive[
          GrayLevel[0.5], 
          Opacity[1]]}, PerformanceGoal -> "Quality", 
       VertexLabels -> {Interpretation[3, 10] -> Placed[
           Interpretation[3, 10], {
            Rational[1, 2], 
            Rational[1, 2]}], Null -> Placed[Null, {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[0, 7] -> Placed[
           Interpretation[0, 7], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[0, 13] -> Placed[
           Interpretation[0, 13], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[1, 3] -> Placed[
           Interpretation[1, 3], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[3, 15] -> Placed[
           Interpretation[3, 15], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[2, 9] -> Placed[
           Interpretation[2, 9], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[3, 14] -> Placed[
           Interpretation[3, 14], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[1, 1] -> Placed[
           Interpretation[1, 1], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[1, 5] -> Placed[
           Interpretation[1, 5], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[0, 12] -> Placed[
           Interpretation[0, 12], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[1, 2] -> Placed[
           Interpretation[1, 2], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[2, 11] -> Placed[
           Interpretation[2, 11], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[2, 6] -> Placed[
           Interpretation[2, 6], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[1, 4] -> Placed[
           Interpretation[1, 4], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[3, 8] -> Placed[
           Interpretation[3, 8], {
            Rational[1, 2], 
            Rational[1, 2]}]}, 
       VertexShapeFunction -> {
        Null -> None, Interpretation[2, 6] -> "Circle", Interpretation[1, 4] -> 
         "Circle", Interpretation[0, 12] -> "Circle", Interpretation[3, 8] -> 
         "Circle", Interpretation[1, 1] -> "Circle", Interpretation[3, 10] -> 
         "Circle", Interpretation[2, 11] -> "Circle", Interpretation[0, 7] -> 
         "Circle", Interpretation[2, 9] -> "Circle", Interpretation[1, 2] -> 
         "Circle", Interpretation[1, 5] -> "Circle", Interpretation[1, 3] -> 
         "Circle", Interpretation[0, 13] -> "Circle", Interpretation[3, 15] -> 
         "Circle", Interpretation[3, 14] -> "Circle"}, VertexSize -> {0.5}, 
       VertexStyle -> {
         Hue[0.6, 0.3, 0.8]}}]], Typeset`boxes, Typeset`boxes$s2d = 
    GraphicsGroupBox[{{
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], 
       Directive[
        GrayLevel[0.5], 
        Opacity[1]], {
        Arrowheads[{{0.04, 1, {
            GraphicsBox[
             
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
               0, 1, 0}}}, {{{-0.12347775660674376`, 
               0.}, {-0.5614144091900695, 
               0.21895451909535257`}, {-0.4738215557948804, 
               0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
               0.}}}]], 0.533327810340424}}}], 
        ArrowBox[{
          DynamicLocation["VertexID$1", Automatic, Center], 
          DynamicLocation["VertexID$2", Automatic, Center]}]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$2"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$2", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$3"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$3", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$3", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$4"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$4", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$3", Automatic, Center], 
            DynamicLocation["VertexID$7", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$5"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$5", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$4", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$6"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$6", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$4", Automatic, Center], 
            DynamicLocation["VertexID$8", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$7"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$7", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$5", Automatic, Center], 
            DynamicLocation["VertexID$6", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$8"], 
        InsetBox[
         FormBox[
          TemplateBox[{"0", "\",\"", "1"}, "RowDefault"], TraditionalForm], 
         DynamicLocation["EdgeLabelID$8", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$6", Automatic, Center], {
             4.465009967007398, 3.116269183192241}, {4.669542930259775, 
             3.146260047376956}, {4.787943338912501, 3.0712290664573545`}, {
             4.73887295516359, 2.6979955863089176`}, {4.605102208392308, 
             2.6561184783005594`}, {4.415271963341852, 2.737957729613287}, 
             DynamicLocation["VertexID$6", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$9"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$9", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$6", Automatic, Center], {
             4.063468152170044, 3.294540998795202}, 
             DynamicLocation["VertexID$9", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$10"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$10", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$7", Automatic, Center], 
            DynamicLocation["VertexID$10", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$11"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$11", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$7", Automatic, Center], {
             2.106913912132559, 2.537908752832967}, 
             DynamicLocation["VertexID$11", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$12"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$12", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$8", Automatic, Center], 
            DynamicLocation["VertexID$14", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$13"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$13", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$8", Automatic, Center], {
             1.8611399659242907`, 3.264120710824808}, 
             DynamicLocation["VertexID$15", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$14"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$14", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$9", Automatic, Center], {
             4.331119254070615, 3.3965751210999415`}, 
             DynamicLocation["VertexID$6", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$15"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$15", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$9", Automatic, Center], {
             3.935036913836601, 3.93343681866611}, {4.001184357047625, 
             4.129288039617087}, {4.121795026214956, 4.200711924626925}, {
             4.432056335326517, 3.987524088826289}, {4.408628953955592, 
             3.849323283224472}, {4.249519437731894, 3.717348487000326}, 
             DynamicLocation["VertexID$9", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$16"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$16", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$10", Automatic, Center], 
            DynamicLocation["VertexID$12", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$17"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$17", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$10", Automatic, Center], 
            DynamicLocation["VertexID$13", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$18"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$18", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$11", Automatic, Center], {
             2.4327763810081295`, 2.351089121717352}, 
             DynamicLocation["VertexID$7", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$19"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$19", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$11", Automatic, Center], 
            DynamicLocation["VertexID$16", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$20"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$20", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$12", Automatic, Center], {
             0.07932791306462059, 1.6281788943962472`}, {-0.0749014359049253, 
             1.4905326343389025`}, {-0.215050593524596, 
             1.4879795018733333`}, {-0.3795794382377414, 
             1.8265668503114236`}, {-0.2909657237977369, 
             1.9351758484655148`}, {-0.08743940473961706, 1.971372843395986}, 
             DynamicLocation["VertexID$12", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$21"], 
        InsetBox[
         FormBox[
          TemplateBox[{"0", "\",\"", "1"}, "RowDefault"], TraditionalForm], 
         DynamicLocation["EdgeLabelID$21", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation[
             "VertexID$13", Automatic, Center], {-0.1179293977194279, 
             2.178705929997332}, {-0.3232937955639024, 
             2.1549588925092853`}, {-0.4393604828982075, 
             2.2335671191437956`}, {-0.3789380946426544, 
             2.6051552695332805`}, {-0.24394527577103234`, 
             2.6429397644548134`}, {-0.05668494151314318, 
             2.5553496685243604`}, 
             DynamicLocation["VertexID$13", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$22"], 
        InsetBox[
         FormBox[
          TemplateBox[{"0", "\",\"", "1"}, "RowDefault"], TraditionalForm], 
         DynamicLocation["EdgeLabelID$22", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$14", Automatic, Center], 
            DynamicLocation["VertexID$12", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$23"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$23", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$14", Automatic, Center], 
            DynamicLocation["VertexID$13", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$24"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$24", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$15", Automatic, Center], {
             2.176527557889315, 3.1303941764396646`}, 
             DynamicLocation["VertexID$8", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$25"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$25", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$15", Automatic, Center], 
            DynamicLocation["VertexID$16", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$26"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$26", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$16", Automatic, Center], 
            DynamicLocation["VertexID$9", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$27"], 
        InsetBox[
         FormBox[
          TemplateBox[{"0", "\",\"", "1"}, "RowDefault"], TraditionalForm], 
         DynamicLocation["EdgeLabelID$27", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       Hue[0.6, 0.3, 0.8], 
       TagBox[{
         TagBox[
          StyleBox[
           
           CircleBox[{3.816054568925922, 0.}, {0.11624127629016724`, 
            0.11624127629016724`}], ShowContents -> False, StripOnInput -> 
           False], "DynamicName", BoxID -> "VertexID$1"], 
         InsetBox["", 
          Dynamic[
          DynamicLocation[
            "VertexID$1", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$1", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$1", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          
          DiskBox[{3.37556533115891, 0.8536561614163869}, {
           0.11624127629016724`, 0.11624127629016724`}], "DynamicName", BoxID -> 
          "VertexID$2"], 
         InsetBox[
          FormBox[
           InterpretationBox["1", 1], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$2", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$2", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$2", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$2"], 
       TagBox[{
         TagBox[
          
          DiskBox[{3.0129915868749797`, 1.4574566225046297`}, {
           0.11624127629016724`, 0.11624127629016724`}], "DynamicName", BoxID -> 
          "VertexID$3"], 
         InsetBox[
          FormBox[
           InterpretationBox["1", 2], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$3", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$3", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$3", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$3"], 
       TagBox[{
         TagBox[
          
          DiskBox[{2.886420601581905, 1.9048628525674354`}, {
           0.11624127629016724`, 0.11624127629016724`}], "DynamicName", BoxID -> 
          "VertexID$4"], 
         InsetBox[
          FormBox[
           InterpretationBox["1", 3], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$4", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$4", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$4", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$4"], 
       TagBox[{
         TagBox[
          
          DiskBox[{3.7417676194030287`, 2.093446343819213}, {
           0.11624127629016724`, 0.11624127629016724`}], "DynamicName", BoxID -> 
          "VertexID$5"], 
         InsetBox[
          FormBox[
           InterpretationBox["1", 4], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$5", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$5", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$5", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$5"], 
       TagBox[{
         TagBox[
          
          DiskBox[{4.352416633495958, 2.938646898198706}, {
           0.11624127629016724`, 0.11624127629016724`}], "DynamicName", BoxID -> 
          "VertexID$6"], 
         InsetBox[
          FormBox[
           InterpretationBox["1", 5], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$6", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$6", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$6", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$6"], 
       TagBox[{
         TagBox[
          
          DiskBox[{1.9858224297014235`, 1.9490887751687558`}, {
           0.11624127629016724`, 0.11624127629016724`}], "DynamicName", BoxID -> 
          "VertexID$7"], 
         InsetBox[
          FormBox[
           InterpretationBox["2", 6], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$7", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$7", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$7", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$7"], 
       TagBox[{
         TagBox[
          
          DiskBox[{1.8155287163571994`, 2.717772283524896}, {
           0.11624127629016724`, 0.11624127629016724`}], "DynamicName", BoxID -> 
          "VertexID$8"], 
         InsetBox[
          FormBox[
           InterpretationBox["0", 7], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$8", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$8", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$8", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$8"], 
       TagBox[{
         TagBox[
          DiskBox[{4.042170772744749, 3.752469221696398}, {
           0.11624127629016724`, 0.11624127629016724`}], "DynamicName", BoxID -> 
          "VertexID$9"], 
         InsetBox[
          FormBox[
           InterpretationBox["3", 8], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$9", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$9", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$9", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$9"], 
       TagBox[{
         TagBox[
          
          DiskBox[{0.7611393955666312, 1.853994245487753}, {
           0.11624127629016724`, 0.11624127629016724`}], "DynamicName", BoxID -> 
          "VertexID$10"], 
         InsetBox[
          FormBox[
           InterpretationBox["2", 9], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$10", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$10", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$10", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$10"], 
       TagBox[{
         TagBox[
          
          DiskBox[{2.553867863439309, 2.9399090993816497`}, {
           0.11624127629016724`, 0.11624127629016724`}], "DynamicName", BoxID -> 
          "VertexID$11"], 
         InsetBox[
          FormBox[
           InterpretationBox["3", 10], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$11", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$11", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$11", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$11"], 
       TagBox[{
         TagBox[
          DiskBox[{0.07552540225449711, 1.8384465233577254`}, {
           0.11624127629016724`, 0.11624127629016724`}], "DynamicName", BoxID -> 
          "VertexID$12"], 
         InsetBox[
          FormBox[
           InterpretationBox["2", 11], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$12", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$12", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$12", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$12"], 
       TagBox[{
         TagBox[
          
          DiskBox[{0., 2.352831147148772}, {0.11624127629016724`, 
           0.11624127629016724`}], "DynamicName", BoxID -> "VertexID$13"], 
         InsetBox[
          FormBox[
           InterpretationBox["0", 12], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$13", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$13", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$13", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$13"], 
       TagBox[{
         TagBox[
          
          DiskBox[{0.6373924776775914, 2.5208629060680754`}, {
           0.11624127629016724`, 0.11624127629016724`}], "DynamicName", BoxID -> 
          "VertexID$14"], 
         InsetBox[
          FormBox[
           InterpretationBox["0", 13], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$14", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$14", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$14", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$14"], 
       TagBox[{
         TagBox[
          
          DiskBox[{2.222138807456407, 3.676742603739557}, {
           0.11624127629016724`, 0.11624127629016724`}], "DynamicName", BoxID -> 
          "VertexID$15"], 
         InsetBox[
          FormBox[
           InterpretationBox["3", 14], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$15", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$15", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$15", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$15"], 
       TagBox[{
         TagBox[
          
          DiskBox[{3.0756630723781284`, 3.750033754141622}, {
           0.11624127629016724`, 0.11624127629016724`}], "DynamicName", BoxID -> 
          "VertexID$16"], 
         InsetBox[
          FormBox[
           InterpretationBox["3", 15], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$16", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$16", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$16", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$16"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{3.760693309010094, 
       355.2393066909899}, {-148.2393066909899, 142.75201819418288`}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",ExpressionUUID->"a4d82d96-0b55-439c-be3d-\
91b6afd0209e"]
}, Open  ]],

Cell[TextData[{
 "There are three methods available to ",
 StyleBox["AutomaticSequenceReduce", "Input"],
 " for prime modulus."
}], "Text",ExpressionUUID->"95cd2213-69d3-49be-9cf3-787aeffd4fa5"],

Cell["Different methods can take different amounts of time:", "Text",ExpressionUUID->"3587ac26-a9e5-4abf-b843-d81483cccd14"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{"AutomatonStateCount", "[", 
   RowBox[{"AutomaticSequenceAutomaton", "[", 
    RowBox[{"AutomaticSequenceReduce", "[", 
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{
        RowBox[{"MotzkinNumber", "[", "n", "]"}], ",", "11"}], "]"}], ",", 
      "n", ",", 
      RowBox[{"Method", "\[Rule]", "\"\<ConstantTerm\>\""}]}], "]"}], "]"}], 
   "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{"AutomatonStateCount", "[", 
   RowBox[{"AutomaticSequenceAutomaton", "[", 
    RowBox[{"AutomaticSequenceReduce", "[", 
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{
        RowBox[{"MotzkinNumber", "[", "n", "]"}], ",", "11"}], "]"}], ",", 
      "n", ",", 
      RowBox[{"Method", "\[Rule]", "\"\<Diagonal\>\""}]}], "]"}], "]"}], 
   "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{"AutomatonStateCount", "[", 
   RowBox[{"AutomaticSequenceAutomaton", "[", 
    RowBox[{"AutomaticSequenceReduce", "[", 
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{
        RowBox[{"MotzkinNumber", "[", "n", "]"}], ",", "11"}], "]"}], ",", 
      "n", ",", 
      RowBox[{"Method", "\[Rule]", "\"\<OrePolynomial\>\""}]}], "]"}], "]"}], 
   "]"}], "]"}]}], "Input",ExpressionUUID->"6df3df67-73c9-443d-a6d3-\
9f6898b51832"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.036178`", ",", "16"}], "}"}]], "Output",ExpressionUUID->\
"bb08a8ac-44ba-4516-8cfb-b68594e8a245"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.031039`", ",", "16"}], "}"}]], "Output",ExpressionUUID->\
"274b3330-44b6-470f-a649-aee1cb5f2ef5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"13.210129`", ",", "16"}], "}"}]], "Output",ExpressionUUID->\
"3e5dfa9f-bf2d-46f6-bd6f-eb53c338e453"]
}, Open  ]],

Cell["\<\
For prime power modulus, only the methods \[OpenCurlyDoubleQuote]ConstantTerm\
\[CloseCurlyDoubleQuote] and \[OpenCurlyDoubleQuote]Diagonal\
\[CloseCurlyDoubleQuote] apply:\
\>", "Text",ExpressionUUID->"ff286353-5724-43d1-8dfd-dbcfe5e40d37"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"AutomatonStateCount", "[", 
  RowBox[{"AutomaticSequenceAutomaton", "[", 
   RowBox[{"AutomaticSequenceReduce", "[", 
    RowBox[{
     RowBox[{"Mod", "[", 
      RowBox[{
       RowBox[{"MotzkinNumber", "[", "n", "]"}], ",", "8"}], "]"}], ",", "n", 
     ",", 
     RowBox[{"Method", "\[Rule]", "\"\<ConstantTerm\>\""}]}], "]"}], "]"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"AutomatonStateCount", "[", 
  RowBox[{"AutomaticSequenceAutomaton", "[", 
   RowBox[{"AutomaticSequenceReduce", "[", 
    RowBox[{
     RowBox[{"Mod", "[", 
      RowBox[{
       RowBox[{"MotzkinNumber", "[", "n", "]"}], ",", "8"}], "]"}], ",", "n", 
     ",", 
     RowBox[{"Method", "\[Rule]", "\"\<Diagonal\>\""}]}], "]"}], "]"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"AutomatonStateCount", "[", 
  RowBox[{"AutomaticSequenceAutomaton", "[", 
   RowBox[{"AutomaticSequenceReduce", "[", 
    RowBox[{
     RowBox[{"Mod", "[", 
      RowBox[{
       RowBox[{"MotzkinNumber", "[", "n", "]"}], ",", "8"}], "]"}], ",", "n", 
     ",", 
     RowBox[{"Method", "\[Rule]", "\"\<OrePolynomial\>\""}]}], "]"}], "]"}], 
  "]"}]}], "Input",ExpressionUUID->"2972d480-42da-4e07-97ce-8092f676cd0e"],

Cell[BoxData["24"], "Output",ExpressionUUID->"616ada59-0591-4e7f-8a54-a507ea3c453e"],

Cell[BoxData["24"], "Output",ExpressionUUID->"380c5766-48b5-404e-a6f2-a6ebd5e69020"],

Cell[BoxData[
 TemplateBox[{
  "AutomaticSequenceReduce","oremod",
   "\"Method \\\"OrePolynomial\\\" requires a prime modulus.\"",2,80,8,
   18387630869787481076,"Local","IntegerSequences`AutomaticSequenceReduce"},
  "MessageTemplate2"]], "Message", \
"MSG",ExpressionUUID->"02fc6dfe-ba63-451d-8af9-8415bc886a9a"],

Cell[BoxData[
 RowBox[{"AutomatonStateCount", "[", 
  RowBox[{"AutomaticSequenceAutomaton", "[", 
   RowBox[{"AutomaticSequenceReduce", "[", 
    RowBox[{
     RowBox[{"Mod", "[", 
      RowBox[{
       RowBox[{"MotzkinNumber", "[", "n", "]"}], ",", "8"}], "]"}], ",", "n", 
     ",", 
     RowBox[{"Method", "\[Rule]", "\<\"OrePolynomial\"\>"}]}], "]"}], "]"}], 
  "]"}]], "Output",ExpressionUUID->"6357076a-cb43-480e-9b59-0c025ce82417"]
}, Open  ]],

Cell["\<\
By default, automata are minimized.
The number of states in the unminimized automata can be different:\
\>", "Text",ExpressionUUID->"c274f5de-125d-452f-b9bf-9810105c5463"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{"AutomatonStateCount", "[", 
   RowBox[{"AutomaticSequenceAutomaton", "[", 
    RowBox[{"AutomaticSequenceReduce", "[", 
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{
        RowBox[{"MotzkinNumber", "[", "n", "]"}], ",", "16"}], "]"}], ",", 
      "n", ",", 
      RowBox[{"Method", "\[Rule]", "\"\<ConstantTerm\>\""}], ",", 
      RowBox[{"Minimize", "\[Rule]", "False"}]}], "]"}], "]"}], "]"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{"AutomatonStateCount", "[", 
   RowBox[{"AutomaticSequenceAutomaton", "[", 
    RowBox[{"AutomaticSequenceReduce", "[", 
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{
        RowBox[{"MotzkinNumber", "[", "n", "]"}], ",", "16"}], "]"}], ",", 
      "n", ",", 
      RowBox[{"Method", "\[Rule]", "\"\<Diagonal\>\""}], ",", 
      RowBox[{"Minimize", "\[Rule]", "False"}]}], "]"}], "]"}], "]"}], 
  "]"}]}], "Input",ExpressionUUID->"2f027d07-8a6f-4c39-8d2b-822af88bdcca"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2.189479`", ",", "158"}], "}"}]], "Output",ExpressionUUID->\
"55cfcdff-950c-47ee-a9f5-a1836d4c6713"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.962845`", ",", "147"}], "}"}]], "Output",ExpressionUUID->\
"ebab8dcf-af65-40cb-82e0-b28539dc8fd2"]
}, Open  ]],

Cell[TextData[{
 "The method \[OpenCurlyDoubleQuote]Diagonal\[CloseCurlyDoubleQuote] supports \
two variants \[LongDash] low degree and high degree.  The default is low \
degree.\nWith ",
 StyleBox["\"Degree\"->\"High\"", "Input"],
 ", the polynomials have higher degree and therefore take up more memory but \
frequently produce an automaton with fewer states:"
}], "Text",ExpressionUUID->"b76c2e7e-b6a0-4042-adf4-e87a56c885a3"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"AutomaticSequenceReduce", "[", 
  RowBox[{
   RowBox[{"Mod", "[", 
    RowBox[{
     RowBox[{"AperyNumber", "[", "n", "]"}], ",", "8"}], "]"}], ",", "n", ",", 
   RowBox[{"Method", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Diagonal\>\"", ",", 
      RowBox[{"\"\<Degree\>\"", "\[Rule]", "\"\<High\>\""}]}], "}"}]}], ",", 
   RowBox[{"Minimize", "\[Rule]", "False"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"AutomaticSequenceReduce", "[", 
  RowBox[{
   RowBox[{"Mod", "[", 
    RowBox[{
     RowBox[{"AperyNumber", "[", "n", "]"}], ",", "8"}], "]"}], ",", "n", ",", 
   RowBox[{"Method", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<Diagonal\>\"", ",", 
      RowBox[{"\"\<Degree\>\"", "\[Rule]", "\"\<Low\>\""}]}], "}"}]}], ",", 
   RowBox[{"Minimize", "\[Rule]", "False"}]}], "]"}]}], "Input",ExpressionUUID\
->"8057ca8f-3ffb-4fdf-976b-60ca72f52e84"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AutomaticSequence", "[", 
   RowBox[{"Automaton", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "3"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "4"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"3", "\[Rule]", "5"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"3", "\[Rule]", "3"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "4"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"5", "\[Rule]", "5"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"5", "\[Rule]", "3"}], ",", "1"}], "}"}]}], "}"}], ",", "1", 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "1"}], ",", 
       RowBox[{"2", "\[Rule]", "1"}], ",", 
       RowBox[{"3", "\[Rule]", "5"}], ",", 
       RowBox[{"4", "\[Rule]", "1"}], ",", 
       RowBox[{"5", "\[Rule]", "5"}]}], "}"}]}], "]"}], "]"}], "[", "n", 
  "]"}]], "Output",ExpressionUUID->"1ef4c566-7f34-451e-8014-8c95e79516c2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AutomaticSequence", "[", 
   RowBox[{"Automaton", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "3"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "4"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"3", "\[Rule]", "5"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"3", "\[Rule]", "3"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "6"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "7"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"5", "\[Rule]", "8"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"5", "\[Rule]", "9"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"6", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"6", "\[Rule]", "4"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"7", "\[Rule]", "6"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"7", "\[Rule]", "7"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"8", "\[Rule]", "8"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"8", "\[Rule]", "9"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"9", "\[Rule]", "5"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"9", "\[Rule]", "3"}], ",", "1"}], "}"}]}], "}"}], ",", "1", 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "1"}], ",", 
       RowBox[{"2", "\[Rule]", "1"}], ",", 
       RowBox[{"3", "\[Rule]", "5"}], ",", 
       RowBox[{"4", "\[Rule]", "1"}], ",", 
       RowBox[{"5", "\[Rule]", "5"}], ",", 
       RowBox[{"6", "\[Rule]", "1"}], ",", 
       RowBox[{"7", "\[Rule]", "1"}], ",", 
       RowBox[{"8", "\[Rule]", "5"}], ",", 
       RowBox[{"9", "\[Rule]", "5"}]}], "}"}]}], "]"}], "]"}], "[", "n", 
  "]"}]], "Output",ExpressionUUID->"4e184c1c-e9ed-44a5-b89b-c90ebc0dbd00"]
}, Open  ]],

Cell[TextData[{
 "Many more examples computing combinatorial sequences modulo prime powers \
appear in the ",
 ButtonBox["computation notebook",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://people.hofstra.edu/Eric_Rowland/computations/Automatic_\
congruences_for_diagonals_of_rational_functions.nb"], None},
  ButtonNote->
   "https://people.hofstra.edu/Eric_Rowland/computations/Automatic_\
congruences_for_diagonals_of_rational_functions.nb"],
 " accompanying the paper \[OpenCurlyDoubleQuote]",
 ButtonBox["Automatic congruences for diagonals of rational functions",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://arxiv.org/pdf/1310.8635.pdf"], None},
  ButtonNote->"https://arxiv.org/pdf/1310.8635.pdf"],
 "\[CloseCurlyDoubleQuote] by Eric Rowland and Reem Yassawi."
}], "Text",ExpressionUUID->"ae5a647e-bbdc-4c65-a0d5-c03c6c3ba100"],

Cell["\<\
For certain automata, state names are by default compressed so that \
equivalent states are often combined into one.\
\>", "Text",ExpressionUUID->"d3a90c48-269c-4fed-81a9-757a3187cf11"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CompressStateNames"}]], "Input",ExpressionUUID->"ed23ceff-74fb-42b7-b813-a7d25be323a2"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"CompressStateNames is an option for \
AutomaticSequenceReduce that specifies whether to compress state names when \
possible so that equivalent states are more likely to have the same \
name.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`CompressStateNames\"\
\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"CompressStateNames is an option for \
AutomaticSequenceReduce that specifies whether to compress state names when \
possible so that equivalent states are more likely to have the same \
name.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "CompressStateNames is an option for AutomaticSequenceReduce that \
specifies whether to compress state names when possible so that equivalent \
states are more likely to have the same name.", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {Protected}, 
    "FullName" -> "IntegerSequences`CompressStateNames"], False]]], "Output",E\
xpressionUUID->"d7605bde-eabb-4699-a054-0f0871f32c5a"]
}, Open  ]],

Cell[TextData[{
 "Specify ",
 StyleBox["CompressStateNames->False", "Input"],
 " to prevent compression:"
}], "Text",ExpressionUUID->"92b9881b-90b0-462b-9053-178cfcc03707"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{"AutomatonStateCount", "[", 
   RowBox[{"AutomaticSequenceAutomaton", "[", 
    RowBox[{"AutomaticSequenceReduce", "[", 
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{
        RowBox[{"MotzkinNumber", "[", "n", "]"}], ",", "16"}], "]"}], ",", 
      "n", ",", 
      RowBox[{"Method", "\[Rule]", "\"\<ConstantTerm\>\""}], ",", 
      RowBox[{"Minimize", "\[Rule]", "False"}]}], "]"}], "]"}], "]"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{"AutomatonStateCount", "[", 
   RowBox[{"AutomaticSequenceAutomaton", "[", 
    RowBox[{"AutomaticSequenceReduce", "[", 
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{
        RowBox[{"MotzkinNumber", "[", "n", "]"}], ",", "16"}], "]"}], ",", 
      "n", ",", 
      RowBox[{"CompressStateNames", "\[Rule]", "False"}], ",", 
      RowBox[{"Method", "\[Rule]", "\"\<ConstantTerm\>\""}], ",", 
      RowBox[{"Minimize", "\[Rule]", "False"}]}], "]"}], "]"}], "]"}], 
  "]"}]}], "Input",ExpressionUUID->"f1e9e3d8-6315-4aea-8d29-8ca54110388d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1.83112`", ",", "158"}], "}"}]], "Output",ExpressionUUID->\
"2a139cc3-b546-4de7-ada1-0766326c098e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.649008`", ",", "801"}], "}"}]], "Output",ExpressionUUID->\
"0e211b7e-4c22-4608-ac30-7fc08943abee"]
}, Open  ]],

Cell["\<\
Additional options can help manage memory when computing large automata.\
\>", "Text",ExpressionUUID->"c66a8fc0-469d-490a-aac4-80b17bd053bb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "HashStateNames"}]], "Input",ExpressionUUID->"306080b0-4d51-4456-9799-b6ab2e1fbce7"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"HashStateNames is an option for \
AutomaticSequenceReduce and other automaton construction functions that \
specifies whether states should be considered equivalent if their hash values \
coincide.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`HashStateNames\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"HashStateNames is an option for \
AutomaticSequenceReduce and other automaton construction functions that \
specifies whether states should be considered equivalent if their hash values \
coincide.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "HashStateNames is an option for AutomaticSequenceReduce and other \
automaton construction functions that specifies whether states should be \
considered equivalent if their hash values coincide.", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {Protected}, 
    "FullName" -> "IntegerSequences`HashStateNames"], False]]], "Output",Expre\
ssionUUID->"33f96466-b997-4666-b24d-6d303f7aea7b"]
}, Open  ]],

Cell[TextData[{
 "Using ",
 StyleBox["HashStateNames->True", "Input"],
 " reduces memory usage; once the transitions from a state are computed, only \
the hash code of the state is kept (for comparing to other states).\nIn the \
unlikely event that two state names have the same hash code, this may result \
in an incorrect automaton in which two states that are not equivalent are \
combined into one."
}], "Text",ExpressionUUID->"097a5c9e-c0e7-404c-a171-78e994aecfab"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "StateStorage"}]], "Input",ExpressionUUID->"19b6891d-9fc3-4562-8fae-377ac44d2859"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"StateStorage is an option for \
AutomaticSequenceReduce and other automaton construction functions that \
specifies whether states should be stored in memory or written to disk.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`StateStorage\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"StateStorage is an option for \
AutomaticSequenceReduce and other automaton construction functions that \
specifies whether states should be stored in memory or written to disk.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "StateStorage is an option for AutomaticSequenceReduce and other \
automaton construction functions that specifies whether states should be \
stored in memory or written to disk.", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> None, "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`StateStorage"], False]]], "Output",ExpressionUUID->\
"aae72e82-d0dc-4125-8dd7-d3c41c6c2582"]
}, Open  ]],

Cell[TextData[{
 "Use ",
 StyleBox["StateStorage->\"Disk\"", "Input"],
 " to export state names to disk rather than keep them in memory.\nEach state \
receives its own file, and the files are deleted after the automaton has been \
computed."
}], "Text",ExpressionUUID->"217df5b5-5476-4843-ac1e-c7b7d899afae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{"AutomatonStateCount", "[", 
   RowBox[{"AutomaticSequenceAutomaton", "[", 
    RowBox[{"AutomaticSequenceReduce", "[", 
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{
        RowBox[{"MotzkinNumber", "[", "n", "]"}], ",", "16"}], "]"}], ",", 
      "n", ",", 
      RowBox[{"Method", "\[Rule]", "\"\<Diagonal\>\""}], ",", 
      RowBox[{"StateStorage", "\[Rule]", "\"\<Disk\>\""}]}], "]"}], "]"}], 
   "]"}], "]"}]], "Input",ExpressionUUID->"381cd91f-1a26-4ad0-86aa-\
81396da7346a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4.167054`", ",", "76"}], "}"}]], "Output",ExpressionUUID->\
"f13449f6-df39-4dca-81a0-c746344a092c"]
}, Open  ]],

Cell[TextData[{
 "By default, files containing state names are exported to ",
 StyleBox["$TemporaryDirectory", "Input"],
 ", but this shouldn\[CloseCurlyQuote]t be used for long computations, since \
the operating system can start deleting temporary files there.\nSpecify a \
different directory as follows."
}], "Text",ExpressionUUID->"42e0f6a3-cd21-45a5-b6a1-f9259985c7e4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{"AutomatonStateCount", "[", 
   RowBox[{"AutomaticSequenceAutomaton", "[", 
    RowBox[{"AutomaticSequenceReduce", "[", 
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{
        RowBox[{"MotzkinNumber", "[", "n", "]"}], ",", "16"}], "]"}], ",", 
      "n", ",", 
      RowBox[{"Method", "\[Rule]", "\"\<Diagonal\>\""}], ",", 
      RowBox[{"StateStorage", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{"\"\<Disk\>\"", ",", 
         RowBox[{"\"\<Directory\>\"", "\[Rule]", "$HomeDirectory"}]}], 
        "}"}]}]}], "]"}], "]"}], "]"}], "]"}]], "Input",ExpressionUUID->\
"aaaef6ff-eafc-4d7d-8d85-94fb2585762b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3.973574`", ",", "76"}], "}"}]], "Output",ExpressionUUID->\
"85c39754-4d1a-4b8a-b80d-4cfc19e594ec"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Automaton", "Input"]], "Subsubsection",ExpressionUUID->"db68e3b4-80f0-477d-9620-5b15a9665b6f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Automaton"}]], "Input",ExpressionUUID->"954666cf-2c52-4b65-ad4d-59898be4c4ad"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"Automaton\\\", \\\"[\\\", \
RowBox[List[RowBox[List[\\\"{\\\", \
RowBox[List[StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", \
RowBox[List[\\\"{\\\", \
RowBox[List[RowBox[List[SubscriptBox[StyleBox[\\\"s\\\", \\\"TI\\\"], \
StyleBox[\\\"i\\\", \\\"TI\\\"]], \\\"\\\\[Rule]\\\", \
SubscriptBox[StyleBox[\\\"s\\\", \\\"TI\\\"], StyleBox[\\\"j\\\", \
\\\"TI\\\"]]]], \\\",\\\", StyleBox[\\\"label\\\", \\\"TI\\\"]]], \
\\\"}\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"]]], \\\"}\
\\\"]], \\\",\\\", StyleBox[\\\"init\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) \
represents an automaton with initial state \\!\\(\\*StyleBox[\\\"init\\\", \\\
\"TI\\\"]\\) and labeled transition rules \
\\!\\(\\*RowBox[List[SubscriptBox[StyleBox[\\\"s\\\", \\\"TI\\\"], \
StyleBox[\\\"i\\\", \\\"TI\\\"]], \\\"\\\\[Rule]\\\", \
SubscriptBox[StyleBox[\\\"s\\\", \\\"TI\\\"], StyleBox[\\\"j\\\", \
\\\"TI\\\"]]]]\\) between states.\\n\\!\\(\\*RowBox[List[\\\"Automaton\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"rule\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"init\\\", \\\"TI\\\"], \\\",\\\", RowBox[List[\\\"{\\\", \
RowBox[List[StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"s\\\", \\\"TI\\\"], StyleBox[\\\"i\\\", \
\\\"TI\\\"]], \\\"\\\\[Rule]\\\", SubscriptBox[StyleBox[\\\"v\\\", \
\\\"TI\\\"], StyleBox[\\\"i\\\", \\\"TI\\\"]]]], \\\",\\\", \
StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"]]], \\\"}\\\"]]]], \\\"]\\\"]]\\) \
assigns the output \\!\\(\\*SubscriptBox[StyleBox[\\\"v\\\", \\\"TI\\\"], \
StyleBox[\\\"i\\\", \\\"TI\\\"]]\\) to the state \
\\!\\(\\*SubscriptBox[StyleBox[\\\"s\\\", \\\"TI\\\"], StyleBox[\\\"i\\\", \\\
\"TI\\\"]]\\).\\n\\!\\(\\*RowBox[List[\\\"Automaton\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"rule\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[SubscriptBox[StyleBox[\\\"init\\\", \\\"TI\
\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"init\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\
\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"]]], \\\"}\\\"]], \
\\\",\\\", StyleBox[\\\"outputrules\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) \
represents a non\[Hyphen]deterministic automaton with multiple initial \
states.\\n\\!\\(\\*RowBox[List[RowBox[List[\\\"Automaton\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"rule\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"init\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"outputrules\\\", \
\\\"TI\\\"]]], \\\"]\\\"]], \\\"[\\\", StyleBox[\\\"input\\\", \\\"TI\\\"], \
\\\"]\\\"]]\\) gives the output corresponding to the state reached after \
transitioning according to the entries of the list \
\\!\\(\\*StyleBox[\\\"input\\\", \\\"TI\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" SubValue Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"SubValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "SubValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"IntegerSequences`Private`automaton", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Automaton", "[", 
                    RowBox[{
                    "IntegerSequences`Private`edges_", ",", 
                    "IntegerSequences`Private`initialstate_", ",", "___"}], 
                    "]"}], ")"}], "?", "AutomatonQ"}]}], ")"}], "[", 
                    "IntegerSequences`Private`input_List", "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`transitionrules", "=", 
                    RowBox[{"Append", "[", 
                    RowBox[{
                    RowBox[{"Replace", "[", 
                    RowBox[{"IntegerSequences`Private`edges", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`instate_", "\[Rule]", 
                    "IntegerSequences`Private`outstate_"}], ",", 
                    "IntegerSequences`Private`label_"}], "}"}], 
                    "\[RuleDelayed]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`instate", ",", 
                    "IntegerSequences`Private`label"}], "}"}], "\[Rule]", 
                    "IntegerSequences`Private`outstate"}]}], ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], ",", 
                    RowBox[{"_", "\[Rule]", "$Failed"}]}], "]"}]}], "}"}], 
                    ",", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"Fold", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"{", "##1", "}"}], ",", 
                    "IntegerSequences`Private`transitionrules"}], "]"}], 
                    "&"}], ",", "IntegerSequences`Private`initialstate", ",", 
                    "IntegerSequences`Private`input"}], "]"}], ",", 
                    RowBox[{
                    "AutomatonOutputRules", "[", 
                    "IntegerSequences`Private`automaton", "]"}]}], "]"}]}], 
                    "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "Automaton", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_", ",", "_.", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`Automaton] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Blank[], 
                    Optional[
                    Blank[]], 
                    OptionsPattern[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"InputAlphabet", "\[Rule]", "Automatic"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`Automaton\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"Automaton\\\", \\\"[\\\", \
RowBox[List[RowBox[List[\\\"{\\\", \
RowBox[List[StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", \
RowBox[List[\\\"{\\\", \
RowBox[List[RowBox[List[SubscriptBox[StyleBox[\\\"s\\\", \\\"TI\\\"], \
StyleBox[\\\"i\\\", \\\"TI\\\"]], \\\"\\\\[Rule]\\\", \
SubscriptBox[StyleBox[\\\"s\\\", \\\"TI\\\"], StyleBox[\\\"j\\\", \
\\\"TI\\\"]]]], \\\",\\\", StyleBox[\\\"label\\\", \\\"TI\\\"]]], \
\\\"}\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"]]], \\\"}\
\\\"]], \\\",\\\", StyleBox[\\\"init\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) \
represents an automaton with initial state \\!\\(\\*StyleBox[\\\"init\\\", \\\
\"TI\\\"]\\) and labeled transition rules \
\\!\\(\\*RowBox[List[SubscriptBox[StyleBox[\\\"s\\\", \\\"TI\\\"], \
StyleBox[\\\"i\\\", \\\"TI\\\"]], \\\"\\\\[Rule]\\\", \
SubscriptBox[StyleBox[\\\"s\\\", \\\"TI\\\"], StyleBox[\\\"j\\\", \
\\\"TI\\\"]]]]\\) between states.\\n\\!\\(\\*RowBox[List[\\\"Automaton\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"rule\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"init\\\", \\\"TI\\\"], \\\",\\\", RowBox[List[\\\"{\\\", \
RowBox[List[StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"s\\\", \\\"TI\\\"], StyleBox[\\\"i\\\", \
\\\"TI\\\"]], \\\"\\\\[Rule]\\\", SubscriptBox[StyleBox[\\\"v\\\", \
\\\"TI\\\"], StyleBox[\\\"i\\\", \\\"TI\\\"]]]], \\\",\\\", \
StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"]]], \\\"}\\\"]]]], \\\"]\\\"]]\\) \
assigns the output \\!\\(\\*SubscriptBox[StyleBox[\\\"v\\\", \\\"TI\\\"], \
StyleBox[\\\"i\\\", \\\"TI\\\"]]\\) to the state \
\\!\\(\\*SubscriptBox[StyleBox[\\\"s\\\", \\\"TI\\\"], StyleBox[\\\"i\\\", \\\
\"TI\\\"]]\\).\\n\\!\\(\\*RowBox[List[\\\"Automaton\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"rule\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[SubscriptBox[StyleBox[\\\"init\\\", \\\"TI\
\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"init\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\
\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"]]], \\\"}\\\"]], \
\\\",\\\", StyleBox[\\\"outputrules\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) \
represents a non\[Hyphen]deterministic automaton with multiple initial \
states.\\n\\!\\(\\*RowBox[List[RowBox[List[\\\"Automaton\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"rule\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"init\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"outputrules\\\", \
\\\"TI\\\"]]], \\\"]\\\"]], \\\"[\\\", StyleBox[\\\"input\\\", \\\"TI\\\"], \
\\\"]\\\"]]\\) gives the output corresponding to the state reached after \
transitioning according to the entries of the list \
\\!\\(\\*StyleBox[\\\"input\\\", \\\"TI\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"Automaton\", \"[\", RowBox[List[RowBox[List[\"{\", \
RowBox[List[StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", RowBox[List[\"{\", \
RowBox[List[RowBox[List[SubscriptBox[StyleBox[\"s\", \"TI\"], StyleBox[\"i\", \
\"TI\"]], \"\\[Rule]\", SubscriptBox[StyleBox[\"s\", \"TI\"], StyleBox[\"j\", \
\"TI\"]]]], \",\", StyleBox[\"label\", \"TI\"]]], \"}\"]], \",\", StyleBox[\"\
\\[Ellipsis]\", \"TR\"]]], \"}\"]], \",\", StyleBox[\"init\", \"TI\"]]], \
\"]\"]]\) represents an automaton with initial state \!\(\*StyleBox[\"init\", \
\"TI\"]\) and labeled transition rules \
\!\(\*RowBox[List[SubscriptBox[StyleBox[\"s\", \"TI\"], StyleBox[\"i\", \
\"TI\"]], \"\\[Rule]\", SubscriptBox[StyleBox[\"s\", \"TI\"], StyleBox[\"j\", \
\"TI\"]]]]\) between states.\n\!\(\*RowBox[List[\"Automaton\", \"[\", \
RowBox[List[StyleBox[\"rule\", \"TI\"], \",\", StyleBox[\"init\", \"TI\"], \
\",\", RowBox[List[\"{\", RowBox[List[StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\
\", RowBox[List[SubscriptBox[StyleBox[\"s\", \"TI\"], StyleBox[\"i\", \
\"TI\"]], \"\\[Rule]\", SubscriptBox[StyleBox[\"v\", \"TI\"], StyleBox[\"i\", \
\"TI\"]]]], \",\", StyleBox[\"\\[Ellipsis]\", \"TR\"]]], \"}\"]]]], \"]\"]]\) \
assigns the output \!\(\*SubscriptBox[StyleBox[\"v\", \"TI\"], \
StyleBox[\"i\", \"TI\"]]\) to the state \!\(\*SubscriptBox[StyleBox[\"s\", \
\"TI\"], StyleBox[\"i\", \"TI\"]]\).\n\!\(\*RowBox[List[\"Automaton\", \"[\", \
RowBox[List[StyleBox[\"rule\", \"TI\"], \",\", RowBox[List[\"{\", \
RowBox[List[SubscriptBox[StyleBox[\"init\", \"TI\"], StyleBox[\"1\", \
\"TR\"]], \",\", SubscriptBox[StyleBox[\"init\", \"TI\"], StyleBox[\"2\", \
\"TR\"]], \",\", StyleBox[\"\\[Ellipsis]\", \"TR\"]]], \"}\"]], \",\", \
StyleBox[\"outputrules\", \"TI\"]]], \"]\"]]\) represents a \
non\[Hyphen]deterministic automaton with multiple initial states.\n\
\!\(\*RowBox[List[RowBox[List[\"Automaton\", \"[\", \
RowBox[List[StyleBox[\"rule\", \"TI\"], \",\", StyleBox[\"init\", \"TI\"], \
\",\", StyleBox[\"outputrules\", \"TI\"]]], \"]\"]], \"[\", \
StyleBox[\"input\", \"TI\"], \"]\"]]\) gives the output corresponding to the \
state reached after transitioning according to the entries of the list \
\!\(\*StyleBox[\"input\", \"TI\"]\).", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> None, "SubValues" -> 
    Information`InformationValueForm[
     SubValues, IntegerSequences`Automaton, {
      Pattern[IntegerSequences`Private`automaton, 
         PatternTest[
          IntegerSequences`Automaton[
           Pattern[IntegerSequences`Private`edges, 
            Blank[]], 
           Pattern[IntegerSequences`Private`initialstate, 
            Blank[]], 
           BlankNullSequence[]], IntegerSequences`AutomatonQ]][
         Pattern[IntegerSequences`Private`input, 
          Blank[List]]] :> 
       With[{IntegerSequences`Private`transitionrules = Append[
            Replace[
            IntegerSequences`Private`edges, {
              Pattern[IntegerSequences`Private`instate, 
                 Blank[]] -> Pattern[IntegerSequences`Private`outstate, 
                 Blank[]], 
               Pattern[IntegerSequences`Private`label, 
                Blank[]]} :> ({
               IntegerSequences`Private`instate, 
                IntegerSequences`Private`label} -> 
              IntegerSequences`Private`outstate), {1}], Blank[] -> $Failed]}, 
         Replace[
          Fold[Replace[{
             SlotSequence[1]}, IntegerSequences`Private`transitionrules]& , 
           IntegerSequences`Private`initialstate, 
           IntegerSequences`Private`input], 
          IntegerSequences`AutomatonOutputRules[
          IntegerSequences`Private`automaton]]]}], "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`Automaton, {
      SyntaxInformation[IntegerSequences`Automaton] -> {"ArgumentsPattern" -> {
           Blank[], 
           Blank[], 
           Optional[
            Blank[]], 
           OptionsPattern[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {IntegerSequences`InputAlphabet -> Automatic}, 
    "Attributes" -> {Protected}, "FullName" -> "IntegerSequences`Automaton"], 
   False]]], "Output",ExpressionUUID->"61508687-7c28-48a7-8ef3-6470c5b05c71"]
}, Open  ]],

Cell["\<\
Define an automaton that computes terms of the Thue\[Dash]Morse sequence:\
\>", "Text",ExpressionUUID->"7eb4b348-6394-4fde-8c17-510e9fc33218"],

Cell[BoxData[
 RowBox[{
  RowBox[{"m", "=", 
   RowBox[{"Automaton", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"B", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"B", "\[Rule]", "A"}], ",", "1"}], "}"}]}], "}"}], ",", "A", 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"A", "\[Rule]", "0"}], ",", 
       RowBox[{"B", "\[Rule]", "1"}]}], "}"}]}], "]"}]}], ";"}]], "Input",Expr\
essionUUID->"fe6a6fd1-e29e-4452-9754-4eef49f21f9e"],

Cell["Generate the directed graph corresponding to the automaton:", "Text",ExpressionUUID->"ba30a9e5-ef56-44f8-82fc-95ebdb9ae1c9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonGraph", "[", "m", "]"}]], "Input",ExpressionUUID->"435cb101-56e6-4fe5-98f0-749bdb1c4d01"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{Null, 
       Interpretation[0, $CellContext`A], 
       Interpretation[1, $CellContext`B]}, {{{1, 2}, {2, 2}, {2, 3}, {3, 3}, {
       3, 2}}, Null}, {EdgeLabels -> {DirectedEdge[
           Interpretation[1, $CellContext`B], 
           Interpretation[1, $CellContext`B]] -> 0, DirectedEdge[
           Interpretation[0, $CellContext`A], 
           Interpretation[0, $CellContext`A]] -> 0, DirectedEdge[
           Interpretation[0, $CellContext`A], 
           Interpretation[1, $CellContext`B]] -> 1, DirectedEdge[
           Interpretation[1, $CellContext`B], 
           Interpretation[0, $CellContext`A]] -> 1}, 
       EdgeShapeFunction -> {{
         "CorporateShortCarvedArrow", "ArrowSize" -> 0.04, "ArrowPositions" -> 
          1}}, EdgeStyle -> {
         Directive[
          GrayLevel[0.5], 
          Opacity[1]]}, PerformanceGoal -> "Quality", 
       VertexLabels -> {Interpretation[1, $CellContext`B] -> Placed[
           Interpretation[1, $CellContext`B], {
            Rational[1, 2], 
            Rational[1, 2]}], Null -> Placed[Null, {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[0, $CellContext`A] -> Placed[
           Interpretation[0, $CellContext`A], {
            Rational[1, 2], 
            Rational[1, 2]}]}, 
       VertexShapeFunction -> {
        Interpretation[0, $CellContext`A] -> "Circle", 
         Interpretation[1, $CellContext`B] -> "Circle", Null -> None}, 
       VertexSize -> {0.2}, VertexStyle -> {
         Hue[0.6, 0.3, 0.8]}}]], Typeset`boxes, Typeset`boxes$s2d = 
    GraphicsGroupBox[{{
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], 
       Directive[
        GrayLevel[0.5], 
        Opacity[1]], {
        Arrowheads[{{0.04, 1, {
            GraphicsBox[
             
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
               0, 1, 0}}}, {{{-0.12347775660674376`, 
               0.}, {-0.5614144091900695, 
               0.21895451909535257`}, {-0.4738215557948804, 
               0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
               0.}}}]], 0.533327810340424}}}], 
        ArrowBox[{
          DynamicLocation["VertexID$1", Automatic, Center], 
          DynamicLocation["VertexID$2", Automatic, Center]}]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$2", Automatic, Center], {
             1.215969005971036, -0.1425312379880006}, {
             1.2342632844934087`, -0.32493768720862726`}, {
             1.1702710252509327`, -0.431056932977143}, {
             0.8305438002399658, -0.4310569329771431}, {
             0.7665515409974896, -0.32493768720862726`}, {
             0.7848458195198625, -0.1425312379880006}, 
             DynamicLocation["VertexID$2", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$2"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$2", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$2", Automatic, Center], {
             1.5003055284305298`, 0.16440723931737236`}, 
             DynamicLocation["VertexID$3", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$3"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$3", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             1.5003055284305298`, -0.16440723931737236`}, 
             DynamicLocation["VertexID$2", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$4"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$4", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             2.0886828995833713`, 0.1907835323853024}, {2.287561377120962, 
             0.24717977484589673`}, {2.4147320015954197`, 
             0.1882226960710236}, {
             2.4147320015954197`, -0.18822269607102265`}, {
             2.2875613771209626`, -0.2471797748458961}, {
             2.0886828995833717`, -0.19078353238530207`}, 
             DynamicLocation["VertexID$3", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$5"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$5", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       Hue[0.6, 0.3, 0.8], 
       TagBox[{
         TagBox[
          StyleBox[
           CircleBox[{0., 0.}, {0.0999796231370162, 0.0999796231370162}], 
           ShowContents -> False, StripOnInput -> False], "DynamicName", 
          BoxID -> "VertexID$1"], 
         InsetBox["", 
          Dynamic[
          DynamicLocation[
            "VertexID$1", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$1", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$1", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          
          DiskBox[{1.0004074127454492`, 4.666248974332878*^-18}, {
           0.0999796231370162, 0.0999796231370162}], "DynamicName", BoxID -> 
          "VertexID$2"], 
         InsetBox[
          FormBox[
           InterpretationBox["0", $CellContext`A], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$2", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$2", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$2", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$2"], 
       TagBox[{
         TagBox[
          
          DiskBox[{2.000203644115611, 4.9566794084199865`*^-18}, {
           0.0999796231370162, 0.0999796231370162}], "DynamicName", BoxID -> 
          "VertexID$3"], 
         InsetBox[
          FormBox[
           InterpretationBox["1", $CellContext`B], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$3", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$3", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$3", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$3"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{3.9406933090100917`, 
       355.2393066909899}, {-52.23930669098989, 47.23930669098989}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",ExpressionUUID->"04555991-521a-4fa4-96f8-\
040a34c87e29"]
}, Open  ]],

Cell["Evaluate the automaton on an input:", "Text",ExpressionUUID->"872dfc67-8813-4b7d-a767-509bca1b431d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"m", "[", 
  RowBox[{"{", 
   RowBox[{"0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1"}], "}"}], 
  "]"}]], "Input",ExpressionUUID->"02c2d435-c48e-4080-862d-778cf30803d9"],

Cell[BoxData["0"], "Output",ExpressionUUID->"da3ef088-ad71-457d-9319-122d261991ef"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"m", "[", 
    RowBox[{"IntegerDigits", "[", 
     RowBox[{"n", ",", "2"}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "31"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"83b60ef5-3b02-47f4-ade6-56c14f32bbc5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", 
   ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
   "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", 
   ",", "0", ",", "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "1"}], "}"}]], "Output",ExpressionUUID->"b1af6f93-ff7e-4708-a547-\
898885ba9003"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", "m", "]"}]], "Input",ExpressionUUID->"3bce0b53-8c62-4a9d-9d55-a5147167402f"],

Cell["\<\
Specifying different output rules changes the output alphabet:\
\>", "Text",ExpressionUUID->"0b12e1f2-dd71-4ad9-871b-884bd86d6d7c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "A"}], ",", "1"}], "}"}]}], "}"}], ",", "A", 
    ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"A", "\[Rule]", "\"\<even\>\""}], ",", 
      RowBox[{"B", "\[Rule]", "\"\<odd\>\""}]}], "}"}]}], "]"}], "[", 
  RowBox[{"{", 
   RowBox[{"0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1"}], "}"}], 
  "]"}]], "Input",ExpressionUUID->"bea3f294-cf91-4c23-ba50-67e7dcf942a3"],

Cell[BoxData["\<\"even\"\>"], "Output",ExpressionUUID->"76a0afc0-9354-442b-968d-3f75172834a7"]
}, Open  ]],

Cell[TextData[{
 "An automaton outputting ",
 StyleBox["True", "Input"],
 " and ",
 StyleBox["False", "Input"],
 " can be thought of as recognizing a certain language:"
}], "Text",ExpressionUUID->"0026a1c7-40ec-475b-be03-fd06c5980bcb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "A"}], ",", "1"}], "}"}]}], "}"}], ",", "A", 
    ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"A", "\[Rule]", "True"}], ",", 
      RowBox[{"B", "\[Rule]", "False"}]}], "}"}]}], "]"}], "[", 
  RowBox[{"{", 
   RowBox[{"0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1"}], "}"}], 
  "]"}]], "Input",ExpressionUUID->"326841e8-8893-4183-b3ab-22c8e9fa5eb9"],

Cell[BoxData["True"], "Output",ExpressionUUID->"9cc50150-c1f3-4c72-ac2c-0df63614a09b"]
}, Open  ]],

Cell[TextData[{
 "When no output rules are given, ",
 StyleBox["Automaton", "Input"],
 " returns the last state visited:"
}], "Text",ExpressionUUID->"3140ea45-0d9c-4892-be5f-e73735a03066"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "A"}], ",", "1"}], "}"}]}], "}"}], ",", "A"}],
    "]"}], "[", 
  RowBox[{"{", 
   RowBox[{"0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1"}], "}"}], 
  "]"}]], "Input",ExpressionUUID->"8a7d2f96-c62c-4836-a75e-4d2dfe94e584"],

Cell[BoxData["A"], "Output",ExpressionUUID->"bd7128c2-225a-4ba1-9f99-3ea712fd0fc4"]
}, Open  ]],

Cell["\<\
The output rules can be a rule, a list of rules, or a dispatch table, and can \
contain patterns:\
\>", "Text",ExpressionUUID->"7d048270-7295-4c08-804a-25885bc21998"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "A"}], ",", "1"}], "}"}]}], "}"}], ",", "A", 
    ",", 
    RowBox[{"{", 
     RowBox[{"_", "\[Rule]", "\"\<constant\>\""}], "}"}]}], "]"}], "[", 
  RowBox[{"{", 
   RowBox[{"0", ",", "1", ",", "1", ",", "1", ",", "0", ",", "1"}], "}"}], 
  "]"}]], "Input",ExpressionUUID->"4438e26d-29b4-47bc-9ccf-e15373c25b75"],

Cell[BoxData["\<\"constant\"\>"], "Output",ExpressionUUID->"1428fb37-5cb5-414d-9762-27348e5590f2"]
}, Open  ]],

Cell["Edge labels can also contain patterns:", "Text",ExpressionUUID->"b736c7c7-1c1e-4d17-93cd-47d544144805"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "_"}], "}"}]}], "}"}], ",", "A"}],
    "]"}], "[", 
  RowBox[{"{", 
   RowBox[{"1", ",", "1", ",", "0"}], "}"}], "]"}]], "Input",ExpressionUUID->\
"7a215647-89d9-4d46-bde6-406a8488b97c"],

Cell[BoxData["B"], "Output",ExpressionUUID->"6465df6b-f8cf-4b7d-bc2a-4776a98aee62"]
}, Open  ]],

Cell[TextData[{
 "If the automaton reaches a state from which there is no edge that the \
current input element matches, then ",
 StyleBox["Automaton", "Input"],
 " returns ",
 StyleBox["$Failed", "Input"],
 ":"
}], "Text",ExpressionUUID->"6fd9a1c9-ba62-40ee-8d8d-3fb37c95d256"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", 
        RowBox[{"0", "|", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "A"}], ",", "0"}], "}"}]}], "}"}], ",", "A"}],
    "]"}], "[", 
  RowBox[{"{", 
   RowBox[{"0", ",", "1"}], "}"}], "]"}]], "Input",ExpressionUUID->"e009f890-\
3001-499b-99c9-025a9e170870"],

Cell[BoxData["$Failed"], "Output",ExpressionUUID->"13bb9bd9-f20c-4ffd-bcbb-e5a17943d7f9"]
}, Open  ]],

Cell[TextData[{
 "Including a rule for ",
 StyleBox["$Failed", "Input"],
 " in the output rule is a convenient way to represent an automaton which \
accepts a certain language:"
}], "Text",ExpressionUUID->"52da306c-a523-4200-857c-580562766492"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", 
        RowBox[{"0", "|", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "A"}], ",", "0"}], "}"}]}], "}"}], ",", "A", 
    ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"A", "\[Rule]", "True"}], ",", 
      RowBox[{"B", "\[Rule]", "True"}], ",", 
      RowBox[{"$Failed", "\[Rule]", "False"}]}], "}"}]}], "]"}], "[", 
  RowBox[{"{", 
   RowBox[{"0", ",", "1"}], "}"}], "]"}]], "Input",ExpressionUUID->"017f198a-\
1d40-4f76-92fc-73bdd04994bb"],

Cell[BoxData["False"], "Output",ExpressionUUID->"b175b8c8-2f62-4727-a4b8-689c3d5bfc9a"]
}, Open  ]],

Cell[TextData[{
 "If there are multiple edges that an input element matches, the ",
 StyleBox["Automaton", "Input"],
 " uses the first matching edge in the edge list:"
}], "Text",ExpressionUUID->"915328fe-f531-42b0-9435-6f1fe8c3dbc2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "C"}], ",", "0"}], "}"}]}], "}"}], ",", "A"}],
    "]"}], "[", 
  RowBox[{"{", "0", "}"}], "]"}]], "Input",ExpressionUUID->"ba4dca08-60d9-\
4239-a596-785f4e55cf97"],

Cell[BoxData["B"], "Output",ExpressionUUID->"58a92ea4-ecc2-4098-8c2c-563151e72b66"]
}, Open  ]],

Cell[TextData[{
 "Patterns in edge labels prevent ",
 StyleBox["AutomatonInputAlphabet", "Input"],
 " from being able to determine the input alphabet:"
}], "Text",ExpressionUUID->"fe658ef1-4772-4982-ae18-17fd97b624eb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonInputAlphabet", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "_"}], "}"}]}], "}"}], ",", "A"}],
    "]"}], "]"}]], "Input",ExpressionUUID->"ea655c14-47b6-41b8-a086-\
bf016b2dc8e5"],

Cell[BoxData[
 RowBox[{"AutomatonInputAlphabet", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "_"}], "}"}]}], "}"}], ",", "A"}],
    "]"}], "]"}]], "Output",ExpressionUUID->"38c943d3-5fe5-4da4-9fc0-\
37f40c960e02"]
}, Open  ]],

Cell[TextData[{
 "Use ",
 StyleBox["InputAlphabet", "Input"],
 " to specify the input alphabet explicitly:"
}], "Text",ExpressionUUID->"24435a80-aa8d-456c-a32a-f3a279a4dbfd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonInputAlphabet", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "_"}], "}"}]}], "}"}], ",", "A", 
    ",", 
    RowBox[{"InputAlphabet", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}], "]"}]], "Input",ExpressionUUI\
D->"42ffd901-2b2a-445f-a3c7-59b69bca3c6c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "1"}], "}"}]], "Output",ExpressionUUID->"59b63216-b85f-4f73-8850-717760ea1914"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["AutomatonAdjacencyMatrix", "Input"]], "Subsubsection",ExpressionUUID->"9b48e21f-6439-4560-9947-44742395f378"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "AutomatonAdjacencyMatrix"}]], "Input",ExpressionUUID->"24f936d2-86d6-4d74-b05f-d44e2af80435"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomatonAdjacencyMatrix\\\
\", \\\"[\\\", StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the \
vertex\[Dash]vertex adjacency matrix of the automaton \\!\\(\\*StyleBox[\\\"M\
\\\", \\\"TI\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"AutomatonAdjacencyMatrix", "[", 
                    RowBox[{
                    "IntegerSequences`Private`automaton_", "?", 
                    "AutomatonQ"}], "]"}], ":=", 
                    RowBox[{"AdjacencyMatrix", "[", 
                    RowBox[{"VertexDelete", "[", 
                    RowBox[{
                    RowBox[{"AutomatonGraph", "[", 
                    RowBox[{"IntegerSequences`Private`automaton", ",", 
                    RowBox[{"GatherEdges", "\[Rule]", "False"}]}], "]"}], ",",
                     "Null"}], "]"}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "AutomatonAdjacencyMatrix", 
                    "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`AutomatonAdjacencyMatrix] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`AutomatonAdjacencyMatrix\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomatonAdjacencyMatrix\\\
\", \\\"[\\\", StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the \
vertex\[Dash]vertex adjacency matrix of the automaton \\!\\(\\*StyleBox[\\\"M\
\\\", \\\"TI\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"AutomatonAdjacencyMatrix\", \"[\", StyleBox[\"M\", \
\"TI\"], \"]\"]]\) gives the vertex\[Dash]vertex adjacency matrix of the \
automaton \!\(\*StyleBox[\"M\", \"TI\"]\).", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`AutomatonAdjacencyMatrix, {
      IntegerSequences`AutomatonAdjacencyMatrix[
         PatternTest[
          Pattern[IntegerSequences`Private`automaton, 
           Blank[]], IntegerSequences`AutomatonQ]] :> AdjacencyMatrix[
         VertexDelete[
          IntegerSequences`AutomatonGraph[
          IntegerSequences`Private`automaton, IntegerSequences`GatherEdges -> 
           False], Null]]}], "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`AutomatonAdjacencyMatrix, {
      SyntaxInformation[IntegerSequences`AutomatonAdjacencyMatrix] -> {
        "ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`AutomatonAdjacencyMatrix"], False]]], "Output",Expressio\
nUUID->"8c0b9bc9-4ecd-41dc-bfa6-ca21fe5789e6"]
}, Open  ]],

Cell["\<\
The adjacency matrix counts occurrences of each state in the image of each \
other state.\
\>", "Text",ExpressionUUID->"570dc34f-af15-4716-a563-d211b013047a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"automaton", "=", 
   RowBox[{"Automaton", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "1"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "1"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "3"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"3", "\[Rule]", "3"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"3", "\[Rule]", "3"}], ",", "1"}], "}"}]}], "}"}], ",", "1", 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "1"}], ",", 
       RowBox[{"2", "\[Rule]", "1"}], ",", 
       RowBox[{"3", "\[Rule]", "0"}]}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"AutomatonGraph", "[", "automaton", "]"}]}], "Input",ExpressionUUID->\
"bfddd506-3a0e-43f3-8731-5b738e5b78db"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{Null, 
       Interpretation[1, 1], 
       Interpretation[1, 2], 
       Interpretation[0, 3]}, {{{1, 2}, {2, 3}, {2, 2}, {3, 2}, {3, 4}, {4, 
       4}}, Null}, {EdgeLabels -> {DirectedEdge[
           Interpretation[1, 2], 
           Interpretation[0, 3]] -> 1, DirectedEdge[
           Interpretation[1, 2], 
           Interpretation[1, 1]] -> 0, DirectedEdge[
           Interpretation[1, 1], 
           Interpretation[1, 2]] -> 0, DirectedEdge[
           Interpretation[0, 3], 
           Interpretation[0, 3]] -> Row[{0, ",", 1}], DirectedEdge[
           Interpretation[1, 1], 
           Interpretation[1, 1]] -> 1}, 
       EdgeShapeFunction -> {{
         "CorporateShortCarvedArrow", "ArrowSize" -> 0.04, "ArrowPositions" -> 
          1}}, EdgeStyle -> {
         Directive[
          GrayLevel[0.5], 
          Opacity[1]]}, PerformanceGoal -> "Quality", 
       VertexLabels -> {Interpretation[1, 1] -> Placed[
           Interpretation[1, 1], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[0, 3] -> Placed[
           Interpretation[0, 3], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[1, 2] -> Placed[
           Interpretation[1, 2], {
            Rational[1, 2], 
            Rational[1, 2]}], Null -> Placed[Null, {
            Rational[1, 2], 
            Rational[1, 2]}]}, 
       VertexShapeFunction -> {
        Interpretation[1, 2] -> "Circle", Interpretation[0, 3] -> "Circle", 
         Interpretation[1, 1] -> "Circle", Null -> None}, VertexSize -> {0.2},
        VertexStyle -> {
         Hue[0.6, 0.3, 0.8]}}]], Typeset`boxes, Typeset`boxes$s2d = 
    GraphicsGroupBox[{{
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], 
       Directive[
        GrayLevel[0.5], 
        Opacity[1]], {
        Arrowheads[{{0.04, 1, {
            GraphicsBox[
             
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
               0, 1, 0}}}, {{{-0.12347775660674376`, 
               0.}, {-0.5614144091900695, 
               0.21895451909535257`}, {-0.4738215557948804, 
               0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
               0.}}}]], 0.533327810340424}}}], 
        ArrowBox[{
          DynamicLocation["VertexID$1", Automatic, Center], 
          DynamicLocation["VertexID$2", Automatic, Center]}]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$2", Automatic, Center], {
             2.212615390225894, -0.1425312379879989}, {
             2.230909668748267, -0.32493768720862626`}, {
             2.166917409505791, -0.43105693297714254`}, {
             1.8271901844948226`, -0.43105693297714287`}, {
             1.7631979252523462`, -0.3249376872086267}, {
             1.7814922037747192`, -0.14253123798799922`}, 
             DynamicLocation["VertexID$2", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$2"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$2", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$2", Automatic, Center], {
             1.4736101431088966`, -0.1721509311083271}, 
             DynamicLocation["VertexID$3", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$3"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$3", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             1.4736101431088953`, 0.172150931108328}, 
             DynamicLocation["VertexID$2", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$4"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$4", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$3", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$5"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$5", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation[
             "VertexID$4", Automatic, 
              Center], {-0.08847925546776086, -0.19078353238529966`}, \
{-0.28735773300535183`, -0.24717977484589343`}, {-0.414528357479809, \
-0.18822269607101993`}, {-0.4145283574798083, 
             0.1882226960710263}, {-0.28735773300535095`, 
             0.2471797748458994}, {-0.08847925546776025, 
             0.19078353238530496`}, 
             DynamicLocation["VertexID$4", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$6"], 
        InsetBox[
         FormBox[
          TemplateBox[{"0", "\",\"", "1"}, "RowDefault"], TraditionalForm], 
         DynamicLocation["EdgeLabelID$6", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       Hue[0.6, 0.3, 0.8], 
       TagBox[{
         TagBox[
          StyleBox[
           
           CircleBox[{2.948493533596688, 2.60688674603371*^-15}, {
            0.0950166489217485, 0.0950166489217485}], ShowContents -> False, 
           StripOnInput -> False], "DynamicName", BoxID -> "VertexID$1"], 
         InsetBox["", 
          Dynamic[
          DynamicLocation[
            "VertexID$1", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$1", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$1", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          
          DiskBox[{1.9970537970003064`, 0.}, {0.0950166489217485, 
           0.0950166489217485}], "DynamicName", BoxID -> "VertexID$2"], 
         InsetBox[
          FormBox[
           InterpretationBox["1", 1], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$2", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$2", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$2", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$2"], 
       TagBox[{
         TagBox[
          
          DiskBox[{0.950166489217485, 5.852194735994043*^-16}, {
           0.0950166489217485, 0.0950166489217485}], "DynamicName", BoxID -> 
          "VertexID$3"], 
         InsetBox[
          FormBox[
           InterpretationBox["1", 2], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$3", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$3", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$3", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$3"], 
       TagBox[{
         TagBox[
          
          DiskBox[{0., 2.500483205379273*^-15}, {0.0950166489217485, 
           0.0950166489217485}], "DynamicName", BoxID -> "VertexID$4"], 
         InsetBox[
          FormBox[
           InterpretationBox["0", 3], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$4", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$4", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$4", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$4"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{3.7606933090100947`, 
       355.05930669098984`}, {-39.239306690989906`, 35.239306690989906`}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",ExpressionUUID->"5008adfe-cca1-4503-a2b4-\
06c9aa5f06cf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"m", "=", 
  RowBox[{"AutomatonAdjacencyMatrix", "[", "automaton", "]"}]}]], "Input",Expr\
essionUUID->"38083ec1-97a6-4b35-b232-e1aef210eb45"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["SparseArray",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{{0.235431, 0.32765, 0.833291}, {0.235431, 0.32765, 
              0.833291}, {0.772061, 0.92462, 0.998703}}, {{0.282325, 0.661868,
               0.973082}, {0.235431, 0.32765, 0.833291}, {0.282325, 0.661868, 
              0.973082}}, {{0.282325, 0.661868, 0.973082}, {0.282325, 
              0.661868, 0.973082}, {0.235431, 0.32765, 0.833291}}}, {{0, 0}, {
              3, 3}}, {0, 1}], AspectRatio -> 1, Axes -> False, Frame -> 
             False, FrameLabel -> {None, None}, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["5", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{{0.235431, 0.32765, 0.833291}, {0.235431, 0.32765, 
              0.833291}, {0.772061, 0.92462, 0.998703}}, {{0.282325, 0.661868,
               0.973082}, {0.235431, 0.32765, 0.833291}, {0.282325, 0.661868, 
              0.973082}}, {{0.282325, 0.661868, 0.973082}, {0.282325, 
              0.661868, 0.973082}, {0.235431, 0.32765, 0.833291}}}, {{0, 0}, {
              3, 3}}, {0, 1}], AspectRatio -> 1, Axes -> False, Frame -> 
             False, FrameLabel -> {None, None}, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["5", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0.5555555555555556`", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"\"", "SummaryItem"]}]}, {
               TagBox[
                TagBox[
                 GridBox[{{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "1", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "1", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "1", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "3"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "1", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "2", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  SparseArray[
  Automatic, {3, 3}, 0, {
   1, {{0, 2, 4, 5}, {{1}, {2}, {1}, {3}, {3}}}, {1, 1, 1, 1, 2}}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",ExpressionUUID->"019ea727-589f-424a-8da7-\
c923672aa48f"]
}, Open  ]],

Cell[TextData[{
 "Use ",
 StyleBox["Normal", "Input"],
 " to convert a sparse array to a list of lists:"
}], "Text",ExpressionUUID->"e1436a1e-c952-4385-8193-9428467cfd32"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Normal", "[", "m", "]"}], "\[IndentingNewLine]", 
 RowBox[{"%", "//", "MatrixForm"}]}], "Input",ExpressionUUID->"f2050765-ab42-\
448f-882a-f77b8ede984d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "2"}], "}"}]}], "}"}]], "Output",ExpressionUUI\
D->"b3d3f9d6-6f46-4c62-a8d1-ab42a764e309"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "1", "0"},
     {"1", "0", "1"},
     {"0", "0", "2"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",ExpressionUUID->"a0cd9af1-4cce-4188-\
aa78-a6804d59d58a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"automaton", ",", "m"}], "]"}]], "Input",ExpressionUUID->"dc352312-\
54ae-453a-9caa-e0010386ac50"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["AutomatonDeterminize", "Input"]], "Subsubsection",ExpressionUUID->"034e0583-0a75-4732-b69e-8499b17750c8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "AutomatonDeterminize"}]], "Input",ExpressionUUID->"7bebd2cd-a426-4419-81a0-fc898a1d36d3"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomatonDeterminize\\\", \
\\\"[\\\", StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives an automaton \
that, when fed \\!\\(\\*StyleBox[\\\"list\\\", \\\"TI\\\"]\\), outputs a list \
of all output values that can reached by traversing edges according to \\!\\(\
\\*StyleBox[\\\"list\\\", \\\"TI\\\"]\\) in a non\[Hyphen]deterministic \
automaton \\!\\(\\*StyleBox[\\\"M\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[List[\\\"AutomatonDeterminize\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"M\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"f\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) applies \
\\!\\(\\*StyleBox[\\\"f\\\", \\\"TI\\\"]\\) to the determinized automaton's \
output lists.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"AutomatonDeterminize", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`originalautomaton", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Automaton", "[", 
                    RowBox[{
                    "IntegerSequences`Private`originaledges_", ",", 
                    "IntegerSequences`Private`originalinitialstate_", ",", 
                    "___"}], "]"}], ")"}], "?", "AutomatonQ"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`outputfunction", ":", 
                    RowBox[{"Except", "[", "_Rule", "]"}], ":", "Identity"}], 
                    ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`inputalphabet", ",", 
                    "IntegerSequences`Private`initialstate", ",", 
                    "IntegerSequences`Private`epsilontransitiongraph", ",", 
                    "IntegerSequences`Private`statelist", ",", 
                    "IntegerSequences`Private`statecount", ",", 
                    "IntegerSequences`Private`stateindex", ",", 
                    "IntegerSequences`Private`edges", ",", 
                    "IntegerSequences`Private`currentstate", ",", 
                    "IntegerSequences`Private`newstate", ",", 
                    "IntegerSequences`Private`originaloutputrules", ",", 
                    "IntegerSequences`Private`determinizedautomaton"}], "}"}],
                     ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`inputalphabet", "=", 
                    RowBox[{
                    "AutomatonInputAlphabet", "[", 
                    "IntegerSequences`Private`originalautomaton", "]"}]}], 
                    ";", 
                    RowBox[{
                    "IntegerSequences`Private`epsilontransitiongraph", "=", 
                    RowBox[{"Graph", "[", 
                    RowBox[{
                    RowBox[{
                    "AutomatonStateList", "[", 
                    "IntegerSequences`Private`originalautomaton", "]"}], ",", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"IntegerSequences`Private`originaledges", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`rule_Rule", ",", 
                    RowBox[{"TransitionSequence", "[", "]"}]}], "}"}], 
                    "\[RuleDelayed]", "IntegerSequences`Private`rule"}]}], 
                    "]"}]}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`initialstate", "=", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`AutomatonInitialStateMode", "[", 
                    RowBox[{
                    "IntegerSequences`Private`originalautomaton", ",", 
                    "AutomatonDeterminize"}], "]"}], 
                    "\[Equal]", "\<\"StateList\"\>"}], ",", 
                    "IntegerSequences`Private`originalinitialstate", ",", 
                    RowBox[{
                    "{", "IntegerSequences`Private`originalinitialstate", 
                    "}"}]}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`statelist", "=", 
                    RowBox[{
                    "{", "IntegerSequences`Private`initialstate", "}"}]}], 
                    ";", 
                    RowBox[{"IntegerSequences`Private`statecount", "=", "1"}],
                     ";", 
                    RowBox[{"IntegerSequences`Private`stateindex", "=", "1"}],
                     ";", 
                    RowBox[{"IntegerSequences`Private`edges", "=", 
                    RowBox[{"Join", "@@", 
                    RowBox[{
                    RowBox[{"Reap", "[", 
                    RowBox[{"While", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`stateindex", "\[LessEqual]", 
                    "IntegerSequences`Private`statecount"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`currentstate", "=", 
                    RowBox[{
                    "IntegerSequences`Private`statelist", 
                    "\[LeftDoubleBracket]", 
                    "IntegerSequences`Private`stateindex", 
                    "\[RightDoubleBracket]"}]}], ";", 
                    RowBox[{"Sow", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`letter", ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`newstate", "=", 
                    RowBox[{"Union", "@@", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`originalstate", ",", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"IntegerSequences`Private`originaledges", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`originalstate", "\[Rule]", 
                    "IntegerSequences`Private`s_"}], ",", 
                    RowBox[{"IntegerSequences`Private`label_", "/;", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`letter", ",", 
                    "IntegerSequences`Private`label"}], "]"}]}]}], "}"}], 
                    "\[RuleDelayed]", "IntegerSequences`Private`s"}]}], 
                    "]"}]}], "]"}], "/@", 
                    "IntegerSequences`Private`currentstate"}]}]}], ";", 
                    RowBox[{"IntegerSequences`Private`newstate", "=", 
                    RowBox[{"IntegerSequences`Private`newstate", "\[Union]", 
                    RowBox[{"VertexOutComponent", "[", 
                    RowBox[{
                    "IntegerSequences`Private`epsilontransitiongraph", ",", 
                    "IntegerSequences`Private`newstate"}], "]"}]}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`statelist", ",", 
                    "IntegerSequences`Private`newstate"}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`statecount", "++"}], 
                    ";", 
                    RowBox[{"AppendTo", "[", 
                    RowBox[{
                    "IntegerSequences`Private`statelist", ",", 
                    "IntegerSequences`Private`newstate"}], "]"}]}]}], "]"}], 
                    ";", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`currentstate", "\[Rule]", 
                    "IntegerSequences`Private`newstate"}], ",", 
                    "IntegerSequences`Private`letter"}], "}"}]}]}], "]"}], "/@",
                     "IntegerSequences`Private`inputalphabet"}], "]"}], ";", 
                    RowBox[{"IntegerSequences`Private`stateindex", "++"}]}]}],
                     "]"}], "]"}], "\[LeftDoubleBracket]", 
                    RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}]}]}], 
                    ";", 
                    RowBox[{
                    "IntegerSequences`Private`originaloutputrules", "=", 
                    RowBox[{
                    "AutomatonOutputRules", "[", 
                    "IntegerSequences`Private`originalautomaton", "]"}]}], 
                    ";", 
                    RowBox[{
                    "IntegerSequences`Private`determinizedautomaton", "=", 
                    RowBox[{"Automaton", "[", 
                    RowBox[{
                    "IntegerSequences`Private`edges", ",", 
                    "IntegerSequences`Private`initialstate", ",", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`s", ",", 
                    RowBox[{"IntegerSequences`Private`s", "\[Rule]", 
                    RowBox[{"IntegerSequences`Private`outputfunction", "[", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    "IntegerSequences`Private`s", ",", 
                    "IntegerSequences`Private`originaloutputrules", ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], "]"}]}]}], "]"}], "/@", 
                    "IntegerSequences`Private`statelist"}], ",", 
                    RowBox[{
                    "InputAlphabet", "\[Rule]", 
                    "IntegerSequences`Private`inputalphabet"}]}], "]"}]}], 
                    ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"TrueQ", "[", 
                    RowBox[{"OptionValue", "[", "Minimize", "]"}], "]"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`determinizedautomaton", "=", 
                    RowBox[{"AutomatonMinimize", "[", 
                    RowBox[{
                    "IntegerSequences`Private`determinizedautomaton", ",", 
                    RowBox[{"IndexedStateNames", "\[Rule]", 
                    RowBox[{
                    "OptionValue", "[", "IndexedStateNames", "]"}]}]}], 
                    "]"}]}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"TrueQ", "[", 
                    RowBox[{"OptionValue", "[", "IndexedStateNames", "]"}], 
                    "]"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`determinizedautomaton", "=", 
                    RowBox[{
                    "IntegerSequences`Private`IndexAutomaton", "[", 
                    "IntegerSequences`Private`determinizedautomaton", 
                    "]"}]}]}], "]"}]}], "]"}], ";", 
                    "IntegerSequences`Private`determinizedautomaton"}]}], 
                    "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "AutomatonDeterminize", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_.", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`AutomatonDeterminize] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Optional[
                    Blank[]], 
                    OptionsPattern[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"IndexedStateNames", "\[Rule]", "True"}], ",", 
                    RowBox[{"Minimize", "\[Rule]", "True"}]}], "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`AutomatonDeterminize\
\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomatonDeterminize\\\", \
\\\"[\\\", StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives an automaton \
that, when fed \\!\\(\\*StyleBox[\\\"list\\\", \\\"TI\\\"]\\), outputs a list \
of all output values that can reached by traversing edges according to \\!\\(\
\\*StyleBox[\\\"list\\\", \\\"TI\\\"]\\) in a non\[Hyphen]deterministic \
automaton \\!\\(\\*StyleBox[\\\"M\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[List[\\\"AutomatonDeterminize\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"M\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"f\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) applies \
\\!\\(\\*StyleBox[\\\"f\\\", \\\"TI\\\"]\\) to the determinized automaton's \
output lists.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"AutomatonDeterminize\", \"[\", StyleBox[\"M\", \
\"TI\"], \"]\"]]\) gives an automaton that, when fed \!\(\*StyleBox[\"list\", \
\"TI\"]\), outputs a list of all output values that can reached by traversing \
edges according to \!\(\*StyleBox[\"list\", \"TI\"]\) in a \
non\[Hyphen]deterministic automaton \!\(\*StyleBox[\"M\", \"TI\"]\).\n\
\!\(\*RowBox[List[\"AutomatonDeterminize\", \"[\", \
RowBox[List[StyleBox[\"M\", \"TI\"], \",\", StyleBox[\"f\", \"TI\"]]], \
\"]\"]]\) applies \!\(\*StyleBox[\"f\", \"TI\"]\) to the determinized \
automaton's output lists.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`AutomatonDeterminize, {
      IntegerSequences`AutomatonDeterminize[
         Pattern[IntegerSequences`Private`originalautomaton, 
          PatternTest[
           IntegerSequences`Automaton[
            Pattern[IntegerSequences`Private`originaledges, 
             Blank[]], 
            Pattern[IntegerSequences`Private`originalinitialstate, 
             Blank[]], 
            BlankNullSequence[]], IntegerSequences`AutomatonQ]], 
         Optional[
          Pattern[IntegerSequences`Private`outputfunction, 
           Except[
            Blank[Rule]]], Identity], 
         OptionsPattern[]] :> 
       Module[{IntegerSequences`Private`inputalphabet, 
          IntegerSequences`Private`initialstate, 
          IntegerSequences`Private`epsilontransitiongraph, 
          IntegerSequences`Private`statelist, 
          IntegerSequences`Private`statecount, 
          IntegerSequences`Private`stateindex, IntegerSequences`Private`edges,
           IntegerSequences`Private`currentstate, 
          IntegerSequences`Private`newstate, 
          IntegerSequences`Private`originaloutputrules, 
          IntegerSequences`Private`determinizedautomaton}, 
         IntegerSequences`Private`inputalphabet = 
          IntegerSequences`AutomatonInputAlphabet[
           IntegerSequences`Private`originalautomaton]; 
         IntegerSequences`Private`epsilontransitiongraph = Graph[
            IntegerSequences`AutomatonStateList[
            IntegerSequences`Private`originalautomaton], 
            Cases[IntegerSequences`Private`originaledges, {
               Pattern[IntegerSequences`Private`rule, 
                Blank[Rule]], 
               IntegerSequences`TransitionSequence[]} :> 
             IntegerSequences`Private`rule]]; 
         IntegerSequences`Private`initialstate = 
          If[IntegerSequences`Private`AutomatonInitialStateMode[
             IntegerSequences`Private`originalautomaton, 
              IntegerSequences`AutomatonDeterminize] == "StateList", 
            IntegerSequences`Private`originalinitialstate, {
            IntegerSequences`Private`originalinitialstate}]; 
         IntegerSequences`Private`statelist = {
           IntegerSequences`Private`initialstate}; 
         IntegerSequences`Private`statecount = 1; 
         IntegerSequences`Private`stateindex = 1; 
         IntegerSequences`Private`edges = Apply[Join, 
            Part[
             Reap[
              While[
              IntegerSequences`Private`stateindex <= 
               IntegerSequences`Private`statecount, 
               IntegerSequences`Private`currentstate = 
                Part[IntegerSequences`Private`statelist, 
                  IntegerSequences`Private`stateindex]; Sow[
                 Map[
                  Function[
                  IntegerSequences`Private`letter, 
                   IntegerSequences`Private`newstate = Apply[Union, 
                    Map[
                    Function[IntegerSequences`Private`originalstate, 
                    Cases[
                    IntegerSequences`Private`originaledges, {
                    IntegerSequences`Private`originalstate -> 
                    Pattern[IntegerSequences`Private`s, 
                    Blank[]], 
                    Condition[
                    Pattern[IntegerSequences`Private`label, 
                    Blank[]], 
                    MatchQ[
                    IntegerSequences`Private`letter, 
                    IntegerSequences`Private`label]]} :> 
                    IntegerSequences`Private`s]], 
                    IntegerSequences`Private`currentstate]]; 
                   IntegerSequences`Private`newstate = 
                    Union[IntegerSequences`Private`newstate, 
                    VertexOutComponent[
                    IntegerSequences`Private`epsilontransitiongraph, 
                    IntegerSequences`Private`newstate]]; If[
                    Not[
                    MemberQ[
                    IntegerSequences`Private`statelist, 
                    IntegerSequences`Private`newstate]], 
                    Increment[IntegerSequences`Private`statecount]; 
                    AppendTo[
                    IntegerSequences`Private`statelist, 
                    IntegerSequences`Private`newstate]]; {
                    IntegerSequences`Private`currentstate -> 
                    IntegerSequences`Private`newstate, 
                    IntegerSequences`Private`letter}], 
                  IntegerSequences`Private`inputalphabet]]; 
               Increment[IntegerSequences`Private`stateindex]]], 2, 1]]; 
         IntegerSequences`Private`originaloutputrules = 
          IntegerSequences`AutomatonOutputRules[
           IntegerSequences`Private`originalautomaton]; 
         IntegerSequences`Private`determinizedautomaton = 
          IntegerSequences`Automaton[
           IntegerSequences`Private`edges, 
            IntegerSequences`Private`initialstate, 
            Map[
             Function[
             IntegerSequences`Private`s, IntegerSequences`Private`s -> 
              IntegerSequences`Private`outputfunction[
                Replace[
                IntegerSequences`Private`s, 
                 IntegerSequences`Private`originaloutputrules, {1}]]], 
             IntegerSequences`Private`statelist], 
            IntegerSequences`InputAlphabet -> 
            IntegerSequences`Private`inputalphabet]; If[
           TrueQ[
            OptionValue[Minimize]], 
           IntegerSequences`Private`determinizedautomaton = 
           IntegerSequences`AutomatonMinimize[
            IntegerSequences`Private`determinizedautomaton, 
             IntegerSequences`IndexedStateNames -> 
             OptionValue[IntegerSequences`IndexedStateNames]], 
           If[
            TrueQ[
             OptionValue[IntegerSequences`IndexedStateNames]], 
            IntegerSequences`Private`determinizedautomaton = 
            IntegerSequences`Private`IndexAutomaton[
             IntegerSequences`Private`determinizedautomaton]]]; 
         IntegerSequences`Private`determinizedautomaton]}], "SubValues" -> 
    None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`AutomatonDeterminize, {
      SyntaxInformation[IntegerSequences`AutomatonDeterminize] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           Optional[
            Blank[]], 
           OptionsPattern[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {
     IntegerSequences`IndexedStateNames -> True, Minimize -> True}, 
    "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`AutomatonDeterminize"], False]]], "Output",ExpressionUUI\
D->"424901bd-15a6-45b9-84c6-735f5354b252"]
}, Open  ]],

Cell["\<\
When no output rules are given, the outputs of the determinized automaton are \
lists of states from the original automaton:\
\>", "Text",ExpressionUUID->"778669e6-4647-4539-9b18-92fc8d8c0230"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonDeterminize", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", 
        RowBox[{"0", "|", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "C"}], ",", 
        RowBox[{"0", "|", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", 
        RowBox[{"0", "|", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"C", "\[Rule]", "C"}], ",", 
        RowBox[{"0", "|", "1"}]}], "}"}]}], "}"}], ",", "A", ",", 
    RowBox[{"InputAlphabet", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}], "]"}]], "Input",ExpressionUUI\
D->"96113ed0-eb30-469a-8af6-f6983c131080"],

Cell[BoxData[
 RowBox[{"Automaton", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "2"}], ",", "1"}], "}"}]}], "}"}], ",", "1", 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", 
      RowBox[{"{", "A", "}"}]}], ",", 
     RowBox[{"2", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"B", ",", "C"}], "}"}]}]}], "}"}], ",", 
   RowBox[{"InputAlphabet", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}]], "Output",ExpressionUUID->\
"c73ac245-7eb5-4db9-b88b-4b482c6d038b"]
}, Open  ]],

Cell[TextData[{
 "If the original automaton is underdetermined, then the empty list ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", "}"}], TraditionalForm]],ExpressionUUID->
  "a096015d-4bd2-4f23-8716-04ae92fdee2c"],
 " is a possible output for the determinized automaton:"
}], "Text",ExpressionUUID->"6b95fc73-ea68-4e5c-8042-3479f9037ed4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonDeterminize", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"A", "\[Rule]", "B"}], ",", "0"}], "}"}], "}"}], ",", "A", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"A", "\[Rule]", "True"}], ",", 
      RowBox[{"B", "\[Rule]", "True"}]}], "}"}]}], "]"}], "]"}]], "Input",Expr\
essionUUID->"0600415f-3554-44fa-8e45-444486404896"],

Cell[BoxData[
 RowBox[{"Automaton", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "3"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"3", "\[Rule]", "3"}], ",", "0"}], "}"}]}], "}"}], ",", "1", 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", 
      RowBox[{"{", "True", "}"}]}], ",", 
     RowBox[{"2", "\[Rule]", 
      RowBox[{"{", "True", "}"}]}], ",", 
     RowBox[{"3", "\[Rule]", 
      RowBox[{"{", "}"}]}]}], "}"}], ",", 
   RowBox[{"InputAlphabet", "\[Rule]", 
    RowBox[{"{", "0", "}"}]}]}], "]"}]], "Output",ExpressionUUID->"47632ef2-\
2045-4fab-bd33-c3bf3db3868a"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["AutomatonGraph", "Input"]], "Subsubsection",ExpressionUUID->"ea23605b-8797-4bf4-bd70-bef40fcce30f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "AutomatonGraph"}]], "Input",ExpressionUUID->"a87348bc-ea6c-473a-b600-ab2b53601bc8"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomatonGraph\\\", \
\\\"[\\\", StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the directed \
graph of an automaton \\!\\(\\*StyleBox[\\\"M\\\", \\\"TI\\\"]\\).\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"AutomatonGraph", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`automaton", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Automaton", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`edges_", "/;", 
                    RowBox[{"!", 
                    RowBox[{"MemberQ", "[", 
                    RowBox[{"IntegerSequences`Private`edges", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"_", "[", 
                    RowBox[{"___", ",", "Null", ",", "___"}], "]"}], ",", 
                    "_"}], "}"}]}], "]"}]}]}], ",", 
                    "IntegerSequences`Private`initialstate_", ",", "___"}], 
                    "]"}], ")"}], "?", "AutomatonQ"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`options", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`outputrules", "=", 
                    RowBox[{
                    "AutomatonOutputRules", "[", 
                    "IntegerSequences`Private`automaton", "]"}]}], "}"}], ",", 
                    RowBox[{"Graph", "[", 
                    RowBox[{
                    RowBox[{"Prepend", "[", 
                    RowBox[{
                    RowBox[{"Apply", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`edge", ",", 
                    "IntegerSequences`Private`labels"}], "}"}], ",", 
                    RowBox[{"Labeled", "[", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`outputrules", "===", 
                    RowBox[{"{", "}"}]}], ",", 
                    "IntegerSequences`Private`edge", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Interpretation", "[", 
                    RowBox[{
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    "#1", ",", "IntegerSequences`Private`outputrules"}], 
                    "]"}], ",", "#1"}], "]"}], "&"}], ")"}], "/@", 
                    "IntegerSequences`Private`edge"}]}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`labels", "]"}], 
                    "\[Equal]", "1"}], ",", 
                    RowBox[{
                    "First", "[", "IntegerSequences`Private`labels", "]"}], 
                    ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"Riffle", "[", 
                    RowBox[{
                    "IntegerSequences`Private`labels", ",", "\<\",\"\>"}], 
                    "]"}], "]"}]}], "]"}]}], "]"}]}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"OptionValue", "[", "GatherEdges", "]"}], ",", 
                    RowBox[{"KeyValueMap", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"#1", ",", "#2"}], "}"}], "&"}], ",", 
                    RowBox[{"GroupBy", "[", 
                    RowBox[{"IntegerSequences`Private`edges", ",", 
                    RowBox[{"First", "\[Rule]", "Last"}]}], "]"}]}], "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"MapAt", "[", 
                    RowBox[{"List", ",", "2"}], "]"}], "/@", 
                    "IntegerSequences`Private`edges"}]}], "]"}], ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], ",", 
                    RowBox[{"Null", "\[Rule]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`outputrules", "===", 
                    RowBox[{"{", "}"}]}], ",", 
                    "IntegerSequences`Private`initialstate", ",", 
                    RowBox[{"Interpretation", "[", 
                    RowBox[{
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    "IntegerSequences`Private`initialstate", ",", 
                    "IntegerSequences`Private`outputrules"}], "]"}], ",", 
                    "IntegerSequences`Private`initialstate"}], "]"}]}], 
                    "]"}]}]}], "]"}], ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"{", "IntegerSequences`Private`options", "}"}], 
                    ",", 
                    RowBox[{"GatherEdges", "\[Rule]", "_"}]}], "]"}]}], ",", 
                    RowBox[{"EdgeShapeFunction", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"\<\"CorporateShortCarvedArrow\"\>", ",", 
                    RowBox[{"\<\"ArrowSize\"\>", "\[Rule]", "0.04`"}], ",", 
                    RowBox[{"\<\"ArrowPositions\"\>", "\[Rule]", "1"}]}], 
                    "}"}], "}"}]}], ",", 
                    RowBox[{"EdgeStyle", "\[Rule]", 
                    RowBox[{"Directive", "[", 
                    RowBox[{"Gray", ",", 
                    RowBox[{"Opacity", "[", "1", "]"}]}], "]"}]}], ",", 
                    RowBox[{"PerformanceGoal", "\[Rule]", "\<\"Quality\"\>"}],
                     ",", 
                    RowBox[{"VertexLabels", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`vertex_", 
                    "\[RuleDelayed]", 
                    RowBox[{"Placed", "[", 
                    RowBox[{"IntegerSequences`Private`vertex", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    FractionBox["1", "2"], ",", 
                    FractionBox["1", "2"]}], "}"}]}], "]"}]}], "}"}]}], ",", 
                    RowBox[{"VertexShapeFunction", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"_", "\[Rule]", "\<\"Circle\"\>"}], ",", 
                    RowBox[{"Null", "\[Rule]", "None"}]}], "}"}]}], ",", 
                    RowBox[{"VertexSize", "\[Rule]", "0.2`"}], ",", 
                    RowBox[{"VertexStyle", "\[Rule]", 
                    RowBox[{"Hue", "[", 
                    RowBox[{"0.6`", ",", "0.3`", ",", "0.8`"}], "]"}]}]}], 
                    "]"}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "AutomatonGraph", "]"}],
                     "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`AutomatonGraph] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    OptionsPattern[]}}}],
                    Editable->False]},
                  {
                   PaneSelectorBox[{True->
                    ButtonBox[
                    PaneSelectorBox[{False->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "DownPointerOpener"]]},
                    "RowWithSeparators"], True->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "DownPointerOpenerHot"]]},
                    "RowWithSeparators"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    BaseStyle->None,
                    
                    ButtonFunction:>(Part[System`InformationDump`open$$, 9] = 
                    False),
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->0,
                    Method->"Preemptive"], False->
                    ButtonBox[
                    PaneSelectorBox[{False->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "RightPointerOpener"]]},
                    "RowWithSeparators"], True->
                    
                    TemplateBox[{
                    "\[ThickSpace]","\"\[ThickSpace]\"",StyleBox[
                    "\"Options\"", "InformationRowLabel", StripOnInput -> 
                    False],DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "RightPointerOpenerHot"]]},
                    "RowWithSeparators"]}, Dynamic[
                    CurrentValue["MouseOver"]],
                    FrameMargins->0,
                    ImageSize->Automatic],
                    Appearance->None,
                    BaseStyle->None,
                    
                    ButtonFunction:>(Part[System`InformationDump`open$$, 9] = 
                    True),
                    Evaluator->Automatic,
                    FrameMargins->0,
                    ImageMargins->0,
                    Method->"Preemptive"]}, Dynamic[
                    FEPrivate`Part[System`InformationDump`open$$, 9]]], 
                   PaneSelectorBox[{True->GridBox[{
                    {
                    RowBox[{"AlignmentPoint", "\[Rule]", "Center"}]},
                    {
                    RowBox[{"AnnotationRules", "\[Rule]", 
                    RowBox[{"{", "}"}]}]},
                    {
                    RowBox[{"AspectRatio", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"Axes", "\[Rule]", "False"}]},
                    {
                    RowBox[{"AxesLabel", "\[Rule]", "None"}]},
                    {
                    RowBox[{"AxesOrigin", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"AxesStyle", "\[Rule]", 
                    RowBox[{"{", "}"}]}]},
                    {
                    RowBox[{"Background", "\[Rule]", "None"}]},
                    {
                    RowBox[{"BaselinePosition", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"BaseStyle", "\[Rule]", 
                    RowBox[{"{", "}"}]}]},
                    {
                    RowBox[{"ContentSelectable", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"DirectedEdges", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"EdgeCapacity", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"EdgeCost", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"EdgeLabels", "\[Rule]", "None"}]},
                    {
                    RowBox[{"EdgeLabelStyle", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"EdgeShapeFunction", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"EdgeStyle", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"EdgeWeight", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"Editable", "\[Rule]", "False"}]},
                    {
                    RowBox[{"Epilog", "\[Rule]", 
                    RowBox[{"{", "}"}]}]},
                    {
                    RowBox[{"FormatType", "\[Rule]", "TraditionalForm"}]},
                    {
                    RowBox[{"Frame", "\[Rule]", "False"}]},
                    {
                    RowBox[{"FrameLabel", "\[Rule]", "None"}]},
                    {
                    RowBox[{"FrameStyle", "\[Rule]", 
                    RowBox[{"{", "}"}]}]},
                    {
                    RowBox[{"FrameTicks", "\[Rule]", "None"}]},
                    {
                    RowBox[{"FrameTicksStyle", "\[Rule]", 
                    RowBox[{"{", "}"}]}]},
                    {
                    RowBox[{"GatherEdges", "\[Rule]", "True"}]},
                    {
                    RowBox[{"GraphHighlight", "\[Rule]", 
                    RowBox[{"{", "}"}]}]},
                    {
                    RowBox[{"GraphHighlightStyle", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"GraphLayout", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"GraphRoot", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"GraphStyle", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"GridLines", "\[Rule]", "None"}]},
                    {
                    RowBox[{"GridLinesStyle", "\[Rule]", 
                    RowBox[{"{", "}"}]}]},
                    {
                    RowBox[{"ImageMargins", "\[Rule]", "0.`"}]},
                    {
                    RowBox[{"ImagePadding", "\[Rule]", "All"}]},
                    {
                    RowBox[{"ImageSize", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"LabelStyle", "\[Rule]", 
                    RowBox[{"{", "}"}]}]},
                    {
                    RowBox[{"PlotLabel", "\[Rule]", "None"}]},
                    {
                    RowBox[{"PlotRange", "\[Rule]", "All"}]},
                    {
                    RowBox[{"PlotRangeClipping", "\[Rule]", "False"}]},
                    {
                    RowBox[{"PlotRangePadding", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"PlotRegion", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"PlotTheme", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"Prolog", "\[Rule]", 
                    RowBox[{"{", "}"}]}]},
                    {
                    RowBox[{"Properties", "\[Rule]", 
                    RowBox[{"{", "}"}]}]},
                    {
                    RowBox[{"RotateLabel", "\[Rule]", "True"}]},
                    {
                    RowBox[{"Ticks", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"TicksStyle", "\[Rule]", 
                    RowBox[{"{", "}"}]}]},
                    {
                    RowBox[{"VertexCapacity", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"VertexCoordinates", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"VertexLabels", "\[Rule]", "None"}]},
                    {
                    RowBox[{"VertexLabelStyle", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"VertexShape", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"VertexShapeFunction", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"VertexSize", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"VertexStyle", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{"VertexWeight", "\[Rule]", "Automatic"}]},
                    {
                    RowBox[{
                    "PerformanceGoal", "\[RuleDelayed]", "$PerformanceGoal"}]},
                    {
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"","\"\[InvisibleSpace]\"","60","\" total)\""},
                    "RowDefault"], "InformationRowOpener",
                    StripOnInput->False]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{1.}}}], False->
                    RowBox[{
                    RowBox[{"AlignmentPoint", "\[Rule]", "Center"}], 
                    "\[ThinSpace]", 
                    StyleBox["\<\"\[Ellipsis]\"\>", "InformationRowOpener",
                    StripOnInput->False], "\[ThinSpace]", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\"","\"\[InvisibleSpace]\"","60","\" total)\""},
                    "RowDefault"], "InformationRowOpener",
                    StripOnInput->False]}]}, Dynamic[
                    FEPrivate`Part[System`InformationDump`open$$, 9]],
                    BaselinePosition->Baseline,
                    ImageSize->Automatic]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`AutomatonGraph\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomatonGraph\\\", \
\\\"[\\\", StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the directed \
graph of an automaton \\!\\(\\*StyleBox[\\\"M\\\", \\\"TI\\\"]\\).\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"AutomatonGraph\", \"[\", StyleBox[\"M\", \"TI\"], \
\"]\"]]\) gives the directed graph of an automaton \!\(\*StyleBox[\"M\", \"TI\
\"]\).", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`AutomatonGraph, {
      IntegerSequences`AutomatonGraph[
         Pattern[IntegerSequences`Private`automaton, 
          PatternTest[
           IntegerSequences`Automaton[
            Condition[
             Pattern[IntegerSequences`Private`edges, 
              Blank[]], 
             Not[
              MemberQ[IntegerSequences`Private`edges, {
                Blank[][
                 BlankNullSequence[], Null, 
                 BlankNullSequence[]], 
                Blank[]}]]], 
            Pattern[IntegerSequences`Private`initialstate, 
             Blank[]], 
            BlankNullSequence[]], IntegerSequences`AutomatonQ]], 
         Pattern[IntegerSequences`Private`options, 
          OptionsPattern[]]] :> 
       With[{IntegerSequences`Private`outputrules = 
          IntegerSequences`AutomatonOutputRules[
           IntegerSequences`Private`automaton]}, 
         Graph[
          Prepend[
           Apply[
            
            Function[{
             IntegerSequences`Private`edge, IntegerSequences`Private`labels}, 
             Labeled[
              If[
              IntegerSequences`Private`outputrules === {}, 
               IntegerSequences`Private`edge, 
               Map[Interpretation[
                 Replace[#, IntegerSequences`Private`outputrules], #]& , 
                IntegerSequences`Private`edge]], 
              If[Length[IntegerSequences`Private`labels] == 1, 
               First[IntegerSequences`Private`labels], 
               Row[
                Riffle[IntegerSequences`Private`labels, ","]]]]], 
            If[
             OptionValue[IntegerSequences`GatherEdges], 
             KeyValueMap[{#, #2}& , 
              GroupBy[IntegerSequences`Private`edges, First -> Last]], 
             Map[
              MapAt[List, 2], IntegerSequences`Private`edges]], {1}], Null -> 
           If[IntegerSequences`Private`outputrules === {}, 
             IntegerSequences`Private`initialstate, 
             Interpretation[
              Replace[
              IntegerSequences`Private`initialstate, 
               IntegerSequences`Private`outputrules], 
              IntegerSequences`Private`initialstate]]], 
          Apply[Sequence, 
           
           DeleteCases[{IntegerSequences`Private`options}, 
            IntegerSequences`GatherEdges -> Blank[]]], 
          EdgeShapeFunction -> {{
            "CorporateShortCarvedArrow", "ArrowSize" -> 0.04, 
             "ArrowPositions" -> 1}}, EdgeStyle -> Directive[Gray, 
            Opacity[1]], PerformanceGoal -> "Quality", 
          VertexLabels -> {Pattern[IntegerSequences`Private`vertex, 
              Blank[]] :> 
            Placed[IntegerSequences`Private`vertex, {1/2, 1/2}]}, 
          VertexShapeFunction -> {Blank[] -> "Circle", Null -> None}, 
          VertexSize -> 0.2, VertexStyle -> Hue[0.6, 0.3, 0.8]]]}], 
    "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`AutomatonGraph, {
      SyntaxInformation[IntegerSequences`AutomatonGraph] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           OptionsPattern[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {
     AlignmentPoint -> Center, AnnotationRules -> {}, AspectRatio -> 
      Automatic, Axes -> False, AxesLabel -> None, AxesOrigin -> Automatic, 
      AxesStyle -> {}, Background -> None, BaselinePosition -> Automatic, 
      BaseStyle -> {}, ContentSelectable -> Automatic, DirectedEdges -> 
      Automatic, EdgeCapacity -> Automatic, EdgeCost -> Automatic, EdgeLabels -> 
      None, EdgeLabelStyle -> Automatic, EdgeShapeFunction -> Automatic, 
      EdgeStyle -> Automatic, EdgeWeight -> Automatic, Editable -> False, 
      Epilog -> {}, FormatType -> TraditionalForm, Frame -> False, FrameLabel -> 
      None, FrameStyle -> {}, FrameTicks -> None, FrameTicksStyle -> {}, 
      IntegerSequences`GatherEdges -> True, GraphHighlight -> {}, 
      GraphHighlightStyle -> Automatic, GraphLayout -> Automatic, GraphRoot -> 
      Automatic, GraphStyle -> Automatic, GridLines -> None, 
      GridLinesStyle -> {}, ImageMargins -> 0., ImagePadding -> All, 
      ImageSize -> Automatic, LabelStyle -> {}, PlotLabel -> None, PlotRange -> 
      All, PlotRangeClipping -> False, PlotRangePadding -> Automatic, 
      PlotRegion -> Automatic, PlotTheme -> Automatic, Prolog -> {}, 
      Properties -> {}, RotateLabel -> True, Ticks -> Automatic, 
      TicksStyle -> {}, VertexCapacity -> Automatic, VertexCoordinates -> 
      Automatic, VertexLabels -> None, VertexLabelStyle -> Automatic, 
      VertexShape -> Automatic, VertexShapeFunction -> Automatic, VertexSize -> 
      Automatic, VertexStyle -> Automatic, VertexWeight -> Automatic, 
      PerformanceGoal :> $PerformanceGoal}, "Attributes" -> {Protected}, 
    "FullName" -> "IntegerSequences`AutomatonGraph"], False]]], "Output",Expre\
ssionUUID->"6a2cd6a8-bb8a-49a3-bd91-b9d7a67fd508"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonGraph", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"0", "\[Rule]", "0"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"0", "\[Rule]", "1"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"1", "\[Rule]", "1"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"1", "\[Rule]", "0"}], ",", "1"}], "}"}]}], "}"}], ",", "0", 
    ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"0", "\[Rule]", "\"\<even\>\""}], ",", 
      RowBox[{"1", "\[Rule]", "\"\<odd\>\""}]}], "}"}]}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"8ef4d691-2118-4e1f-876e-83bfb1d13ce7"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{Null, 
       Interpretation["even", 0], 
       Interpretation["odd", 1]}, {{{1, 2}, {2, 2}, {2, 3}, {3, 3}, {3, 2}}, 
       Null}, {EdgeLabels -> {DirectedEdge[
           Interpretation["even", 0], 
           Interpretation["even", 0]] -> 0, DirectedEdge[
           Interpretation["even", 0], 
           Interpretation["odd", 1]] -> 1, DirectedEdge[
           Interpretation["odd", 1], 
           Interpretation["even", 0]] -> 1, DirectedEdge[
           Interpretation["odd", 1], 
           Interpretation["odd", 1]] -> 0}, 
       EdgeShapeFunction -> {{
         "CorporateShortCarvedArrow", "ArrowSize" -> 0.04, "ArrowPositions" -> 
          1}}, EdgeStyle -> {
         Directive[
          GrayLevel[0.5], 
          Opacity[1]]}, PerformanceGoal -> "Quality", 
       VertexLabels -> {Interpretation["odd", 1] -> Placed[
           Interpretation["odd", 1], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation["even", 0] -> Placed[
           Interpretation["even", 0], {
            Rational[1, 2], 
            Rational[1, 2]}], Null -> Placed[Null, {
            Rational[1, 2], 
            Rational[1, 2]}]}, 
       VertexShapeFunction -> {
        Null -> None, Interpretation["even", 0] -> "Circle", 
         Interpretation["odd", 1] -> "Circle"}, VertexSize -> {0.2}, 
       VertexStyle -> {
         Hue[0.6, 0.3, 0.8]}}]], Typeset`boxes, Typeset`boxes$s2d = 
    GraphicsGroupBox[{{
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], 
       Directive[
        GrayLevel[0.5], 
        Opacity[1]], {
        Arrowheads[{{0.04, 1, {
            GraphicsBox[
             
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
               0, 1, 0}}}, {{{-0.12347775660674376`, 
               0.}, {-0.5614144091900695, 
               0.21895451909535257`}, {-0.4738215557948804, 
               
               0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
               0.}}}]], 0.533327810340424}}}], 
        ArrowBox[{
          DynamicLocation["VertexID$1", Automatic, Center], 
          DynamicLocation["VertexID$2", Automatic, Center]}]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$2", Automatic, Center], {
             1.215969005971036, -0.1425312379880006}, {
             1.2342632844934087`, -0.32493768720862726`}, {
             1.1702710252509327`, -0.431056932977143}, {
             0.8305438002399658, -0.4310569329771431}, {
             0.7665515409974896, -0.32493768720862726`}, {
             0.7848458195198625, -0.1425312379880006}, 
             DynamicLocation["VertexID$2", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$2"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$2", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$2", Automatic, Center], {
             1.5003055284305298`, 0.16440723931737236`}, 
             DynamicLocation["VertexID$3", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$3"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$3", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             1.5003055284305298`, -0.16440723931737236`}, 
             DynamicLocation["VertexID$2", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$4"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$4", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             2.0886828995833713`, 0.1907835323853024}, {2.287561377120962, 
             0.24717977484589673`}, {2.4147320015954197`, 
             0.1882226960710236}, {
             2.4147320015954197`, -0.18822269607102265`}, {
             2.2875613771209626`, -0.2471797748458961}, {
             2.0886828995833717`, -0.19078353238530207`}, 
             DynamicLocation["VertexID$3", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$5"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$5", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       Hue[0.6, 0.3, 0.8], 
       TagBox[{
         TagBox[
          StyleBox[
           CircleBox[{0., 0.}, {0.0999796231370162, 0.0999796231370162}], 
           ShowContents -> False, StripOnInput -> False], "DynamicName", 
          BoxID -> "VertexID$1"], 
         InsetBox["", 
          Dynamic[
          DynamicLocation[
            "VertexID$1", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$1", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$1", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          
          DiskBox[{1.0004074127454492`, 4.666248974332878*^-18}, {
           0.0999796231370162, 0.0999796231370162}], "DynamicName", BoxID -> 
          "VertexID$2"], 
         InsetBox[
          FormBox[
           InterpretationBox["\"even\"", 0], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$2", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$2", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$2", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$2"], 
       TagBox[{
         TagBox[
          
          DiskBox[{2.000203644115611, 4.9566794084199865`*^-18}, {
           0.0999796231370162, 0.0999796231370162}], "DynamicName", BoxID -> 
          "VertexID$3"], 
         InsetBox[
          FormBox[
           InterpretationBox["\"odd\"", 1], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$3", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$3", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$3", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$3"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{3.9406933090100917`, 
       355.2393066909899}, {-52.23930669098989, 47.23930669098989}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",ExpressionUUID->"8fa0be89-db6c-4369-a416-\
5b7c50eaf31f"]
}, Open  ]],

Cell["\<\
The result is a directed graph, so built-in graph functionality can then be \
used directly:\
\>", "Text",ExpressionUUID->"8e587c58-d108-43ee-b383-8e8a6368e53d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EdgeCount", "[", "%", "]"}]], "Input",ExpressionUUID->"3021c92c-5a13-4246-886d-d95ffcdd7377"],

Cell[BoxData["5"], "Output",ExpressionUUID->"495d697c-0847-4a55-b44b-fe7d7e9b8fdc"]
}, Open  ]],

Cell[TextData[{
 "The edge pointing to the initial state vertex has an invisible source \
vertex, so the number of vertices in the graph above is ",
 Cell[BoxData[
  FormBox["3", TraditionalForm]],ExpressionUUID->
  "fe236910-c18c-464e-b94f-ba10dfee163b"],
 ":"
}], "Text",ExpressionUUID->"e6f39d98-5287-44cd-a815-d7ca446a838a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"VertexCount", "[", "%%", "]"}]], "Input",ExpressionUUID->"3cc7fcdf-9fdf-4257-8ef3-a9110fe616a2"],

Cell[BoxData["3"], "Output",ExpressionUUID->"bf4cc161-c31d-4fa5-a783-892241807914"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["AutomatonInputAlphabet", "Input"]], "Subsubsection",ExpressionUUID->"dca2b7d5-f65e-46b7-b6ee-466e2264b060"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "AutomatonInputAlphabet"}]], "Input",ExpressionUUID->"2498ef0c-0b72-45c1-8b6f-2548f48c73ab"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomatonInputAlphabet\\\",\
 \\\"[\\\", StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the input \
alphabet of an automaton \\!\\(\\*StyleBox[\\\"M\\\", \\\"TI\\\"]\\).\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"AutomatonInputAlphabet", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Automaton", "[", 
                    RowBox[{"___", ",", 
                    RowBox[{
                    "InputAlphabet", "\[Rule]", 
                    "IntegerSequences`Private`alphabet_List"}], ",", "___"}], 
                    "]"}], ")"}], "?", "AutomatonQ"}], "]"}], ":=", 
                    "IntegerSequences`Private`alphabet"}]},
                    {
                    RowBox[{
                    RowBox[{"AutomatonInputAlphabet", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Automaton", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`edges", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{
                    RowBox[{
                    "_", "?", 
                    "IntegerSequences`Private`AutomatonInputSymbolQ"}], "|", 
                    RowBox[{"TransitionSequence", "[", "]"}]}]}], "}"}], 
                    ".."}], "}"}]}], ",", "__"}], "]"}], ")"}], "?", 
                    "AutomatonQ"}], "]"}], ":=", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Last", "/@", "IntegerSequences`Private`edges"}], 
                    "]"}], ",", 
                    RowBox[{"TransitionSequence", "[", "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"AutomatonInputAlphabet", "[", 
                    RowBox[{"Automaton", "[", 
                    RowBox[{"IntegerSequences`Private`arguments___", ",", 
                    RowBox[{"InputAlphabet", "\[Rule]", "Automatic"}], ",", 
                    "IntegerSequences`Private`options___"}], "]"}], "]"}], ":=", 
                    RowBox[{"AutomatonInputAlphabet", "[", 
                    RowBox[{"Automaton", "[", 
                    RowBox[{
                    "IntegerSequences`Private`arguments", ",", 
                    "IntegerSequences`Private`options"}], "]"}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "AutomatonInputAlphabet", "]"}],
                     "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`AutomatonInputAlphabet] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`AutomatonInputAlphabet\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomatonInputAlphabet\\\",\
 \\\"[\\\", StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the input \
alphabet of an automaton \\!\\(\\*StyleBox[\\\"M\\\", \\\"TI\\\"]\\).\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"AutomatonInputAlphabet\", \"[\", StyleBox[\"M\", \
\"TI\"], \"]\"]]\) gives the input alphabet of an automaton \
\!\(\*StyleBox[\"M\", \"TI\"]\).", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`AutomatonInputAlphabet, {
      IntegerSequences`AutomatonInputAlphabet[
         PatternTest[
          IntegerSequences`Automaton[
           BlankNullSequence[], IntegerSequences`InputAlphabet -> 
           Pattern[IntegerSequences`Private`alphabet, 
             Blank[List]], 
           BlankNullSequence[]], IntegerSequences`AutomatonQ]] :> 
       IntegerSequences`Private`alphabet, 
       IntegerSequences`AutomatonInputAlphabet[
         PatternTest[
          IntegerSequences`Automaton[
           Pattern[IntegerSequences`Private`edges, {
             Repeated[{
               Blank[], 
               Alternatives[
                PatternTest[
                 Blank[], IntegerSequences`Private`AutomatonInputSymbolQ], 
                IntegerSequences`TransitionSequence[]]}]}], 
           BlankSequence[]], IntegerSequences`AutomatonQ]] :> DeleteCases[
         DeleteDuplicates[
          Map[Last, IntegerSequences`Private`edges]], 
         IntegerSequences`TransitionSequence[]], 
       IntegerSequences`AutomatonInputAlphabet[
         IntegerSequences`Automaton[
          Pattern[IntegerSequences`Private`arguments, 
           BlankNullSequence[]], IntegerSequences`InputAlphabet -> Automatic, 
          Pattern[IntegerSequences`Private`options, 
           BlankNullSequence[]]]] :> IntegerSequences`AutomatonInputAlphabet[
         IntegerSequences`Automaton[
         IntegerSequences`Private`arguments, 
          IntegerSequences`Private`options]]}], "SubValues" -> None, 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`AutomatonInputAlphabet, {
      SyntaxInformation[IntegerSequences`AutomatonInputAlphabet] -> {
        "ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`AutomatonInputAlphabet"], False]]], "Output",ExpressionU\
UID->"66ea1f66-923b-4260-9f08-df289961df69"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonInputAlphabet", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "A"}], ",", "1"}], "}"}]}], "}"}], ",", "A", 
    ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"A", "\[Rule]", "\"\<even\>\""}], ",", 
      RowBox[{"B", "\[Rule]", "\"\<odd\>\""}]}], "}"}]}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"2cfe824c-f0a1-4246-a16e-ce0c9764ef9e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "1"}], "}"}]], "Output",ExpressionUUID->"8bc9f844-e3e0-4009-a441-69d5eb20f910"]
}, Open  ]],

Cell[TextData[{
 "Patterns in edge labels prevent ",
 StyleBox["AutomatonInputAlphabet", "Input"],
 " from being able to determine the input alphabet:"
}], "Text",ExpressionUUID->"b6cac220-48ab-46f9-82b5-012302f15fa5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonInputAlphabet", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "_"}], "}"}]}], "}"}], ",", "A"}],
    "]"}], "]"}]], "Input",ExpressionUUID->"fbb1a6e4-c53e-4660-bb78-\
252d610b9d39"],

Cell[BoxData[
 RowBox[{"AutomatonInputAlphabet", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "_"}], "}"}]}], "}"}], ",", "A"}],
    "]"}], "]"}]], "Output",ExpressionUUID->"c7ae6a7d-c836-4685-a6b3-\
9c260b51b7ff"]
}, Open  ]],

Cell[TextData[{
 "Use ",
 StyleBox["InputAlphabet", "Input"],
 " to specify the input alphabet explicitly:"
}], "Text",ExpressionUUID->"ef6a23d0-5fb5-4d34-b9a3-776889029783"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonInputAlphabet", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "_"}], "}"}]}], "}"}], ",", "A", 
    ",", 
    RowBox[{"InputAlphabet", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}], "]"}]], "Input",ExpressionUUI\
D->"87daa88c-1ee6-43f5-812e-a730c4cafae5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "1"}], "}"}]], "Output",ExpressionUUID->"999b6268-982a-4892-a4a6-3bf8e0e359bc"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["AutomatonMinimize", "Input"]], "Subsubsection",ExpressionUUID->"f46ad575-685f-4561-a871-a493f97df26e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "AutomatonMinimize"}]], "Input",ExpressionUUID->"706e438e-a423-4bd3-af42-63b32558083e"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomatonMinimize\\\", \
\\\"[\\\", StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives a minimal \
automaton that agrees with \\!\\(\\*StyleBox[\\\"M\\\", \\\"TI\\\"]\\) on all \
input.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"AutomatonMinimize", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`automaton", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Automaton", "[", 
                    RowBox[{
                    "_", ",", "IntegerSequences`Private`initialstate_", ",", 
                    "___"}], "]"}], ")"}], "?", "AutomatonQ"}]}], ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "/;", 
                    "True"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`inputalphabet", ",", 
                    "IntegerSequences`Private`outputrules", ",", 
                    "IntegerSequences`Private`originalstatelist", ",", 
                    "IntegerSequences`Private`originaledges", ",", 
                    "IntegerSequences`Private`imagelist", ",", 
                    "IntegerSequences`Private`statelist", ",", 
                    "IntegerSequences`Private`edges", ",", 
                    "IntegerSequences`Private`statecount", ",", 
                    "IntegerSequences`Private`state", ",", 
                    "IntegerSequences`Private`statehash", ",", 
                    "IntegerSequences`Private`stateindex", ",", 
                    "IntegerSequences`Private`output", ",", 
                    "IntegerSequences`Private`remainingstateindices", ",", 
                    "IntegerSequences`Private`newstates", ",", 
                    "IntegerSequences`Private`stateassignmentrules", ",", 
                    "IntegerSequences`Private`letter", ",", 
                    "IntegerSequences`Private`failed", ",", 
                    "IntegerSequences`Private`i"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`failed", "=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`inputalphabet", "=", 
                    RowBox[{"AutomatonInputAlphabet", "[", 
                    "IntegerSequences`Private`automaton", "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`inputalphabet", ",", 
                    "_AutomatonInputAlphabet"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"AutomatonMinimize", "::", "input"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ";", 
                    RowBox[{"IntegerSequences`Private`outputrules", "=", 
                    RowBox[{"Dispatch", "[", 
                    RowBox[{
                    "AutomatonOutputRules", "[", 
                    "IntegerSequences`Private`automaton", "]"}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`originalstatelist", "=", 
                    RowBox[{
                    "IntegerSequences`Private`AutomatonReachableStateList", 
                    "[", 
                    RowBox[{
                    "IntegerSequences`Private`automaton", ",", 
                    "IntegerSequences`Private`inputalphabet"}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`originaledges", "=", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{
                    "First", "[", "IntegerSequences`Private`automaton", "]"}],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "Alternatives", "@@", 
                    "IntegerSequences`Private`originalstatelist"}], "\[Rule]",
                     "_"}], ",", "_"}], "}"}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"IntegerSequences`Private`originaledges", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{
                    "_", "?", 
                    "IntegerSequences`Private`AutomatonInputSymbolQ"}]}], 
                    "}"}], ".."}], "}"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`stateedges", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`imagelist", "[", 
                    RowBox[{
                    "IntegerSequences`Private`stateedges", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "1", ",", "1"}], 
                    "\[RightDoubleBracket]"}], "]"}], "=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"FirstCase", "[", 
                    RowBox[{"IntegerSequences`Private`stateedges", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"_", "\[Rule]", "IntegerSequences`Private`s_"}], 
                    ",", "IntegerSequences`Private`letter"}], "}"}], 
                    "\[RuleDelayed]", "IntegerSequences`Private`s"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"AutomatonMinimize", "::", "undef"}], 
                    "MessageName"], ",", "IntegerSequences`Private`letter", 
                    ",", 
                    RowBox[{
                    "IntegerSequences`Private`stateedges", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "1", ",", "1"}], 
                    "\[RightDoubleBracket]"}]}], "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`letter", ",", 
                    "IntegerSequences`Private`inputalphabet"}], "}"}]}], 
                    "]"}]}], ";"}]}], "]"}], "/@", 
                    RowBox[{"GatherBy", "[", 
                    RowBox[{"IntegerSequences`Private`originaledges", ",", 
                    RowBox[{
                    RowBox[{"#1", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], 
                    "&"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`originalstate", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`imagelist", "[", 
                    "IntegerSequences`Private`originalstate", "]"}], "=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"FirstCase", "[", 
                    RowBox[{"IntegerSequences`Private`originaledges", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`originalstate", "\[Rule]", 
                    "IntegerSequences`Private`s_"}], ",", 
                    RowBox[{"IntegerSequences`Private`label_", "/;", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`letter", ",", 
                    "IntegerSequences`Private`label"}], "]"}]}]}], "}"}], 
                    "\[RuleDelayed]", "IntegerSequences`Private`s"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"AutomatonMinimize", "::", "undef"}], 
                    "MessageName"], ",", "IntegerSequences`Private`letter", 
                    ",", "IntegerSequences`Private`originalstate"}], "]"}], 
                    ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`letter", ",", 
                    "IntegerSequences`Private`inputalphabet"}], "}"}]}], 
                    "]"}]}], ";"}]}], "]"}], "/@", 
                    "IntegerSequences`Private`originalstatelist"}]}], "]"}], 
                    ";", 
                    RowBox[{"IntegerSequences`Private`statelist", "=", 
                    RowBox[{"FixedPoint", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`stateclasslist", ",", 
                    RowBox[{"Join", "@@", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`stateclass", ",", 
                    RowBox[{"GatherBy", "[", 
                    RowBox[{"IntegerSequences`Private`stateclass", ",", 
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`originalstate", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Position", "[", 
                    RowBox[{"IntegerSequences`Private`stateclasslist", ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", "#1", ",", "___"}], "}"}], ",", 
                    RowBox[{"{", "1", "}"}], ",", "1"}], "]"}], "&"}], ")"}], 
                    "/@", 
                    RowBox[{
                    "IntegerSequences`Private`imagelist", "[", 
                    "IntegerSequences`Private`originalstate", "]"}]}]}], 
                    "]"}]}], "]"}]}], "]"}], "/@", 
                    "IntegerSequences`Private`stateclasslist"}]}]}], "]"}], 
                    ",", 
                    RowBox[{"GatherBy", "[", 
                    RowBox[{"IntegerSequences`Private`originalstatelist", ",", 
                    RowBox[{
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    "#1", ",", "IntegerSequences`Private`outputrules"}], 
                    "]"}], "&"}]}], "]"}]}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`stateassignmentrules", 
                    "=", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`newstate", ",", 
                    RowBox[{
                    RowBox[{
                    "Alternatives", "@@", 
                    "IntegerSequences`Private`newstate"}], "\[Rule]", 
                    "IntegerSequences`Private`newstate"}]}], "]"}], "/@", 
                    "IntegerSequences`Private`statelist"}]}], ";", "False"}], 
                    "]"}]}], ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"TrueQ", "[", 
                    RowBox[{"OptionValue", "[", "IndexedStateNames", "]"}], 
                    "]"}], ",", "IntegerSequences`Private`IndexAutomaton", 
                    ",", "Identity"}], "]"}], "[", 
                    RowBox[{"Automaton", "[", 
                    RowBox[{
                    RowBox[{"Join", "@@", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`newstate", ",", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`newstate", "\[Rule]", "#1"}], 
                    "&"}], ")"}], "/@", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`imagelist", "[", 
                    RowBox[{
                    "First", "[", "IntegerSequences`Private`newstate", "]"}], 
                    "]"}], ",", 
                    "IntegerSequences`Private`stateassignmentrules", ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}], ",", 
                    "IntegerSequences`Private`inputalphabet"}], "}"}], 
                    "]"}]}], "]"}], "/@", 
                    "IntegerSequences`Private`statelist"}]}], ",", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    "IntegerSequences`Private`initialstate", ",", 
                    "IntegerSequences`Private`stateassignmentrules"}], "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`s", ",", 
                    RowBox[{"IntegerSequences`Private`s", "\[Rule]", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"First", "[", "IntegerSequences`Private`s", "]"}],
                     ",", "IntegerSequences`Private`outputrules"}], "]"}]}]}],
                     "]"}], "/@", "IntegerSequences`Private`statelist"}], ",", 
                    RowBox[{
                    "InputAlphabet", "\[Rule]", 
                    "IntegerSequences`Private`inputalphabet"}]}], "]"}], 
                    "]"}], "/;", 
                    RowBox[{"!", "IntegerSequences`Private`failed"}]}]}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"AutomatonMinimize", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`automaton", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Automaton", "[", 
                    RowBox[{
                    "_", ",", "IntegerSequences`Private`initialstate_", ",", 
                    "___"}], "]"}], ")"}], "?", "AutomatonQ"}]}], ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "/;", 
                    "False"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`inputalphabet", ",", 
                    "IntegerSequences`Private`outputrules", ",", 
                    "IntegerSequences`Private`originalstatelist", ",", 
                    "IntegerSequences`Private`originaledges", ",", 
                    "IntegerSequences`Private`imagelist", ",", 
                    "IntegerSequences`Private`statelist", ",", 
                    "IntegerSequences`Private`edges", ",", 
                    "IntegerSequences`Private`statecount", ",", 
                    "IntegerSequences`Private`state", ",", 
                    "IntegerSequences`Private`statehash", ",", 
                    "IntegerSequences`Private`stateindex", ",", 
                    "IntegerSequences`Private`output", ",", 
                    "IntegerSequences`Private`remainingstateindices", ",", 
                    "IntegerSequences`Private`newstates", ",", 
                    "IntegerSequences`Private`stateassignmentrules", ",", 
                    "IntegerSequences`Private`letter", ",", 
                    "IntegerSequences`Private`failed", ",", 
                    "IntegerSequences`Private`i"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`failed", "=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`inputalphabet", "=", 
                    RowBox[{
                    "AutomatonInputAlphabet", "[", 
                    "IntegerSequences`Private`automaton", "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`inputalphabet", ",", 
                    "_AutomatonInputAlphabet"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"AutomatonMinimize", "::", "input"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ";", 
                    RowBox[{"IntegerSequences`Private`outputrules", "=", 
                    RowBox[{"Dispatch", "[", 
                    RowBox[{
                    "AutomatonOutputRules", "[", 
                    "IntegerSequences`Private`automaton", "]"}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`originalstatelist", "=", 
                    RowBox[{
                    "IntegerSequences`Private`AutomatonReachableStateList", 
                    "[", 
                    RowBox[{
                    "IntegerSequences`Private`automaton", ",", 
                    "IntegerSequences`Private`inputalphabet"}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`originaledges", "=", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{
                    "First", "[", "IntegerSequences`Private`automaton", "]"}],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "Alternatives", "@@", 
                    "IntegerSequences`Private`originalstatelist"}], "\[Rule]",
                     "_"}], ",", "_"}], "}"}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"IntegerSequences`Private`originaledges", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{
                    "_", "?", 
                    "IntegerSequences`Private`AutomatonInputSymbolQ"}]}], 
                    "}"}], ".."}], "}"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`stateedges", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`imagelist", "[", 
                    RowBox[{
                    "IntegerSequences`Private`stateedges", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "1", ",", "1"}], 
                    "\[RightDoubleBracket]"}], "]"}], "=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"FirstCase", "[", 
                    RowBox[{"IntegerSequences`Private`stateedges", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"_", "\[Rule]", "IntegerSequences`Private`s_"}], 
                    ",", "IntegerSequences`Private`letter"}], "}"}], 
                    "\[RuleDelayed]", "IntegerSequences`Private`s"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"AutomatonMinimize", "::", "undef"}], 
                    "MessageName"], ",", "IntegerSequences`Private`letter", 
                    ",", 
                    RowBox[{
                    "IntegerSequences`Private`stateedges", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "1", ",", "1"}], 
                    "\[RightDoubleBracket]"}]}], "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`letter", ",", 
                    "IntegerSequences`Private`inputalphabet"}], "}"}]}], 
                    "]"}]}], ";"}]}], "]"}], "/@", 
                    RowBox[{"GatherBy", "[", 
                    RowBox[{"IntegerSequences`Private`originaledges", ",", 
                    RowBox[{
                    RowBox[{"#1", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], 
                    "&"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`originalstate", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`imagelist", "[", 
                    "IntegerSequences`Private`originalstate", "]"}], "=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"FirstCase", "[", 
                    RowBox[{"IntegerSequences`Private`originaledges", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`originalstate", "\[Rule]", 
                    "IntegerSequences`Private`s_"}], ",", 
                    RowBox[{"IntegerSequences`Private`label_", "/;", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`letter", ",", 
                    "IntegerSequences`Private`label"}], "]"}]}]}], "}"}], 
                    "\[RuleDelayed]", "IntegerSequences`Private`s"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"AutomatonMinimize", "::", "undef"}], 
                    "MessageName"], ",", "IntegerSequences`Private`letter", 
                    ",", "IntegerSequences`Private`originalstate"}], "]"}], 
                    ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`letter", ",", 
                    "IntegerSequences`Private`inputalphabet"}], "}"}]}], 
                    "]"}]}], ";"}]}], "]"}], "/@", 
                    "IntegerSequences`Private`originalstatelist"}]}], "]"}], 
                    ";", 
                    RowBox[{"IntegerSequences`Private`statelist", "=", 
                    RowBox[{"GatherBy", "[", 
                    RowBox[{"IntegerSequences`Private`originalstatelist", ",", 
                    RowBox[{
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    "#1", ",", "IntegerSequences`Private`outputrules"}], 
                    "]"}], "&"}]}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`statecount", "=", "0"}],
                     ";", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`state", "[", 
                    RowBox[{"++", "IntegerSequences`Private`statecount"}], 
                    "]"}], "=", "#1"}], ")"}], "&"}], ")"}], "/@", 
                    "IntegerSequences`Private`statelist"}], ";", 
                    RowBox[{
                    "IntegerSequences`Private`remainingstateindices", "=", 
                    RowBox[{"Range", "[", 
                    "IntegerSequences`Private`statecount", "]"}]}], ";", 
                    RowBox[{"Monitor", "[", 
                    RowBox[{
                    RowBox[{"While", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`remainingstateindices", 
                    "\[NotEqual]", 
                    RowBox[{"{", "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`stateindex", "=", 
                    RowBox[{
                    "First", "[", 
                    "IntegerSequences`Private`remainingstateindices", "]"}]}],
                     ";", 
                    RowBox[{
                    "IntegerSequences`Private`remainingstateindices", "=", 
                    RowBox[{
                    "Rest", "[", 
                    "IntegerSequences`Private`remainingstateindices", "]"}]}],
                     ";", 
                    RowBox[{"IntegerSequences`Private`newstates", "=", 
                    RowBox[{"GatherBy", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`state", "[", 
                    "IntegerSequences`Private`stateindex", "]"}], ",", 
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`originalstate", ",", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`s", ",", 
                    RowBox[{"SelectFirst", "[", 
                    RowBox[{
                    RowBox[{
                    "Range", "[", "IntegerSequences`Private`statecount", 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`state", "[", "#1", "]"}], ",", 
                    "IntegerSequences`Private`s"}], "]"}], "&"}]}], "]"}]}], 
                    "]"}], "/@", 
                    RowBox[{
                    "IntegerSequences`Private`imagelist", "[", 
                    "IntegerSequences`Private`originalstate", "]"}]}]}], 
                    "]"}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`newstates", 
                    "]"}], ">", "1"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`state", "[", 
                    "IntegerSequences`Private`stateindex", "]"}], "=", 
                    RowBox[{
                    "First", "[", "IntegerSequences`Private`newstates", 
                    "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`state", "[", 
                    RowBox[{"++", "IntegerSequences`Private`statecount"}], 
                    "]"}], "=", "#1"}], ")"}], "&"}], ")"}], "/@", 
                    RowBox[{
                    "Rest", "[", "IntegerSequences`Private`newstates", 
                    "]"}]}], ";", 
                    RowBox[{
                    "IntegerSequences`Private`remainingstateindices", "=", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    "IntegerSequences`Private`remainingstateindices", ",", 
                    RowBox[{"{", "IntegerSequences`Private`stateindex", "}"}],
                     ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`statecount", "-", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`newstates", 
                    "]"}], "+", "2"}], ",", 
                    "IntegerSequences`Private`statecount"}], "]"}]}], "]"}], 
                    "]"}]}]}]}], "]"}]}]}], "]"}], ",", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    "IntegerSequences`Private`remainingstateindices", "]"}], 
                    ",", "IntegerSequences`Private`statecount", ",", 
                    RowBox[{"IntegerSequences`Private`statecount", "-", 
                    RowBox[{
                    "Length", "[", 
                    "IntegerSequences`Private`remainingstateindices", 
                    "]"}]}]}], "}"}], ",", 
                    "IntegerSequences`Private`remainingstateindices"}], "}"}],
                     "]"}]}], "]"}], ";", 
                    RowBox[{
                    "IntegerSequences`Private`stateassignmentrules", "=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Alternatives", "@@", 
                    RowBox[{
                    "IntegerSequences`Private`state", "[", 
                    "IntegerSequences`Private`i", "]"}]}], "\[Rule]", 
                    RowBox[{
                    "IntegerSequences`Private`state", "[", 
                    "IntegerSequences`Private`i", "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`i", ",", "1", ",", 
                    "IntegerSequences`Private`statecount"}], "}"}]}], "]"}]}],
                     ";", "False"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"TrueQ", "[", 
                    RowBox[{"OptionValue", "[", "IndexedStateNames", "]"}], 
                    "]"}], ",", "IntegerSequences`Private`IndexAutomaton", 
                    ",", "Identity"}], "]"}], "[", 
                    RowBox[{"Automaton", "[", 
                    RowBox[{
                    RowBox[{"Monitor", "[", 
                    RowBox[{
                    RowBox[{"Join", "@@", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`state", "[", 
                    "IntegerSequences`Private`i", "]"}], "\[Rule]", "#1"}], 
                    "&"}], ")"}], "/@", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`imagelist", "[", 
                    RowBox[{"First", "[", 
                    RowBox[{
                    "IntegerSequences`Private`state", "[", 
                    "IntegerSequences`Private`i", "]"}], "]"}], "]"}], ",", 
                    "IntegerSequences`Private`stateassignmentrules", ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}], ",", 
                    "IntegerSequences`Private`inputalphabet"}], "}"}], "]"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`i", ",", "1", ",", 
                    "IntegerSequences`Private`statecount"}], "}"}]}], "]"}]}],
                     ",", "IntegerSequences`Private`i"}], "]"}], ",", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    "IntegerSequences`Private`initialstate", ",", 
                    "IntegerSequences`Private`stateassignmentrules"}], "]"}], 
                    ",", 
                    RowBox[{"Monitor", "[", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`state", "[", 
                    "IntegerSequences`Private`i", "]"}], "\[Rule]", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"First", "[", 
                    RowBox[{
                    "IntegerSequences`Private`state", "[", 
                    "IntegerSequences`Private`i", "]"}], "]"}], ",", 
                    "IntegerSequences`Private`outputrules"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`i", ",", "1", ",", 
                    "IntegerSequences`Private`statecount"}], "}"}]}], "]"}], 
                    ",", "IntegerSequences`Private`i"}], "]"}], ",", 
                    RowBox[{"InputAlphabet", "\[Rule]", 
                    "IntegerSequences`Private`inputalphabet"}]}], "]"}], 
                    "]"}], "/;", 
                    RowBox[{"!", "IntegerSequences`Private`failed"}]}]}]}], 
                    "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "AutomatonMinimize", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`AutomatonMinimize] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    OptionsPattern[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"IndexedStateNames", "\[Rule]", "True"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`AutomatonMinimize\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomatonMinimize\\\", \
\\\"[\\\", StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives a minimal \
automaton that agrees with \\!\\(\\*StyleBox[\\\"M\\\", \\\"TI\\\"]\\) on all \
input.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"AutomatonMinimize\", \"[\", StyleBox[\"M\", \"TI\"], \
\"]\"]]\) gives a minimal automaton that agrees with \!\(\*StyleBox[\"M\", \
\"TI\"]\) on all input.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`AutomatonMinimize, {Condition[
         IntegerSequences`AutomatonMinimize[
          Pattern[IntegerSequences`Private`automaton, 
           PatternTest[
            IntegerSequences`Automaton[
             Blank[], 
             Pattern[IntegerSequences`Private`initialstate, 
              Blank[]], 
             BlankNullSequence[]], IntegerSequences`AutomatonQ]], 
          OptionsPattern[]], True] :> 
       Module[{
         IntegerSequences`Private`inputalphabet, 
          IntegerSequences`Private`outputrules, 
          IntegerSequences`Private`originalstatelist, 
          IntegerSequences`Private`originaledges, 
          IntegerSequences`Private`imagelist, 
          IntegerSequences`Private`statelist, IntegerSequences`Private`edges, 
          IntegerSequences`Private`statecount, IntegerSequences`Private`state,
           IntegerSequences`Private`statehash, 
          IntegerSequences`Private`stateindex, 
          IntegerSequences`Private`output, 
          IntegerSequences`Private`remainingstateindices, 
          IntegerSequences`Private`newstates, 
          IntegerSequences`Private`stateassignmentrules, 
          IntegerSequences`Private`letter, IntegerSequences`Private`failed, 
          IntegerSequences`Private`i}, 
         IntegerSequences`Private`failed = 
          Catch[IntegerSequences`Private`inputalphabet = 
             IntegerSequences`AutomatonInputAlphabet[
              IntegerSequences`Private`automaton]; If[
              MatchQ[IntegerSequences`Private`inputalphabet, 
               Blank[IntegerSequences`AutomatonInputAlphabet]], Message[
                MessageName[IntegerSequences`AutomatonMinimize, "input"]]; 
              Throw[True]]; IntegerSequences`Private`outputrules = Dispatch[
               IntegerSequences`AutomatonOutputRules[
               IntegerSequences`Private`automaton]]; 
            IntegerSequences`Private`originalstatelist = 
             IntegerSequences`Private`AutomatonReachableStateList[
              IntegerSequences`Private`automaton, 
               IntegerSequences`Private`inputalphabet]; 
            IntegerSequences`Private`originaledges = Cases[
               First[IntegerSequences`Private`automaton], {
               Apply[Alternatives, 
                  IntegerSequences`Private`originalstatelist] -> Blank[], 
                Blank[]}]; If[
              MatchQ[IntegerSequences`Private`originaledges, {
                Repeated[{
                  Blank[], 
                  PatternTest[
                   Blank[], 
                   IntegerSequences`Private`AutomatonInputSymbolQ]}]}], 
              Map[
               Function[
               IntegerSequences`Private`stateedges, 
                IntegerSequences`Private`imagelist[
                   Part[IntegerSequences`Private`stateedges, 1, 1, 1]] = Table[
                   FirstCase[
                   IntegerSequences`Private`stateedges, {
                    Blank[] -> Pattern[IntegerSequences`Private`s, 
                    Blank[]], IntegerSequences`Private`letter} :> 
                    IntegerSequences`Private`s, Message[
                    MessageName[IntegerSequences`AutomatonMinimize, "undef"], 
                    IntegerSequences`Private`letter, 
                    Part[IntegerSequences`Private`stateedges, 1, 1, 1]]; 
                    Throw[True]], {
                   IntegerSequences`Private`letter, 
                    IntegerSequences`Private`inputalphabet}]; Null], 
               GatherBy[
               IntegerSequences`Private`originaledges, Part[#, 1, 1]& ]], 
              Map[
               Function[
               IntegerSequences`Private`originalstate, 
                IntegerSequences`Private`imagelist[
                  IntegerSequences`Private`originalstate] = Table[
                   FirstCase[
                   IntegerSequences`Private`originaledges, {
                    IntegerSequences`Private`originalstate -> 
                    Pattern[IntegerSequences`Private`s, 
                    Blank[]], 
                    Condition[
                    Pattern[IntegerSequences`Private`label, 
                    Blank[]], 
                    MatchQ[
                    IntegerSequences`Private`letter, 
                    IntegerSequences`Private`label]]} :> 
                    IntegerSequences`Private`s, Message[
                    MessageName[IntegerSequences`AutomatonMinimize, "undef"], 
                    IntegerSequences`Private`letter, 
                    IntegerSequences`Private`originalstate]; Throw[True]], {
                   IntegerSequences`Private`letter, 
                    IntegerSequences`Private`inputalphabet}]; Null], 
               IntegerSequences`Private`originalstatelist]]; 
            IntegerSequences`Private`statelist = FixedPoint[
               Function[IntegerSequences`Private`stateclasslist, 
                Apply[Join, 
                 Map[
                  Function[IntegerSequences`Private`stateclass, 
                   GatherBy[IntegerSequences`Private`stateclass, 
                    Function[IntegerSequences`Private`originalstate, 
                    Map[Position[IntegerSequences`Private`stateclasslist, {
                    BlankNullSequence[], #, 
                    BlankNullSequence[]}, {1}, 1]& , 
                    IntegerSequences`Private`imagelist[
                    IntegerSequences`Private`originalstate]]]]], 
                  IntegerSequences`Private`stateclasslist]]], 
               GatherBy[
               IntegerSequences`Private`originalstatelist, 
                Replace[#, IntegerSequences`Private`outputrules]& ]]; 
            IntegerSequences`Private`stateassignmentrules = Map[
               Function[
               IntegerSequences`Private`newstate, 
                Apply[Alternatives, IntegerSequences`Private`newstate] -> 
                IntegerSequences`Private`newstate], 
               IntegerSequences`Private`statelist]; False]; Condition[
           If[
            TrueQ[
             OptionValue[IntegerSequences`IndexedStateNames]], 
            IntegerSequences`Private`IndexAutomaton, Identity][
            IntegerSequences`Automaton[
             Apply[Join, 
              Map[
               Function[IntegerSequences`Private`newstate, 
                Transpose[{
                  Map[IntegerSequences`Private`newstate -> #& , 
                   Replace[
                    IntegerSequences`Private`imagelist[
                    First[IntegerSequences`Private`newstate]], 
                    IntegerSequences`Private`stateassignmentrules, {1}]], 
                  IntegerSequences`Private`inputalphabet}]], 
               IntegerSequences`Private`statelist]], 
             Replace[
             IntegerSequences`Private`initialstate, 
              IntegerSequences`Private`stateassignmentrules], 
             Map[
              Function[
              IntegerSequences`Private`s, IntegerSequences`Private`s -> 
               Replace[
                 First[IntegerSequences`Private`s], 
                 IntegerSequences`Private`outputrules]], 
              IntegerSequences`Private`statelist], 
             IntegerSequences`InputAlphabet -> 
             IntegerSequences`Private`inputalphabet]], 
           Not[IntegerSequences`Private`failed]]], Condition[
         IntegerSequences`AutomatonMinimize[
          Pattern[IntegerSequences`Private`automaton, 
           PatternTest[
            IntegerSequences`Automaton[
             Blank[], 
             Pattern[IntegerSequences`Private`initialstate, 
              Blank[]], 
             BlankNullSequence[]], IntegerSequences`AutomatonQ]], 
          OptionsPattern[]], False] :> 
       Module[{IntegerSequences`Private`inputalphabet, 
          IntegerSequences`Private`outputrules, 
          IntegerSequences`Private`originalstatelist, 
          IntegerSequences`Private`originaledges, 
          IntegerSequences`Private`imagelist, 
          IntegerSequences`Private`statelist, IntegerSequences`Private`edges, 
          IntegerSequences`Private`statecount, IntegerSequences`Private`state,
           IntegerSequences`Private`statehash, 
          IntegerSequences`Private`stateindex, 
          IntegerSequences`Private`output, 
          IntegerSequences`Private`remainingstateindices, 
          IntegerSequences`Private`newstates, 
          IntegerSequences`Private`stateassignmentrules, 
          IntegerSequences`Private`letter, IntegerSequences`Private`failed, 
          IntegerSequences`Private`i}, 
         IntegerSequences`Private`failed = 
          Catch[IntegerSequences`Private`inputalphabet = 
             IntegerSequences`AutomatonInputAlphabet[
              IntegerSequences`Private`automaton]; If[
              MatchQ[IntegerSequences`Private`inputalphabet, 
               Blank[IntegerSequences`AutomatonInputAlphabet]], Message[
                MessageName[IntegerSequences`AutomatonMinimize, "input"]]; 
              Throw[True]]; IntegerSequences`Private`outputrules = Dispatch[
               IntegerSequences`AutomatonOutputRules[
               IntegerSequences`Private`automaton]]; 
            IntegerSequences`Private`originalstatelist = 
             IntegerSequences`Private`AutomatonReachableStateList[
              IntegerSequences`Private`automaton, 
               IntegerSequences`Private`inputalphabet]; 
            IntegerSequences`Private`originaledges = Cases[
               First[IntegerSequences`Private`automaton], {
               Apply[Alternatives, 
                  IntegerSequences`Private`originalstatelist] -> Blank[], 
                Blank[]}]; If[
              MatchQ[IntegerSequences`Private`originaledges, {
                Repeated[{
                  Blank[], 
                  PatternTest[
                   Blank[], 
                   IntegerSequences`Private`AutomatonInputSymbolQ]}]}], 
              Map[
               Function[
               IntegerSequences`Private`stateedges, 
                IntegerSequences`Private`imagelist[
                   Part[IntegerSequences`Private`stateedges, 1, 1, 1]] = Table[
                   FirstCase[
                   IntegerSequences`Private`stateedges, {
                    Blank[] -> Pattern[IntegerSequences`Private`s, 
                    Blank[]], IntegerSequences`Private`letter} :> 
                    IntegerSequences`Private`s, Message[
                    MessageName[IntegerSequences`AutomatonMinimize, "undef"], 
                    IntegerSequences`Private`letter, 
                    Part[IntegerSequences`Private`stateedges, 1, 1, 1]]; 
                    Throw[True]], {
                   IntegerSequences`Private`letter, 
                    IntegerSequences`Private`inputalphabet}]; Null], 
               GatherBy[
               IntegerSequences`Private`originaledges, Part[#, 1, 1]& ]], 
              Map[
               Function[
               IntegerSequences`Private`originalstate, 
                IntegerSequences`Private`imagelist[
                  IntegerSequences`Private`originalstate] = Table[
                   FirstCase[
                   IntegerSequences`Private`originaledges, {
                    IntegerSequences`Private`originalstate -> 
                    Pattern[IntegerSequences`Private`s, 
                    Blank[]], 
                    Condition[
                    Pattern[IntegerSequences`Private`label, 
                    Blank[]], 
                    MatchQ[
                    IntegerSequences`Private`letter, 
                    IntegerSequences`Private`label]]} :> 
                    IntegerSequences`Private`s, Message[
                    MessageName[IntegerSequences`AutomatonMinimize, "undef"], 
                    IntegerSequences`Private`letter, 
                    IntegerSequences`Private`originalstate]; Throw[True]], {
                   IntegerSequences`Private`letter, 
                    IntegerSequences`Private`inputalphabet}]; Null], 
               IntegerSequences`Private`originalstatelist]]; 
            IntegerSequences`Private`statelist = 
             GatherBy[
              IntegerSequences`Private`originalstatelist, 
               Replace[#, IntegerSequences`Private`outputrules]& ]; 
            IntegerSequences`Private`statecount = 0; 
            Map[(IntegerSequences`Private`state[
                PreIncrement[IntegerSequences`Private`statecount]] = #)& , 
              IntegerSequences`Private`statelist]; 
            IntegerSequences`Private`remainingstateindices = 
             Range[IntegerSequences`Private`statecount]; Monitor[
              While[
              IntegerSequences`Private`remainingstateindices != {}, 
               IntegerSequences`Private`stateindex = 
                First[IntegerSequences`Private`remainingstateindices]; 
               IntegerSequences`Private`remainingstateindices = 
                Rest[IntegerSequences`Private`remainingstateindices]; 
               IntegerSequences`Private`newstates = GatherBy[
                  IntegerSequences`Private`state[
                  IntegerSequences`Private`stateindex], 
                  Function[IntegerSequences`Private`originalstate, 
                   Map[
                    Function[IntegerSequences`Private`s, 
                    SelectFirst[
                    Range[IntegerSequences`Private`statecount], MemberQ[
                    IntegerSequences`Private`state[#], 
                    IntegerSequences`Private`s]& ]], 
                    IntegerSequences`Private`imagelist[
                    IntegerSequences`Private`originalstate]]]]; 
               If[Length[IntegerSequences`Private`newstates] > 1, 
                 IntegerSequences`Private`state[
                   IntegerSequences`Private`stateindex] = 
                  First[IntegerSequences`Private`newstates]; 
                 Map[(IntegerSequences`Private`state[
                    PreIncrement[IntegerSequences`Private`statecount]] = #)& , 
                   Rest[IntegerSequences`Private`newstates]]; 
                 IntegerSequences`Private`remainingstateindices = 
                  DeleteDuplicates[
                    Join[
                    IntegerSequences`Private`remainingstateindices, {
                    IntegerSequences`Private`stateindex}, 
                    Range[
                    IntegerSequences`Private`statecount - Length[
                    IntegerSequences`Private`newstates] + 2, 
                    IntegerSequences`Private`statecount]]]]], 
              Column[{{
                 Length[IntegerSequences`Private`remainingstateindices], 
                 IntegerSequences`Private`statecount, 
                 IntegerSequences`Private`statecount - Length[
                 IntegerSequences`Private`remainingstateindices]}, 
                IntegerSequences`Private`remainingstateindices}]]; 
            IntegerSequences`Private`stateassignmentrules = 
             Table[Apply[Alternatives, 
                 IntegerSequences`Private`state[IntegerSequences`Private`i]] -> 
               IntegerSequences`Private`state[IntegerSequences`Private`i], {
               IntegerSequences`Private`i, 1, 
                IntegerSequences`Private`statecount}]; False]; Condition[
           If[
            TrueQ[
             OptionValue[IntegerSequences`IndexedStateNames]], 
            IntegerSequences`Private`IndexAutomaton, Identity][
            IntegerSequences`Automaton[
             Monitor[
              Apply[Join, 
               Table[
                Transpose[{
                  Map[
                  IntegerSequences`Private`state[
                    IntegerSequences`Private`i] -> #& , 
                   Replace[
                    IntegerSequences`Private`imagelist[
                    First[
                    IntegerSequences`Private`state[
                    IntegerSequences`Private`i]]], 
                    IntegerSequences`Private`stateassignmentrules, {1}]], 
                  IntegerSequences`Private`inputalphabet}], {
                IntegerSequences`Private`i, 1, 
                 IntegerSequences`Private`statecount}]], 
              IntegerSequences`Private`i], 
             Replace[
             IntegerSequences`Private`initialstate, 
              IntegerSequences`Private`stateassignmentrules], 
             Monitor[
              Table[
              IntegerSequences`Private`state[IntegerSequences`Private`i] -> 
               Replace[
                 First[
                  IntegerSequences`Private`state[IntegerSequences`Private`i]],
                  IntegerSequences`Private`outputrules], {
               IntegerSequences`Private`i, 1, 
                IntegerSequences`Private`statecount}], 
              IntegerSequences`Private`i], IntegerSequences`InputAlphabet -> 
             IntegerSequences`Private`inputalphabet]], 
           Not[IntegerSequences`Private`failed]]]}], "SubValues" -> None, 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`AutomatonMinimize, {
      SyntaxInformation[IntegerSequences`AutomatonMinimize] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           OptionsPattern[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {IntegerSequences`IndexedStateNames -> True}, 
    "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`AutomatonMinimize"], False]]], "Output",ExpressionUUID->\
"31656271-6326-4a7d-a926-5d2923259d50"]
}, Open  ]],

Cell[TextData[{
 "The two states ",
 Cell[BoxData[
  FormBox["A", TraditionalForm]],ExpressionUUID->
  "7976b6b3-d620-4c1b-9a21-cf0136487852"],
 " and ",
 Cell[BoxData[
  FormBox["D", TraditionalForm]],ExpressionUUID->
  "fd68ac42-ab68-4305-8be5-27a6d3bae185"],
 " with output ",
 StyleBox["True", "Input"],
 " in this automaton are equivalent:"
}], "Text",ExpressionUUID->"9fccbf90-cf44-4aa3-985e-08945557582e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"M", "=", 
   RowBox[{"Automaton", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"A", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"A", "\[Rule]", "C"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"B", "\[Rule]", "C"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"B", "\[Rule]", "C"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"C", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"C", "\[Rule]", "D"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"D", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"D", "\[Rule]", "C"}], ",", "1"}], "}"}]}], "}"}], ",", "A", 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"A", "\[Rule]", "True"}], ",", 
       RowBox[{"B", "\[Rule]", "False"}], ",", 
       RowBox[{"C", "\[Rule]", "False"}], ",", 
       RowBox[{"D", "\[Rule]", "True"}]}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"AutomatonGraph", "[", "M", "]"}], "\[IndentingNewLine]", 
 RowBox[{"AutomatonGraph", "[", 
  RowBox[{"AutomatonMinimize", "[", "M", "]"}], "]"}], "\n", 
 RowBox[{"Clear", "[", "M", "]"}]}], "Input",ExpressionUUID->"0169e122-a23f-\
40b8-ae0f-6069406166d9"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{Null, 
       Interpretation[True, $CellContext`A], 
       Interpretation[False, $CellContext`B], 
       Interpretation[False, C], 
       Interpretation[True, D]}, {{{1, 2}, {2, 3}, {2, 4}, {3, 4}, {4, 3}, {4,
        5}, {5, 3}, {5, 4}}, Null}, {EdgeLabels -> {DirectedEdge[
           Interpretation[True, D], 
           Interpretation[False, $CellContext`B]] -> 0, DirectedEdge[
           Interpretation[True, D], 
           Interpretation[False, C]] -> 1, DirectedEdge[
           Interpretation[False, $CellContext`B], 
           Interpretation[False, C]] -> Row[{0, ",", 1}], DirectedEdge[
           Interpretation[False, C], 
           Interpretation[False, $CellContext`B]] -> 0, DirectedEdge[
           Interpretation[False, C], 
           Interpretation[True, D]] -> 1, DirectedEdge[
           Interpretation[True, $CellContext`A], 
           Interpretation[False, C]] -> 1, DirectedEdge[
           Interpretation[True, $CellContext`A], 
           Interpretation[False, $CellContext`B]] -> 0}, 
       EdgeShapeFunction -> {{
         "CorporateShortCarvedArrow", "ArrowSize" -> 0.04, "ArrowPositions" -> 
          1}}, EdgeStyle -> {
         Directive[
          GrayLevel[0.5], 
          Opacity[1]]}, PerformanceGoal -> "Quality", 
       VertexLabels -> {Interpretation[True, D] -> Placed[
           Interpretation[True, D], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[False, $CellContext`B] -> Placed[
           Interpretation[False, $CellContext`B], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[True, $CellContext`A] -> Placed[
           Interpretation[True, $CellContext`A], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[False, C] -> Placed[
           Interpretation[False, C], {
            Rational[1, 2], 
            Rational[1, 2]}], Null -> Placed[Null, {
            Rational[1, 2], 
            Rational[1, 2]}]}, 
       VertexShapeFunction -> {
        Interpretation[False, $CellContext`B] -> "Circle", 
         Interpretation[False, C] -> "Circle", Null -> None, 
         Interpretation[True, D] -> "Circle", 
         Interpretation[True, $CellContext`A] -> "Circle"}, 
       VertexSize -> {0.2}, VertexStyle -> {
         Hue[0.6, 0.3, 0.8]}}]], Typeset`boxes, Typeset`boxes$s2d = 
    GraphicsGroupBox[{{
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], 
       Directive[
        GrayLevel[0.5], 
        Opacity[1]], {
        Arrowheads[{{0.04, 1, {
            GraphicsBox[
             
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
               0, 1, 0}}}, {{{-0.12347775660674376`, 
               0.}, {-0.5614144091900695, 
               0.21895451909535257`}, {-0.4738215557948804, 
               0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
               0.}}}]], 0.533327810340424}}}], 
        ArrowBox[{
          DynamicLocation["VertexID$1", Automatic, Center], 
          DynamicLocation["VertexID$2", Automatic, Center]}]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$2"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$2", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$3"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$3", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             2.342889563339733, 0.38645864484731696`}, 
             DynamicLocation["VertexID$4", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$4"], 
        InsetBox[
         FormBox[
          TemplateBox[{"0", "\",\"", "1"}, "RowDefault"], TraditionalForm], 
         DynamicLocation["EdgeLabelID$4", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$4", Automatic, Center], {
             2.0887256269139765`, 0.3863544832234439}, 
             DynamicLocation["VertexID$3", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$5"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$5", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$4", Automatic, Center], {
             2.610138864883206, 0.34387035189279447`}, 
             DynamicLocation["VertexID$5", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$6"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$6", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$5", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$7"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$7", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$5", Automatic, Center], {
             2.73730003771876, 0.04277704242352348}, 
             DynamicLocation["VertexID$4", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$8"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$8", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       Hue[0.6, 0.3, 0.8], 
       TagBox[{
         TagBox[
          StyleBox[
           
           CircleBox[{0., 0.3865575250925994}, {0.07728131929688947, 
            0.07728131929688947}], ShowContents -> False, StripOnInput -> 
           False], "DynamicName", BoxID -> "VertexID$1"], 
         InsetBox["", 
          Dynamic[
          DynamicLocation[
            "VertexID$1", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$1", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$1", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          
          DiskBox[{1.1769043476143026`, 0.38631362345336584`}, {
           0.07728131929688947, 0.07728131929688947}], "DynamicName", BoxID -> 
          "VertexID$2"], 
         InsetBox[
          FormBox[
           InterpretationBox["True", $CellContext`A], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$2", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$2", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$2", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$2"], 
       TagBox[{
         TagBox[
          
          DiskBox[{2.215649237746396, 0.7728131280707764}, {
           0.07728131929688947, 0.07728131929688947}], "DynamicName", BoxID -> 
          "VertexID$3"], 
         InsetBox[
          FormBox[
           InterpretationBox["False", $CellContext`B], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$3", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$3", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$3", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$3"], 
       TagBox[{
         TagBox[
          
          DiskBox[{2.2159659525073088`, 0.}, {0.07728131929688947, 
           0.07728131929688947}], "DynamicName", BoxID -> "VertexID$4"], 
         InsetBox[
          FormBox[
           InterpretationBox["False", C], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$4", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$4", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$4", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$4"], 
       TagBox[{
         TagBox[
          
          DiskBox[{3.131472950094654, 0.38664739431631795`}, {
           0.07728131929688947, 0.07728131929688947}], "DynamicName", BoxID -> 
          "VertexID$5"], 
         InsetBox[
          FormBox[
           InterpretationBox["True", D], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$5", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$5", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$5", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$5"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{6.18, 355.21472141623667`}, {-52.10719999999999, 
       47.1561361986319}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",ExpressionUUID->"55b22f33-ce2b-4746-9e9f-e0b52840f072"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{Null, 
       Interpretation[True, 1], 
       Interpretation[False, 2], 
       Interpretation[False, 3]}, {{{1, 2}, {2, 3}, {2, 4}, {3, 4}, {4, 3}, {
       4, 2}}, Null}, {EdgeLabels -> {DirectedEdge[
           Interpretation[False, 3], 
           Interpretation[True, 1]] -> 1, DirectedEdge[
           Interpretation[False, 3], 
           Interpretation[False, 2]] -> 0, DirectedEdge[
           Interpretation[False, 2], 
           Interpretation[False, 3]] -> Row[{0, ",", 1}], DirectedEdge[
           Interpretation[True, 1], 
           Interpretation[False, 2]] -> 0, DirectedEdge[
           Interpretation[True, 1], 
           Interpretation[False, 3]] -> 1}, 
       EdgeShapeFunction -> {{
         "CorporateShortCarvedArrow", "ArrowSize" -> 0.04, "ArrowPositions" -> 
          1}}, EdgeStyle -> {
         Directive[
          GrayLevel[0.5], 
          Opacity[1]]}, PerformanceGoal -> "Quality", 
       VertexLabels -> {Interpretation[True, 1] -> Placed[
           Interpretation[True, 1], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[False, 2] -> Placed[
           Interpretation[False, 2], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[False, 3] -> Placed[
           Interpretation[False, 3], {
            Rational[1, 2], 
            Rational[1, 2]}], Null -> Placed[Null, {
            Rational[1, 2], 
            Rational[1, 2]}]}, 
       VertexShapeFunction -> {
        Null -> None, Interpretation[False, 3] -> "Circle", 
         Interpretation[False, 2] -> "Circle", Interpretation[True, 1] -> 
         "Circle"}, VertexSize -> {0.2}, VertexStyle -> {
         Hue[0.6, 0.3, 0.8]}}]], Typeset`boxes, Typeset`boxes$s2d = 
    GraphicsGroupBox[{{
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], 
       Directive[
        GrayLevel[0.5], 
        Opacity[1]], {
        Arrowheads[{{0.04, 1, {
            GraphicsBox[
             
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
               0, 1, 0}}}, {{{-0.12347775660674376`, 
               0.}, {-0.5614144091900695, 
               0.21895451909535257`}, {-0.4738215557948804, 
               0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
               0.}}}]], 0.533327810340424}}}], 
        ArrowBox[{
          DynamicLocation["VertexID$1", Automatic, Center], 
          DynamicLocation["VertexID$2", Automatic, Center]}]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$2"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$2", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$2", Automatic, Center], {
             1.679789286744615, 0.3707276398997768}, 
             DynamicLocation["VertexID$4", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$3"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$3", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             2.2199126533996107`, 0.4330262269664402}, 
             DynamicLocation["VertexID$4", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$4"], 
        InsetBox[
         FormBox[
          TemplateBox[{"0", "\",\"", "1"}, "RowDefault"], TraditionalForm], 
         DynamicLocation["EdgeLabelID$4", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$4", Automatic, Center], {
             1.5373722781320152`, 0.062306784512075775`}, 
             DynamicLocation["VertexID$2", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$5"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$5", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$4", Automatic, Center], {
             1.935079351107158, 0.4330404480264539}, 
             DynamicLocation["VertexID$3", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$6"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$6", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       Hue[0.6, 0.3, 0.8], 
       TagBox[{
         TagBox[
          StyleBox[
           
           CircleBox[{0., 0.43304733243928384`}, {0.08660666760723325, 
            0.08660666760723325}], ShowContents -> False, StripOnInput -> 
           False], "DynamicName", BoxID -> "VertexID$1"], 
         InsetBox["", 
          Dynamic[
          DynamicLocation[
            "VertexID$1", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$1", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$1", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          
          DiskBox[{1.139687182964069, 0.43303442441185447`}, {
           0.08660666760723325, 0.08660666760723325}], "DynamicName", BoxID -> 
          "VertexID$2"], 
         InsetBox[
          FormBox[
           InterpretationBox["True", 1], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$2", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$2", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$2", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$2"], 
       TagBox[{
         TagBox[
          
          DiskBox[{2.0775176225942094`, 0.8660666749928795}, {
           0.08660666760723325, 0.08660666760723325}], "DynamicName", BoxID -> 
          "VertexID$3"], 
         InsetBox[
          FormBox[
           InterpretationBox["False", 2], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$3", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$3", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$3", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$3"], 
       TagBox[{
         TagBox[
          
          DiskBox[{2.0774743819125585`, 0.}, {0.08660666760723325, 
           0.08660666760723325}], "DynamicName", BoxID -> "VertexID$4"], 
         InsetBox[
          FormBox[
           InterpretationBox["False", 3], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$4", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$4", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$4", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$4"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{3.9406933090100917`, 
       354.2393066909899}, {-83.34650669098991, 78.4212731227316}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",ExpressionUUID->"4efc9054-7121-4bf4-a017-\
9588de548076"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"M", "=", 
   RowBox[{"Automaton", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"A", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"B", "\[Rule]", "C"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"C", "\[Rule]", "D"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"D", "\[Rule]", "A"}], ",", "0"}], "}"}]}], "}"}], ",", "A", 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"A", "\[Rule]", "0"}], ",", 
       RowBox[{"B", "\[Rule]", "1"}], ",", 
       RowBox[{"C", "\[Rule]", "0"}], ",", 
       RowBox[{"D", "\[Rule]", "1"}]}], "}"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"AutomatonGraph", "[", "M", "]"}], "\[IndentingNewLine]", 
 RowBox[{"AutomatonGraph", "[", 
  RowBox[{"AutomatonMinimize", "[", "M", "]"}], "]"}], "\n", 
 RowBox[{"Clear", "[", "M", "]"}]}], "Input",ExpressionUUID->"e534e932-80d2-\
43e6-a0e2-19a6a6304069"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{Null, 
       Interpretation[0, $CellContext`A], 
       Interpretation[1, $CellContext`B], 
       Interpretation[0, C], 
       Interpretation[1, D]}, {{{1, 2}, {2, 3}, {3, 4}, {4, 5}, {5, 2}}, 
       Null}, {EdgeLabels -> {DirectedEdge[
           Interpretation[1, $CellContext`B], 
           Interpretation[0, C]] -> 0, DirectedEdge[
           Interpretation[1, D], 
           Interpretation[0, $CellContext`A]] -> 0, DirectedEdge[
           Interpretation[0, $CellContext`A], 
           Interpretation[1, $CellContext`B]] -> 0, DirectedEdge[
           Interpretation[0, C], 
           Interpretation[1, D]] -> 0}, 
       EdgeShapeFunction -> {{
         "CorporateShortCarvedArrow", "ArrowSize" -> 0.04, "ArrowPositions" -> 
          1}}, EdgeStyle -> {
         Directive[
          GrayLevel[0.5], 
          Opacity[1]]}, PerformanceGoal -> "Quality", 
       VertexLabels -> {Interpretation[0, C] -> Placed[
           Interpretation[0, C], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[1, D] -> Placed[
           Interpretation[1, D], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[1, $CellContext`B] -> Placed[
           Interpretation[1, $CellContext`B], {
            Rational[1, 2], 
            Rational[1, 2]}], Null -> Placed[Null, {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[0, $CellContext`A] -> Placed[
           Interpretation[0, $CellContext`A], {
            Rational[1, 2], 
            Rational[1, 2]}]}, 
       VertexShapeFunction -> {
        Interpretation[1, D] -> "Circle", Interpretation[0, $CellContext`A] -> 
         "Circle", Interpretation[1, $CellContext`B] -> "Circle", 
         Interpretation[0, C] -> "Circle", Null -> None}, VertexSize -> {0.2},
        VertexStyle -> {
         Hue[0.6, 0.3, 0.8]}}]], Typeset`boxes, Typeset`boxes$s2d = 
    GraphicsGroupBox[{{
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], 
       Directive[
        GrayLevel[0.5], 
        Opacity[1]], {
        Arrowheads[{{0.04, 1, {
            GraphicsBox[
             
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
               0, 1, 0}}}, {{{-0.12347775660674376`, 
               0.}, {-0.5614144091900695, 
               0.21895451909535257`}, {-0.4738215557948804, 
               0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
               0.}}}]], 0.533327810340424}}}], 
        ArrowBox[{
          DynamicLocation["VertexID$1", Automatic, Center], 
          DynamicLocation["VertexID$2", Automatic, Center]}]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$2"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$2", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$3", Automatic, Center], 
            DynamicLocation["VertexID$4", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$3"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$3", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$4", Automatic, Center], 
            DynamicLocation["VertexID$5", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$4"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$4", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$5", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$5"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$5", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       Hue[0.6, 0.3, 0.8], 
       TagBox[{
         TagBox[
          StyleBox[
           
           CircleBox[{0., 0.5663092719986272}, {0.09271657694346454, 
            0.09271657694346454}], ShowContents -> False, StripOnInput -> 
           False], "DynamicName", BoxID -> "VertexID$1"], 
         InsetBox["", 
          Dynamic[
          DynamicLocation[
            "VertexID$1", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$1", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$1", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          
          DiskBox[{1.0660504317962958`, 0.566065710750216}, {
           0.09271657694346454, 0.09271657694346454}], "DynamicName", BoxID -> 
          "VertexID$2"], 
         InsetBox[
          FormBox[
           InterpretationBox["0", $CellContext`A], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$2", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$2", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$2", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$2"], 
       TagBox[{
         TagBox[
          
          DiskBox[{1.9329436588741442`, 1.131824932913482}, {
           0.09271657694346454, 0.09271657694346454}], "DynamicName", BoxID -> 
          "VertexID$3"], 
         InsetBox[
          FormBox[
           InterpretationBox["1", $CellContext`B], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$3", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$3", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$3", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$3"], 
       TagBox[{
         TagBox[
          
          DiskBox[{2.66765867251874, 0.5662896000327156}, {
           0.09271657694346454, 0.09271657694346454}], "DynamicName", BoxID -> 
          "VertexID$4"], 
         InsetBox[
          FormBox[
           InterpretationBox["0", C], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$4", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$4", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$4", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$4"], 
       TagBox[{
         TagBox[
          
          DiskBox[{1.932520032243713, 0.}, {0.09271657694346454, 
           0.09271657694346454}], "DynamicName", BoxID -> "VertexID$5"], 
         InsetBox[
          FormBox[
           InterpretationBox["1", D], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$5", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$5", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$5", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$5"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{6.180000000000003, 
       352.82000000000005`}, {-83.10719999999998, 78.0113474064529}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",ExpressionUUID->"35df49fa-7909-448a-9617-\
6006f6948a39"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{Null, 
       Interpretation[0, 1], 
       Interpretation[1, 2]}, {{{1, 2}, {2, 3}, {3, 2}}, Null}, {
      EdgeLabels -> {DirectedEdge[
           Interpretation[0, 1], 
           Interpretation[1, 2]] -> 0, DirectedEdge[
           Interpretation[1, 2], 
           Interpretation[0, 1]] -> 0}, 
       EdgeShapeFunction -> {{
         "CorporateShortCarvedArrow", "ArrowSize" -> 0.04, "ArrowPositions" -> 
          1}}, EdgeStyle -> {
         Directive[
          GrayLevel[0.5], 
          Opacity[1]]}, PerformanceGoal -> "Quality", 
       VertexLabels -> {Interpretation[0, 1] -> Placed[
           Interpretation[0, 1], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[1, 2] -> Placed[
           Interpretation[1, 2], {
            Rational[1, 2], 
            Rational[1, 2]}], Null -> Placed[Null, {
            Rational[1, 2], 
            Rational[1, 2]}]}, 
       VertexShapeFunction -> {
        Interpretation[1, 2] -> "Circle", Null -> None, Interpretation[0, 1] -> 
         "Circle"}, VertexSize -> {0.2}, VertexStyle -> {
         Hue[0.6, 0.3, 0.8]}}]], Typeset`boxes, Typeset`boxes$s2d = 
    GraphicsGroupBox[{{
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], 
       Directive[
        GrayLevel[0.5], 
        Opacity[1]], {
        Arrowheads[{{0.04, 1, {
            GraphicsBox[
             
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
               0, 1, 0}}}, {{{-0.12347775660674376`, 
               0.}, {-0.5614144091900695, 
               0.21895451909535257`}, {-0.4738215557948804, 
               0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
               0.}}}]], 0.533327810340424}}}], 
        ArrowBox[{
          DynamicLocation["VertexID$1", Automatic, Center], 
          DynamicLocation["VertexID$2", Automatic, Center]}]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$2", Automatic, Center], {
             1.5003055284305298`, 0.16440723931737236`}, 
             DynamicLocation["VertexID$3", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$2"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$2", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             1.5003055284305298`, -0.16440723931737236`}, 
             DynamicLocation["VertexID$2", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$3"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$3", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       Hue[0.6, 0.3, 0.8], 
       TagBox[{
         TagBox[
          StyleBox[
           CircleBox[{0., 0.}, {0.0999796231370162, 0.0999796231370162}], 
           ShowContents -> False, StripOnInput -> False], "DynamicName", 
          BoxID -> "VertexID$1"], 
         InsetBox["", 
          Dynamic[
          DynamicLocation[
            "VertexID$1", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$1", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$1", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          
          DiskBox[{1.0004074127454492`, 4.666248974332878*^-18}, {
           0.0999796231370162, 0.0999796231370162}], "DynamicName", BoxID -> 
          "VertexID$2"], 
         InsetBox[
          FormBox[
           InterpretationBox["0", 1], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$2", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$2", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$2", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$2"], 
       TagBox[{
         TagBox[
          
          DiskBox[{2.000203644115611, 4.9566794084199865`*^-18}, {
           0.0999796231370162, 0.0999796231370162}], "DynamicName", BoxID -> 
          "VertexID$3"], 
         InsetBox[
          FormBox[
           InterpretationBox["1", 2], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$3", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$3", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$3", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$3"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{3.9406933090100953`, 
       355.05930669098996`}, {-31.239306690989903`, 27.239306690989903`}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",ExpressionUUID->"1bf1dbd4-ba21-4a0f-9274-\
5d9f5565b816"]
}, Open  ]],

Cell[TextData[{
 StyleBox["AutomatonMinimize", "Input"],
 " removes unreachable states:"
}], "Text",ExpressionUUID->"97ee25cb-79e0-47fe-937a-c72531be6aa3"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"M", "=", 
   RowBox[{"Automaton", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"A", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"A", "\[Rule]", "C"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"B", "\[Rule]", "C"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"B", "\[Rule]", "C"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"C", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"C", "\[Rule]", "A"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"U", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"U", "\[Rule]", "B"}], ",", "1"}], "}"}]}], "}"}], ",", 
     "A"}], "]"}]}], ";"}], "\n", 
 RowBox[{"AutomatonGraph", "[", "M", "]"}], "\n", 
 RowBox[{"AutomatonGraph", "[", 
  RowBox[{"AutomatonMinimize", "[", "M", "]"}], "]"}], "\n", 
 RowBox[{"Clear", "[", "M", "]"}]}], "Input",ExpressionUUID->"52f21e1b-7e2f-\
4537-b0d9-6cdbf663ad6d"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      Null, $CellContext`A, $CellContext`B, C, $CellContext`U}, {{{1, 2}, {2, 
       3}, {2, 4}, {3, 4}, {4, 3}, {4, 2}, {5, 2}, {5, 3}}, Null}, {
      EdgeLabels -> {
        DirectedEdge[C, $CellContext`B] -> 0, 
         DirectedEdge[$CellContext`U, $CellContext`A] -> 0, 
         DirectedEdge[$CellContext`A, $CellContext`B] -> 0, 
         DirectedEdge[C, $CellContext`A] -> 1, 
         DirectedEdge[$CellContext`B, C] -> Row[{0, ",", 1}], 
         DirectedEdge[$CellContext`U, $CellContext`B] -> 1, 
         DirectedEdge[$CellContext`A, C] -> 1}, 
       EdgeShapeFunction -> {{
         "CorporateShortCarvedArrow", "ArrowSize" -> 0.04, "ArrowPositions" -> 
          1}}, EdgeStyle -> {
         Directive[
          GrayLevel[0.5], 
          Opacity[1]]}, PerformanceGoal -> "Quality", 
       VertexLabels -> {$CellContext`B -> Placed[$CellContext`B, {
            Rational[1, 2], 
            Rational[1, 2]}], $CellContext`A -> Placed[$CellContext`A, {
            Rational[1, 2], 
            Rational[1, 2]}], $CellContext`U -> Placed[$CellContext`U, {
            Rational[1, 2], 
            Rational[1, 2]}], C -> Placed[C, {
            Rational[1, 2], 
            Rational[1, 2]}], Null -> Placed[Null, {
            Rational[1, 2], 
            Rational[1, 2]}]}, 
       VertexShapeFunction -> {$CellContext`U -> "Circle", C -> "Circle", 
         Null -> None, $CellContext`B -> "Circle", $CellContext`A -> 
         "Circle"}, VertexSize -> {0.2}, VertexStyle -> {
         Hue[0.6, 0.3, 0.8]}}]], Typeset`boxes, Typeset`boxes$s2d = 
    GraphicsGroupBox[{{
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], 
       Directive[
        GrayLevel[0.5], 
        Opacity[1]], {
        Arrowheads[{{0.04, 1, {
            GraphicsBox[
             
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
               0, 1, 0}}}, {{{-0.12347775660674376`, 
               0.}, {-0.5614144091900695, 
               0.21895451909535257`}, {-0.4738215557948804, 
               0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
               0.}}}]], 0.533327810340424}}}], 
        ArrowBox[{
          DynamicLocation["VertexID$1", Automatic, Center], 
          DynamicLocation["VertexID$2", Automatic, Center]}]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$2"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$2", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$2", Automatic, Center], {
             1.6370174881045259`, 0.5240316599981415}, 
             DynamicLocation["VertexID$4", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$3"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$3", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             2.1091962780685733`, 0.37030643430879084`}, 
             DynamicLocation["VertexID$4", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$4"], 
        InsetBox[
         FormBox[
          TemplateBox[{"0", "\",\"", "1"}, "RowDefault"], TraditionalForm], 
         DynamicLocation["EdgeLabelID$4", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$4", Automatic, Center], {
             1.3617722748188872`, 0.3128813861920667}, 
             DynamicLocation["VertexID$2", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$5"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$5", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$4", Automatic, Center], {
             1.8330217608365587`, 0.4694322617349585}, 
             DynamicLocation["VertexID$3", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$6"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$6", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$5", Automatic, Center], 
            DynamicLocation["VertexID$2", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$7"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$7", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$5", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$8"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$8", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       Hue[0.6, 0.3, 0.8], 
       TagBox[{
         TagBox[
          StyleBox[
           
           CircleBox[{0., 0.8361074982308149}, {0.08909599880151674, 
            0.08909599880151674}], ShowContents -> False, StripOnInput -> 
           False], "DynamicName", BoxID -> "VertexID$1"], 
         InsetBox["", 
          Dynamic[
          DynamicLocation[
            "VertexID$1", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$1", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$1", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          
          DiskBox[{1.1783821801952963`, 0.8369130461902095}, {
           0.08909599880151674, 0.08909599880151674}], "DynamicName", BoxID -> 
          "VertexID$2"], 
         InsetBox[
          FormBox["A", TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$2", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$2", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$2", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$2"], 
       TagBox[{
         TagBox[
          
          DiskBox[{2.1218104561770312`, 0.83973869604376}, {
           0.08909599880151674, 0.08909599880151674}], "DynamicName", BoxID -> 
          "VertexID$3"], 
         InsetBox[
          FormBox["B", TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$3", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$3", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$3", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$3"], 
       TagBox[{
         TagBox[
          
          DiskBox[{1.8204075827281148`, 0.}, {0.08909599880151674, 
           0.08909599880151674}], "DynamicName", BoxID -> "VertexID$4"], 
         InsetBox[
          FormBox["C", TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$4", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$4", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$4", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$4"], 
       TagBox[{
         TagBox[
          
          DiskBox[{1.8153155869126767`, 1.6763213849386553`}, {
           0.08909599880151674, 0.08909599880151674}], "DynamicName", BoxID -> 
          "VertexID$5"], 
         InsetBox[
          FormBox["U", TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$5", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$5", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$5", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$5"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{6.18, 352.82000000000005`}, {-143.10719999999998`, 
       136.77923925520116`}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",ExpressionUUID->"db59b4ef-e78d-4012-99b3-\
fc69e47e3868"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{Null, 
       Interpretation[$CellContext`A, 1], 
       Interpretation[$CellContext`B, 2], 
       Interpretation[C, 3]}, {{{1, 2}, {2, 3}, {2, 4}, {3, 4}, {4, 3}, {4, 
       2}}, Null}, {EdgeLabels -> {DirectedEdge[
           Interpretation[$CellContext`B, 2], 
           Interpretation[C, 3]] -> Row[{0, ",", 1}], DirectedEdge[
           Interpretation[$CellContext`A, 1], 
           Interpretation[C, 3]] -> 1, DirectedEdge[
           Interpretation[C, 3], 
           Interpretation[$CellContext`B, 2]] -> 0, DirectedEdge[
           Interpretation[C, 3], 
           Interpretation[$CellContext`A, 1]] -> 1, DirectedEdge[
           Interpretation[$CellContext`A, 1], 
           Interpretation[$CellContext`B, 2]] -> 0}, 
       EdgeShapeFunction -> {{
         "CorporateShortCarvedArrow", "ArrowSize" -> 0.04, "ArrowPositions" -> 
          1}}, EdgeStyle -> {
         Directive[
          GrayLevel[0.5], 
          Opacity[1]]}, PerformanceGoal -> "Quality", 
       VertexLabels -> {Interpretation[C, 3] -> Placed[
           Interpretation[C, 3], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[$CellContext`B, 2] -> Placed[
           Interpretation[$CellContext`B, 2], {
            Rational[1, 2], 
            Rational[1, 2]}], Interpretation[$CellContext`A, 1] -> Placed[
           Interpretation[$CellContext`A, 1], {
            Rational[1, 2], 
            Rational[1, 2]}], Null -> Placed[Null, {
            Rational[1, 2], 
            Rational[1, 2]}]}, 
       VertexShapeFunction -> {
        Null -> None, Interpretation[C, 3] -> "Circle", 
         Interpretation[$CellContext`B, 2] -> "Circle", 
         Interpretation[$CellContext`A, 1] -> "Circle"}, VertexSize -> {0.2}, 
       VertexStyle -> {
         Hue[0.6, 0.3, 0.8]}}]], Typeset`boxes, Typeset`boxes$s2d = 
    GraphicsGroupBox[{{
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], 
       Directive[
        GrayLevel[0.5], 
        Opacity[1]], {
        Arrowheads[{{0.04, 1, {
            GraphicsBox[
             
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
               0, 1, 0}}}, {{{-0.12347775660674376`, 
               0.}, {-0.5614144091900695, 
               0.21895451909535257`}, {-0.4738215557948804, 
               0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
               0.}}}]], 0.533327810340424}}}], 
        ArrowBox[{
          DynamicLocation["VertexID$1", Automatic, Center], 
          DynamicLocation["VertexID$2", Automatic, Center]}]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[{
            DynamicLocation["VertexID$2", Automatic, Center], 
            DynamicLocation["VertexID$3", Automatic, Center]}]}, 
         "DynamicName", BoxID -> "EdgeLabelID$2"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$2", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$2", Automatic, Center], {
             1.679789286744615, 0.3707276398997768}, 
             DynamicLocation["VertexID$4", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$3"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$3", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             2.2199126533996107`, 0.4330262269664402}, 
             DynamicLocation["VertexID$4", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$4"], 
        InsetBox[
         FormBox[
          TemplateBox[{"0", "\",\"", "1"}, "RowDefault"], TraditionalForm], 
         DynamicLocation["EdgeLabelID$4", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$4", Automatic, Center], {
             1.5373722781320152`, 0.062306784512075775`}, 
             DynamicLocation["VertexID$2", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$5"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$5", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$4", Automatic, Center], {
             1.935079351107158, 0.4330404480264539}, 
             DynamicLocation["VertexID$3", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$6"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$6", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       Hue[0.6, 0.3, 0.8], 
       TagBox[{
         TagBox[
          StyleBox[
           
           CircleBox[{0., 0.43304733243928384`}, {0.08660666760723325, 
            0.08660666760723325}], ShowContents -> False, StripOnInput -> 
           False], "DynamicName", BoxID -> "VertexID$1"], 
         InsetBox["", 
          Dynamic[
          DynamicLocation[
            "VertexID$1", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$1", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$1", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          
          DiskBox[{1.139687182964069, 0.43303442441185447`}, {
           0.08660666760723325, 0.08660666760723325}], "DynamicName", BoxID -> 
          "VertexID$2"], 
         InsetBox[
          FormBox[
           InterpretationBox["A", 1], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$2", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$2", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$2", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$2"], 
       TagBox[{
         TagBox[
          
          DiskBox[{2.0775176225942094`, 0.8660666749928795}, {
           0.08660666760723325, 0.08660666760723325}], "DynamicName", BoxID -> 
          "VertexID$3"], 
         InsetBox[
          FormBox[
           InterpretationBox["B", 2], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$3", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$3", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$3", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$3"], 
       TagBox[{
         TagBox[
          
          DiskBox[{2.0774743819125585`, 0.}, {0.08660666760723325, 
           0.08660666760723325}], "DynamicName", BoxID -> "VertexID$4"], 
         InsetBox[
          FormBox[
           InterpretationBox["C", 3], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$4", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$4", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$4", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$4"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{3.9406933090100917`, 
       354.2393066909899}, {-83.34650669098991, 78.4212731227316}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",ExpressionUUID->"4bbf7b2a-8747-4f7a-b692-\
2b7861af3d4d"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["AutomatonOutputAlphabet", "Input"]], "Subsubsection",ExpressionUUID->"8ddc4c2a-6139-408d-81a7-e55c05e6b113"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "AutomatonOutputAlphabet"}]], "Input",ExpressionUUID->"cae2d5c3-7755-460c-98ea-79c1eecf4840"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomatonOutputAlphabet\\\"\
, \\\"[\\\", StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives a list of \
possible output values of an automaton \\!\\(\\*StyleBox[\\\"M\\\", \
\\\"TI\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"AutomatonOutputAlphabet", "[", 
                    RowBox[{"IntegerSequences`Private`automaton", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Automaton", "[", 
                    RowBox[{
                    "IntegerSequences`Private`edges_", ",", 
                    "IntegerSequences`Private`initialstate_", ",", "___"}], 
                    "]"}], ")"}], "?", "AutomatonQ"}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`inputalphabet", "=", 
                    RowBox[{
                    "AutomatonInputAlphabet", "[", 
                    "IntegerSequences`Private`automaton", "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`AutomatonReachableStateList", 
                    "[", 
                    RowBox[{
                    "IntegerSequences`Private`automaton", ",", 
                    "IntegerSequences`Private`inputalphabet"}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "DeterministicAutomatonQ", "[", 
                    "IntegerSequences`Private`automaton", "]"}], ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "$Failed", "}"}]}], "]"}]}], "]"}], ",", 
                    RowBox[{
                    "AutomatonOutputRules", "[", 
                    "IntegerSequences`Private`automaton", "]"}], ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`inputalphabet", ",", 
                    "_AutomatonInputAlphabet"}], "]"}]}], "||", 
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"AutomatonOutputAlphabet", "::", "input"}], 
                    "MessageName"], "]"}]}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "AutomatonOutputAlphabet", 
                    "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`AutomatonOutputAlphabet] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`AutomatonOutputAlphabet\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomatonOutputAlphabet\\\"\
, \\\"[\\\", StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives a list of \
possible output values of an automaton \\!\\(\\*StyleBox[\\\"M\\\", \
\\\"TI\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"AutomatonOutputAlphabet\", \"[\", StyleBox[\"M\", \
\"TI\"], \"]\"]]\) gives a list of possible output values of an automaton \
\!\(\*StyleBox[\"M\", \"TI\"]\).", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`AutomatonOutputAlphabet, {
      IntegerSequences`AutomatonOutputAlphabet[
         Pattern[IntegerSequences`Private`automaton, 
          PatternTest[
           IntegerSequences`Automaton[
            Pattern[IntegerSequences`Private`edges, 
             Blank[]], 
            Pattern[IntegerSequences`Private`initialstate, 
             Blank[]], 
            BlankNullSequence[]], IntegerSequences`AutomatonQ]]] :> 
       With[{IntegerSequences`Private`inputalphabet = 
          IntegerSequences`AutomatonInputAlphabet[
           IntegerSequences`Private`automaton]}, 
         Condition[
          DeleteDuplicates[
           Replace[
            Join[
             IntegerSequences`Private`AutomatonReachableStateList[
             IntegerSequences`Private`automaton, 
              IntegerSequences`Private`inputalphabet], 
             If[
              IntegerSequences`DeterministicAutomatonQ[
              IntegerSequences`Private`automaton], {}, {$Failed}]], 
            IntegerSequences`AutomatonOutputRules[
            IntegerSequences`Private`automaton], {1}]], 
          Or[
           Not[
            MatchQ[IntegerSequences`Private`inputalphabet, 
             Blank[IntegerSequences`AutomatonInputAlphabet]]], 
           Message[
            MessageName[
            IntegerSequences`AutomatonOutputAlphabet, "input"]]]]]}], 
    "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`AutomatonOutputAlphabet, {
      SyntaxInformation[IntegerSequences`AutomatonOutputAlphabet] -> {
        "ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`AutomatonOutputAlphabet"], False]]], "Output",Expression\
UUID->"01d8960e-6e76-49ee-86d0-1932b401b16e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonOutputAlphabet", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "A"}], ",", "1"}], "}"}]}], "}"}], ",", "A", 
    ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"A", "\[Rule]", "\"\<even\>\""}], ",", 
      RowBox[{"B", "\[Rule]", "\"\<odd\>\""}]}], "}"}]}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"48c7f847-af77-484e-9ec9-e2543f53af1a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"even\"\>", ",", "\<\"odd\"\>"}], "}"}]], "Output",ExpressionUUI\
D->"4f4ec6a0-f0b7-4ebd-8d67-562391cfb512"]
}, Open  ]],

Cell["\<\
If no output rules are provided, the output values are the state names:\
\>", "Text",ExpressionUUID->"640d86eb-2677-4558-b010-c3aaf9b70885"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonOutputAlphabet", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "A"}], ",", "1"}], "}"}]}], "}"}], ",", "A"}],
    "]"}], "]"}]], "Input",ExpressionUUID->"cf230374-7ab5-43ec-b0b1-\
d33ee7551e7c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"A", ",", "B"}], "}"}]], "Output",ExpressionUUID->"cc271a56-0623-4085-8fb5-6993ff89d4d5"]
}, Open  ]],

Cell["\<\
The values reported are the outputs corresponding to all states reachable \
from the initial state by some sequence of letters from the input alphabet.
For example, the following automaton has an unreachable state whose \
corresponding output is not included.\
\>", "Text",ExpressionUUID->"76e47816-cd06-4df7-b1c0-ed33f4d09dd6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonOutputAlphabet", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", 
        RowBox[{"0", "|", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "A"}], ",", 
        RowBox[{"0", "|", "1"}]}], "}"}]}], "}"}], ",", "A", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"A", "\[Rule]", "\"\<even\>\""}], ",", 
      RowBox[{"B", "\[Rule]", "\"\<odd\>\""}]}], "}"}], ",", 
    RowBox[{"InputAlphabet", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}], "]"}]], "Input",ExpressionUUI\
D->"8b345189-2218-46b7-a25f-ab604089add4"],

Cell[BoxData[
 RowBox[{"{", "\<\"even\"\>", "}"}]], "Output",ExpressionUUID->"0fe760e1-d3e2-442c-9bc8-4c3367e7e860"]
}, Open  ]],

Cell[TextData[{
 "In the following automaton, only one state explicitly appears, and it \
corresponds to the output ",
 StyleBox["\[CloseCurlyDoubleQuote]even\[CloseCurlyDoubleQuote]", "Input"],
 ", but the input alphabet indicates that there exist inputs that result in ",
 StyleBox["\[CloseCurlyDoubleQuote]odd\[CloseCurlyDoubleQuote]", "Input"],
 " (due to missing edges):"
}], "Text",ExpressionUUID->"93d83f9a-b569-4e78-b303-102313eabde4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonOutputAlphabet", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], "}"}], ",", "A", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"A", "\[Rule]", "\"\<even\>\""}], ",", 
      RowBox[{"_", "\[Rule]", "\"\<odd\>\""}]}], "}"}], ",", 
    RowBox[{"InputAlphabet", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}], "]"}]], "Input",ExpressionUUI\
D->"45e9965b-900a-4e2f-9b8e-8fa79d6e689c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"even\"\>", ",", "\<\"odd\"\>"}], "}"}]], "Output",ExpressionUUI\
D->"537f568c-92e4-42c4-9716-a0db5c1ce110"]
}, Open  ]],

Cell[TextData[{
 "Changing the input alphabet results in only the output ",
 StyleBox["\[OpenCurlyDoubleQuote]even\[CloseCurlyDoubleQuote]", "Input"],
 " being reported:"
}], "Text",ExpressionUUID->"af0b9fee-df4f-466e-a12a-573aefcd49b8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonOutputAlphabet", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], "}"}], ",", "A", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"A", "\[Rule]", "\"\<even\>\""}], ",", 
      RowBox[{"_", "\[Rule]", "\"\<odd\>\""}]}], "}"}], ",", 
    RowBox[{"InputAlphabet", "\[Rule]", 
     RowBox[{"{", "0", "}"}]}]}], "]"}], "]"}]], "Input",ExpressionUUID->\
"e7d31a89-fe6e-4dd5-ad0a-468e5c146983"],

Cell[BoxData[
 RowBox[{"{", "\<\"even\"\>", "}"}]], "Output",ExpressionUUID->"502973be-86bf-4a19-952e-93345af1fbd6"]
}, Open  ]],

Cell[TextData[{
 "This automaton is not deterministic, so ",
 StyleBox["$Failed", "Input"],
 " is included to account for input for which there are missing edges:"
}], "Text",ExpressionUUID->"977e4a62-8c8e-4783-8f54-d06ba5107387"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonOutputAlphabet", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "0"}], "}"}]}], "}"}], ",", "A"}],
    "]"}], "]"}]], "Input",ExpressionUUID->"91c7ca46-1f40-48a0-9050-\
dbe4c973155b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"A", ",", "B", ",", "$Failed"}], "}"}]], "Output",ExpressionUUID->\
"02954fa7-a1f6-4ce3-b689-3811abdddd64"]
}, Open  ]],

Cell[TextData[{
 "If the edge labels contain patterns and no explicit input alphabet is \
indicated, ",
 StyleBox["AutomatonOutputAlphabet", "Input"],
 " may not be able to determine the reachable states:"
}], "Text",ExpressionUUID->"3ecedb6f-922d-4cdc-b90d-aebf5d204b4e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonOutputAlphabet", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"A", "\[Rule]", "A"}], ",", 
       RowBox[{"0", "|", "1"}]}], "}"}], "}"}], ",", "A", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"A", "\[Rule]", "\"\<even\>\""}], ",", 
      RowBox[{"_", "\[Rule]", "\"\<odd\>\""}]}], "}"}]}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"34e5f86d-0f35-4172-abc6-d94a60c4baf3"],

Cell[BoxData[
 TemplateBox[{
  "AutomatonOutputAlphabet","input",
   "\"Unable to determine the input alphabet.\"",2,146,9,18387630869787481076,
   "Local","IntegerSequences`AutomatonOutputAlphabet"},
  "MessageTemplate2"]], "Message", \
"MSG",ExpressionUUID->"06cb95d4-a301-4d90-b030-b33221f4c262"],

Cell[BoxData[
 RowBox[{"AutomatonOutputAlphabet", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"A", "\[Rule]", "A"}], ",", 
       RowBox[{"0", "|", "1"}]}], "}"}], "}"}], ",", "A", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"A", "\[Rule]", "\<\"even\"\>"}], ",", 
      RowBox[{"_", "\[Rule]", "\<\"odd\"\>"}]}], "}"}]}], "]"}], 
  "]"}]], "Output",ExpressionUUID->"408eafa3-f819-4290-8718-6044492db9c5"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["AutomatonOutputRules", "Input"]], "Subsubsection",ExpressionUUID->"21f17e7b-02b1-4f28-ae40-40f71f3b6e55"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "AutomatonOutputRules"}]], "Input",ExpressionUUID->"90b58b6f-0691-4c69-adf7-ad344ec4d01f"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomatonOutputRules\\\", \
\\\"[\\\", StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the \
replacement rules that assign states of an automaton \
\\!\\(\\*StyleBox[\\\"M\\\", \\\"TI\\\"]\\) to their corresponding outputs.\"\
\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"AutomatonOutputRules", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Automaton", "[", 
                    RowBox[{"_", ",", "_", ",", 
                    RowBox[{"IntegerSequences`Private`outputrules", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{
                    RowBox[{"InputAlphabet", "\[Rule]", "_"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_Rule", "|", "_RuleDelayed"}], ")"}], "..."}], 
                    "}"}], "|", "_Rule", "|", "_RuleDelayed", "|", 
                    RowBox[{"_", "?", "AssociationQ"}], "|", 
                    RowBox[{"_", "?", "DispatchQ"}]}]}], "]"}]}], ",", 
                    "___"}], "]"}], ")"}], "?", "AutomatonQ"}], "]"}], ":=", 
                    "IntegerSequences`Private`outputrules"}]},
                    {
                    RowBox[{
                    RowBox[{"AutomatonOutputRules", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Automaton", "[", 
                    RowBox[{"_", ",", "__"}], "]"}], ")"}], "?", 
                    "AutomatonQ"}], "]"}], ":=", 
                    RowBox[{"{", "}"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "AutomatonOutputRules", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`AutomatonOutputRules] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`AutomatonOutputRules\
\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomatonOutputRules\\\", \
\\\"[\\\", StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the \
replacement rules that assign states of an automaton \
\\!\\(\\*StyleBox[\\\"M\\\", \\\"TI\\\"]\\) to their corresponding outputs.\"\
\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"AutomatonOutputRules\", \"[\", StyleBox[\"M\", \
\"TI\"], \"]\"]]\) gives the replacement rules that assign states of an \
automaton \!\(\*StyleBox[\"M\", \"TI\"]\) to their corresponding outputs.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`AutomatonOutputRules, {
      IntegerSequences`AutomatonOutputRules[
         PatternTest[
          IntegerSequences`Automaton[
           Blank[], 
           Blank[], 
           Pattern[IntegerSequences`Private`outputrules, 
            Except[IntegerSequences`InputAlphabet -> Blank[], 
             Alternatives[{
               RepeatedNull[
                Alternatives[
                 Blank[Rule], 
                 Blank[RuleDelayed]]]}, 
              Blank[Rule], 
              Blank[RuleDelayed], 
              PatternTest[
               Blank[], AssociationQ], 
              PatternTest[
               Blank[], DispatchQ]]]], 
           BlankNullSequence[]], IntegerSequences`AutomatonQ]] :> 
       IntegerSequences`Private`outputrules, 
       IntegerSequences`AutomatonOutputRules[
         PatternTest[
          IntegerSequences`Automaton[
           Blank[], 
           BlankSequence[]], IntegerSequences`AutomatonQ]] :> {}}], 
    "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`AutomatonOutputRules, {
      SyntaxInformation[IntegerSequences`AutomatonOutputRules] -> {
        "ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`AutomatonOutputRules"], False]]], "Output",ExpressionUUI\
D->"bef07f9f-cb3d-4c42-b0c4-7dd2bc2be8db"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonOutputRules", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "A"}], ",", "1"}], "}"}]}], "}"}], ",", "A", 
    ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"A", "\[Rule]", "\"\<even\>\""}], ",", 
      RowBox[{"B", "\[Rule]", "\"\<odd\>\""}]}], "}"}]}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"9f10e2c6-c7c6-4285-a23e-f67ad9ccae88"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"A", "\[Rule]", "\<\"even\"\>"}], ",", 
   RowBox[{"B", "\[Rule]", "\<\"odd\"\>"}]}], "}"}]], "Output",ExpressionUUID->\
"fd85ca2f-df1f-4c21-9eca-900a7131ffb0"]
}, Open  ]],

Cell["\<\
A dispatch table is a valid specification for the output rules:\
\>", "Text",ExpressionUUID->"da4409cb-fb7a-43e7-af76-2a8abe0ededf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonOutputRules", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "A"}], ",", "1"}], "}"}]}], "}"}], ",", "A", 
    ",", 
    RowBox[{"Dispatch", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"A", "\[Rule]", "\"\<even\>\""}], ",", 
       RowBox[{"B", "\[Rule]", "\"\<odd\>\""}]}], "}"}], "]"}]}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"06a3af3a-f3bf-476e-a818-415ffcc645d3"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Dispatch",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              GrayLevel[0.5], 
              
              PolygonBox[{{0.25, 0.5}, {0.05, 0.35}, {0.15, 0.35}, {0.35, 
               0.5}, {0.15, 0.65}, {0.05, 0.65}}], 
              
              PolygonBox[{{0.4, 0.5}, {0.2, 0.35}, {0.35, 0.35}, {0.55, 
               0.5}, {0.35, 0.65}, {0.2, 0.65}}], 
              
              PolygonBox[{{0.95, 0.5}, {0.55, 0.1}, {0.6, 0.35}, {0.4, 
               0.35}, {0.6, 0.5}, {0.4, 0.65}, {0.6, 0.65}, {0.55, 0.9}}]}, 
             PlotRange -> {{-0.05, 1.05}, {-0.05, 1.05}}, Background -> 
             GrayLevel[0.93], FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Length: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[{
              GrayLevel[0.5], 
              
              PolygonBox[{{0.25, 0.5}, {0.05, 0.35}, {0.15, 0.35}, {0.35, 
               0.5}, {0.15, 0.65}, {0.05, 0.65}}], 
              
              PolygonBox[{{0.4, 0.5}, {0.2, 0.35}, {0.35, 0.35}, {0.55, 
               0.5}, {0.35, 0.65}, {0.2, 0.65}}], 
              
              PolygonBox[{{0.95, 0.5}, {0.55, 0.1}, {0.6, 0.35}, {0.4, 
               0.35}, {0.6, 0.5}, {0.4, 0.65}, {0.6, 0.65}, {0.55, 0.9}}]}, 
             PlotRange -> {{-0.05, 1.05}, {-0.05, 1.05}}, Background -> 
             GrayLevel[0.93], FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Length: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["2", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Rules:\"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"\"", "SummaryItem"]}]}, {
               TagBox[
                TagBox[
                 GridBox[{{
                    RowBox[{"A", "\[Rule]", "\"even\""}]}, {
                    RowBox[{"B", "\[Rule]", "\"odd\""}]}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Dispatch[{$CellContext`A -> "even", $CellContext`B -> "odd"}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",ExpressionUUID->"f621307a-adb4-40c3-b04b-\
74c503c7f97c"]
}, Open  ]],

Cell[TextData[{
 "If no output rules are explicitly specified, ",
 StyleBox["AutomatonOutputRules", "Input"],
 " returns the empty list:"
}], "Text",ExpressionUUID->"4ec0c993-bc0b-409f-adbc-ebc32b9bd11b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonOutputRules", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "A"}], ",", "1"}], "}"}]}], "}"}], ",", "A"}],
    "]"}], "]"}]], "Input",ExpressionUUID->"5c6ce4c1-0728-44b8-9de0-\
2d33bc8ab841"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",ExpressionUUID->"ec4e7e38-5daa-484f-9637-a74ec973ac64"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["AutomatonProduct", "Input"]], "Subsubsection",ExpressionUUID->"566b4614-90c3-4f69-9cdf-5cad9112da44"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "AutomatonProduct"}]], "Input",ExpressionUUID->"bf596cbe-2b8f-4a31-bc83-e918a1445f75"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomatonProduct\\\", \
\\\"[\\\", RowBox[List[SubscriptBox[StyleBox[\\\"M\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"M\\\", \
\\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]]]], \\\"]\\\"]]\\) gives an \
automaton that outputs \\!\\(\\*RowBox[List[\\\"{\\\", \
RowBox[List[RowBox[List[SubscriptBox[StyleBox[\\\"M\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\"[\\\", StyleBox[\\\"list\\\", \
\\\"TI\\\"], \\\"]\\\"]], \\\",\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"M\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\"[\\\", StyleBox[\\\"list\\\", \\\"TI\\\"], \\\"]\\\"]]]], \
\\\"}\\\"]]\\) when fed \\!\\(\\*StyleBox[\\\"list\\\", \\\"TI\\\"]\\).\\n\\!\
\\(\\*RowBox[List[\\\"AutomatonProduct\\\", \\\"[\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"M\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"M\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"f\\\", \
\\\"TI\\\"]]], \\\"]\\\"]]\\) gives an automaton that outputs \
\\!\\(\\*RowBox[List[StyleBox[\\\"f\\\", \\\"TI\\\"], \\\"[\\\", RowBox[List[\
\\\"{\\\", RowBox[List[RowBox[List[SubscriptBox[StyleBox[\\\"M\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\"[\\\", StyleBox[\\\"list\\\
\", \\\"TI\\\"], \\\"]\\\"]], \\\",\\\", RowBox[List[SubscriptBox[StyleBox[\\\
\"M\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\"[\\\", \
StyleBox[\\\"list\\\", \\\"TI\\\"], \\\"]\\\"]]]], \\\"}\\\"]], \
\\\"]\\\"]]\\) when fed \\!\\(\\*StyleBox[\\\"list\\\", \\\"TI\\\"]\\).\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"AutomatonProduct", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`automaton1", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Automaton", "[", 
                    RowBox[{
                    "IntegerSequences`Private`edges1_", ",", 
                    "IntegerSequences`Private`initialstate1_", ",", "___"}], 
                    "]"}], ")"}], "?", "AutomatonQ"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`automaton2", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Automaton", "[", 
                    RowBox[{
                    "IntegerSequences`Private`edges2_", ",", 
                    "IntegerSequences`Private`initialstate2_", ",", "___"}], 
                    "]"}], ")"}], "?", "AutomatonQ"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`outputfunction", ":", 
                    RowBox[{"Except", "[", "_Rule", "]"}], ":", "Identity"}], 
                    ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`inputalphabet1", ",", 
                    "IntegerSequences`Private`inputalphabet2", ",", 
                    "IntegerSequences`Private`statelist1", ",", 
                    "IntegerSequences`Private`statelist2", ",", 
                    "IntegerSequences`Private`productautomaton", ",", 
                    "IntegerSequences`Private`failed"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`failed", "=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`inputalphabet1", "=", 
                    RowBox[{
                    "AutomatonInputAlphabet", "[", 
                    "IntegerSequences`Private`automaton1", "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`inputalphabet2", "=", 
                    RowBox[{
                    "AutomatonInputAlphabet", "[", 
                    "IntegerSequences`Private`automaton2", "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`inputalphabet1", ",", 
                    "_AutomatonInputAlphabet"}], "]"}], "||", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"IntegerSequences`Private`inputalphabet2", ",", 
                    "_AutomatonInputAlphabet"}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"AutomatonProduct", "::", "input"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "Sort", "[", "IntegerSequences`Private`inputalphabet1", 
                    "]"}], "=!=", 
                    RowBox[{
                    "Sort", "[", "IntegerSequences`Private`inputalphabet2", 
                    "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"AutomatonProduct", "::", "alph"}], "MessageName"],
                     "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{
                    "CompleteAutomatonQ", "[", 
                    "IntegerSequences`Private`automaton1", "]"}]}], "||", 
                    RowBox[{"!", 
                    RowBox[{
                    "CompleteAutomatonQ", "[", 
                    "IntegerSequences`Private`automaton2", "]"}]}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"AutomatonProduct", "::", "com"}], "MessageName"],
                     "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ";", 
                    RowBox[{"IntegerSequences`Private`statelist1", "=", 
                    RowBox[{
                    "AutomatonStateList", "[", 
                    "IntegerSequences`Private`automaton1", "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`statelist2", "=", 
                    RowBox[{"AutomatonStateList", "[", 
                    "IntegerSequences`Private`automaton2", "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`productautomaton", "=", 
                    RowBox[{"Automaton", "[", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"IntegerSequences`Private`edges1", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{
                    "_", "?", 
                    "IntegerSequences`Private`AutomatonInputSymbolQ"}]}], 
                    "}"}], ".."}], "}"}]}], "]"}], "&&", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"IntegerSequences`Private`edges2", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{
                    "_", "?", 
                    "IntegerSequences`Private`AutomatonInputSymbolQ"}]}], 
                    "}"}], ".."}], "}"}]}], "]"}]}], ",", 
                    RowBox[{"Join", "@@", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`edge1", ",", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"IntegerSequences`Private`edges2", ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`edge2", ":", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{
                    "Last", "[", "IntegerSequences`Private`edge1", "]"}]}], 
                    "}"}]}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{"First", "/@", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`edge1", ",", 
                    "IntegerSequences`Private`edge2"}], "}"}]}], ",", 
                    "Rule"}], "]"}], ",", 
                    RowBox[{
                    "Last", "[", "IntegerSequences`Private`edge1", "]"}]}], 
                    "}"}]}]}], "]"}]}], "]"}], "/@", 
                    "IntegerSequences`Private`edges1"}]}], ",", 
                    RowBox[{"Join", "@@", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`edge1", ",", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`edge2", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{"First", "/@", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`edge1", ",", 
                    "IntegerSequences`Private`edge2"}], "}"}]}], ",", 
                    "Rule"}], "]"}], ",", 
                    RowBox[{"IntegerSequences`Private`PatternIntersection", "@@", 
                    RowBox[{"Last", "/@", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`edge1", ",", 
                    "IntegerSequences`Private`edge2"}], "}"}]}]}]}], "}"}]}], 
                    "]"}], "/@", "IntegerSequences`Private`edges2"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{"IntegerSequences`Private`$EmptyPattern", "|", 
                    RowBox[{"{", 
                    RowBox[{
                    "___", ",", "IntegerSequences`Private`$EmptyPattern", ",",
                     "___"}], "}"}]}]}], "}"}]}], "]"}]}], "]"}], "/@", 
                    "IntegerSequences`Private`edges1"}]}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`initialstate1", ",", 
                    "IntegerSequences`Private`initialstate2"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MapAt", "[", 
                    RowBox[{"IntegerSequences`Private`outputfunction", ",", 
                    RowBox[{"Thread", "[", 
                    RowBox[{"#1", ",", "Rule"}], "]"}], ",", "2"}], "]"}], 
                    "&"}], ")"}], "/@", 
                    RowBox[{"Tuples", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{"IntegerSequences`Private`statelist1", "\[Rule]", 
                    RowBox[{"Replace", "[", 
                    RowBox[{"IntegerSequences`Private`statelist1", ",", 
                    RowBox[{
                    "AutomatonOutputRules", "[", 
                    "IntegerSequences`Private`automaton1", "]"}], ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}], "]"}], ",", 
                    RowBox[{"Thread", "[", 
                    RowBox[{"IntegerSequences`Private`statelist2", "\[Rule]", 
                    RowBox[{"Replace", "[", 
                    RowBox[{"IntegerSequences`Private`statelist2", ",", 
                    RowBox[{
                    "AutomatonOutputRules", "[", 
                    "IntegerSequences`Private`automaton2", "]"}], ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}], "]"}]}], "}"}], 
                    "]"}]}], ",", 
                    RowBox[{
                    "InputAlphabet", "\[Rule]", 
                    "IntegerSequences`Private`inputalphabet1"}]}], "]"}]}], 
                    ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"TrueQ", "[", 
                    RowBox[{"OptionValue", "[", "Minimize", "]"}], "]"}], ",", 
                    RowBox[{"IntegerSequences`Private`productautomaton", "=", 
                    RowBox[{"AutomatonMinimize", "[", 
                    RowBox[{"IntegerSequences`Private`productautomaton", ",", 
                    RowBox[{"IndexedStateNames", "\[Rule]", 
                    RowBox[{
                    "OptionValue", "[", "IndexedStateNames", "]"}]}]}], 
                    "]"}]}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"TrueQ", "[", 
                    RowBox[{"OptionValue", "[", "IndexedStateNames", "]"}], 
                    "]"}], ",", 
                    RowBox[{"IntegerSequences`Private`productautomaton", "=", 
                    RowBox[{
                    "IntegerSequences`Private`IndexAutomaton", "[", 
                    "IntegerSequences`Private`productautomaton", "]"}]}]}], 
                    "]"}]}], "]"}], ";", "False"}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`productautomaton", "/;", 
                    RowBox[{"!", "IntegerSequences`Private`failed"}]}]}]}], 
                    "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "AutomatonProduct", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_", ",", "_.", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`AutomatonProduct] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Blank[], 
                    Optional[
                    Blank[]], 
                    OptionsPattern[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"IndexedStateNames", "\[Rule]", "True"}], ",", 
                    RowBox[{"Minimize", "\[Rule]", "True"}]}], "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`AutomatonProduct\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomatonProduct\\\", \
\\\"[\\\", RowBox[List[SubscriptBox[StyleBox[\\\"M\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"M\\\", \
\\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]]]], \\\"]\\\"]]\\) gives an \
automaton that outputs \\!\\(\\*RowBox[List[\\\"{\\\", \
RowBox[List[RowBox[List[SubscriptBox[StyleBox[\\\"M\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\"[\\\", StyleBox[\\\"list\\\", \
\\\"TI\\\"], \\\"]\\\"]], \\\",\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"M\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\"[\\\", StyleBox[\\\"list\\\", \\\"TI\\\"], \\\"]\\\"]]]], \
\\\"}\\\"]]\\) when fed \\!\\(\\*StyleBox[\\\"list\\\", \\\"TI\\\"]\\).\\n\\!\
\\(\\*RowBox[List[\\\"AutomatonProduct\\\", \\\"[\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"M\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"M\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"f\\\", \
\\\"TI\\\"]]], \\\"]\\\"]]\\) gives an automaton that outputs \
\\!\\(\\*RowBox[List[StyleBox[\\\"f\\\", \\\"TI\\\"], \\\"[\\\", RowBox[List[\
\\\"{\\\", RowBox[List[RowBox[List[SubscriptBox[StyleBox[\\\"M\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\"[\\\", StyleBox[\\\"list\\\
\", \\\"TI\\\"], \\\"]\\\"]], \\\",\\\", RowBox[List[SubscriptBox[StyleBox[\\\
\"M\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\"[\\\", \
StyleBox[\\\"list\\\", \\\"TI\\\"], \\\"]\\\"]]]], \\\"}\\\"]], \
\\\"]\\\"]]\\) when fed \\!\\(\\*StyleBox[\\\"list\\\", \\\"TI\\\"]\\).\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"AutomatonProduct\", \"[\", \
RowBox[List[SubscriptBox[StyleBox[\"M\", \"TI\"], StyleBox[\"1\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"M\", \"TI\"], StyleBox[\"2\", \"TR\"]]]], \
\"]\"]]\) gives an automaton that outputs \!\(\*RowBox[List[\"{\", \
RowBox[List[RowBox[List[SubscriptBox[StyleBox[\"M\", \"TI\"], StyleBox[\"1\", \
\"TR\"]], \"[\", StyleBox[\"list\", \"TI\"], \"]\"]], \",\", \
RowBox[List[SubscriptBox[StyleBox[\"M\", \"TI\"], StyleBox[\"2\", \"TR\"]], \
\"[\", StyleBox[\"list\", \"TI\"], \"]\"]]]], \"}\"]]\) when fed \
\!\(\*StyleBox[\"list\", \"TI\"]\).\n\!\(\*RowBox[List[\"AutomatonProduct\", \
\"[\", RowBox[List[SubscriptBox[StyleBox[\"M\", \"TI\"], StyleBox[\"1\", \"TR\
\"]], \",\", SubscriptBox[StyleBox[\"M\", \"TI\"], StyleBox[\"2\", \"TR\"]], \
\",\", StyleBox[\"f\", \"TI\"]]], \"]\"]]\) gives an automaton that outputs \
\!\(\*RowBox[List[StyleBox[\"f\", \"TI\"], \"[\", RowBox[List[\"{\", \
RowBox[List[RowBox[List[SubscriptBox[StyleBox[\"M\", \"TI\"], StyleBox[\"1\", \
\"TR\"]], \"[\", StyleBox[\"list\", \"TI\"], \"]\"]], \",\", \
RowBox[List[SubscriptBox[StyleBox[\"M\", \"TI\"], StyleBox[\"2\", \"TR\"]], \
\"[\", StyleBox[\"list\", \"TI\"], \"]\"]]]], \"}\"]], \"]\"]]\) when fed \
\!\(\*StyleBox[\"list\", \"TI\"]\).", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`AutomatonProduct, {
      IntegerSequences`AutomatonProduct[
         Pattern[IntegerSequences`Private`automaton1, 
          PatternTest[
           IntegerSequences`Automaton[
            Pattern[IntegerSequences`Private`edges1, 
             Blank[]], 
            Pattern[IntegerSequences`Private`initialstate1, 
             Blank[]], 
            BlankNullSequence[]], IntegerSequences`AutomatonQ]], 
         Pattern[IntegerSequences`Private`automaton2, 
          PatternTest[
           IntegerSequences`Automaton[
            Pattern[IntegerSequences`Private`edges2, 
             Blank[]], 
            Pattern[IntegerSequences`Private`initialstate2, 
             Blank[]], 
            BlankNullSequence[]], IntegerSequences`AutomatonQ]], 
         Optional[
          Pattern[IntegerSequences`Private`outputfunction, 
           Except[
            Blank[Rule]]], Identity], 
         OptionsPattern[]] :> 
       Module[{IntegerSequences`Private`inputalphabet1, 
          IntegerSequences`Private`inputalphabet2, 
          IntegerSequences`Private`statelist1, 
          IntegerSequences`Private`statelist2, 
          IntegerSequences`Private`productautomaton, 
          IntegerSequences`Private`failed}, 
         IntegerSequences`Private`failed = 
          Catch[IntegerSequences`Private`inputalphabet1 = 
             IntegerSequences`AutomatonInputAlphabet[
              IntegerSequences`Private`automaton1]; 
            IntegerSequences`Private`inputalphabet2 = 
             IntegerSequences`AutomatonInputAlphabet[
              IntegerSequences`Private`automaton2]; If[
              Or[
               MatchQ[IntegerSequences`Private`inputalphabet1, 
                Blank[IntegerSequences`AutomatonInputAlphabet]], 
               MatchQ[IntegerSequences`Private`inputalphabet2, 
                Blank[IntegerSequences`AutomatonInputAlphabet]]], Message[
                MessageName[IntegerSequences`AutomatonProduct, "input"]]; 
              Throw[True]]; 
            If[Sort[IntegerSequences`Private`inputalphabet1] =!= 
              Sort[IntegerSequences`Private`inputalphabet2], Message[
                MessageName[IntegerSequences`AutomatonProduct, "alph"]]; 
              Throw[True]]; If[
              Or[
               Not[
                IntegerSequences`CompleteAutomatonQ[
                IntegerSequences`Private`automaton1]], 
               Not[
                IntegerSequences`CompleteAutomatonQ[
                IntegerSequences`Private`automaton2]]], Message[
                MessageName[IntegerSequences`AutomatonProduct, "com"]]; 
              Throw[True]]; 
            IntegerSequences`Private`statelist1 = 
             IntegerSequences`AutomatonStateList[
              IntegerSequences`Private`automaton1]; 
            IntegerSequences`Private`statelist2 = 
             IntegerSequences`AutomatonStateList[
              IntegerSequences`Private`automaton2]; 
            IntegerSequences`Private`productautomaton = 
             IntegerSequences`Automaton[
               If[
                And[
                 MatchQ[IntegerSequences`Private`edges1, {
                   Repeated[{
                    Blank[], 
                    PatternTest[
                    Blank[], 
                    IntegerSequences`Private`AutomatonInputSymbolQ]}]}], 
                 MatchQ[IntegerSequences`Private`edges2, {
                   Repeated[{
                    Blank[], 
                    PatternTest[
                    Blank[], 
                    IntegerSequences`Private`AutomatonInputSymbolQ]}]}]], 
                Apply[Join, 
                 Map[
                  Function[IntegerSequences`Private`edge1, 
                   Cases[
                   IntegerSequences`Private`edges2, 
                    Pattern[IntegerSequences`Private`edge2, {
                    Blank[], 
                    Last[IntegerSequences`Private`edge1]}] :> {
                    Thread[
                    Map[
                    First, {
                    IntegerSequences`Private`edge1, 
                    IntegerSequences`Private`edge2}], Rule], 
                    Last[IntegerSequences`Private`edge1]}]], 
                  IntegerSequences`Private`edges1]], 
                Apply[Join, 
                 Map[
                  Function[IntegerSequences`Private`edge1, 
                   DeleteCases[
                    Map[
                    Function[IntegerSequences`Private`edge2, {
                    Thread[
                    Map[
                    First, {
                    IntegerSequences`Private`edge1, 
                    IntegerSequences`Private`edge2}], Rule], 
                    Apply[IntegerSequences`Private`PatternIntersection, 
                    Map[
                    Last, {IntegerSequences`Private`edge1, 
                    IntegerSequences`Private`edge2}]]}], 
                    IntegerSequences`Private`edges2], {
                    Blank[], 
                    Alternatives[IntegerSequences`Private`$EmptyPattern, {
                    BlankNullSequence[], 
                    IntegerSequences`Private`$EmptyPattern, 
                    BlankNullSequence[]}]}]], 
                  IntegerSequences`Private`edges1]]], {
               IntegerSequences`Private`initialstate1, 
                IntegerSequences`Private`initialstate2}, 
               Map[MapAt[IntegerSequences`Private`outputfunction, 
                 Thread[#, Rule], 2]& , 
                Tuples[{
                  Thread[
                  IntegerSequences`Private`statelist1 -> 
                   Replace[IntegerSequences`Private`statelist1, 
                    IntegerSequences`AutomatonOutputRules[
                    IntegerSequences`Private`automaton1], {1}]], 
                  Thread[
                  IntegerSequences`Private`statelist2 -> 
                   Replace[IntegerSequences`Private`statelist2, 
                    IntegerSequences`AutomatonOutputRules[
                    IntegerSequences`Private`automaton2], {1}]]}]], 
               IntegerSequences`InputAlphabet -> 
               IntegerSequences`Private`inputalphabet1]; If[
              TrueQ[
               OptionValue[Minimize]], 
              IntegerSequences`Private`productautomaton = 
              IntegerSequences`AutomatonMinimize[
               IntegerSequences`Private`productautomaton, 
                IntegerSequences`IndexedStateNames -> 
                OptionValue[IntegerSequences`IndexedStateNames]], 
              If[
               TrueQ[
                OptionValue[IntegerSequences`IndexedStateNames]], 
               IntegerSequences`Private`productautomaton = 
               IntegerSequences`Private`IndexAutomaton[
                IntegerSequences`Private`productautomaton]]]; False]; 
         Condition[IntegerSequences`Private`productautomaton, 
           Not[IntegerSequences`Private`failed]]]}], "SubValues" -> None, 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`AutomatonProduct, {
      SyntaxInformation[IntegerSequences`AutomatonProduct] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           Blank[], 
           Optional[
            Blank[]], 
           OptionsPattern[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {
     IntegerSequences`IndexedStateNames -> True, Minimize -> True}, 
    "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`AutomatonProduct"], False]]], "Output",ExpressionUUID->\
"26d9ddcd-6772-44d5-898b-0e20b5495287"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonGraph", "[", 
  RowBox[{"AutomatonProduct", "[", 
   RowBox[{
    RowBox[{"Automaton", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"B", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"B", "\[Rule]", "A"}], ",", "1"}], "}"}]}], "}"}], ",", 
      "A"}], "]"}], ",", 
    RowBox[{"Automaton", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"B", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"B", "\[Rule]", "A"}], ",", "1"}], "}"}]}], "}"}], ",", 
      "A"}], "]"}]}], "]"}], "]"}]], "Input",ExpressionUUID->"28386c1d-ac2a-\
4fac-9580-3f8ad0cb1812"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{Null, 
       Interpretation[{$CellContext`A, $CellContext`A}, 1], 
       Interpretation[{$CellContext`B, $CellContext`B}, 2]}, {{{1, 2}, {2, 
       2}, {2, 3}, {3, 3}, {3, 2}}, Null}, {EdgeLabels -> {DirectedEdge[
           Interpretation[{$CellContext`B, $CellContext`B}, 2], 
           Interpretation[{$CellContext`B, $CellContext`B}, 2]] -> 0, 
         DirectedEdge[
           Interpretation[{$CellContext`A, $CellContext`A}, 1], 
           Interpretation[{$CellContext`B, $CellContext`B}, 2]] -> 1, 
         DirectedEdge[
           Interpretation[{$CellContext`A, $CellContext`A}, 1], 
           Interpretation[{$CellContext`A, $CellContext`A}, 1]] -> 0, 
         DirectedEdge[
           Interpretation[{$CellContext`B, $CellContext`B}, 2], 
           Interpretation[{$CellContext`A, $CellContext`A}, 1]] -> 1}, 
       EdgeShapeFunction -> {{
         "CorporateShortCarvedArrow", "ArrowSize" -> 0.04, "ArrowPositions" -> 
          1}}, EdgeStyle -> {
         Directive[
          GrayLevel[0.5], 
          Opacity[1]]}, PerformanceGoal -> "Quality", 
       VertexLabels -> {
        Interpretation[{$CellContext`B, $CellContext`B}, 2] -> Placed[
           Interpretation[{$CellContext`B, $CellContext`B}, 2], {
            Rational[1, 2], 
            Rational[1, 2]}], 
         Interpretation[{$CellContext`A, $CellContext`A}, 1] -> Placed[
           Interpretation[{$CellContext`A, $CellContext`A}, 1], {
            Rational[1, 2], 
            Rational[1, 2]}], Null -> Placed[Null, {
            Rational[1, 2], 
            Rational[1, 2]}]}, 
       VertexShapeFunction -> {
        Interpretation[{$CellContext`B, $CellContext`B}, 2] -> "Circle", Null -> 
         None, Interpretation[{$CellContext`A, $CellContext`A}, 1] -> 
         "Circle"}, VertexSize -> {0.2}, VertexStyle -> {
         Hue[0.6, 0.3, 0.8]}}]], Typeset`boxes, Typeset`boxes$s2d = 
    GraphicsGroupBox[{{
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], 
       Directive[
        GrayLevel[0.5], 
        Opacity[1]], {
        Arrowheads[{{0.04, 1, {
            GraphicsBox[
             
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
               0, 1, 0}}}, {{{-0.12347775660674376`, 
               0.}, {-0.5614144091900695, 
               0.21895451909535257`}, {-0.4738215557948804, 
               0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
               0.}}}]], 0.533327810340424}}}], 
        ArrowBox[{
          DynamicLocation["VertexID$1", Automatic, Center], 
          DynamicLocation["VertexID$2", Automatic, Center]}]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$2", Automatic, Center], {
             1.215969005971036, -0.1425312379880006}, {
             1.2342632844934087`, -0.32493768720862726`}, {
             1.1702710252509327`, -0.431056932977143}, {
             0.8305438002399658, -0.4310569329771431}, {
             0.7665515409974896, -0.32493768720862726`}, {
             0.7848458195198625, -0.1425312379880006}, 
             DynamicLocation["VertexID$2", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$2"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$2", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$2", Automatic, Center], {
             1.5003055284305298`, 0.16440723931737236`}, 
             DynamicLocation["VertexID$3", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$3"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$3", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             1.5003055284305298`, -0.16440723931737236`}, 
             DynamicLocation["VertexID$2", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$4"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$4", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             2.0886828995833713`, 0.1907835323853024}, {2.287561377120962, 
             0.24717977484589673`}, {2.4147320015954197`, 
             0.1882226960710236}, {
             2.4147320015954197`, -0.18822269607102265`}, {
             2.2875613771209626`, -0.2471797748458961}, {
             2.0886828995833717`, -0.19078353238530207`}, 
             DynamicLocation["VertexID$3", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$5"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$5", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       Hue[0.6, 0.3, 0.8], 
       TagBox[{
         TagBox[
          StyleBox[
           CircleBox[{0., 0.}, {0.0999796231370162, 0.0999796231370162}], 
           ShowContents -> False, StripOnInput -> False], "DynamicName", 
          BoxID -> "VertexID$1"], 
         InsetBox["", 
          Dynamic[
          DynamicLocation[
            "VertexID$1", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$1", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$1", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          
          DiskBox[{1.0004074127454492`, 4.666248974332878*^-18}, {
           0.0999796231370162, 0.0999796231370162}], "DynamicName", BoxID -> 
          "VertexID$2"], 
         InsetBox[
          FormBox[
           InterpretationBox[
            RowBox[{"{", 
              RowBox[{"A", ",", "A"}], "}"}], 1], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$2", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$2", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$2", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$2"], 
       TagBox[{
         TagBox[
          
          DiskBox[{2.000203644115611, 4.9566794084199865`*^-18}, {
           0.0999796231370162, 0.0999796231370162}], "DynamicName", BoxID -> 
          "VertexID$3"], 
         InsetBox[
          FormBox[
           InterpretationBox[
            RowBox[{"{", 
              RowBox[{"B", ",", "B"}], "}"}], 2], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$3", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$3", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$3", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$3"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{3.9406933090100917`, 
       355.2393066909899}, {-52.23930669098989, 47.23930669098989}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",ExpressionUUID->"8652b0eb-f0d5-4bf8-aee9-\
2146568506f5"]
}, Open  ]],

Cell[TextData[{
 "By default, the resulting product automaton is minimized.  Include ",
 StyleBox["Minimize->False", "Input"],
 " to omit the minimization step:"
}], "Text",ExpressionUUID->"4802a7c1-89dc-4f83-8c6f-957566655432"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonGraph", "[", 
  RowBox[{"AutomatonProduct", "[", 
   RowBox[{
    RowBox[{"Automaton", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"B", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"B", "\[Rule]", "A"}], ",", "1"}], "}"}]}], "}"}], ",", 
      "A"}], "]"}], ",", 
    RowBox[{"Automaton", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"B", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"B", "\[Rule]", "A"}], ",", "1"}], "}"}]}], "}"}], ",", 
      "A"}], "]"}], ",", 
    RowBox[{"Minimize", "\[Rule]", "False"}]}], "]"}], "]"}]], "Input",Express\
ionUUID->"194c5323-9f2b-4363-b80d-321639e63e1c"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{Null, 
       Interpretation[{$CellContext`A, $CellContext`A}, 1], 
       Interpretation[{$CellContext`A, $CellContext`B}, 2], 
       Interpretation[{$CellContext`B, $CellContext`B}, 3], 
       Interpretation[{$CellContext`B, $CellContext`A}, 4]}, {{{1, 2}, {2, 
       2}, {3, 3}, {2, 4}, {3, 5}, {5, 5}, {4, 4}, {5, 3}, {4, 2}}, Null}, {
      EdgeLabels -> {DirectedEdge[
           Interpretation[{$CellContext`B, $CellContext`B}, 3], 
           Interpretation[{$CellContext`B, $CellContext`B}, 3]] -> 0, 
         DirectedEdge[
           Interpretation[{$CellContext`B, $CellContext`B}, 3], 
           Interpretation[{$CellContext`A, $CellContext`A}, 1]] -> 1, 
         DirectedEdge[
           Interpretation[{$CellContext`B, $CellContext`A}, 4], 
           Interpretation[{$CellContext`A, $CellContext`B}, 2]] -> 1, 
         DirectedEdge[
           Interpretation[{$CellContext`A, $CellContext`A}, 1], 
           Interpretation[{$CellContext`B, $CellContext`B}, 3]] -> 1, 
         DirectedEdge[
           Interpretation[{$CellContext`A, $CellContext`B}, 2], 
           Interpretation[{$CellContext`A, $CellContext`B}, 2]] -> 0, 
         DirectedEdge[
           Interpretation[{$CellContext`A, $CellContext`A}, 1], 
           Interpretation[{$CellContext`A, $CellContext`A}, 1]] -> 0, 
         DirectedEdge[
           Interpretation[{$CellContext`A, $CellContext`B}, 2], 
           Interpretation[{$CellContext`B, $CellContext`A}, 4]] -> 1, 
         DirectedEdge[
           Interpretation[{$CellContext`B, $CellContext`A}, 4], 
           Interpretation[{$CellContext`B, $CellContext`A}, 4]] -> 0}, 
       EdgeShapeFunction -> {{
         "CorporateShortCarvedArrow", "ArrowSize" -> 0.04, "ArrowPositions" -> 
          1}}, EdgeStyle -> {
         Directive[
          GrayLevel[0.5], 
          Opacity[1]]}, PerformanceGoal -> "Quality", 
       VertexLabels -> {
        Interpretation[{$CellContext`A, $CellContext`A}, 1] -> Placed[
           Interpretation[{$CellContext`A, $CellContext`A}, 1], {
            Rational[1, 2], 
            Rational[1, 2]}], 
         Interpretation[{$CellContext`B, $CellContext`A}, 4] -> Placed[
           Interpretation[{$CellContext`B, $CellContext`A}, 4], {
            Rational[1, 2], 
            Rational[1, 2]}], 
         Interpretation[{$CellContext`A, $CellContext`B}, 2] -> Placed[
           Interpretation[{$CellContext`A, $CellContext`B}, 2], {
            Rational[1, 2], 
            Rational[1, 2]}], 
         Interpretation[{$CellContext`B, $CellContext`B}, 3] -> Placed[
           Interpretation[{$CellContext`B, $CellContext`B}, 3], {
            Rational[1, 2], 
            Rational[1, 2]}], Null -> Placed[Null, {
            Rational[1, 2], 
            Rational[1, 2]}]}, 
       VertexShapeFunction -> {
        Interpretation[{$CellContext`B, $CellContext`B}, 3] -> "Circle", 
         Interpretation[{$CellContext`A, $CellContext`B}, 2] -> "Circle", 
         Null -> None, Interpretation[{$CellContext`A, $CellContext`A}, 1] -> 
         "Circle", Interpretation[{$CellContext`B, $CellContext`A}, 4] -> 
         "Circle"}, VertexSize -> {0.2}, VertexStyle -> {
         Hue[0.6, 0.3, 0.8]}}]], Typeset`boxes, Typeset`boxes$s2d = 
    GraphicsGroupBox[{{
       Directive[
        Opacity[0.7], 
        Hue[0.6, 0.7, 0.5]], 
       Directive[
        GrayLevel[0.5], 
        Opacity[1]], {
        Arrowheads[{{0.04, 1, {
            GraphicsBox[
             
             FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {
               0, 1, 0}}}, {{{-0.12347775660674376`, 
               0.}, {-0.5614144091900695, 
               0.21895451909535257`}, {-0.4738215557948804, 
               0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
               0.}}}]], 0.533327810340424}}}], 
        ArrowBox[{
          DynamicLocation["VertexID$1", Automatic, Center], 
          DynamicLocation["VertexID$2", Automatic, Center]}]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$2", Automatic, Center], {
             1.6222417337282615`, -1.0488039657452264`}, {
             1.6405360122506343`, -1.2312104149658532`}, {
             1.5765437530081583`, -1.3373296607343688`}, {
             1.2368165279971914`, -1.337329660734369}, {
             1.1728242687547152`, -1.231210414965853}, {
             1.191118547277088, -1.0488039657452264`}, 
             DynamicLocation["VertexID$2", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$2"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$2", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$2", Automatic, Center], {
             1.906578256187762, -0.741865488439855}, 
             DynamicLocation["VertexID$4", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$3"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$3", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             1.9947519832249858`, -2.528034650886375}, {
             2.1936304607625767`, -2.4716384084257808`}, {
             2.3208010852370338`, -2.530595487200654}, {
             2.3208010852370347`, -2.9070408793427003`}, {
             2.193630460762577, -2.9659979581175735`}, {
             1.9947519832249863`, -2.9096017156569793`}, 
             DynamicLocation["VertexID$3", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$4"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$4", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$3", Automatic, Center], {
             1.4062727277572478`, -2.8832589304547938`}, 
             DynamicLocation["VertexID$5", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$5"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$5", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$4", Automatic, Center], {
             1.9065782561877664`, -1.0706799670745948`}, 
             DynamicLocation["VertexID$2", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$6"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$6", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$4", Automatic, Center], {
             2.494955627340597, -0.7154891953719233}, {
             2.6938341048781878`, -0.659092952911329}, {
             2.8210047293526452`, -0.7180500316862022}, {
             2.8210047293526452`, -1.0944954238282483`}, {
             2.693834104878188, -1.153452502603122}, {
             2.4949556273405973`, -1.0970562601425278`}, 
             DynamicLocation["VertexID$4", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$7"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$7", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$5", Automatic, Center], {
             1.4062727277572435`, -2.554377436088553}, 
             DynamicLocation["VertexID$3", Automatic, Center]}]]}, 
         "DynamicName", BoxID -> "EdgeLabelID$8"], 
        InsetBox[
         FormBox["1", TraditionalForm], 
         DynamicLocation["EdgeLabelID$8", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}, {
        TagBox[{
          Arrowheads[{{0.04, 1, {
              GraphicsBox[
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                 0}, {0, 1, 0}}}, {{{-0.12347775660674376`, 
                 0.}, {-0.5614144091900695, 
                 0.21895451909535257`}, {-0.4738215557948804, 
                 0.}}, {{-0.6666390522740446, -0.3333333333333333}, \
{-0.5333167646977603, 0.}, {-0.6666390522740446, 0.3333333333333333}, {0., 
                 0.}}}]], 0.533327810340424}}}], 
          ArrowBox[
           BezierCurveBox[{
             DynamicLocation["VertexID$5", Automatic, Center], {
             0.8177934722894653, -2.90960171565698}, {
             0.6189149947518744, -2.965997958117574}, {
             0.49174437027741713`, -2.9070408793427007`}, {
             0.49174437027741713`, -2.5305954872006544`}, {
             0.6189149947518744, -2.471638408425781}, {
             0.8177934722894652, -2.5280346508863754`}, 
             DynamicLocation["VertexID$5", Automatic, Center]}, SplineDegree -> 
            7]]}, "DynamicName", BoxID -> "EdgeLabelID$9"], 
        InsetBox[
         FormBox["0", TraditionalForm], 
         DynamicLocation["EdgeLabelID$9", Automatic, 
          Scaled[0.5]], 
         ImageScaled[{0.5, 0.5}], BaseStyle -> "Graphics"]}}, {
       Directive[
        Hue[0.6, 0.2, 0.8], 
        EdgeForm[
         Directive[
          GrayLevel[0], 
          Opacity[0.7]]]], 
       Hue[0.6, 0.3, 0.8], 
       TagBox[{
         TagBox[
          StyleBox[
           
           CircleBox[{0.40627272775722556`, -0.9062727277572258}, {
            0.0999796231370162, 0.0999796231370162}], ShowContents -> False, 
           StripOnInput -> False], "DynamicName", BoxID -> "VertexID$1"], 
         InsetBox["", 
          Dynamic[
          DynamicLocation[
            "VertexID$1", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$1", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$1", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$1"], 
       TagBox[{
         TagBox[
          
          DiskBox[{1.4066801405026748`, -0.9062727277572258}, {
           0.0999796231370162, 0.0999796231370162}], "DynamicName", BoxID -> 
          "VertexID$2"], 
         InsetBox[
          FormBox[
           InterpretationBox[
            RowBox[{"{", 
              RowBox[{"A", ",", "A"}], "}"}], 1], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$2", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$2", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$2", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$2"], 
       TagBox[{
         TagBox[
          
          DiskBox[{1.9062727277572258`, -2.7188181832716776`}, {
           0.0999796231370162, 0.0999796231370162}], "DynamicName", BoxID -> 
          "VertexID$3"], 
         InsetBox[
          FormBox[
           InterpretationBox[
            RowBox[{"{", 
              RowBox[{"A", ",", "B"}], "}"}], 2], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$3", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$3", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$3", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$3"], 
       TagBox[{
         TagBox[
          
          DiskBox[{2.4064763718728366`, -0.9062727277572258}, {
           0.0999796231370162, 0.0999796231370162}], "DynamicName", BoxID -> 
          "VertexID$4"], 
         InsetBox[
          FormBox[
           InterpretationBox[
            RowBox[{"{", 
              RowBox[{"B", ",", "B"}], "}"}], 3], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$4", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$4", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$4", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$4"], 
       TagBox[{
         TagBox[
          
          DiskBox[{0.9062727277572258, -2.7188181832716776`}, {
           0.0999796231370162, 0.0999796231370162}], "DynamicName", BoxID -> 
          "VertexID$5"], 
         InsetBox[
          FormBox[
           InterpretationBox[
            RowBox[{"{", 
              RowBox[{"B", ",", "A"}], "}"}], 4], TraditionalForm], 
          Dynamic[
          DynamicLocation[
            "VertexID$5", Automatic, {Left, Bottom}] + (
             DynamicLocation["VertexID$5", Automatic, {Right, Top}] - 
             DynamicLocation["VertexID$5", Automatic, {Left, Bottom}]) {
              Rational[1, 2], 
              Rational[1, 2]}], BaseStyle -> "Graphics"]}, "DynamicName", 
        BoxID -> "VertexLabelID$5"]}}], $CellContext`flag}, 
    TagBox[
     DynamicBox[GraphComputation`NetworkGraphicsBox[
      3, Typeset`graph, Typeset`boxes, $CellContext`flag], {
      CachedValue :> Typeset`boxes, SingleEvaluation -> True, 
       SynchronousUpdating -> False, TrackedSymbols :> {$CellContext`flag}},
      ImageSizeCache->{{3.94069330901009, 
       355.2393066909899}, {-164.2393066909899, 159.2393066909899}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False,
    UnsavedVariables:>{$CellContext`flag}]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",ExpressionUUID->"5bfdc02d-d431-4eac-a32e-\
5d777e147878"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["AutomatonQ", "Input"]], "Subsubsection",ExpressionUUID->"666158a3-d23b-4e92-b6f8-3429db8c8e31"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "AutomatonQ"}]], "Input",ExpressionUUID->"9f0a936a-3c13-4e8a-b6bf-94c45b504451"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomatonQ\\\", \\\"[\\\", \
StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]]\\) yields True if \
\\!\\(\\*StyleBox[\\\"M\\\", \\\"TI\\\"]\\) is a valid automaton object, and \
False otherwise.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"AutomatonQ", "[", 
                    RowBox[{"IntegerSequences`Private`automaton", ":", 
                    RowBox[{"Automaton", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Except", "[", "$Failed", "]"}], "\[Rule]", 
                    RowBox[{"Except", "[", "$Failed", "]"}]}], ",", "_"}], 
                    "}"}], "..."}], "}"}], ",", "_", ",", 
                    RowBox[{"Except", "[", 
                    RowBox[{
                    RowBox[{"InputAlphabet", "\[Rule]", "_"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_Rule", "|", "_RuleDelayed"}], ")"}], "..."}], 
                    "}"}], "|", "_Rule", "|", "_RuleDelayed", "|", 
                    RowBox[{"_", "?", "AssociationQ"}], "|", 
                    RowBox[{"_", "?", "DispatchQ"}]}]}], "]"}], ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}]}], "]"}], ":=", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`AutomatonInitialStateMode", "[",
                     "IntegerSequences`Private`automaton", "]"}], "=!=", 
                    "$Failed"}]}]},
                    {
                    RowBox[{
                    RowBox[{"AutomatonQ", "[", 
                    RowBox[{"Automaton", "[", 
                    RowBox[{
                    "IntegerSequences`Private`edges_", ",", 
                    "IntegerSequences`Private`initialstate_", ",", 
                    RowBox[{"IntegerSequences`Private`automatonoptions", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], "]"}], ":=", 
                    RowBox[{
                    RowBox[{"AutomatonQ", "[", 
                    RowBox[{"Automaton", "[", 
                    RowBox[{
                    "IntegerSequences`Private`edges", ",", 
                    "IntegerSequences`Private`initialstate", ",", 
                    RowBox[{"{", "}"}], ",", 
                    "IntegerSequences`Private`automatonoptions"}], "]"}], 
                    "]"}], "/;", 
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "IntegerSequences`Private`automatonoptions", "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", "___"}], "}"}]}], "]"}]}]}]}]},
                    {
                    RowBox[{
                    RowBox[{"AutomatonQ", "[", "_", "]"}], ":=", "False"}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "AutomatonQ", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`AutomatonQ] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`AutomatonQ\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomatonQ\\\", \\\"[\\\", \
StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]]\\) yields True if \
\\!\\(\\*StyleBox[\\\"M\\\", \\\"TI\\\"]\\) is a valid automaton object, and \
False otherwise.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"AutomatonQ\", \"[\", StyleBox[\"M\", \"TI\"], \
\"]\"]]\) yields True if \!\(\*StyleBox[\"M\", \"TI\"]\) is a valid automaton \
object, and False otherwise.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`AutomatonQ, {IntegerSequences`AutomatonQ[
         Pattern[IntegerSequences`Private`automaton, 
          IntegerSequences`Automaton[{
            RepeatedNull[{Except[$Failed] -> Except[$Failed], 
              Blank[]}]}, 
           Blank[], 
           Except[IntegerSequences`InputAlphabet -> Blank[], 
            Alternatives[{
              RepeatedNull[
               Alternatives[
                Blank[Rule], 
                Blank[RuleDelayed]]]}, 
             Blank[Rule], 
             Blank[RuleDelayed], 
             PatternTest[
              Blank[], AssociationQ], 
             PatternTest[
              Blank[], DispatchQ]]], 
           OptionsPattern[]]]] :> 
       IntegerSequences`Private`AutomatonInitialStateMode[
         IntegerSequences`Private`automaton] =!= $Failed, 
       IntegerSequences`AutomatonQ[
         IntegerSequences`Automaton[
          Pattern[IntegerSequences`Private`edges, 
           Blank[]], 
          Pattern[IntegerSequences`Private`initialstate, 
           Blank[]], 
          Pattern[IntegerSequences`Private`automatonoptions, 
           OptionsPattern[]]]] :> Condition[
         IntegerSequences`AutomatonQ[
          IntegerSequences`Automaton[
          IntegerSequences`Private`edges, 
           IntegerSequences`Private`initialstate, {}, 
           IntegerSequences`Private`automatonoptions]], 
         Not[
          MatchQ[{IntegerSequences`Private`automatonoptions}, {{}, 
            BlankNullSequence[]}]]], IntegerSequences`AutomatonQ[
         Blank[]] :> False}], "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`AutomatonQ, {
      SyntaxInformation[IntegerSequences`AutomatonQ] -> {"ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`AutomatonQ"], False]]], "Output",ExpressionUUID->\
"8b65ab92-14e6-4998-894a-dbdb846fc384"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonQ", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "A"}], ",", "1"}], "}"}]}], "}"}], ",", "A"}],
    "]"}], "]"}]], "Input",ExpressionUUID->"6d4d1c10-1057-477c-b6b9-\
298d5b4b53c6"],

Cell[BoxData["True"], "Output",ExpressionUUID->"a1e72b23-4ead-4986-a206-227ded31dd5d"]
}, Open  ]],

Cell["\<\
The initial state must appear in the edge list for the automaton to be valid:\
\>", "Text",ExpressionUUID->"66086fc1-48cd-459e-847b-5ca533cd212e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonQ", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "A"}], ",", "1"}], "}"}]}], "}"}], ",", "0"}],
    "]"}], "]"}]], "Input",ExpressionUUID->"23cf5dd8-b8d8-4492-911e-\
a8c360530388"],

Cell[BoxData["False"], "Output",ExpressionUUID->"ac29e90e-3ab6-443f-a9ea-b4c049b7c87e"]
}, Open  ]],

Cell[TextData[{
 "States named ",
 StyleBox["$Failed", "Input"],
 " are disallowed:"
}], "Text",ExpressionUUID->"264373a0-eea3-4a5c-8955-81759cf681db"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonQ", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"A", "\[Rule]", "$Failed"}], ",", 
       RowBox[{"0", "|", "1"}]}], "}"}], "}"}], ",", "A"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"b2c07b0c-854f-497a-a926-c83a1b922441"],

Cell[BoxData["False"], "Output",ExpressionUUID->"f1205fd9-1bed-4146-b7ee-9ea0a67e8f76"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["AutomatonReverse", "Input"]], "Subsubsection",ExpressionUUID->"0b2e5af6-d1b4-40be-b40d-5202033dcb46"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "AutomatonReverse"}]], "Input",ExpressionUUID->"b0e2a9e9-b308-40c3-a401-0eb14aa6efb6"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomatonReverse\\\", \
\\\"[\\\", StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives an automaton \
that computes \\!\\(\\*RowBox[List[StyleBox[\\\"M\\\", \\\"TI\\\"], \
\\\"[\\\", StyleBox[\\\"input\\\", \\\"TI\\\"], \\\"]\\\"]]\\) when fed \
\\!\\(\\*RowBox[List[\\\"Reverse\\\", \\\"[\\\", StyleBox[\\\"input\\\", \
\\\"TI\\\"], \\\"]\\\"]]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"AutomatonReverse", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`originalautomaton", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Automaton", "[", 
                    RowBox[{
                    "IntegerSequences`Private`originaledges_", ",", 
                    "IntegerSequences`Private`originalinitialstate_", ",", 
                    "___"}], "]"}], ")"}], "?", "AutomatonQ"}]}], ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`inputalphabet", ",", 
                    "IntegerSequences`Private`originalstatelist", ",", 
                    "IntegerSequences`Private`originalstatepositionindex", 
                    ",", "IntegerSequences`Private`originalinitialstateindex",
                     ",", "IntegerSequences`Private`originaltransitionrules", 
                    ",", "IntegerSequences`Private`originaloutputrules", ",", 
                    "IntegerSequences`Private`currentstate", ",", 
                    "IntegerSequences`Private`letter", ",", 
                    "IntegerSequences`Private`edges", ",", 
                    "IntegerSequences`Private`statecount", ",", 
                    "IntegerSequences`Private`state", ",", 
                    "IntegerSequences`Private`statehashassociation", ",", 
                    "IntegerSequences`Private`stateindex", ",", 
                    "IntegerSequences`Private`output", ",", 
                    "IntegerSequences`Private`newstate", ",", 
                    "IntegerSequences`Private`newstatehash", ",", 
                    "IntegerSequences`Private`newstateindex", ",", 
                    "IntegerSequences`Private`starttime", ",", 
                    "IntegerSequences`Private`checkstatesameness", ",", 
                    "IntegerSequences`Private`memorystorage", ",", 
                    "IntegerSequences`Private`directory"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`checkstatesameness", "=", 
                    RowBox[{"!", 
                    RowBox[{"TrueQ", "[", 
                    RowBox[{"OptionValue", "[", "HashStateNames", "]"}], 
                    "]"}]}]}], ";", 
                    RowBox[{"IntegerSequences`Private`inputalphabet", "=", 
                    RowBox[{
                    "AutomatonInputAlphabet", "[", 
                    "IntegerSequences`Private`originalautomaton", "]"}]}], 
                    ";", 
                    RowBox[{"IntegerSequences`Private`originalstatelist", "=", 
                    RowBox[{
                    "AutomatonStateList", "[", 
                    "IntegerSequences`Private`originalautomaton", "]"}]}], 
                    ";", 
                    RowBox[{
                    "IntegerSequences`Private`originalstatepositionindex", 
                    "=", 
                    RowBox[{"First", "/@", 
                    RowBox[{
                    "PositionIndex", "[", 
                    "IntegerSequences`Private`originalstatelist", "]"}]}]}], 
                    ";", 
                    RowBox[{
                    "IntegerSequences`Private`originalinitialstateindex", "=", 
                    RowBox[{
                    "IntegerSequences`Private`originalstatepositionindex", 
                    "[", "IntegerSequences`Private`originalinitialstate", 
                    "]"}]}], ";", 
                    RowBox[{
                    "IntegerSequences`Private`originaltransitionrules", "=", 
                    RowBox[{"Append", "[", 
                    RowBox[{
                    RowBox[{"Replace", "[", 
                    RowBox[{"IntegerSequences`Private`originaledges", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`instate_", "\[Rule]", 
                    "IntegerSequences`Private`outstate_"}], ",", 
                    "IntegerSequences`Private`label_"}], "}"}], 
                    "\[RuleDelayed]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`instate", ",", 
                    "IntegerSequences`Private`label"}], "}"}], "\[Rule]", 
                    "IntegerSequences`Private`outstate"}]}], ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], ",", 
                    RowBox[{"_", "\[Rule]", "$Failed"}]}], "]"}]}], ";", 
                    RowBox[{
                    "IntegerSequences`Private`originaloutputrules", "=", 
                    RowBox[{
                    "AutomatonOutputRules", "[", 
                    "IntegerSequences`Private`originalautomaton", "]"}]}], 
                    ";", 
                    RowBox[{"IntegerSequences`Private`statecount", "=", "1"}],
                     ";", 
                    RowBox[{"IntegerSequences`Private`newstate", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    "IntegerSequences`Private`originalstatelist", ",", 
                    "IntegerSequences`Private`originaloutputrules", ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`memorystorage", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"OptionValue", "[", "StateStorage", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"\<\"Disk\"\>", "|", 
                    RowBox[{"{", 
                    RowBox[{"\<\"Disk\"\>", ",", "___", ",", 
                    RowBox[{"\<\"Directory\"\>", "\[Rule]", "Automatic"}], 
                    ",", "___"}], "}"}]}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`directory", "=", 
                    "$TemporaryDirectory"}], ";", "False"}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"\<\"Disk\"\>", ",", "___", ",", 
                    
                    RowBox[{"\<\"Directory\"\>", "\[Rule]", 
                    "IntegerSequences`Private`dir_"}], ",", "___"}], "}"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`directory", "=", 
                    "IntegerSequences`Private`dir"}], ";", "False"}], ")"}]}],
                     ",", 
                    RowBox[{"\<\"Memory\"\>", "\[Rule]", "True"}], ",", 
                    RowBox[{"_", "\[Rule]", "False"}]}], "}"}]}], "]"}]}], 
                    ";", 
                    RowBox[{"If", "[", 
                    RowBox[{"IntegerSequences`Private`memorystorage", ",", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`state", "[", 
                    "IntegerSequences`Private`statecount", "]"}], "=", 
                    "IntegerSequences`Private`newstate"}], ",", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`directory", ",", 
                    RowBox[{
                    RowBox[{
                    "ToString", "[", "IntegerSequences`Private`statecount", 
                    "]"}], "<>", "\<\".m\"\>"}]}], "}"}], "]"}], ",", 
                    "IntegerSequences`Private`newstate"}], "]"}]}], "]"}], 
                    ";", 
                    RowBox[{
                    "IntegerSequences`Private`statehashassociation", "=", 
                    RowBox[{"Association", "[", "]"}]}], ";", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`statehashassociation", "[", 
                    RowBox[{
                    "Hash", "[", "IntegerSequences`Private`newstate", "]"}], 
                    "]"}], "=", "IntegerSequences`Private`statecount"}], ";", 
                    RowBox[{"IntegerSequences`Private`output", "=", 
                    RowBox[{"Association", "[", "]"}]}], ";", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`output", "[", 
                    "IntegerSequences`Private`statecount", "]"}], "=", 
                    RowBox[{
                    "IntegerSequences`Private`newstate", 
                    "\[LeftDoubleBracket]", 
                    "IntegerSequences`Private`originalinitialstateindex", 
                    "\[RightDoubleBracket]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`stateindex", "=", "1"}],
                     ";", 
                    RowBox[{"IntegerSequences`Private`starttime", "=", 
                    RowBox[{"DateObject", "[", "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"TrueQ", "[", 
                    RowBox[{"OptionValue", "[", "Monitor", "]"}], "]"}], "&&", 
                    RowBox[{"10", "<", "$VersionNumber", "<", "11"}]}], ",", 
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"Monitor", "::", "abort"}], "MessageName"], 
                    "]"}]}], "]"}], ";", 
                    RowBox[{"IntegerSequences`Private`edges", "=", 
                    RowBox[{"Join", "@@", 
                    RowBox[{
                    RowBox[{"Reap", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"TrueQ", "[", 
                    RowBox[{"OptionValue", "[", "Monitor", "]"}], "]"}], "&&", 
                    RowBox[{"!", 
                    RowBox[{"10", "<", "$VersionNumber", "<", "11"}]}]}], ",",
                     "Monitor", ",", "List"}], "]"}], "[", 
                    RowBox[{
                    RowBox[{"While", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`stateindex", "\[LessEqual]", 
                    "IntegerSequences`Private`statecount"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`currentstate", "=", 
                    RowBox[{"If", "[", 
                    RowBox[{"IntegerSequences`Private`memorystorage", ",", 
                    RowBox[{
                    "IntegerSequences`Private`state", "[", 
                    "IntegerSequences`Private`stateindex", "]"}], ",", 
                    RowBox[{"Import", "[", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`directory", ",", 
                    RowBox[{
                    RowBox[{
                    "ToString", "[", "IntegerSequences`Private`stateindex", 
                    "]"}], "<>", "\<\".m\"\>"}]}], "}"}], "]"}], "]"}]}], 
                    "]"}]}], ";", 
                    RowBox[{"Sow", "[", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`newstate", "=", 
                    RowBox[{
                    "IntegerSequences`Private`currentstate", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"Lookup", "[", 
                    RowBox[{
                    "IntegerSequences`Private`originalstatepositionindex", 
                    ",", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`s", ",", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`s", ",", 
                    "IntegerSequences`Private`letter"}], "}"}], ",", 
                    "IntegerSequences`Private`originaltransitionrules"}], 
                    "]"}]}], "]"}], "/@", 
                    "IntegerSequences`Private`originalstatelist"}]}], "]"}], 
                    "\[RightDoubleBracket]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`newstatehash", "=", 
                    RowBox[{
                    "Hash", "[", "IntegerSequences`Private`newstate", "]"}]}],
                     ";", 
                    RowBox[{"IntegerSequences`Private`newstateindex", "=", 
                    RowBox[{
                    "IntegerSequences`Private`statehashassociation", "[", 
                    "IntegerSequences`Private`newstatehash", "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`checkstatesameness", "&&", 
                    RowBox[{"!", 
                    RowBox[{
                    "MissingQ", "[", "IntegerSequences`Private`newstateindex",
                     "]"}]}], "&&", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{"IntegerSequences`Private`memorystorage", ",", 
                    RowBox[{
                    "IntegerSequences`Private`state", "[", 
                    "IntegerSequences`Private`newstateindex", "]"}], ",", 
                    RowBox[{"Import", "[", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`directory", ",", 
                    RowBox[{
                    RowBox[{
                    "ToString", "[", "IntegerSequences`Private`newstateindex",
                     "]"}], "<>", "\<\".m\"\>"}]}], "}"}], "]"}], "]"}]}], 
                    "]"}], "=!=", "IntegerSequences`Private`newstate"}]}], 
                    ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"AutomatonReverse", "::", "hash"}], "MessageName"],
                     ",", "IntegerSequences`Private`newstatehash"}], "]"}], 
                    ";", 
                    RowBox[{"IntegerSequences`Private`newstateindex", "=", 
                    RowBox[{"Missing", "[", "\<\"NotFound\"\>", "]"}]}]}]}], 
                    "]"}], ";", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`stateindex", "\[Rule]", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "MissingQ", "[", "IntegerSequences`Private`newstateindex",
                     "]"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`statecount", "++"}], 
                    ";", 
                    RowBox[{"If", "[", 
                    RowBox[{"IntegerSequences`Private`memorystorage", ",", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`state", "[", 
                    "IntegerSequences`Private`statecount", "]"}], "=", 
                    "IntegerSequences`Private`newstate"}], ",", 
                    RowBox[{"Export", "[", 
                    RowBox[{
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`directory", ",", 
                    RowBox[{
                    RowBox[{
                    "ToString", "[", "IntegerSequences`Private`statecount", 
                    "]"}], "<>", "\<\".m\"\>"}]}], "}"}], "]"}], ",", 
                    "IntegerSequences`Private`newstate"}], "]"}]}], "]"}], 
                    ";", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`statehashassociation", "[", 
                    "IntegerSequences`Private`newstatehash", "]"}], "=", 
                    "IntegerSequences`Private`statecount"}], ";", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`output", "[", 
                    "IntegerSequences`Private`statecount", "]"}], "=", 
                    RowBox[{
                    "IntegerSequences`Private`newstate", 
                    "\[LeftDoubleBracket]", 
                    "IntegerSequences`Private`originalinitialstateindex", 
                    "\[RightDoubleBracket]"}]}], ";", 
                    "IntegerSequences`Private`statecount"}], ",", 
                    "IntegerSequences`Private`newstateindex"}], "]"}]}], ",", 
                    "IntegerSequences`Private`letter"}], "}"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`letter", ",", 
                    "IntegerSequences`Private`inputalphabet"}], "}"}]}], 
                    "]"}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "!", "IntegerSequences`Private`checkstatesameness"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{"IntegerSequences`Private`memorystorage", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "IntegerSequences`Private`state", "[", 
                    "IntegerSequences`Private`stateindex", "]"}], ")"}], 
                    "=."}], ",", 
                    RowBox[{"DeleteFile", "[", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`directory", ",", 
                    RowBox[{
                    RowBox[{
                    "ToString", "[", "IntegerSequences`Private`stateindex", 
                    "]"}], "<>", "\<\".m\"\>"}]}], "}"}], "]"}], "]"}]}], 
                    "]"}]}], "]"}], ";", 
                    RowBox[{"IntegerSequences`Private`stateindex", "++"}]}]}],
                     "]"}], ",", 
                    RowBox[{"Column", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"Processing state \"\>", ",", 
                    "IntegerSequences`Private`stateindex", 
                    ",", "\<\" of \"\>", ",", 
                    "IntegerSequences`Private`statecount"}], "}"}], "]"}], 
                    ",", 
                    RowBox[{"ProgressIndicator", "[", 
                    FractionBox[
                    RowBox[{"IntegerSequences`Private`stateindex", "-", "1"}],
                     "IntegerSequences`Private`statecount"], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`stateindex", "\[Equal]", "1"}], 
                    ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", "}"}], "]"}], ",", 
                    RowBox[{"Row", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"Processing known states will finish at \"\>",
                     ",", 
                    RowBox[{"DatePlus", "[", 
                    RowBox[{"IntegerSequences`Private`starttime", ",", 
                    FractionBox[
                    RowBox[{"IntegerSequences`Private`statecount", " ", 
                    RowBox[{"DateDifference", "[", 
                    RowBox[{"IntegerSequences`Private`starttime", ",", 
                    RowBox[{"DateObject", "[", "]"}]}], "]"}]}], 
                    RowBox[{
                    "IntegerSequences`Private`stateindex", "-", "1"}]]}], 
                    "]"}]}], "}"}], "]"}]}], "]"}]}], "}"}], "]"}]}], "]"}], 
                    ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    "IntegerSequences`Private`checkstatesameness", ",", 
                    RowBox[{"If", "[", 
                    RowBox[{"IntegerSequences`Private`memorystorage", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "IntegerSequences`Private`state", "[", "#1", "]"}], ")"}],
                     "=."}], "&"}], ")"}], "/@", 
                    RowBox[{"Range", "[", 
                    RowBox[{
                    "IntegerSequences`Private`statecount", ",", "1", ",", 
                    RowBox[{"-", "1"}]}], "]"}]}], ",", 
                    RowBox[{"DeleteFile", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`directory", ",", 
                    RowBox[{
                    RowBox[{"ToString", "[", "#1", "]"}], 
                    "<>", "\<\".m\"\>"}]}], "}"}], "]"}], "&"}], ")"}], "/@", 
                    RowBox[{
                    "Range", "[", "IntegerSequences`Private`statecount", 
                    "]"}]}], "]"}]}], "]"}]}], "]"}], ";"}], "]"}], 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"2", ",", "1"}], "\[RightDoubleBracket]"}]}]}], 
                    ";", 
                    RowBox[{"Automaton", "[", 
                    RowBox[{"IntegerSequences`Private`edges", ",", "1", ",", 
                    RowBox[{
                    "Normal", "[", "IntegerSequences`Private`output", "]"}]}],
                     "]"}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "AutomatonReverse", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`AutomatonReverse] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    OptionsPattern[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"HashStateNames", "\[Rule]", "False"}], ",", 
                    RowBox[{"Monitor", "\[Rule]", "False"}], ",", 
                    RowBox[{"StateStorage", "\[Rule]", "\<\"Memory\"\>"}]}], 
                    "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`AutomatonReverse\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomatonReverse\\\", \
\\\"[\\\", StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives an automaton \
that computes \\!\\(\\*RowBox[List[StyleBox[\\\"M\\\", \\\"TI\\\"], \
\\\"[\\\", StyleBox[\\\"input\\\", \\\"TI\\\"], \\\"]\\\"]]\\) when fed \
\\!\\(\\*RowBox[List[\\\"Reverse\\\", \\\"[\\\", StyleBox[\\\"input\\\", \
\\\"TI\\\"], \\\"]\\\"]]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"AutomatonReverse\", \"[\", StyleBox[\"M\", \"TI\"], \
\"]\"]]\) gives an automaton that computes \!\(\*RowBox[List[StyleBox[\"M\", \
\"TI\"], \"[\", StyleBox[\"input\", \"TI\"], \"]\"]]\) when fed \
\!\(\*RowBox[List[\"Reverse\", \"[\", StyleBox[\"input\", \"TI\"], \
\"]\"]]\).", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None,
     "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`AutomatonReverse, {
      IntegerSequences`AutomatonReverse[
         Pattern[IntegerSequences`Private`originalautomaton, 
          PatternTest[
           IntegerSequences`Automaton[
            Pattern[IntegerSequences`Private`originaledges, 
             Blank[]], 
            Pattern[IntegerSequences`Private`originalinitialstate, 
             Blank[]], 
            BlankNullSequence[]], IntegerSequences`AutomatonQ]], 
         OptionsPattern[]] :> 
       Module[{IntegerSequences`Private`inputalphabet, 
          IntegerSequences`Private`originalstatelist, 
          IntegerSequences`Private`originalstatepositionindex, 
          IntegerSequences`Private`originalinitialstateindex, 
          IntegerSequences`Private`originaltransitionrules, 
          IntegerSequences`Private`originaloutputrules, 
          IntegerSequences`Private`currentstate, 
          IntegerSequences`Private`letter, IntegerSequences`Private`edges, 
          IntegerSequences`Private`statecount, IntegerSequences`Private`state,
           IntegerSequences`Private`statehashassociation, 
          IntegerSequences`Private`stateindex, 
          IntegerSequences`Private`output, IntegerSequences`Private`newstate, 
          IntegerSequences`Private`newstatehash, 
          IntegerSequences`Private`newstateindex, 
          IntegerSequences`Private`starttime, 
          IntegerSequences`Private`checkstatesameness, 
          IntegerSequences`Private`memorystorage, 
          IntegerSequences`Private`directory}, 
         IntegerSequences`Private`checkstatesameness = Not[
            TrueQ[
             OptionValue[IntegerSequences`HashStateNames]]]; 
         IntegerSequences`Private`inputalphabet = 
          IntegerSequences`AutomatonInputAlphabet[
           IntegerSequences`Private`originalautomaton]; 
         IntegerSequences`Private`originalstatelist = 
          IntegerSequences`AutomatonStateList[
           IntegerSequences`Private`originalautomaton]; 
         IntegerSequences`Private`originalstatepositionindex = Map[First, 
            PositionIndex[IntegerSequences`Private`originalstatelist]]; 
         IntegerSequences`Private`originalinitialstateindex = 
          IntegerSequences`Private`originalstatepositionindex[
           IntegerSequences`Private`originalinitialstate]; 
         IntegerSequences`Private`originaltransitionrules = Append[
            Replace[
            IntegerSequences`Private`originaledges, {
              Pattern[IntegerSequences`Private`instate, 
                 Blank[]] -> Pattern[IntegerSequences`Private`outstate, 
                 Blank[]], 
               Pattern[IntegerSequences`Private`label, 
                Blank[]]} :> ({
               IntegerSequences`Private`instate, 
                IntegerSequences`Private`label} -> 
              IntegerSequences`Private`outstate), {1}], Blank[] -> $Failed]; 
         IntegerSequences`Private`originaloutputrules = 
          IntegerSequences`AutomatonOutputRules[
           IntegerSequences`Private`originalautomaton]; 
         IntegerSequences`Private`statecount = 1; 
         IntegerSequences`Private`newstate = 
          Replace[IntegerSequences`Private`originalstatelist, 
            IntegerSequences`Private`originaloutputrules, {1}]; 
         IntegerSequences`Private`memorystorage = Replace[
            OptionValue[IntegerSequences`StateStorage], {
            Alternatives["Disk", {"Disk", 
                BlankNullSequence[], "Directory" -> Automatic, 
                BlankNullSequence[]}] :> (
              IntegerSequences`Private`directory = $TemporaryDirectory; 
              False), {"Disk", 
               BlankNullSequence[], "Directory" -> 
               Pattern[IntegerSequences`Private`dir, 
                 Blank[]], 
               BlankNullSequence[]} :> (
              IntegerSequences`Private`directory = 
               IntegerSequences`Private`dir; False), "Memory" -> True, 
             Blank[] -> False}]; 
         If[IntegerSequences`Private`memorystorage, 
           IntegerSequences`Private`state[
            IntegerSequences`Private`statecount] = 
           IntegerSequences`Private`newstate, 
           Export[
            FileNameJoin[{IntegerSequences`Private`directory, 
              StringJoin[
               ToString[IntegerSequences`Private`statecount], ".m"]}], 
            IntegerSequences`Private`newstate]]; 
         IntegerSequences`Private`statehashassociation = Association[]; 
         IntegerSequences`Private`statehashassociation[
            Hash[IntegerSequences`Private`newstate]] = 
          IntegerSequences`Private`statecount; 
         IntegerSequences`Private`output = Association[]; 
         IntegerSequences`Private`output[IntegerSequences`Private`statecount] = 
          Part[IntegerSequences`Private`newstate, 
            IntegerSequences`Private`originalinitialstateindex]; 
         IntegerSequences`Private`stateindex = 1; 
         IntegerSequences`Private`starttime = DateObject[]; If[
           And[
            TrueQ[
             OptionValue[Monitor]], 10 < $VersionNumber < 11], 
           Message[
            MessageName[Monitor, "abort"]]]; 
         IntegerSequences`Private`edges = Apply[Join, 
            Part[
             Reap[If[
                And[
                 TrueQ[
                  OptionValue[Monitor]], 
                 Not[10 < $VersionNumber < 11]], Monitor, List][
                While[
                IntegerSequences`Private`stateindex <= 
                 IntegerSequences`Private`statecount, 
                 IntegerSequences`Private`currentstate = 
                  If[IntegerSequences`Private`memorystorage, 
                    IntegerSequences`Private`state[
                    IntegerSequences`Private`stateindex], 
                    Import[
                    FileNameJoin[{IntegerSequences`Private`directory, 
                    StringJoin[
                    ToString[IntegerSequences`Private`stateindex], ".m"]}]]]; 
                 Sow[
                   Table[
                   IntegerSequences`Private`newstate = 
                    Part[IntegerSequences`Private`currentstate, 
                    Lookup[
                    IntegerSequences`Private`originalstatepositionindex, 
                    Map[
                    Function[IntegerSequences`Private`s, 
                    
                    Replace[{
                    IntegerSequences`Private`s, 
                    IntegerSequences`Private`letter}, 
                    IntegerSequences`Private`originaltransitionrules]], 
                    IntegerSequences`Private`originalstatelist]]]; 
                    IntegerSequences`Private`newstatehash = 
                    Hash[IntegerSequences`Private`newstate]; 
                    IntegerSequences`Private`newstateindex = 
                    IntegerSequences`Private`statehashassociation[
                    IntegerSequences`Private`newstatehash]; If[
                    And[IntegerSequences`Private`checkstatesameness, 
                    Not[
                    MissingQ[IntegerSequences`Private`newstateindex]], 
                    If[IntegerSequences`Private`memorystorage, 
                    IntegerSequences`Private`state[
                    IntegerSequences`Private`newstateindex], 
                    Import[
                    FileNameJoin[{IntegerSequences`Private`directory, 
                    StringJoin[
                    ToString[IntegerSequences`Private`newstateindex], 
                    ".m"]}]]] =!= IntegerSequences`Private`newstate], Message[
                    MessageName[IntegerSequences`AutomatonReverse, "hash"], 
                    IntegerSequences`Private`newstatehash]; 
                    IntegerSequences`Private`newstateindex = 
                    Missing["NotFound"]]; {
                    IntegerSequences`Private`stateindex -> If[
                    MissingQ[IntegerSequences`Private`newstateindex], 
                    Increment[IntegerSequences`Private`statecount]; 
                    If[IntegerSequences`Private`memorystorage, 
                    IntegerSequences`Private`state[
                    IntegerSequences`Private`statecount] = 
                    IntegerSequences`Private`newstate, 
                    Export[
                    FileNameJoin[{IntegerSequences`Private`directory, 
                    StringJoin[
                    ToString[IntegerSequences`Private`statecount], ".m"]}], 
                    IntegerSequences`Private`newstate]]; 
                    IntegerSequences`Private`statehashassociation[
                    IntegerSequences`Private`newstatehash] = 
                    IntegerSequences`Private`statecount; 
                    IntegerSequences`Private`output[
                    IntegerSequences`Private`statecount] = 
                    Part[IntegerSequences`Private`newstate, 
                    IntegerSequences`Private`originalinitialstateindex]; 
                    IntegerSequences`Private`statecount, 
                    IntegerSequences`Private`newstateindex], 
                    IntegerSequences`Private`letter}, {
                    IntegerSequences`Private`letter, 
                    IntegerSequences`Private`inputalphabet}]]; If[
                   Not[IntegerSequences`Private`checkstatesameness], 
                   If[IntegerSequences`Private`memorystorage, 
                    Unset[
                    IntegerSequences`Private`state[
                    IntegerSequences`Private`stateindex]], 
                    DeleteFile[
                    FileNameJoin[{IntegerSequences`Private`directory, 
                    StringJoin[
                    ToString[IntegerSequences`Private`stateindex], ".m"]}]]]]; 
                 Increment[IntegerSequences`Private`stateindex]], 
                Column[{
                  
                  Row[{"Processing state ", 
                    IntegerSequences`Private`stateindex, " of ", 
                    IntegerSequences`Private`statecount}], 
                  
                  ProgressIndicator[(IntegerSequences`Private`stateindex - 1)/
                   IntegerSequences`Private`statecount], 
                  If[IntegerSequences`Private`stateindex == 1, 
                   Row[{}], 
                   Row[{"Processing known states will finish at ", 
                    DatePlus[
                    IntegerSequences`Private`starttime, 
                    IntegerSequences`Private`statecount (
                    IntegerSequences`Private`stateindex - 1)^(-1) 
                    DateDifference[IntegerSequences`Private`starttime, 
                    DateObject[]]]}]]}]]; 
              If[IntegerSequences`Private`checkstatesameness, 
                If[IntegerSequences`Private`memorystorage, 
                 Map[Unset[
                   IntegerSequences`Private`state[#]]& , 
                  Range[IntegerSequences`Private`statecount, 1, -1]], 
                 DeleteFile[
                  Map[FileNameJoin[{IntegerSequences`Private`directory, 
                    StringJoin[
                    ToString[#], ".m"]}]& , 
                   Range[IntegerSequences`Private`statecount]]]]]; Null], 2, 
             1]]; IntegerSequences`Automaton[
          IntegerSequences`Private`edges, 1, 
           Normal[IntegerSequences`Private`output]]]}], "SubValues" -> None, 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`AutomatonReverse, {
      SyntaxInformation[IntegerSequences`AutomatonReverse] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           OptionsPattern[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {
     IntegerSequences`HashStateNames -> False, Monitor -> False, 
      IntegerSequences`StateStorage -> "Memory"}, "Attributes" -> {Protected},
     "FullName" -> "IntegerSequences`AutomatonReverse"], False]]], "Output",Ex\
pressionUUID->"6921f9ab-ebcc-4e35-865b-66f77d092754"]
}, Open  ]],

Cell["\<\
If the input automaton has no unreachable states, then the reversed automaton \
is minimal:\
\>", "Text",ExpressionUUID->"fd1084a4-3960-4eac-bd2b-86a841d9f814"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"automaton", "=", 
   RowBox[{"Automaton", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "1"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "1"}], ",", "1"}], "}"}]}], "}"}], ",", "1", 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "0"}], ",", 
       RowBox[{"2", "\[Rule]", "1"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"AutomatonStateCount", "[", 
  RowBox[{"reversedautomaton", "=", 
   RowBox[{"AutomatonReverse", "[", "automaton", "]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"AutomatonStateCount", "[", 
  RowBox[{"AutomatonMinimize", "[", "reversedautomaton", "]"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Clear", "[", 
  RowBox[{"automaton", ",", "reversedautomaton"}], "]"}]}], "Input",Expression\
UUID->"0c11da5e-556c-4305-a6aa-072c354cd089"],

Cell[BoxData["2"], "Output",ExpressionUUID->"71d03c30-d88e-4e40-b162-5aaf3d25af44"],

Cell[BoxData["2"], "Output",ExpressionUUID->"b3661eef-49bf-4829-beac-1a3d0a06d75a"]
}, Open  ]],

Cell["\<\
If there are unreachable states, then the reversed automaton may not be \
minimal:\
\>", "Text",ExpressionUUID->"f4c69851-8e0f-41a3-a43d-e989d4c9de71"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"automaton", "=", 
   RowBox[{"Automaton", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "1"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "1"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"3", "\[Rule]", "1"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"3", "\[Rule]", "2"}], ",", "1"}], "}"}]}], "}"}], ",", "1", 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "0"}], ",", 
       RowBox[{"2", "\[Rule]", "1"}], ",", 
       RowBox[{"3", "\[Rule]", "2"}]}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"AutomatonStateCount", "[", 
  RowBox[{"reversedautomaton", "=", 
   RowBox[{"AutomatonReverse", "[", "automaton", "]"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"AutomatonStateCount", "[", 
  RowBox[{"AutomatonMinimize", "[", "reversedautomaton", "]"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Clear", "[", 
  RowBox[{"automaton", ",", "reversedautomaton"}], "]"}]}], "Input",Expression\
UUID->"6989bd30-3b36-4761-8ff1-e04a0c368d3c"],

Cell[BoxData["3"], "Output",ExpressionUUID->"cc631a48-d7f2-4f3c-8cf2-51c6494b6e8a"],

Cell[BoxData["2"], "Output",ExpressionUUID->"2d714e84-04b2-40bd-b912-83e11fadfeb9"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["AutomatonStateCount", "Input"]], "Subsubsection",ExpressionUUID->"9a553607-fbdf-4b78-917c-5bc53f37ddcb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "AutomatonStateCount"}]], "Input",ExpressionUUID->"90074494-18d3-47b5-88ad-394fea657209"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomatonStateCount\\\", \
\\\"[\\\", StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the number \
of states in an automaton \\!\\(\\*StyleBox[\\\"M\\\", \\\"TI\\\"]\\).\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"AutomatonStateCount", "[", 
                    RowBox[{
                    "IntegerSequences`Private`automaton_", "?", 
                    "AutomatonQ"}], "]"}], ":=", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    "AutomatonStateList", "[", 
                    "IntegerSequences`Private`automaton", "]"}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "AutomatonStateCount", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`AutomatonStateCount] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`AutomatonStateCount\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomatonStateCount\\\", \
\\\"[\\\", StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the number \
of states in an automaton \\!\\(\\*StyleBox[\\\"M\\\", \\\"TI\\\"]\\).\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"AutomatonStateCount\", \"[\", StyleBox[\"M\", \
\"TI\"], \"]\"]]\) gives the number of states in an automaton \!\(\*StyleBox[\
\"M\", \"TI\"]\).", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> 
    None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`AutomatonStateCount, {
      IntegerSequences`AutomatonStateCount[
         PatternTest[
          Pattern[IntegerSequences`Private`automaton, 
           Blank[]], IntegerSequences`AutomatonQ]] :> Length[
         IntegerSequences`AutomatonStateList[
         IntegerSequences`Private`automaton]]}], "SubValues" -> None, 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`AutomatonStateCount, {
      SyntaxInformation[IntegerSequences`AutomatonStateCount] -> {
        "ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`AutomatonStateCount"], False]]], "Output",ExpressionUUID\
->"714a7abc-5271-4f98-a8fc-40ea6a0c4298"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonStateCount", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "A"}], ",", "1"}], "}"}]}], "}"}], ",", "A", 
    ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"A", "\[Rule]", "\"\<even\>\""}], ",", 
      RowBox[{"B", "\[Rule]", "\"\<odd\>\""}]}], "}"}]}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"3fb5409e-d725-49a0-bb54-3fc9ffe9540f"],

Cell[BoxData["2"], "Output",ExpressionUUID->"f993a1fd-9a23-402f-9106-0f93fda21185"]
}, Open  ]],

Cell["Unreachable states are included in the count:", "Text",ExpressionUUID->"efa3c3e9-bdb1-4ffe-86ad-585054b8314e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonStateCount", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", 
        RowBox[{"0", "|", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "A"}], ",", 
        RowBox[{"0", "|", "1"}]}], "}"}]}], "}"}], ",", "A"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"c3de7c83-1ea9-4943-b948-216cdacebf1e"],

Cell[BoxData["2"], "Output",ExpressionUUID->"60c00abd-9177-42d0-adb1-0b613c48c2f0"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["AutomatonStateList", "Input"]], "Subsubsection",ExpressionUUID->"e2008761-7c57-4727-a1d7-030919615e59"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "AutomatonStateList"}]], "Input",ExpressionUUID->"bfbc4d1d-8de6-4141-9f15-a55e49864862"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomatonStateList\\\", \\\
\"[\\\", StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the list of \
states in an automaton \\!\\(\\*StyleBox[\\\"M\\\", \\\"TI\\\"]\\).\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"AutomatonStateList", "[", 
                    RowBox[{
                    "IntegerSequences`Private`automaton_", "?", 
                    "AutomatonQ"}], "]"}], ":=", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Join", "@@", 
                    RowBox[{"Apply", "[", 
                    RowBox[{"List", ",", 
                    RowBox[{"First", "/@", 
                    RowBox[{
                    "First", "[", "IntegerSequences`Private`automaton", 
                    "]"}]}], ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "AutomatonStateList", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`AutomatonStateList] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`AutomatonStateList\"\
\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"AutomatonStateList\\\", \\\
\"[\\\", StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the list of \
states in an automaton \\!\\(\\*StyleBox[\\\"M\\\", \\\"TI\\\"]\\).\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"AutomatonStateList\", \"[\", StyleBox[\"M\", \
\"TI\"], \"]\"]]\) gives the list of states in an automaton \
\!\(\*StyleBox[\"M\", \"TI\"]\).", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`AutomatonStateList, {
      IntegerSequences`AutomatonStateList[
         PatternTest[
          Pattern[IntegerSequences`Private`automaton, 
           Blank[]], IntegerSequences`AutomatonQ]] :> DeleteDuplicates[
         Apply[Join, 
          Apply[List, 
           Map[First, 
            First[IntegerSequences`Private`automaton]], {1}]]]}], "SubValues" -> 
    None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`AutomatonStateList, {
      SyntaxInformation[IntegerSequences`AutomatonStateList] -> {
        "ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`AutomatonStateList"], False]]], "Output",ExpressionUUID->\
"e42c7111-76a5-40f0-a486-a9bbcd219a1f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonStateList", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "A"}], ",", "1"}], "}"}]}], "}"}], ",", "A", 
    ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"A", "\[Rule]", "\"\<even\>\""}], ",", 
      RowBox[{"B", "\[Rule]", "\"\<odd\>\""}]}], "}"}]}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"2409eedf-d3cd-447c-bd6e-574cfc9fa1ad"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"A", ",", "B"}], "}"}]], "Output",ExpressionUUID->"259303dc-65cd-4157-97da-314d0d87f663"]
}, Open  ]],

Cell["Unreachable states are included:", "Text",ExpressionUUID->"6ff72ff5-4cc8-42d3-95e1-4ecd90836954"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonStateList", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", 
        RowBox[{"0", "|", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "A"}], ",", 
        RowBox[{"0", "|", "1"}]}], "}"}]}], "}"}], ",", "A"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"6b065b32-ba32-4dc7-9266-25e394075b63"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"A", ",", "B"}], "}"}]], "Output",ExpressionUUID->"30d4e06d-386e-4339-83eb-1e26bad6bc21"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["BaumSweet", "Input"]], "Subsubsection",ExpressionUUID->"e6cd527a-3146-482a-b72b-898292889367"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "BaumSweet"}]], "Input",ExpressionUUID->"084a0083-7f8a-4789-ae5b-e00d486df897"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"BaumSweet\\\", \\\"[\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the \
\\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\)th term in the Baum\[Dash]Sweet \
sequence.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"BaumSweet", "[", 
                    RowBox[{
                    "IntegerSequences`Private`n_Integer", "?", 
                    "NonNegative"}], "]"}], ":=", 
                    RowBox[{"Boole", "[", 
                    RowBox[{"And", "@@", 
                    RowBox[{"EvenQ", "/@", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"Split", "[", 
                    RowBox[{"DigitList", "[", 
                    RowBox[{"IntegerSequences`Private`n", ",", "2"}], "]"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`zeroblock", ":", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "___"}], "}"}]}], "\[RuleDelayed]", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`zeroblock", 
                    "]"}]}]}], "]"}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "BaumSweet", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`BaumSweet] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{"Listable", ",", "Protected"}], "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`BaumSweet\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"BaumSweet\\\", \\\"[\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the \
\\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\)th term in the Baum\[Dash]Sweet \
sequence.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"BaumSweet\", \"[\", StyleBox[\"n\", \"TI\"], \"]\"]]\
\) gives the \!\(\*StyleBox[\"n\", \"TI\"]\)th term in the Baum\[Dash]Sweet \
sequence.", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`BaumSweet, {IntegerSequences`BaumSweet[
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[Integer]], NonNegative]] :> Boole[
         Apply[And, 
          Map[EvenQ, 
           Cases[
            Split[
             IntegerSequences`DigitList[IntegerSequences`Private`n, 2]], 
            Pattern[IntegerSequences`Private`zeroblock, {0, 
               BlankNullSequence[]}] :> 
            Length[IntegerSequences`Private`zeroblock]]]]]}], "SubValues" -> 
    None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`BaumSweet, {
      SyntaxInformation[IntegerSequences`BaumSweet] -> {"ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Listable, Protected}, "FullName" -> 
    "IntegerSequences`BaumSweet"], False]]], "Output",ExpressionUUID->\
"077be775-c09f-4596-8841-c25a2932d20d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"BaumSweet", "[", "n", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "31"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"fcc69194-fab4-48b1-b671-06dd51b01991"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "1", 
   ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", 
   "1", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", 
   "0", ",", "1"}], "}"}]], "Output",ExpressionUUID->"b8c935f9-6079-41e1-96cb-\
bcde51a7f24c"]
}, Open  ]],

Cell[TextData[{
 "Write ",
 StyleBox["BaumSweet", "Input"],
 " as an automatic sequence:"
}], "Text",ExpressionUUID->"5b15fdef-c402-403a-a278-e7b0d791d42d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomaticSequenceReduce", "[", 
  RowBox[{
   RowBox[{"BaumSweet", "[", "n", "]"}], ",", "n"}], "]"}]], "Input",Expressio\
nUUID->"b816e291-fc21-48ab-9bc9-f71acb8f7ea6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AutomaticSequence", "[", 
   RowBox[{"Automaton", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "1"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "1"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "3"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"3", "\[Rule]", "3"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"3", "\[Rule]", "3"}], ",", "1"}], "}"}]}], "}"}], ",", "1", 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "1"}], ",", 
       RowBox[{"2", "\[Rule]", "1"}], ",", 
       RowBox[{"3", "\[Rule]", "0"}]}], "}"}]}], "]"}], "]"}], "[", "n", 
  "]"}]], "Output",ExpressionUUID->"ef372e57-cae1-4c71-8fc6-9235dc43cc15"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["CauchyProduct", "Input"]], "Subsubsection",ExpressionUUID->"3895d377-11c2-4083-b441-ee99fea09754"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", 
  StyleBox["CauchyProduct", "Input"]}]], "Input",ExpressionUUID->"88892b9c-\
ff23-4781-b25e-7d5d7476a785"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"CauchyProduct\\\", \\\"[\\\
\", RowBox[List[RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], StyleBox[\\\"0\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], \
StyleBox[\\\"k\\\", \\\"TI\\\"]]]], \\\"}\\\"]], \\\",\\\", RowBox[List[\\\"{\
\\\", RowBox[List[SubscriptBox[StyleBox[\\\"b\\\", \\\"TI\\\"], \
StyleBox[\\\"0\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"b\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", \
SubscriptBox[StyleBox[\\\"b\\\", \\\"TI\\\"], StyleBox[\\\"k\\\", \
\\\"TI\\\"]]]], \\\"}\\\"]]]], \\\"]\\\"]]\\) gives the Cauchy product of two \
sequences.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"CauchyProduct", "[", 
                    RowBox[{
                    "IntegerSequences`Private`list1_List", ",", 
                    "IntegerSequences`Private`list2_List"}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`list1", "]"}], 
                    "\[Equal]", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`list2", 
                    "]"}]}]}], ":=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    "IntegerSequences`Private`list1", ",", 
                    "IntegerSequences`Private`i"}], "]"}], ".", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    "IntegerSequences`Private`list2", ",", 
                    "IntegerSequences`Private`i"}], "]"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`i", ",", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`list1", "]"}]}], 
                    "}"}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "CauchyProduct", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_"}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`CauchyProduct] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`CauchyProduct\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"CauchyProduct\\\", \\\"[\\\
\", RowBox[List[RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], StyleBox[\\\"0\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], \
StyleBox[\\\"k\\\", \\\"TI\\\"]]]], \\\"}\\\"]], \\\",\\\", RowBox[List[\\\"{\
\\\", RowBox[List[SubscriptBox[StyleBox[\\\"b\\\", \\\"TI\\\"], \
StyleBox[\\\"0\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"b\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", \
SubscriptBox[StyleBox[\\\"b\\\", \\\"TI\\\"], StyleBox[\\\"k\\\", \
\\\"TI\\\"]]]], \\\"}\\\"]]]], \\\"]\\\"]]\\) gives the Cauchy product of two \
sequences.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"CauchyProduct\", \"[\", \
RowBox[List[RowBox[List[\"{\", RowBox[List[SubscriptBox[StyleBox[\"a\", \
\"TI\"], StyleBox[\"0\", \"TR\"]], \",\", SubscriptBox[StyleBox[\"a\", \
\"TI\"], StyleBox[\"1\", \"TR\"]], \",\", StyleBox[\"\\[Ellipsis]\", \"TR\"], \
\",\", SubscriptBox[StyleBox[\"a\", \"TI\"], StyleBox[\"k\", \"TI\"]]]], \
\"}\"]], \",\", RowBox[List[\"{\", RowBox[List[SubscriptBox[StyleBox[\"b\", \
\"TI\"], StyleBox[\"0\", \"TR\"]], \",\", SubscriptBox[StyleBox[\"b\", \
\"TI\"], StyleBox[\"1\", \"TR\"]], \",\", StyleBox[\"\\[Ellipsis]\", \"TR\"], \
\",\", SubscriptBox[StyleBox[\"b\", \"TI\"], StyleBox[\"k\", \"TI\"]]]], \
\"}\"]]]], \"]\"]]\) gives the Cauchy product of two sequences.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`CauchyProduct, {Condition[
         IntegerSequences`CauchyProduct[
          Pattern[IntegerSequences`Private`list1, 
           Blank[List]], 
          Pattern[IntegerSequences`Private`list2, 
           Blank[List]]], Length[IntegerSequences`Private`list1] == 
         Length[IntegerSequences`Private`list2]] :> Table[
         Dot[
          Take[IntegerSequences`Private`list1, IntegerSequences`Private`i], 
          Reverse[
           Take[
           IntegerSequences`Private`list2, IntegerSequences`Private`i]]], {
         IntegerSequences`Private`i, 
          Length[IntegerSequences`Private`list1]}]}], "SubValues" -> None, 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`CauchyProduct, {
      SyntaxInformation[IntegerSequences`CauchyProduct] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`CauchyProduct"], False]]], "Output",ExpressionUUID->\
"e41d0a73-7fe1-4c44-ab4c-1c56bbe438c6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CauchyProduct", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}]}], "]"}]], "Input",Expr\
essionUUID->"c7999442-90df-4d74-b922-9b08fb62945f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", 
   RowBox[{
    RowBox[{"2", " ", "a"}], "+", "b"}], ",", 
   RowBox[{
    RowBox[{"3", " ", "a"}], "+", 
    RowBox[{"2", " ", "b"}], "+", "c"}], ",", 
   RowBox[{
    RowBox[{"4", " ", "a"}], "+", 
    RowBox[{"3", " ", "b"}], "+", 
    RowBox[{"2", " ", "c"}], "+", "d"}]}], "}"}]], "Output",ExpressionUUID->\
"91a758a5-3a22-4811-8730-263d54bfd1d2"]
}, Open  ]],

Cell["\<\
The Cauchy product of two sequences corresponds to the multiplication of \
their generating functions:\
\>", "Text",ExpressionUUID->"0d982386-43c3-4a29-ac37-9e50964581d4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CoefficientList", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "0"}], "5"], 
      RowBox[{
       SubscriptBox["a", "i"], " ", 
       SuperscriptBox["x", "i"]}]}], ")"}], 
    RowBox[{"(", " ", 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"i", "=", "0"}], "5"], 
      RowBox[{
       SubscriptBox["b", "i"], " ", 
       SuperscriptBox["x", "i"]}]}], ")"}]}], ",", "x"}], "]"}]], "Input",Expr\
essionUUID->"4312047a-41f7-4ca5-bcd8-49a4fb694169"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    SubscriptBox["a", "0"], " ", 
    SubscriptBox["b", "0"]}], ",", 
   RowBox[{
    RowBox[{
     SubscriptBox["a", "1"], " ", 
     SubscriptBox["b", "0"]}], "+", 
    RowBox[{
     SubscriptBox["a", "0"], " ", 
     SubscriptBox["b", "1"]}]}], ",", 
   RowBox[{
    RowBox[{
     SubscriptBox["a", "2"], " ", 
     SubscriptBox["b", "0"]}], "+", 
    RowBox[{
     SubscriptBox["a", "1"], " ", 
     SubscriptBox["b", "1"]}], "+", 
    RowBox[{
     SubscriptBox["a", "0"], " ", 
     SubscriptBox["b", "2"]}]}], ",", 
   RowBox[{
    RowBox[{
     SubscriptBox["a", "3"], " ", 
     SubscriptBox["b", "0"]}], "+", 
    RowBox[{
     SubscriptBox["a", "2"], " ", 
     SubscriptBox["b", "1"]}], "+", 
    RowBox[{
     SubscriptBox["a", "1"], " ", 
     SubscriptBox["b", "2"]}], "+", 
    RowBox[{
     SubscriptBox["a", "0"], " ", 
     SubscriptBox["b", "3"]}]}], ",", 
   RowBox[{
    RowBox[{
     SubscriptBox["a", "4"], " ", 
     SubscriptBox["b", "0"]}], "+", 
    RowBox[{
     SubscriptBox["a", "3"], " ", 
     SubscriptBox["b", "1"]}], "+", 
    RowBox[{
     SubscriptBox["a", "2"], " ", 
     SubscriptBox["b", "2"]}], "+", 
    RowBox[{
     SubscriptBox["a", "1"], " ", 
     SubscriptBox["b", "3"]}], "+", 
    RowBox[{
     SubscriptBox["a", "0"], " ", 
     SubscriptBox["b", "4"]}]}], ",", 
   RowBox[{
    RowBox[{
     SubscriptBox["a", "5"], " ", 
     SubscriptBox["b", "0"]}], "+", 
    RowBox[{
     SubscriptBox["a", "4"], " ", 
     SubscriptBox["b", "1"]}], "+", 
    RowBox[{
     SubscriptBox["a", "3"], " ", 
     SubscriptBox["b", "2"]}], "+", 
    RowBox[{
     SubscriptBox["a", "2"], " ", 
     SubscriptBox["b", "3"]}], "+", 
    RowBox[{
     SubscriptBox["a", "1"], " ", 
     SubscriptBox["b", "4"]}], "+", 
    RowBox[{
     SubscriptBox["a", "0"], " ", 
     SubscriptBox["b", "5"]}]}], ",", 
   RowBox[{
    RowBox[{
     SubscriptBox["a", "5"], " ", 
     SubscriptBox["b", "1"]}], "+", 
    RowBox[{
     SubscriptBox["a", "4"], " ", 
     SubscriptBox["b", "2"]}], "+", 
    RowBox[{
     SubscriptBox["a", "3"], " ", 
     SubscriptBox["b", "3"]}], "+", 
    RowBox[{
     SubscriptBox["a", "2"], " ", 
     SubscriptBox["b", "4"]}], "+", 
    RowBox[{
     SubscriptBox["a", "1"], " ", 
     SubscriptBox["b", "5"]}]}], ",", 
   RowBox[{
    RowBox[{
     SubscriptBox["a", "5"], " ", 
     SubscriptBox["b", "2"]}], "+", 
    RowBox[{
     SubscriptBox["a", "4"], " ", 
     SubscriptBox["b", "3"]}], "+", 
    RowBox[{
     SubscriptBox["a", "3"], " ", 
     SubscriptBox["b", "4"]}], "+", 
    RowBox[{
     SubscriptBox["a", "2"], " ", 
     SubscriptBox["b", "5"]}]}], ",", 
   RowBox[{
    RowBox[{
     SubscriptBox["a", "5"], " ", 
     SubscriptBox["b", "3"]}], "+", 
    RowBox[{
     SubscriptBox["a", "4"], " ", 
     SubscriptBox["b", "4"]}], "+", 
    RowBox[{
     SubscriptBox["a", "3"], " ", 
     SubscriptBox["b", "5"]}]}], ",", 
   RowBox[{
    RowBox[{
     SubscriptBox["a", "5"], " ", 
     SubscriptBox["b", "4"]}], "+", 
    RowBox[{
     SubscriptBox["a", "4"], " ", 
     SubscriptBox["b", "5"]}]}], ",", 
   RowBox[{
    SubscriptBox["a", "5"], " ", 
    SubscriptBox["b", "5"]}]}], "}"}]], "Output",ExpressionUUID->"537d7a03-\
ee0c-414c-9f53-fd9c6114a7c2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CauchyProduct", "[", 
  RowBox[{
   RowBox[{"PadRight", "[", 
    RowBox[{
     RowBox[{"Thread", "[", 
      SubscriptBox["a", 
       RowBox[{"Range", "[", 
        RowBox[{"0", ",", "5"}], "]"}]], "]"}], ",", "11"}], "]"}], ",", 
   RowBox[{"PadRight", "[", 
    RowBox[{
     RowBox[{"Thread", "[", 
      SubscriptBox["b", 
       RowBox[{"Range", "[", 
        RowBox[{"0", ",", "5"}], "]"}]], "]"}], ",", "11"}], "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"8aa1a91b-c65c-4dfb-9987-f6bfa0eb67c2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    SubscriptBox["a", "0"], " ", 
    SubscriptBox["b", "0"]}], ",", 
   RowBox[{
    RowBox[{
     SubscriptBox["a", "1"], " ", 
     SubscriptBox["b", "0"]}], "+", 
    RowBox[{
     SubscriptBox["a", "0"], " ", 
     SubscriptBox["b", "1"]}]}], ",", 
   RowBox[{
    RowBox[{
     SubscriptBox["a", "2"], " ", 
     SubscriptBox["b", "0"]}], "+", 
    RowBox[{
     SubscriptBox["a", "1"], " ", 
     SubscriptBox["b", "1"]}], "+", 
    RowBox[{
     SubscriptBox["a", "0"], " ", 
     SubscriptBox["b", "2"]}]}], ",", 
   RowBox[{
    RowBox[{
     SubscriptBox["a", "3"], " ", 
     SubscriptBox["b", "0"]}], "+", 
    RowBox[{
     SubscriptBox["a", "2"], " ", 
     SubscriptBox["b", "1"]}], "+", 
    RowBox[{
     SubscriptBox["a", "1"], " ", 
     SubscriptBox["b", "2"]}], "+", 
    RowBox[{
     SubscriptBox["a", "0"], " ", 
     SubscriptBox["b", "3"]}]}], ",", 
   RowBox[{
    RowBox[{
     SubscriptBox["a", "4"], " ", 
     SubscriptBox["b", "0"]}], "+", 
    RowBox[{
     SubscriptBox["a", "3"], " ", 
     SubscriptBox["b", "1"]}], "+", 
    RowBox[{
     SubscriptBox["a", "2"], " ", 
     SubscriptBox["b", "2"]}], "+", 
    RowBox[{
     SubscriptBox["a", "1"], " ", 
     SubscriptBox["b", "3"]}], "+", 
    RowBox[{
     SubscriptBox["a", "0"], " ", 
     SubscriptBox["b", "4"]}]}], ",", 
   RowBox[{
    RowBox[{
     SubscriptBox["a", "5"], " ", 
     SubscriptBox["b", "0"]}], "+", 
    RowBox[{
     SubscriptBox["a", "4"], " ", 
     SubscriptBox["b", "1"]}], "+", 
    RowBox[{
     SubscriptBox["a", "3"], " ", 
     SubscriptBox["b", "2"]}], "+", 
    RowBox[{
     SubscriptBox["a", "2"], " ", 
     SubscriptBox["b", "3"]}], "+", 
    RowBox[{
     SubscriptBox["a", "1"], " ", 
     SubscriptBox["b", "4"]}], "+", 
    RowBox[{
     SubscriptBox["a", "0"], " ", 
     SubscriptBox["b", "5"]}]}], ",", 
   RowBox[{
    RowBox[{
     SubscriptBox["a", "5"], " ", 
     SubscriptBox["b", "1"]}], "+", 
    RowBox[{
     SubscriptBox["a", "4"], " ", 
     SubscriptBox["b", "2"]}], "+", 
    RowBox[{
     SubscriptBox["a", "3"], " ", 
     SubscriptBox["b", "3"]}], "+", 
    RowBox[{
     SubscriptBox["a", "2"], " ", 
     SubscriptBox["b", "4"]}], "+", 
    RowBox[{
     SubscriptBox["a", "1"], " ", 
     SubscriptBox["b", "5"]}]}], ",", 
   RowBox[{
    RowBox[{
     SubscriptBox["a", "5"], " ", 
     SubscriptBox["b", "2"]}], "+", 
    RowBox[{
     SubscriptBox["a", "4"], " ", 
     SubscriptBox["b", "3"]}], "+", 
    RowBox[{
     SubscriptBox["a", "3"], " ", 
     SubscriptBox["b", "4"]}], "+", 
    RowBox[{
     SubscriptBox["a", "2"], " ", 
     SubscriptBox["b", "5"]}]}], ",", 
   RowBox[{
    RowBox[{
     SubscriptBox["a", "5"], " ", 
     SubscriptBox["b", "3"]}], "+", 
    RowBox[{
     SubscriptBox["a", "4"], " ", 
     SubscriptBox["b", "4"]}], "+", 
    RowBox[{
     SubscriptBox["a", "3"], " ", 
     SubscriptBox["b", "5"]}]}], ",", 
   RowBox[{
    RowBox[{
     SubscriptBox["a", "5"], " ", 
     SubscriptBox["b", "4"]}], "+", 
    RowBox[{
     SubscriptBox["a", "4"], " ", 
     SubscriptBox["b", "5"]}]}], ",", 
   RowBox[{
    SubscriptBox["a", "5"], " ", 
    SubscriptBox["b", "5"]}]}], "}"}]], "Output",ExpressionUUID->"06a79119-\
f8d3-4e5b-906c-56b0baf9206f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", "\[Equal]", "%%"}]], "Input",ExpressionUUID->"14c2c9f9-02ed-4a6f-94e0-4f10407c3bc5"],

Cell[BoxData["True"], "Output",ExpressionUUID->"91f033ad-bf3d-49e4-8744-cbe6b5804298"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["CompleteAutomatonQ", "Input"]], "Subsubsection",ExpressionUUID->"68a3a6a1-f30c-4d13-a98c-463d92f9a1f0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CompleteAutomatonQ"}]], "Input",ExpressionUUID->"b8eaebad-2d64-4159-8a7b-b198d0d033b7"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"CompleteAutomatonQ\\\", \\\
\"[\\\", StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]]\\) yields True if \
\\!\\(\\*StyleBox[\\\"M\\\", \\\"TI\\\"]\\) is an automaton where every state \
has at least one out\[Hyphen]transition for each letter of the input \
alphabet, and False otherwise.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"CompleteAutomatonQ", "[", 
                    RowBox[{"IntegerSequences`Private`automaton", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Automaton", "[", 
                    RowBox[{"IntegerSequences`Private`edges_", ",", "__"}], 
                    "]"}], ")"}], "?", "AutomatonQ"}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`inputalphabet", "=", 
                    RowBox[{
                    "AutomatonInputAlphabet", "[", 
                    "IntegerSequences`Private`automaton", "]"}]}], ",", 
                    "IntegerSequences`Private`letter"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"And", "@@", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`state", ",", 
                    RowBox[{"And", "@@", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{"IntegerSequences`Private`edges", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`state", "\[Rule]", "_"}], ",", 
                    RowBox[{"IntegerSequences`Private`label_", "/;", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`letter", ",", 
                    "IntegerSequences`Private`label"}], "]"}]}]}], "}"}]}], 
                    "]"}], "\[GreaterEqual]", "1"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`letter", ",", 
                    "IntegerSequences`Private`inputalphabet"}], "}"}]}], 
                    "]"}]}]}], "]"}], "/@", 
                    RowBox[{
                    "AutomatonStateList", "[", 
                    "IntegerSequences`Private`automaton", "]"}]}]}], "/;", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`inputalphabet", ",", 
                    "_AutomatonInputAlphabet"}], "]"}]}], "||", 
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"CompleteAutomatonQ", "::", "input"}], 
                    "MessageName"], "]"}]}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"CompleteAutomatonQ", "[", "_", "]"}], ":=", 
                    "False"}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "CompleteAutomatonQ", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`CompleteAutomatonQ] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`CompleteAutomatonQ\"\
\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"CompleteAutomatonQ\\\", \\\
\"[\\\", StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]]\\) yields True if \
\\!\\(\\*StyleBox[\\\"M\\\", \\\"TI\\\"]\\) is an automaton where every state \
has at least one out\[Hyphen]transition for each letter of the input \
alphabet, and False otherwise.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"CompleteAutomatonQ\", \"[\", StyleBox[\"M\", \
\"TI\"], \"]\"]]\) yields True if \!\(\*StyleBox[\"M\", \"TI\"]\) is an \
automaton where every state has at least one out\[Hyphen]transition for each \
letter of the input alphabet, and False otherwise.", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`CompleteAutomatonQ, {
      IntegerSequences`CompleteAutomatonQ[
         Pattern[IntegerSequences`Private`automaton, 
          PatternTest[
           IntegerSequences`Automaton[
            Pattern[IntegerSequences`Private`edges, 
             Blank[]], 
            BlankSequence[]], IntegerSequences`AutomatonQ]]] :> 
       Module[{IntegerSequences`Private`inputalphabet = 
          IntegerSequences`AutomatonInputAlphabet[
           IntegerSequences`Private`automaton], 
          IntegerSequences`Private`letter}, 
         Condition[
          Apply[And, 
           Map[
            Function[IntegerSequences`Private`state, 
             Apply[And, 
              Table[
              Count[IntegerSequences`Private`edges, {
                 IntegerSequences`Private`state -> Blank[], 
                  Condition[
                   Pattern[IntegerSequences`Private`label, 
                    Blank[]], 
                   MatchQ[
                   IntegerSequences`Private`letter, 
                    IntegerSequences`Private`label]]}] >= 1, {
               IntegerSequences`Private`letter, 
                IntegerSequences`Private`inputalphabet}]]], 
            IntegerSequences`AutomatonStateList[
            IntegerSequences`Private`automaton]]], 
          Or[
           Not[
            MatchQ[IntegerSequences`Private`inputalphabet, 
             Blank[IntegerSequences`AutomatonInputAlphabet]]], 
           Message[
            MessageName[IntegerSequences`CompleteAutomatonQ, "input"]]]]], 
       IntegerSequences`CompleteAutomatonQ[
         Blank[]] :> False}], "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`CompleteAutomatonQ, {
      SyntaxInformation[IntegerSequences`CompleteAutomatonQ] -> {
        "ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`CompleteAutomatonQ"], False]]], "Output",ExpressionUUID->\
"5781b221-5532-43ce-b491-13b286167b2e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CompleteAutomatonQ", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "A"}], ",", "1"}], "}"}]}], "}"}], ",", "A"}],
    "]"}], "]"}]], "Input",ExpressionUUID->"7ba4513f-1a8a-4d59-9348-\
8ac061e0cd62"],

Cell[BoxData["True"], "Output",ExpressionUUID->"5620a612-76e7-4f89-9407-4e66f6d13a91"]
}, Open  ]],

Cell[TextData[{
 "This automaton has no outgoing edge labeled ",
 Cell[BoxData[
  FormBox["1", TraditionalForm]],ExpressionUUID->
  "a4a364e4-5969-44c5-8ffc-cd61bca9920b"],
 " from its initial state:"
}], "Text",ExpressionUUID->"8914f406-c989-48f7-8b33-968c15383805"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CompleteAutomatonQ", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "0"}], "}"}]}], "}"}], ",", "A"}],
    "]"}], "]"}]], "Input",ExpressionUUID->"4767d844-5171-4f0e-be6c-\
8ee581040c08"],

Cell[BoxData["False"], "Output",ExpressionUUID->"d41f7442-5977-4519-a083-6abc1813c262"]
}, Open  ]],

Cell["\<\
Deleting an edge results in an automaton that is complete, however, since the \
input alphabet is inferred to consist only of a single letter:\
\>", "Text",ExpressionUUID->"79e3471f-2974-4919-b523-29602923089e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CompleteAutomatonQ", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "0"}], "}"}]}], "}"}], ",", "A"}],
    "]"}], "]"}]], "Input",ExpressionUUID->"42355484-4513-4d32-8424-\
7e8505d36d4b"],

Cell[BoxData["True"], "Output",ExpressionUUID->"60512f00-f025-40aa-b3b1-e5e2cddb9c45"]
}, Open  ]],

Cell[TextData[{
 "If the input alphabet cannot be determined, ",
 StyleBox["CompleteAutomatonQ", "Input"],
 " evaluates to ",
 StyleBox["False", "Input"],
 ":"
}], "Text",ExpressionUUID->"d09a6535-1e06-4f0d-8d66-0a8502e6dfc9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CompleteAutomatonQ", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", 
        RowBox[{"0", "|", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "A"}], ",", 
        RowBox[{"0", "|", "1"}]}], "}"}]}], "}"}], ",", "A"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"5fcf3c51-5d8b-41fe-8141-6c9383305afb"],

Cell[BoxData[
 TemplateBox[{
  "CompleteAutomatonQ","input","\"Unable to determine the input alphabet.\"",
   2,185,10,18387630869787481076,"Local",
   "IntegerSequences`CompleteAutomatonQ"},
  "MessageTemplate2"]], "Message", \
"MSG",ExpressionUUID->"8e89824c-d649-47f8-84c9-c0d2e64abc83"],

Cell[BoxData["False"], "Output",ExpressionUUID->"a7b493cb-01f3-4185-852f-cdc661d18d1a"]
}, Open  ]],

Cell[TextData[{
 "Use ",
 StyleBox["InputAlphabet", "Input"],
 " to specify the input alphabet explicitly:"
}], "Text",ExpressionUUID->"7adee4d3-82de-4718-ae65-0927dbec248d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CompleteAutomatonQ", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", 
        RowBox[{"0", "|", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "A"}], ",", 
        RowBox[{"0", "|", "1"}]}], "}"}]}], "}"}], ",", "A", ",", 
    RowBox[{"InputAlphabet", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}], "]"}]], "Input",ExpressionUUI\
D->"5f888e27-20fc-46e4-8da1-c798c4ffca1a"],

Cell[BoxData["True"], "Output",ExpressionUUID->"8b3f7ffc-5a5e-46cf-bd8f-e9c1c6df080e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CompleteAutomatonQ", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", 
        RowBox[{"_", "?", "EvenQ"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "C"}], ",", 
        RowBox[{"_", "?", "OddQ"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", 
        RowBox[{"0", "|", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"C", "\[Rule]", "C"}], ",", 
        RowBox[{"0", "|", "1"}]}], "}"}]}], "}"}], ",", "A", ",", 
    RowBox[{"InputAlphabet", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}], "]"}]], "Input",ExpressionUUI\
D->"c6ab2e50-cf73-4e18-8a3a-f0ecb46eb429"],

Cell[BoxData["True"], "Output",ExpressionUUID->"3f745a4c-3771-4d91-9e35-87400fa4e53e"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["ConstantTermSequence", "Input"]], "Subsubsection",ExpressionUUID->"1df66e86-e669-45da-9331-abe1686cce8d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "ConstantTermSequence"}]], "Input",ExpressionUUID->"bdfcedd8-8f7b-4ae4-8e71-14effc299a0b"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[RowBox[List[\\\"\
ConstantTermSequence\\\", \\\"[\\\", RowBox[List[StyleBox[\\\"f\\\", \\\"TI\\\
\"], \\\",\\\", StyleBox[\\\"vars\\\", \\\"TI\\\"]]], \\\"]\\\"]], \\\"[\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the constant term in \
the Laurent polynomial \\!\\(\\*SuperscriptBox[StyleBox[\\\"f\\\", \
\\\"TI\\\"], StyleBox[\\\"n\\\", \
\\\"TI\\\"]]\\).\\n\\!\\(\\*RowBox[List[RowBox[List[\\\"ConstantTermSequence\\\
\", \\\"[\\\", RowBox[List[StyleBox[\\\"f\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"g\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"vars\\\", \
\\\"TI\\\"]]], \\\"]\\\"]], \\\"[\\\", StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\
\\\"]]\\) gives the constant term in \
\\!\\(\\*RowBox[List[SuperscriptBox[StyleBox[\\\"f\\\", \\\"TI\\\"], \
StyleBox[\\\"n\\\", \\\"TI\\\"]], \\\" \\\", StyleBox[\\\"g\\\", \
\\\"TI\\\"]]]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" SubValue Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"SubValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "SubValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"ConstantTermSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`powerpolynomial_", ",", 
                    "IntegerSequences`Private`variables_List"}], "]"}], "[", 
                    RowBox[{
                    "IntegerSequences`Private`n_Integer", "?", 
                    "NonNegative"}], "]"}], ":=", 
                    RowBox[{
                    RowBox[{"ConstantTermSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`powerpolynomial", ",", "1", ",",
                     "IntegerSequences`Private`variables"}], "]"}], "[", 
                    "IntegerSequences`Private`n", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"ConstantTermSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`powerpolynomial_", ",", 
                    "IntegerSequences`Private`factorpolynomial_", ",", 
                    "IntegerSequences`Private`variables_List"}], "]"}], "[", 
                    RowBox[{
                    "IntegerSequences`Private`n_Integer", "?", 
                    "NonNegative"}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`LaurentPolynomialQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`powerpolynomial", ",", 
                    "IntegerSequences`Private`variables"}], "]"}], "&&", 
                    RowBox[{
                    "IntegerSequences`Private`LaurentPolynomialQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`factorpolynomial", ",", 
                    "IntegerSequences`Private`variables"}], "]"}]}]}], ":=", 
                    RowBox[{
                    "IntegerSequences`Private`LaurentPolynomialCoefficient", 
                    "[", 
                    RowBox[{
                    RowBox[{
                    
                    SuperscriptBox["IntegerSequences`Private`powerpolynomial",
                     "IntegerSequences`Private`n"], " ", 
                    "IntegerSequences`Private`factorpolynomial"}], ",", 
                    "IntegerSequences`Private`variables", ",", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`variables", 
                    "]"}]}], "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"ConstantTermSequence", "[", 
                    RowBox[{"IntegerSequences`Private`powerpolynomial_", ",", 
                    RowBox[{"IntegerSequences`Private`variable", ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}]}], "]"}], "[", 
                    RowBox[{
                    "IntegerSequences`Private`n_Integer", "?", 
                    "NonNegative"}], "]"}], ":=", 
                    RowBox[{
                    RowBox[{"ConstantTermSequence", "[", 
                    RowBox[{"IntegerSequences`Private`powerpolynomial", ",", 
                    RowBox[{"{", "IntegerSequences`Private`variable", "}"}]}],
                     "]"}], "[", "IntegerSequences`Private`n", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"ConstantTermSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`powerpolynomial_", ",", 
                    "IntegerSequences`Private`factorpolynomial_", ",", 
                    RowBox[{"IntegerSequences`Private`variable", ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}]}], "]"}], "[", 
                    RowBox[{
                    "IntegerSequences`Private`n_Integer", "?", 
                    "NonNegative"}], "]"}], ":=", 
                    RowBox[{
                    RowBox[{"ConstantTermSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`powerpolynomial", ",", 
                    "IntegerSequences`Private`factorpolynomial", ",", 
                    RowBox[{"{", "IntegerSequences`Private`variable", "}"}]}],
                     "]"}], "[", "IntegerSequences`Private`n", "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "ConstantTermSequence", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_", ",", "_."}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`ConstantTermSequence] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Blank[], 
                    Optional[
                    Blank[]]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`ConstantTermSequence\
\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[RowBox[List[\\\"\
ConstantTermSequence\\\", \\\"[\\\", RowBox[List[StyleBox[\\\"f\\\", \\\"TI\\\
\"], \\\",\\\", StyleBox[\\\"vars\\\", \\\"TI\\\"]]], \\\"]\\\"]], \\\"[\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the constant term in \
the Laurent polynomial \\!\\(\\*SuperscriptBox[StyleBox[\\\"f\\\", \
\\\"TI\\\"], StyleBox[\\\"n\\\", \
\\\"TI\\\"]]\\).\\n\\!\\(\\*RowBox[List[RowBox[List[\\\"ConstantTermSequence\\\
\", \\\"[\\\", RowBox[List[StyleBox[\\\"f\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"g\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"vars\\\", \
\\\"TI\\\"]]], \\\"]\\\"]], \\\"[\\\", StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\
\\\"]]\\) gives the constant term in \
\\!\\(\\*RowBox[List[SuperscriptBox[StyleBox[\\\"f\\\", \\\"TI\\\"], \
StyleBox[\\\"n\\\", \\\"TI\\\"]], \\\" \\\", StyleBox[\\\"g\\\", \
\\\"TI\\\"]]]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[RowBox[List[\"ConstantTermSequence\", \"[\", \
RowBox[List[StyleBox[\"f\", \"TI\"], \",\", StyleBox[\"vars\", \"TI\"]]], \"]\
\"]], \"[\", StyleBox[\"n\", \"TI\"], \"]\"]]\) gives the constant term in \
the Laurent polynomial \!\(\*SuperscriptBox[StyleBox[\"f\", \"TI\"], \
StyleBox[\"n\", \"TI\"]]\).\n\
\!\(\*RowBox[List[RowBox[List[\"ConstantTermSequence\", \"[\", \
RowBox[List[StyleBox[\"f\", \"TI\"], \",\", StyleBox[\"g\", \"TI\"], \",\", \
StyleBox[\"vars\", \"TI\"]]], \"]\"]], \"[\", StyleBox[\"n\", \"TI\"], \
\"]\"]]\) gives the constant term in \
\!\(\*RowBox[List[SuperscriptBox[StyleBox[\"f\", \"TI\"], StyleBox[\"n\", \
\"TI\"]], \" \", StyleBox[\"g\", \"TI\"]]]\).", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
    "SubValues" -> 
    Information`InformationValueForm[
     SubValues, IntegerSequences`ConstantTermSequence, {
      IntegerSequences`ConstantTermSequence[
         Pattern[IntegerSequences`Private`powerpolynomial, 
          Blank[]], 
         Pattern[IntegerSequences`Private`variables, 
          Blank[List]]][
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[Integer]], NonNegative]] :> 
       IntegerSequences`ConstantTermSequence[
        IntegerSequences`Private`powerpolynomial, 1, 
         IntegerSequences`Private`variables][IntegerSequences`Private`n], 
       Condition[
         IntegerSequences`ConstantTermSequence[
          Pattern[IntegerSequences`Private`powerpolynomial, 
           Blank[]], 
          Pattern[IntegerSequences`Private`factorpolynomial, 
           Blank[]], 
          Pattern[IntegerSequences`Private`variables, 
           Blank[List]]][
          PatternTest[
           Pattern[IntegerSequences`Private`n, 
            Blank[Integer]], NonNegative]], 
         And[
          IntegerSequences`Private`LaurentPolynomialQ[
          IntegerSequences`Private`powerpolynomial, 
           IntegerSequences`Private`variables], 
          IntegerSequences`Private`LaurentPolynomialQ[
          IntegerSequences`Private`factorpolynomial, 
           IntegerSequences`Private`variables]]] :> 
       IntegerSequences`Private`LaurentPolynomialCoefficient[
        IntegerSequences`Private`powerpolynomial^IntegerSequences`Private`n 
         IntegerSequences`Private`factorpolynomial, 
         IntegerSequences`Private`variables, 
         ConstantArray[0, 
          Length[IntegerSequences`Private`variables]]], 
       IntegerSequences`ConstantTermSequence[
         Pattern[IntegerSequences`Private`powerpolynomial, 
          Blank[]], 
         Pattern[IntegerSequences`Private`variable, 
          Except[
           Blank[List]]]][
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[Integer]], NonNegative]] :> 
       IntegerSequences`ConstantTermSequence[
        IntegerSequences`Private`powerpolynomial, {
         IntegerSequences`Private`variable}][IntegerSequences`Private`n], 
       IntegerSequences`ConstantTermSequence[
         Pattern[IntegerSequences`Private`powerpolynomial, 
          Blank[]], 
         Pattern[IntegerSequences`Private`factorpolynomial, 
          Blank[]], 
         Pattern[IntegerSequences`Private`variable, 
          Except[
           Blank[List]]]][
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[Integer]], NonNegative]] :> 
       IntegerSequences`ConstantTermSequence[
        IntegerSequences`Private`powerpolynomial, 
         IntegerSequences`Private`factorpolynomial, {
         IntegerSequences`Private`variable}][IntegerSequences`Private`n]}], 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`ConstantTermSequence, {
      SyntaxInformation[IntegerSequences`ConstantTermSequence] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           Blank[], 
           Optional[
            Blank[]]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`ConstantTermSequence"], False]]], "Output",ExpressionUUI\
D->"7ae9714c-b546-49a8-aea1-01f0a0654a33"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"ConstantTermSequence", "[", 
   RowBox[{
    RowBox[{
     FractionBox["1", "x"], "+", "x", "+", 
     SuperscriptBox["x", "2"]}], ",", "x"}], "]"}], "[", "10", "]"}]], "Input",\
ExpressionUUID->"352ec906-064e-4069-8eee-acbe80466a52"],

Cell[BoxData["1512"], "Output",ExpressionUUID->"f51bb7fb-8a3f-4d7c-a261-c77e881c7db1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"ConstantTermSequence", "[", 
     RowBox[{
      RowBox[{
       FractionBox["1", "x"], "+", "x", "+", 
       SuperscriptBox["x", "2"]}], ",", "x"}], "]"}], "[", "n", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "10"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"cb42df8e-38d2-4ce6-bf5d-ff78360dc213"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "0", ",", "2", ",", "3", ",", "6", ",", "20", ",", "35", ",", 
   "105", ",", "238", ",", "588", ",", "1512"}], "}"}]], "Output",ExpressionUU\
ID->"c0e57e03-1db3-48e1-a414-5639d200dc4f"]
}, Open  ]],

Cell["\<\
Many combinatorial sequences can be represented as constant-term sequences.\
\>", "Text",ExpressionUUID->"46dcabe2-d81a-4347-8dfb-1e95b4b815e8"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"ConstantTermSequence", "[", 
   RowBox[{
    RowBox[{
     FractionBox["1", "x"], "+", "2", "+", "x"}], ",", 
    RowBox[{"1", "-", "x"}], ",", "x"}], "]"}], "/@", 
  RowBox[{"Range", "[", 
   RowBox[{"0", ",", "10"}], "]"}]}], "\n", 
 RowBox[{"CatalanNumber", "/@", 
  RowBox[{"Range", "[", 
   RowBox[{"0", ",", "10"}], "]"}]}]}], "Input",ExpressionUUID->"ea0b9622-\
3d5e-471d-9d29-57b8d2372f8a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "2", ",", "5", ",", "14", ",", "42", ",", "132", ",", 
   "429", ",", "1430", ",", "4862", ",", "16796"}], "}"}]], "Output",Expressio\
nUUID->"7d40c128-242a-4fea-82f8-00a31f8d9ba9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "2", ",", "5", ",", "14", ",", "42", ",", "132", ",", 
   "429", ",", "1430", ",", "4862", ",", "16796"}], "}"}]], "Output",Expressio\
nUUID->"e38467af-6538-4293-90d1-00f1b5053c8b"]
}, Open  ]],

Cell["\<\
Use AutomaticSequenceReduce to compute an automaton for a constant-term \
sequence modulo a prime power:\
\>", "Text",ExpressionUUID->"01807f20-e49a-4db6-8c56-c333823f7fb5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomaticSequenceReduce", "[", 
  RowBox[{
   RowBox[{"Mod", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"ConstantTermSequence", "[", 
       RowBox[{
        RowBox[{
         FractionBox["1", "x"], "+", "2", "+", "x"}], ",", 
        RowBox[{"1", "-", "x"}], ",", "x"}], "]"}], "[", "n", "]"}], ",", 
     "8"}], "]"}], ",", "n"}], "]"}]], "Input",ExpressionUUID->"f0a9d19e-23cf-\
403f-8509-bbafbab840ee"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AutomaticSequence", "[", 
   RowBox[{"Automaton", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "3"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "4"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "5"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"3", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"3", "\[Rule]", "6"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "4"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "7"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"5", "\[Rule]", "5"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"5", "\[Rule]", "8"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"6", "\[Rule]", "9"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"6", "\[Rule]", "6"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"9", "\[Rule]", "10"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"9", "\[Rule]", "5"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"10", "\[Rule]", "10"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"10", "\[Rule]", "7"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"7", "\[Rule]", "7"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"7", "\[Rule]", "8"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"8", "\[Rule]", "8"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"8", "\[Rule]", "11"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"11", "\[Rule]", "11"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"11", "\[Rule]", "11"}], ",", "1"}], "}"}]}], "}"}], ",", 
     "1", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "1"}], ",", 
       RowBox[{"2", "\[Rule]", "1"}], ",", 
       RowBox[{"3", "\[Rule]", "1"}], ",", 
       RowBox[{"4", "\[Rule]", "1"}], ",", 
       RowBox[{"5", "\[Rule]", "2"}], ",", 
       RowBox[{"6", "\[Rule]", "5"}], ",", 
       RowBox[{"7", "\[Rule]", "6"}], ",", 
       RowBox[{"8", "\[Rule]", "4"}], ",", 
       RowBox[{"9", "\[Rule]", "5"}], ",", 
       RowBox[{"10", "\[Rule]", "5"}], ",", 
       RowBox[{"11", "\[Rule]", "0"}]}], "}"}], ",", 
     RowBox[{"InputAlphabet", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}], "]"}], "[", "n", 
  "]"}]], "Output",ExpressionUUID->"9289263f-10bb-4286-a197-dcb635279a62"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["ConstantTermSequenceReduce", "Input"]], \
"Subsubsection",ExpressionUUID->"5e1b955e-3e1f-41a4-b12d-615975328f89"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "ConstantTermSequenceReduce"}]], "Input",ExpressionUUID->"e2f3c42f-200f-4828-8c8d-1d6fe63e236d"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"ConstantTermSequenceReduce\
\\\", \\\"[\\\", RowBox[List[StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) attempts to reduce \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) to a single \
ConstantTermSequence object as a function of \\!\\(\\*StyleBox[\\\"n\\\", \
\\\"TI\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"ConstantTermSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    "AperyNumber", "[", "IntegerSequences`Private`n_", "]"}], 
                    ",", "IntegerSequences`Private`n_"}], "]"}], "/;", 
                    RowBox[{
                    "IntegerSequences`Private`PlausibleVariableQ", "[", 
                    "IntegerSequences`Private`n", "]"}]}], ":=", 
                    RowBox[{
                    RowBox[{"ConstantTermSequence", "[", 
                    RowBox[{
                    RowBox[{"Expand", "[", 
                    FractionBox[
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "+", "\[FormalX]"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "\[FormalY]"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "\[FormalZ]"}], ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "+", "\[FormalY]", "+", "\[FormalZ]", "+", 
                    RowBox[{"\[FormalY]", " ", "\[FormalZ]"}], "+", 
                    RowBox[{
                    "\[FormalX]", " ", "\[FormalY]", " ", "\[FormalZ]"}]}], 
                    ")"}]}], 
                    RowBox[{
                    "\[FormalX]", " ", "\[FormalY]", " ", "\[FormalZ]"}]], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\[FormalX]", ",", "\[FormalY]", ",", "\[FormalZ]"}], 
                    "}"}]}], "]"}], "[", "IntegerSequences`Private`n", 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"ConstantTermSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    "CatalanNumber", "[", "IntegerSequences`Private`n_", 
                    "]"}], ",", "IntegerSequences`Private`n_"}], "]"}], "/;", 
                    RowBox[{
                    "IntegerSequences`Private`PlausibleVariableQ", "[", 
                    "IntegerSequences`Private`n", "]"}]}], ":=", 
                    RowBox[{
                    RowBox[{"ConstantTermSequence", "[", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "\[FormalX]"], "+", "2", "+", 
                    "\[FormalX]"}], ",", 
                    RowBox[{"1", "-", "\[FormalX]"}], ",", "\[FormalX]"}], 
                    "]"}], "[", "IntegerSequences`Private`n", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"ConstantTermSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    "MotzkinNumber", "[", "IntegerSequences`Private`n_", 
                    "]"}], ",", "IntegerSequences`Private`n_"}], "]"}], "/;", 
                    RowBox[{
                    "IntegerSequences`Private`PlausibleVariableQ", "[", 
                    "IntegerSequences`Private`n", "]"}]}], ":=", 
                    RowBox[{
                    RowBox[{"ConstantTermSequence", "[", 
                    RowBox[{
                    RowBox[{
                    FractionBox["1", "\[FormalX]"], "+", "1", "+", 
                    "\[FormalX]"}], ",", 
                    RowBox[{"1", "-", 
                    SuperscriptBox["\[FormalX]", "2"]}], ",", "\[FormalX]"}], 
                    "]"}], "[", "IntegerSequences`Private`n", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"ConstantTermSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`sequence", ":", 
                    RowBox[{
                    "_ConstantTermSequence", "[", 
                    "IntegerSequences`Private`n_", "]"}]}], ",", 
                    "IntegerSequences`Private`n_"}], "]"}], "/;", 
                    RowBox[{
                    "IntegerSequences`Private`PlausibleVariableQ", "[", 
                    "IntegerSequences`Private`n", "]"}]}], ":=", 
                    "IntegerSequences`Private`sequence"}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "ConstantTermSequenceReduce", 
                    "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_"}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`ConstantTermSequenceReduce] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`ConstantTermSequenceReduce\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"ConstantTermSequenceReduce\
\\\", \\\"[\\\", RowBox[List[StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) attempts to reduce \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) to a single \
ConstantTermSequence object as a function of \\!\\(\\*StyleBox[\\\"n\\\", \
\\\"TI\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"ConstantTermSequenceReduce\", \"[\", \
RowBox[List[StyleBox[\"expr\", \"TI\"], \",\", StyleBox[\"n\", \"TI\"]]], \"]\
\"]]\) attempts to reduce \!\(\*StyleBox[\"expr\", \"TI\"]\) to a single \
ConstantTermSequence object as a function of \!\(\*StyleBox[\"n\", \
\"TI\"]\).", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None,
     "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`ConstantTermSequenceReduce, {Condition[
         IntegerSequences`ConstantTermSequenceReduce[
          IntegerSequences`AperyNumber[
           Pattern[IntegerSequences`Private`n, 
            Blank[]]], 
          Pattern[IntegerSequences`Private`n, 
           Blank[]]], 
         IntegerSequences`Private`PlausibleVariableQ[
         IntegerSequences`Private`n]] :> IntegerSequences`ConstantTermSequence[
         Expand[((1 + \[FormalX]) (1 + \[FormalY]) (1 + \[FormalZ]) (
            1 + \[FormalY] + \[FormalZ] + \[FormalY] \[FormalZ] + \[FormalX] \
\[FormalY] \[FormalZ]))/(\[FormalX] \[FormalY] \[FormalZ])], {\[FormalX], \
\[FormalY], \[FormalZ]}][IntegerSequences`Private`n], Condition[
         IntegerSequences`ConstantTermSequenceReduce[
          CatalanNumber[
           Pattern[IntegerSequences`Private`n, 
            Blank[]]], 
          Pattern[IntegerSequences`Private`n, 
           Blank[]]], 
         IntegerSequences`Private`PlausibleVariableQ[
         IntegerSequences`Private`n]] :> 
       IntegerSequences`ConstantTermSequence[
        1/\[FormalX] + 2 + \[FormalX], 1 - \[FormalX], \[FormalX]][
        IntegerSequences`Private`n], Condition[
         IntegerSequences`ConstantTermSequenceReduce[
          IntegerSequences`MotzkinNumber[
           Pattern[IntegerSequences`Private`n, 
            Blank[]]], 
          Pattern[IntegerSequences`Private`n, 
           Blank[]]], 
         IntegerSequences`Private`PlausibleVariableQ[
         IntegerSequences`Private`n]] :> 
       IntegerSequences`ConstantTermSequence[
        1/\[FormalX] + 1 + \[FormalX], 1 - \[FormalX]^2, \[FormalX]][
        IntegerSequences`Private`n], Condition[
         IntegerSequences`ConstantTermSequenceReduce[
          Pattern[IntegerSequences`Private`sequence, 
           Blank[IntegerSequences`ConstantTermSequence][
            Pattern[IntegerSequences`Private`n, 
             Blank[]]]], 
          Pattern[IntegerSequences`Private`n, 
           Blank[]]], 
         IntegerSequences`Private`PlausibleVariableQ[
         IntegerSequences`Private`n]] :> IntegerSequences`Private`sequence}], 
    "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`ConstantTermSequenceReduce, {
      SyntaxInformation[IntegerSequences`ConstantTermSequenceReduce] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`ConstantTermSequenceReduce"], False]]], "Output",Express\
ionUUID->"51c468e6-13d3-4171-9bfd-a5f4a1a56904"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ConstantTermSequenceReduce", "[", 
  RowBox[{
   RowBox[{"CatalanNumber", "[", "n", "]"}], ",", "n"}], "]"}]], "Input",Expre\
ssionUUID->"604360a2-f11c-4c25-98fb-4f0c9c6689bc"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ConstantTermSequence", "[", 
   RowBox[{
    RowBox[{"2", "+", 
     FractionBox["1", "\[FormalX]"], "+", "\[FormalX]"}], ",", 
    RowBox[{"1", "-", "\[FormalX]"}], ",", "\[FormalX]"}], "]"}], "[", "n", 
  "]"}]], "Output",ExpressionUUID->"03e41964-ef2e-4749-9563-2291dd03237c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ConstantTermSequenceReduce", "[", 
  RowBox[{
   RowBox[{"MotzkinNumber", "[", "n", "]"}], ",", "n"}], "]"}]], "Input",Expre\
ssionUUID->"7b5acf6d-f2a5-4695-a5b4-a00ef02f90ea"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ConstantTermSequence", "[", 
   RowBox[{
    RowBox[{"1", "+", 
     FractionBox["1", "\[FormalX]"], "+", "\[FormalX]"}], ",", 
    RowBox[{"1", "-", 
     SuperscriptBox["\[FormalX]", "2"]}], ",", "\[FormalX]"}], "]"}], "[", 
  "n", "]"}]], "Output",ExpressionUUID->"f8caeb67-f9e0-467f-8e8e-\
dbd172917e4d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ConstantTermSequenceReduce", "[", 
  RowBox[{
   RowBox[{"AperyNumber", "[", "n", "]"}], ",", "n"}], "]"}]], "Input",Express\
ionUUID->"b43dabff-a79a-44a7-97d3-3ee6b605e594"],

Cell[BoxData[
 RowBox[{
  RowBox[{"ConstantTermSequence", "[", 
   RowBox[{
    RowBox[{"5", "+", 
     FractionBox["4", "\[FormalX]"], "+", "\[FormalX]", "+", 
     FractionBox["2", "\[FormalY]"], "+", 
     FractionBox["2", 
      RowBox[{"\[FormalX]", " ", "\[FormalY]"}]], "+", 
     RowBox[{"3", " ", "\[FormalY]"}], "+", 
     FractionBox[
      RowBox[{"2", " ", "\[FormalY]"}], "\[FormalX]"], "+", 
     RowBox[{"\[FormalX]", " ", "\[FormalY]"}], "+", 
     FractionBox["2", "\[FormalZ]"], "+", 
     FractionBox["2", 
      RowBox[{"\[FormalX]", " ", "\[FormalZ]"}]], "+", 
     FractionBox["1", 
      RowBox[{"\[FormalY]", " ", "\[FormalZ]"}]], "+", 
     FractionBox["1", 
      RowBox[{"\[FormalX]", " ", "\[FormalY]", " ", "\[FormalZ]"}]], "+", 
     FractionBox["\[FormalY]", "\[FormalZ]"], "+", 
     FractionBox["\[FormalY]", 
      RowBox[{"\[FormalX]", " ", "\[FormalZ]"}]], "+", 
     RowBox[{"3", " ", "\[FormalZ]"}], "+", 
     FractionBox[
      RowBox[{"2", " ", "\[FormalZ]"}], "\[FormalX]"], "+", 
     RowBox[{"\[FormalX]", " ", "\[FormalZ]"}], "+", 
     FractionBox["\[FormalZ]", "\[FormalY]"], "+", 
     FractionBox["\[FormalZ]", 
      RowBox[{"\[FormalX]", " ", "\[FormalY]"}]], "+", 
     RowBox[{"2", " ", "\[FormalY]", " ", "\[FormalZ]"}], "+", 
     FractionBox[
      RowBox[{"\[FormalY]", " ", "\[FormalZ]"}], "\[FormalX]"], "+", 
     RowBox[{"\[FormalX]", " ", "\[FormalY]", " ", "\[FormalZ]"}]}], ",", 
    RowBox[{"{", 
     RowBox[{"\[FormalX]", ",", "\[FormalY]", ",", "\[FormalZ]"}], "}"}]}], 
   "]"}], "[", "n", "]"}]], "Output",ExpressionUUID->"e391c2d6-8f95-4d1d-986f-\
32b73363a192"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["DeterministicAutomatonQ", "Input"]], "Subsubsection",ExpressionUUID->"52e02f2a-9c78-4643-b26b-6a225d62e0ec"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "DeterministicAutomatonQ"}]], "Input",ExpressionUUID->"a684d106-4a30-40c4-91e4-668c630690ba"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"DeterministicAutomatonQ\\\"\
, \\\"[\\\", StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]]\\) yields True if \
\\!\\(\\*StyleBox[\\\"M\\\", \\\"TI\\\"]\\) is a deterministic automaton, and \
False otherwise.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"DeterministicAutomatonQ", "[", 
                    RowBox[{"IntegerSequences`Private`automaton", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"Automaton", "[", 
                    RowBox[{"IntegerSequences`Private`edges_", ",", "__"}], 
                    "]"}], ")"}], "?", "AutomatonQ"}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`inputalphabet", "=", 
                    RowBox[{
                    "AutomatonInputAlphabet", "[", 
                    "IntegerSequences`Private`automaton", "]"}]}], ",", 
                    "IntegerSequences`Private`letter"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"And", "@@", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`state", ",", 
                    RowBox[{"And", "@@", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Count", "[", 
                    RowBox[{"IntegerSequences`Private`edges", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`state", "\[Rule]", "_"}], ",", 
                    RowBox[{"IntegerSequences`Private`label_", "/;", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`letter", ",", 
                    "IntegerSequences`Private`label"}], "]"}]}]}], "}"}]}], 
                    "]"}], "\[Equal]", "1"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`letter", ",", 
                    "IntegerSequences`Private`inputalphabet"}], "}"}]}], 
                    "]"}]}]}], "]"}], "/@", 
                    RowBox[{
                    "AutomatonStateList", "[", 
                    "IntegerSequences`Private`automaton", "]"}]}]}], "/;", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`inputalphabet", ",", 
                    "_AutomatonInputAlphabet"}], "]"}]}], "||", 
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"DeterministicAutomatonQ", "::", "input"}], 
                    "MessageName"], "]"}]}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"DeterministicAutomatonQ", "[", "_", "]"}], ":=", 
                    "False"}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "DeterministicAutomatonQ", 
                    "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`DeterministicAutomatonQ] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`DeterministicAutomatonQ\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"DeterministicAutomatonQ\\\"\
, \\\"[\\\", StyleBox[\\\"M\\\", \\\"TI\\\"], \\\"]\\\"]]\\) yields True if \
\\!\\(\\*StyleBox[\\\"M\\\", \\\"TI\\\"]\\) is a deterministic automaton, and \
False otherwise.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"DeterministicAutomatonQ\", \"[\", StyleBox[\"M\", \
\"TI\"], \"]\"]]\) yields True if \!\(\*StyleBox[\"M\", \"TI\"]\) is a \
deterministic automaton, and False otherwise.", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`DeterministicAutomatonQ, {
      IntegerSequences`DeterministicAutomatonQ[
         Pattern[IntegerSequences`Private`automaton, 
          PatternTest[
           IntegerSequences`Automaton[
            Pattern[IntegerSequences`Private`edges, 
             Blank[]], 
            BlankSequence[]], IntegerSequences`AutomatonQ]]] :> 
       Module[{IntegerSequences`Private`inputalphabet = 
          IntegerSequences`AutomatonInputAlphabet[
           IntegerSequences`Private`automaton], 
          IntegerSequences`Private`letter}, 
         Condition[
          Apply[And, 
           Map[
            Function[IntegerSequences`Private`state, 
             Apply[And, 
              Table[
              Count[IntegerSequences`Private`edges, {
                 IntegerSequences`Private`state -> Blank[], 
                  Condition[
                   Pattern[IntegerSequences`Private`label, 
                    Blank[]], 
                   MatchQ[
                   IntegerSequences`Private`letter, 
                    IntegerSequences`Private`label]]}] == 1, {
               IntegerSequences`Private`letter, 
                IntegerSequences`Private`inputalphabet}]]], 
            IntegerSequences`AutomatonStateList[
            IntegerSequences`Private`automaton]]], 
          Or[
           Not[
            MatchQ[IntegerSequences`Private`inputalphabet, 
             Blank[IntegerSequences`AutomatonInputAlphabet]]], 
           Message[
            MessageName[
            IntegerSequences`DeterministicAutomatonQ, "input"]]]]], 
       IntegerSequences`DeterministicAutomatonQ[
         Blank[]] :> False}], "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`DeterministicAutomatonQ, {
      SyntaxInformation[IntegerSequences`DeterministicAutomatonQ] -> {
        "ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`DeterministicAutomatonQ"], False]]], "Output",Expression\
UUID->"e0c60b13-adc1-4cc0-a74f-573b70b92faf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeterministicAutomatonQ", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "A"}], ",", "1"}], "}"}]}], "}"}], ",", "A"}],
    "]"}], "]"}]], "Input",ExpressionUUID->"4c839cba-65cd-4a44-bfd3-\
3e574541a9b0"],

Cell[BoxData["True"], "Output",ExpressionUUID->"ebeaa52e-8416-491c-bb65-b974702e5055"]
}, Open  ]],

Cell[TextData[{
 "This automaton has no outgoing edge labeled ",
 Cell[BoxData[
  FormBox["1", TraditionalForm]],ExpressionUUID->
  "1ef467c9-3e0a-4353-b7cd-0fdadee60da1"],
 " from its initial state:"
}], "Text",ExpressionUUID->"bd9bdae1-b380-4af0-907e-90d54862e512"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeterministicAutomatonQ", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "0"}], "}"}]}], "}"}], ",", "A"}],
    "]"}], "]"}]], "Input",ExpressionUUID->"2e5ae8f9-46db-4be0-8a0a-\
dfb7f9938070"],

Cell[BoxData["False"], "Output",ExpressionUUID->"2e94614a-de87-4789-bac1-dd1c196577d5"]
}, Open  ]],

Cell["\<\
Deleting an edge results in an automaton that is deterministic, however, \
since the input alphabet is inferred to consist only of a single letter:\
\>", "Text",ExpressionUUID->"d46941ca-0161-45a0-a4e6-71a798a7a11a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeterministicAutomatonQ", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", "0"}], "}"}]}], "}"}], ",", "A"}],
    "]"}], "]"}]], "Input",ExpressionUUID->"a5882090-0ff6-48e7-b8af-\
5beb10979047"],

Cell[BoxData["True"], "Output",ExpressionUUID->"bcfefc27-32d8-4084-a43f-27696404ab41"]
}, Open  ]],

Cell[TextData[{
 "If the input alphabet cannot be determined, ",
 StyleBox["DeterministicAutomatonQ", "Input"],
 " evaluates to ",
 StyleBox["False", "Input"],
 ":"
}], "Text",ExpressionUUID->"9046bdda-b0e3-4305-bb41-5af820dd33d0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeterministicAutomatonQ", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", 
        RowBox[{"0", "|", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "A"}], ",", 
        RowBox[{"0", "|", "1"}]}], "}"}]}], "}"}], ",", "A"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"9e28ba5a-192e-42f9-936e-03a619193a4d"],

Cell[BoxData[
 TemplateBox[{
  "DeterministicAutomatonQ","input",
   "\"Unable to determine the input alphabet.\"",2,202,11,
   18387630869787481076,"Local","IntegerSequences`DeterministicAutomatonQ"},
  "MessageTemplate2"]], "Message", \
"MSG",ExpressionUUID->"7ef80bc6-4a29-47de-9d21-d1a2890451a2"],

Cell[BoxData["False"], "Output",ExpressionUUID->"7ad555b7-f0a7-4847-8080-0c49de5fc3b9"]
}, Open  ]],

Cell[TextData[{
 "Use ",
 StyleBox["InputAlphabet", "Input"],
 " to specify the input alphabet explicitly:"
}], "Text",ExpressionUUID->"8b052f44-e974-4478-905f-2a37e11493f7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeterministicAutomatonQ", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", 
        RowBox[{"0", "|", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "A"}], ",", 
        RowBox[{"0", "|", "1"}]}], "}"}]}], "}"}], ",", "A", ",", 
    RowBox[{"InputAlphabet", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}], "]"}]], "Input",ExpressionUUI\
D->"76c5c2ac-3677-498e-ae77-a6ba8720c0a5"],

Cell[BoxData["True"], "Output",ExpressionUUID->"26bb13ff-c86b-4cd4-908e-d85237d3adbb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeterministicAutomatonQ", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", 
        RowBox[{"_", "?", "EvenQ"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "C"}], ",", 
        RowBox[{"_", "?", "OddQ"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", 
        RowBox[{"0", "|", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"C", "\[Rule]", "C"}], ",", 
        RowBox[{"0", "|", "1"}]}], "}"}]}], "}"}], ",", "A", ",", 
    RowBox[{"InputAlphabet", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}], "]"}]], "Input",ExpressionUUI\
D->"10e92620-6dc4-4826-a252-7a25595eccf1"],

Cell[BoxData["True"], "Output",ExpressionUUID->"8e0417c6-6590-40be-9093-b04201fb3206"]
}, Open  ]],

Cell["Duplicate edges in an automaton make it nondeterministic:", "Text",ExpressionUUID->"bad04811-22e6-45ea-af86-153a9f47833f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeterministicAutomatonQ", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "0"}], "}"}]}], "}"}], ",", "A", 
    ",", 
    RowBox[{"InputAlphabet", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}], "]"}]], "Input",ExpressionUUI\
D->"a1cdd969-bbdb-4bb0-bbec-62453a832287"],

Cell[BoxData["False"], "Output",ExpressionUUID->"67b9f93c-c350-4220-8dc6-cee49a6c0ce4"]
}, Open  ]],

Cell["\<\
More generally, if there is any state with two outgoing edges whose labels \
can be matched by the same letter of the input alphabet, then the automaton \
is nondeterministic:\
\>", "Text",ExpressionUUID->"e5da2a0f-c759-4b8c-9922-0e34f7e64da6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeterministicAutomatonQ", "[", 
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "_"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", 
        RowBox[{"0", "|", "1"}]}], "}"}]}], "}"}], ",", "A", ",", 
    RowBox[{"InputAlphabet", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}], "]"}]], "Input",ExpressionUUI\
D->"361be6c2-e70d-4de5-9778-2822521f1551"],

Cell[BoxData["False"], "Output",ExpressionUUID->"2ed34949-4073-4ae4-9a7c-553593ee77ec"]
}, Open  ]],

Cell["\<\
Such an automaton is considered nondeterministic even though it can be \
evaluated uniquely:\
\>", "Text",ExpressionUUID->"e3149dde-3b68-4c39-96e6-75c402ec2b25"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Automaton", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "B"}], ",", "_"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "A"}], ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"B", "\[Rule]", "B"}], ",", 
        RowBox[{"0", "|", "1"}]}], "}"}]}], "}"}], ",", "A", ",", 
    RowBox[{"InputAlphabet", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}], "[", 
  RowBox[{"{", "1", "}"}], "]"}]], "Input",ExpressionUUID->"e4b77cdf-236c-\
4e61-8ea7-fb1e75aecbd9"],

Cell[BoxData["B"], "Output",ExpressionUUID->"7b7e38a9-5a4e-41dc-b0ab-46ea09522058"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["DiagonalSequence", "Input"]], "Subsubsection",ExpressionUUID->"60dc40b3-9cf8-4b81-ac83-cbdad86434f7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "DiagonalSequence"}]], "Input",ExpressionUUID->"af6e8712-b486-465f-8d0a-e181bb90c563"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[RowBox[List[\\\"\
DiagonalSequence\\\", \\\"[\\\", RowBox[List[StyleBox[\\\"expr\\\", \
\\\"TI\\\"], \\\",\\\", StyleBox[\\\"vars\\\", \\\"TI\\\"]]], \\\"]\\\"]], \\\
\"[\\\", StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the \
\\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\)th diagonal coefficient in the \
power series expansion of the rational expression \
\\!\\(\\*StyleBox[\\\"expr\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[List[RowBox[List[\\\"DiagonalSequence\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[SubscriptBox[StyleBox[\\\"vars\\\", \\\"TI\
\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"vars\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\
\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", \
SubscriptBox[StyleBox[\\\"vars\\\", \\\"TI\\\"], StyleBox[\\\"d\\\", \\\"TI\\\
\"]]]], \\\"}\\\"]]]], \\\"]\\\"]], \\\"[\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], \
StyleBox[\\\"d\\\", \\\"TI\\\"]]]], \\\"]\\\"]]\\) gives a value of the \
\\!\\(\\*StyleBox[\\\"d\\\", \\\"TI\\\"]\\)\[Hyphen]dimensional diagonal \
obtained by collapsing each list of variables.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" SubValue Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"SubValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "SubValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"DiagonalSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`rationalexpression_", ",", 
                    RowBox[{"IntegerSequences`Private`variablepartition", ":", 
                    RowBox[{"{", "__List", "}"}]}], ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "[", 
                    RowBox[{
                    "IntegerSequences`Private`nsequence__Integer", "?", 
                    "NonNegative"}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{
                    "Length", "[", 
                    "IntegerSequences`Private`variablepartition", "]"}], 
                    "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "IntegerSequences`Private`nsequence", "}"}], 
                    "]"}]}]}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`modulus", "=", 
                    RowBox[{"OptionValue", "[", "Modulus", "]"}]}], "}"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`modulus", "\[Equal]", "0"}], 
                    ",", "Identity", ",", 
                    RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{
                    "Modulus", "\[Rule]", 
                    "IntegerSequences`Private`modulus"}]}], "]"}], "&"}]}], 
                    "]"}], "[", 
                    RowBox[{"SeriesCoefficient", "@@", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{
                    "{", "IntegerSequences`Private`rationalexpression", "}"}],
                     ",", 
                    RowBox[{"Join", "@@", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`variables", ",", 
                    "IntegerSequences`Private`n"}], "}"}], ",", 
                    RowBox[{"Thread", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`variables", ",", "0", ",", 
                    "IntegerSequences`Private`n"}], "}"}], "]"}]}], "]"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`variablepartition", ",", 
                    RowBox[{
                    "{", "IntegerSequences`Private`nsequence", "}"}]}], 
                    "}"}]}], "]"}]}]}], "]"}]}], "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"DiagonalSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`rationalexpression_", ",", 
                    RowBox[{"IntegerSequences`Private`variables", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{
                    RowBox[{"{", "__List", "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Except", "[", "_List", "]"}], ".."}], "}"}]}], 
                    "]"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`options", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], "[", 
                    RowBox[{
                    "IntegerSequences`Private`n_Integer", "?", 
                    "NonNegative"}], "]"}], ":=", 
                    RowBox[{
                    RowBox[{"DiagonalSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`rationalexpression", ",", 
                    RowBox[{"{", "IntegerSequences`Private`variables", "}"}], 
                    ",", "IntegerSequences`Private`options"}], "]"}], "[", 
                    "IntegerSequences`Private`n", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"DiagonalSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`rationalexpression_", ",", 
                    RowBox[{"IntegerSequences`Private`variable", ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`options", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], "[", 
                    RowBox[{
                    "IntegerSequences`Private`n_Integer", "?", 
                    "NonNegative"}], "]"}], ":=", 
                    RowBox[{
                    RowBox[{"DiagonalSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`rationalexpression", ",", 
                    RowBox[{"{", 
                    RowBox[{"{", "IntegerSequences`Private`variable", "}"}], 
                    "}"}], ",", "IntegerSequences`Private`options"}], "]"}], 
                    "[", "IntegerSequences`Private`n", "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "DiagonalSequence", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`DiagonalSequence] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Blank[], 
                    OptionsPattern[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"Modulus", "\[Rule]", "0"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`DiagonalSequence\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[RowBox[List[\\\"\
DiagonalSequence\\\", \\\"[\\\", RowBox[List[StyleBox[\\\"expr\\\", \
\\\"TI\\\"], \\\",\\\", StyleBox[\\\"vars\\\", \\\"TI\\\"]]], \\\"]\\\"]], \\\
\"[\\\", StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the \
\\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\)th diagonal coefficient in the \
power series expansion of the rational expression \
\\!\\(\\*StyleBox[\\\"expr\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[List[RowBox[List[\\\"DiagonalSequence\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[SubscriptBox[StyleBox[\\\"vars\\\", \\\"TI\
\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"vars\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\
\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", \
SubscriptBox[StyleBox[\\\"vars\\\", \\\"TI\\\"], StyleBox[\\\"d\\\", \\\"TI\\\
\"]]]], \\\"}\\\"]]]], \\\"]\\\"]], \\\"[\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], \
StyleBox[\\\"d\\\", \\\"TI\\\"]]]], \\\"]\\\"]]\\) gives a value of the \
\\!\\(\\*StyleBox[\\\"d\\\", \\\"TI\\\"]\\)\[Hyphen]dimensional diagonal \
obtained by collapsing each list of variables.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[RowBox[List[\"DiagonalSequence\", \"[\", \
RowBox[List[StyleBox[\"expr\", \"TI\"], \",\", StyleBox[\"vars\", \"TI\"]]], \
\"]\"]], \"[\", StyleBox[\"n\", \"TI\"], \"]\"]]\) gives the \
\!\(\*StyleBox[\"n\", \"TI\"]\)th diagonal coefficient in the power series \
expansion of the rational expression \!\(\*StyleBox[\"expr\", \"TI\"]\).\n\
\!\(\*RowBox[List[RowBox[List[\"DiagonalSequence\", \"[\", \
RowBox[List[StyleBox[\"expr\", \"TI\"], \",\", RowBox[List[\"{\", \
RowBox[List[SubscriptBox[StyleBox[\"vars\", \"TI\"], StyleBox[\"1\", \
\"TR\"]], \",\", SubscriptBox[StyleBox[\"vars\", \"TI\"], StyleBox[\"2\", \
\"TR\"]], \",\", StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", \
SubscriptBox[StyleBox[\"vars\", \"TI\"], StyleBox[\"d\", \"TI\"]]]], \
\"}\"]]]], \"]\"]], \"[\", RowBox[List[SubscriptBox[StyleBox[\"n\", \"TI\"], \
StyleBox[\"1\", \"TR\"]], \",\", SubscriptBox[StyleBox[\"n\", \"TI\"], \
StyleBox[\"2\", \"TR\"]], \",\", StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", \
SubscriptBox[StyleBox[\"n\", \"TI\"], StyleBox[\"d\", \"TI\"]]]], \"]\"]]\) \
gives a value of the \!\(\*StyleBox[\"d\", \"TI\"]\)\[Hyphen]dimensional \
diagonal obtained by collapsing each list of variables.", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
    "SubValues" -> 
    Information`InformationValueForm[
     SubValues, IntegerSequences`DiagonalSequence, {Condition[
         IntegerSequences`DiagonalSequence[
          Pattern[IntegerSequences`Private`rationalexpression, 
           Blank[]], 
          Pattern[IntegerSequences`Private`variablepartition, {
            BlankSequence[List]}], 
          OptionsPattern[]][
          PatternTest[
           Pattern[IntegerSequences`Private`nsequence, 
            BlankSequence[Integer]], NonNegative]], 
         Length[IntegerSequences`Private`variablepartition] == 
         Length[{IntegerSequences`Private`nsequence}]] :> 
       With[{IntegerSequences`Private`modulus = OptionValue[Modulus]}, 
         If[
         IntegerSequences`Private`modulus == 0, Identity, 
          Expand[#, Modulus -> IntegerSequences`Private`modulus]& ][
          Apply[SeriesCoefficient, 
           Join[{IntegerSequences`Private`rationalexpression}, 
            Apply[Join, 
             MapThread[
              
              Function[{
               IntegerSequences`Private`variables, 
                IntegerSequences`Private`n}, 
               
               Thread[{
                IntegerSequences`Private`variables, 0, 
                 IntegerSequences`Private`n}]], {
              IntegerSequences`Private`variablepartition, {
               IntegerSequences`Private`nsequence}}]]]]]], 
       IntegerSequences`DiagonalSequence[
         Pattern[IntegerSequences`Private`rationalexpression, 
          Blank[]], 
         Pattern[IntegerSequences`Private`variables, 
          Except[{
            BlankSequence[List]}, {
            Repeated[
             Except[
              Blank[List]]]}]], 
         Pattern[IntegerSequences`Private`options, 
          OptionsPattern[]]][
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[Integer]], NonNegative]] :> 
       IntegerSequences`DiagonalSequence[
        IntegerSequences`Private`rationalexpression, {
         IntegerSequences`Private`variables}, 
         IntegerSequences`Private`options][IntegerSequences`Private`n], 
       IntegerSequences`DiagonalSequence[
         Pattern[IntegerSequences`Private`rationalexpression, 
          Blank[]], 
         Pattern[IntegerSequences`Private`variable, 
          Except[
           Blank[List]]], 
         Pattern[IntegerSequences`Private`options, 
          OptionsPattern[]]][
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[Integer]], NonNegative]] :> 
       IntegerSequences`DiagonalSequence[
        IntegerSequences`Private`rationalexpression, {{
          IntegerSequences`Private`variable}}, 
         IntegerSequences`Private`options][IntegerSequences`Private`n]}], 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`DiagonalSequence, {
      SyntaxInformation[IntegerSequences`DiagonalSequence] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           Blank[], 
           OptionsPattern[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {Modulus -> 0}, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`DiagonalSequence"], False]]], "Output",ExpressionUUID->\
"f7794773-1cfb-43c7-87a4-6c9f57670a62"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"DiagonalSequence", "[", 
   RowBox[{
    FractionBox["1", 
     RowBox[{"1", "-", "x", "-", "y"}]], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}]}], "]"}], "[", "10", "]"}]], "Input",Expre\
ssionUUID->"fd8524d6-5813-44e2-9fbf-34a940057b2e"],

Cell[BoxData["184756"], "Output",ExpressionUUID->"856236da-9f74-4ea9-8555-584129899bd1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"DiagonalSequence", "[", 
     RowBox[{
      FractionBox["1", 
       RowBox[{"1", "-", "x", "-", "y"}]], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "y"}], "}"}]}], "]"}], "[", "n", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "10"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"cad63792-179c-4023-9ee1-0cfa0965cf69"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "6", ",", "20", ",", "70", ",", "252", ",", "924", ",", 
   "3432", ",", "12870", ",", "48620", ",", "184756"}], "}"}]], "Output",Expre\
ssionUUID->"09265ce3-770b-4ece-ae2e-013817c1edfe"]
}, Open  ]],

Cell["\<\
Many combinatorial sequences can be represented as diagonal sequences.\
\>", "Text",ExpressionUUID->"33609500-f724-4576-9642-210207573316"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"DiagonalSequence", "[", 
   RowBox[{
    FractionBox[
     RowBox[{"1", "-", "x"}], 
     RowBox[{"1", "-", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "x"}], ")"}], "2"], " ", "y"}]}]], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}]}], "]"}], "/@", 
  RowBox[{"Range", "[", 
   RowBox[{"0", ",", "10"}], "]"}]}], "\n", 
 RowBox[{"CatalanNumber", "/@", 
  RowBox[{"Range", "[", 
   RowBox[{"0", ",", "10"}], "]"}]}]}], "Input",ExpressionUUID->"60038cca-\
29f9-42a9-a545-d3b2e9799fbd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "2", ",", "5", ",", "14", ",", "42", ",", "132", ",", 
   "429", ",", "1430", ",", "4862", ",", "16796"}], "}"}]], "Output",Expressio\
nUUID->"104bb69e-13d9-4ec5-9df5-67f9217e160a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "2", ",", "5", ",", "14", ",", "42", ",", "132", ",", 
   "429", ",", "1430", ",", "4862", ",", "16796"}], "}"}]], "Output",Expressio\
nUUID->"d06e55f0-ba86-4f96-89b1-5c9419250099"]
}, Open  ]],

Cell["\<\
Use AutomaticSequenceReduce to compute an automaton for a diagonal sequence \
modulo a prime power:\
\>", "Text",ExpressionUUID->"22dd23d2-4b18-49c5-83e5-7042759c8716"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomaticSequenceReduce", "[", 
  RowBox[{
   RowBox[{"Mod", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"DiagonalSequence", "[", 
       RowBox[{
        FractionBox[
         RowBox[{"1", "-", "x"}], 
         RowBox[{"1", "-", 
          RowBox[{
           SuperscriptBox[
            RowBox[{"(", 
             RowBox[{"1", "+", "x"}], ")"}], "2"], " ", "y"}]}]], ",", 
        RowBox[{"{", 
         RowBox[{"x", ",", "y"}], "}"}]}], "]"}], "[", "n", "]"}], ",", "8"}],
     "]"}], ",", "n"}], "]"}]], "Input",ExpressionUUID->"3aca60d1-6b0d-485f-\
887f-e4d4dd61c45f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"AutomaticSequence", "[", 
   RowBox[{"Automaton", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "3"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "4"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "5"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"3", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"3", "\[Rule]", "6"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "4"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"4", "\[Rule]", "7"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"5", "\[Rule]", "5"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"5", "\[Rule]", "8"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"6", "\[Rule]", "9"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"6", "\[Rule]", "6"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"9", "\[Rule]", "10"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"9", "\[Rule]", "5"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"10", "\[Rule]", "10"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"10", "\[Rule]", "7"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"7", "\[Rule]", "7"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"7", "\[Rule]", "8"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"8", "\[Rule]", "8"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"8", "\[Rule]", "11"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"11", "\[Rule]", "11"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"11", "\[Rule]", "11"}], ",", "1"}], "}"}]}], "}"}], ",", 
     "1", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "1"}], ",", 
       RowBox[{"2", "\[Rule]", "1"}], ",", 
       RowBox[{"3", "\[Rule]", "1"}], ",", 
       RowBox[{"4", "\[Rule]", "1"}], ",", 
       RowBox[{"5", "\[Rule]", "2"}], ",", 
       RowBox[{"6", "\[Rule]", "5"}], ",", 
       RowBox[{"7", "\[Rule]", "6"}], ",", 
       RowBox[{"8", "\[Rule]", "4"}], ",", 
       RowBox[{"9", "\[Rule]", "5"}], ",", 
       RowBox[{"10", "\[Rule]", "5"}], ",", 
       RowBox[{"11", "\[Rule]", "0"}]}], "}"}], ",", 
     RowBox[{"InputAlphabet", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}]}]}], "]"}], "]"}], "[", "n", 
  "]"}]], "Output",ExpressionUUID->"e2235848-285e-4dbd-8180-3c30f2065962"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["DiagonalSequenceReduce", "Input"]], "Subsubsection",ExpressionUUID->"95d3d5a8-78ac-47fe-ace8-9ea1bbfa1c4d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "DiagonalSequenceReduce"}]], "Input",ExpressionUUID->"bf1db247-4eaa-4fe0-9e97-46fa3e5373c1"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"DiagonalSequenceReduce\\\",\
 \\\"[\\\", RowBox[List[StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) attempts to reduce \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) to a single DiagonalSequence \
object as a function of \\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\).\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"DiagonalSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    "AperyNumber", "[", "IntegerSequences`Private`n_", "]"}], 
                    ",", "IntegerSequences`Private`n_"}], "]"}], "/;", 
                    RowBox[{
                    "IntegerSequences`Private`PlausibleVariableQ", "[", 
                    "IntegerSequences`Private`n", "]"}]}], ":=", 
                    RowBox[{
                    RowBox[{"DiagonalSequence", "[", 
                    RowBox[{
                    FractionBox["1", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "-", "\[FormalW]", "-", "\[FormalX]"}], 
                    ")"}], " ", 
                    RowBox[{"(", 
                    RowBox[{"1", "-", "\[FormalY]", "-", "\[FormalZ]"}], 
                    ")"}]}], "-", 
                    RowBox[{
                    "\[FormalW]", " ", "\[FormalX]", " ", "\[FormalY]", " ", 
                    "\[FormalZ]"}]}]], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "\[FormalW]", ",", "\[FormalX]", ",", "\[FormalY]", ",", 
                    "\[FormalZ]"}], "}"}]}], "]"}], "[", 
                    "IntegerSequences`Private`n", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"DiagonalSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    "CatalanNumber", "[", "IntegerSequences`Private`n_", 
                    "]"}], ",", "IntegerSequences`Private`n_"}], "]"}], "/;", 
                    RowBox[{
                    "IntegerSequences`Private`PlausibleVariableQ", "[", 
                    "IntegerSequences`Private`n", "]"}]}], ":=", 
                    RowBox[{
                    RowBox[{"DiagonalSequence", "[", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"1", "-", "\[FormalX]"}], 
                    RowBox[{"1", "-", 
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"1", "+", "\[FormalX]"}], ")"}], "2"], " ", 
                    "\[FormalY]"}]}]], ",", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalX]", ",", "\[FormalY]"}], "}"}]}], "]"}],
                     "[", "IntegerSequences`Private`n", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"DiagonalSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    "MotzkinNumber", "[", "IntegerSequences`Private`n_", 
                    "]"}], ",", "IntegerSequences`Private`n_"}], "]"}], "/;", 
                    RowBox[{
                    "IntegerSequences`Private`PlausibleVariableQ", "[", 
                    "IntegerSequences`Private`n", "]"}]}], ":=", 
                    RowBox[{
                    RowBox[{"DiagonalSequence", "[", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"1", "-", 
                    SuperscriptBox["\[FormalX]", "2"]}], 
                    RowBox[{"1", "-", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"1", "+", "\[FormalX]", "+", 
                    SuperscriptBox["\[FormalX]", "2"]}], ")"}], " ", 
                    "\[FormalY]"}]}]], ",", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalX]", ",", "\[FormalY]"}], "}"}]}], "]"}],
                     "[", "IntegerSequences`Private`n", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"DiagonalSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"IntegerSequences`Private`sequence", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"AlgebraicSequence", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`seriesroot", ":", 
                    RowBox[{"SeriesRoot", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`polynomialfunction_Function", 
                    ",", 
                    RowBox[{"IntegerSequences`Private`root", ":", 
                    RowBox[{
                    RowBox[{"HoldPattern", "[", "SeriesData", "]"}], "[", 
                    RowBox[{"IntegerSequences`Private`x_", ",", 
                    RowBox[{"IntegerSequences`Private`x0", ":", "0"}], ",", 
                    "__"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}]}], ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ")"}], "?",
                     "IntegerSequences`Private`\
SeriesRootAlgebraicSequenceObjectQ"}]}], ")"}], "[", 
                    "IntegerSequences`Private`n_", "]"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`n_", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}]}], "]"}], 
                    ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`modulus", ",", 
                    "IntegerSequences`Private`polynomial", ",", 
                    "IntegerSequences`Private`rootdata", ",", 
                    "IntegerSequences`Private`shiftedseriesroot", ",", 
                    "IntegerSequences`Private`initialterms", ",", 
                    "IntegerSequences`Private`shiftlength", ",", 
                    "IntegerSequences`Private`shiftedpolynomial", ",", 
                    "IntegerSequences`Private`y", ",", 
                    "IntegerSequences`Private`failed"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`failed", "=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`modulus", "=", 
                    RowBox[{
                    "IntegerSequences`Private`\
SeriesRootAlgebraicSequenceModulus", "[", "IntegerSequences`Private`sequence",
                     "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`polynomial", "=", 
                    RowBox[{
                    "IntegerSequences`Private`polynomialfunction", "[", 
                    "IntegerSequences`Private`y", "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`y", "=", 
                    RowBox[{"SelectFirst", "[", 
                    RowBox[{
                    RowBox[{"RotateRight", "[", 
                    RowBox[{
                    RowBox[{"Symbol", "/@", 
                    RowBox[{"CharacterRange", "[", 
                    RowBox[{"\<\"\[FormalA]\"\>", ",", "\<\"\[FormalZ]\"\>"}],
                     "]"}]}], ",", "2"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`polynomial", ",", "#1"}], "]"}],
                     "&"}], ",", "IntegerSequences`Private`y"}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`rootdata", "=", 
                    RowBox[{
                    "IntegerSequences`Private`ImplicitFunctionTheoremRoot", 
                    "[", 
                    RowBox[{"Append", "[", 
                    RowBox[{"IntegerSequences`Private`seriesroot", ",", 
                    RowBox[{
                    "Modulus", "\[Rule]", 
                    "IntegerSequences`Private`modulus"}]}], "]"}], "]"}]}], 
                    ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`rootdata", ",", 
                    "_IntegerSequences`Private`ImplicitFunctionTheoremRoot"}],
                     "]"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"DiagonalSequenceReduce", "::", "soln"}], 
                    "MessageName"], ",", 
                    "IntegerSequences`Private`polynomialfunction", ",", 
                    "IntegerSequences`Private`root"}], "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ";", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`shiftedseriesroot", ",", 
                    "IntegerSequences`Private`initialterms", ",", 
                    "IntegerSequences`Private`shiftlength"}], "}"}], "=", 
                    "IntegerSequences`Private`rootdata"}], ";", 
                    RowBox[{"IntegerSequences`Private`shiftedpolynomial", "=", 
                    RowBox[{
                    RowBox[{
                    "First", "[", 
                    "IntegerSequences`Private`shiftedseriesroot", "]"}], "[", 
                    "IntegerSequences`Private`y", "]"}]}], ";", "False"}], 
                    "]"}]}], ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`modulus", "\[Equal]", "0"}], 
                    ",", 
                    RowBox[{"DiagonalSequence", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "IntegerSequences`Private`initialterms", "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{"IntegerSequences`Private`x", "\[Rule]", 
                    RowBox[{
                    "IntegerSequences`Private`x", " ", 
                    "IntegerSequences`Private`y"}]}]}], ")"}], "+", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    "IntegerSequences`Private`x", " ", 
                    "IntegerSequences`Private`y"}], ")"}], 
                    RowBox[{"Max", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`shiftlength", "-", "1"}], ",", 
                    "0"}], "]"}]], " ", "IntegerSequences`Private`y", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["\[PartialD]", "IntegerSequences`Private`y"],
                     "IntegerSequences`Private`shiftedpolynomial"}], "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{"IntegerSequences`Private`x", "\[Rule]", 
                    RowBox[{
                    "IntegerSequences`Private`x", " ", 
                    "IntegerSequences`Private`y"}]}]}], ")"}]}], 
                    RowBox[{"Cancel", "[", 
                    FractionBox[
                    RowBox[{
                    "IntegerSequences`Private`shiftedpolynomial", "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{"IntegerSequences`Private`x", "\[Rule]", 
                    RowBox[{
                    "IntegerSequences`Private`x", " ", 
                    "IntegerSequences`Private`y"}]}]}], 
                    "IntegerSequences`Private`y"], "]"}]]}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`x", ",", 
                    "IntegerSequences`Private`y"}], "}"}]}], "]"}], ",", 
                    RowBox[{"DiagonalSequence", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "IntegerSequences`Private`initialterms", "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{"IntegerSequences`Private`x", "\[Rule]", 
                    RowBox[{
                    "IntegerSequences`Private`x", " ", 
                    "IntegerSequences`Private`y"}]}]}], ")"}], "+", 
                    FractionBox[
                    RowBox[{
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{
                    "IntegerSequences`Private`x", " ", 
                    "IntegerSequences`Private`y"}], ")"}], 
                    RowBox[{"Max", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`shiftlength", "-", "1"}], ",", 
                    "0"}], "]"}]], " ", "IntegerSequences`Private`y", " ", 
                    RowBox[{"PolynomialMod", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    SubscriptBox["\[PartialD]", "IntegerSequences`Private`y"],
                     "IntegerSequences`Private`shiftedpolynomial"}], "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{"IntegerSequences`Private`x", "\[Rule]", 
                    RowBox[{
                    "IntegerSequences`Private`x", " ", 
                    "IntegerSequences`Private`y"}]}]}], ",", 
                    "IntegerSequences`Private`modulus"}], "]"}]}], 
                    RowBox[{"PolynomialMod", "[", 
                    RowBox[{
                    FractionBox[
                    RowBox[{
                    "IntegerSequences`Private`shiftedpolynomial", "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{"IntegerSequences`Private`x", "\[Rule]", 
                    RowBox[{
                    "IntegerSequences`Private`x", " ", 
                    "IntegerSequences`Private`y"}]}]}], 
                    "IntegerSequences`Private`y"], ",", 
                    "IntegerSequences`Private`modulus"}], "]"}]]}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`x", ",", 
                    "IntegerSequences`Private`y"}], "}"}], ",", 
                    RowBox[{
                    "Modulus", "\[Rule]", 
                    "IntegerSequences`Private`modulus"}]}], "]"}]}], "]"}], 
                    "[", "IntegerSequences`Private`n", "]"}], "/;", 
                    RowBox[{"!", "IntegerSequences`Private`failed"}]}]}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"DiagonalSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`s", ":", 
                    RowBox[{
                    RowBox[{"AlgebraicSequence", "[", 
                    RowBox[{"_Function", ",", 
                    RowBox[{"Except", "[", "_Rule", "]"}], ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "[", 
                    "IntegerSequences`Private`n_", "]"}]}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`n_", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}]}], "]"}], 
                    ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`sequence", "=", 
                    RowBox[{"AlgebraicSequenceReduce", "[", 
                    RowBox[{
                    "IntegerSequences`Private`s", ",", 
                    "IntegerSequences`Private`n"}], "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"DiagonalSequenceReduce", "[", 
                    RowBox[{
                    "IntegerSequences`Private`sequence", ",", 
                    "IntegerSequences`Private`n"}], "]"}], "/;", 
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`sequence", ",", 
                    "_AlgebraicSequenceReduce"}], "]"}]}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"DiagonalSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ConstantTermSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`powerpolynomial_", ",", 
                    "IntegerSequences`Private`factorpolynomial_", ",", 
                    "IntegerSequences`Private`variables_List"}], "]"}], "[", 
                    "IntegerSequences`Private`n_", "]"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`n_", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}]}], "]"}], 
                    ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "IntegerSequences`Private`y", "}"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`y", "=", 
                    RowBox[{"SelectFirst", "[", 
                    RowBox[{
                    RowBox[{"RotateRight", "[", 
                    RowBox[{
                    RowBox[{"Symbol", "/@", 
                    RowBox[{"CharacterRange", "[", 
                    RowBox[{"\<\"\[FormalA]\"\>", ",", "\<\"\[FormalZ]\"\>"}],
                     "]"}]}], ",", "2"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`powerpolynomial", ",", 
                    "IntegerSequences`Private`factorpolynomial"}], "}"}], ",",
                     "#1"}], "]"}], "&"}], ",", 
                    "IntegerSequences`Private`y"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"DiagonalSequence", "[", 
                    RowBox[{
                    FractionBox["IntegerSequences`Private`factorpolynomial", 
                    RowBox[{"1", "-", 
                    RowBox[{"IntegerSequences`Private`powerpolynomial", " ", 
                    RowBox[{
                    "Times", "@@", "IntegerSequences`Private`variables"}], 
                    " ", "IntegerSequences`Private`y"}]}]], ",", 
                    RowBox[{"Append", "[", 
                    RowBox[{
                    "IntegerSequences`Private`variables", ",", 
                    "IntegerSequences`Private`y"}], "]"}]}], "]"}], "[", 
                    "IntegerSequences`Private`n", "]"}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"DiagonalSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ConstantTermSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`powerpolynomial_", ",", 
                    "IntegerSequences`Private`variables_"}], "]"}], "[", 
                    "IntegerSequences`Private`n_", "]"}], ",", 
                    "IntegerSequences`Private`n_"}], "]"}], ":=", 
                    RowBox[{"DiagonalSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ConstantTermSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`powerpolynomial", ",", "1", ",",
                     "IntegerSequences`Private`variables"}], "]"}], "[", 
                    "IntegerSequences`Private`n", "]"}], ",", 
                    "IntegerSequences`Private`n"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"DiagonalSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ConstantTermSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`powerpolynomial_", ",", 
                    "IntegerSequences`Private`factorpolynomial_", ",", 
                    RowBox[{"IntegerSequences`Private`variable", ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}]}], "]"}], "[", 
                    "IntegerSequences`Private`n_", "]"}], ",", 
                    "IntegerSequences`Private`n_"}], "]"}], ":=", 
                    RowBox[{"DiagonalSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"ConstantTermSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`powerpolynomial", ",", 
                    "IntegerSequences`Private`factorpolynomial", ",", 
                    RowBox[{"{", "IntegerSequences`Private`variable", "}"}]}],
                     "]"}], "[", "IntegerSequences`Private`n", "]"}], ",", 
                    "IntegerSequences`Private`n"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"DiagonalSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`sequence", ":", 
                    RowBox[{
                    "_DiagonalSequence", "[", "IntegerSequences`Private`n_", 
                    "]"}]}], ",", "IntegerSequences`Private`n_"}], "]"}], "/;", 
                    RowBox[{
                    "IntegerSequences`Private`PlausibleVariableQ", "[", 
                    "IntegerSequences`Private`n", "]"}]}], ":=", 
                    "IntegerSequences`Private`sequence"}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "DiagonalSequenceReduce", "]"}],
                     "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`DiagonalSequenceReduce] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Blank[], 
                    OptionsPattern[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`DiagonalSequenceReduce\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"DiagonalSequenceReduce\\\",\
 \\\"[\\\", RowBox[List[StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) attempts to reduce \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) to a single DiagonalSequence \
object as a function of \\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\).\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"DiagonalSequenceReduce\", \"[\", \
RowBox[List[StyleBox[\"expr\", \"TI\"], \",\", StyleBox[\"n\", \"TI\"]]], \"]\
\"]]\) attempts to reduce \!\(\*StyleBox[\"expr\", \"TI\"]\) to a single \
DiagonalSequence object as a function of \!\(\*StyleBox[\"n\", \"TI\"]\).", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`DiagonalSequenceReduce, {Condition[
         IntegerSequences`DiagonalSequenceReduce[
          IntegerSequences`AperyNumber[
           Pattern[IntegerSequences`Private`n, 
            Blank[]]], 
          Pattern[IntegerSequences`Private`n, 
           Blank[]]], 
         IntegerSequences`Private`PlausibleVariableQ[
         IntegerSequences`Private`n]] :> 
       IntegerSequences`DiagonalSequence[
        1/((1 - \[FormalW] - \[FormalX]) (
           1 - \[FormalY] - \[FormalZ]) - \[FormalW] \[FormalX] \[FormalY] \
\[FormalZ]), {\[FormalW], \[FormalX], \[FormalY], \[FormalZ]}][
        IntegerSequences`Private`n], Condition[
         IntegerSequences`DiagonalSequenceReduce[
          CatalanNumber[
           Pattern[IntegerSequences`Private`n, 
            Blank[]]], 
          Pattern[IntegerSequences`Private`n, 
           Blank[]]], 
         IntegerSequences`Private`PlausibleVariableQ[
         IntegerSequences`Private`n]] :> 
       IntegerSequences`DiagonalSequence[(1 - \[FormalX])/(
         1 - (1 + \[FormalX])^2 \[FormalY]), {\[FormalX], \[FormalY]}][
        IntegerSequences`Private`n], Condition[
         IntegerSequences`DiagonalSequenceReduce[
          IntegerSequences`MotzkinNumber[
           Pattern[IntegerSequences`Private`n, 
            Blank[]]], 
          Pattern[IntegerSequences`Private`n, 
           Blank[]]], 
         IntegerSequences`Private`PlausibleVariableQ[
         IntegerSequences`Private`n]] :> 
       IntegerSequences`DiagonalSequence[(1 - \[FormalX]^2)/(
         1 - (1 + \[FormalX] + \[FormalX]^2) \[FormalY]), {\[FormalX], \
\[FormalY]}][IntegerSequences`Private`n], 
       IntegerSequences`DiagonalSequenceReduce[
         Pattern[IntegerSequences`Private`sequence, 
          PatternTest[
           IntegerSequences`AlgebraicSequence[
            Pattern[IntegerSequences`Private`seriesroot, 
             IntegerSequences`SeriesRoot[{
               Pattern[IntegerSequences`Private`polynomialfunction, 
                Blank[Function]], 
               Pattern[IntegerSequences`Private`root, 
                HoldPattern[SeriesData][
                 Pattern[IntegerSequences`Private`x, 
                  Blank[]], 
                 Pattern[IntegerSequences`Private`x0, 0], 
                 BlankSequence[]]]}, 
              OptionsPattern[]]], 
            OptionsPattern[]], 
           IntegerSequences`Private`SeriesRootAlgebraicSequenceObjectQ]][
          Pattern[IntegerSequences`Private`n, 
           Blank[]]], 
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[]], IntegerSequences`Private`PlausibleVariableQ]] :> 
       Module[{IntegerSequences`Private`modulus, 
          IntegerSequences`Private`polynomial, 
          IntegerSequences`Private`rootdata, 
          IntegerSequences`Private`shiftedseriesroot, 
          IntegerSequences`Private`initialterms, 
          IntegerSequences`Private`shiftlength, 
          IntegerSequences`Private`shiftedpolynomial, 
          IntegerSequences`Private`y, IntegerSequences`Private`failed}, 
         IntegerSequences`Private`failed = 
          Catch[IntegerSequences`Private`modulus = 
             IntegerSequences`Private`SeriesRootAlgebraicSequenceModulus[
              IntegerSequences`Private`sequence]; 
            IntegerSequences`Private`polynomial = 
             IntegerSequences`Private`polynomialfunction[
              IntegerSequences`Private`y]; 
            IntegerSequences`Private`y = SelectFirst[
               RotateRight[
                Map[Symbol, 
                 CharacterRange["\[FormalA]", "\[FormalZ]"]], 2], FreeQ[
               IntegerSequences`Private`polynomial, #]& , 
               IntegerSequences`Private`y]; 
            IntegerSequences`Private`rootdata = 
             IntegerSequences`Private`ImplicitFunctionTheoremRoot[
               Append[
               IntegerSequences`Private`seriesroot, Modulus -> 
                IntegerSequences`Private`modulus]]; If[
              MatchQ[IntegerSequences`Private`rootdata, 
               Blank[IntegerSequences`Private`ImplicitFunctionTheoremRoot]], 
              Message[
                MessageName[IntegerSequences`DiagonalSequenceReduce, "soln"], 
                IntegerSequences`Private`polynomialfunction, 
                IntegerSequences`Private`root]; Throw[True]]; {
              IntegerSequences`Private`shiftedseriesroot, 
               IntegerSequences`Private`initialterms, 
               IntegerSequences`Private`shiftlength} = 
             IntegerSequences`Private`rootdata; 
            IntegerSequences`Private`shiftedpolynomial = 
             First[IntegerSequences`Private`shiftedseriesroot][
              IntegerSequences`Private`y]; False]; Condition[
           If[IntegerSequences`Private`modulus == 0, 
            IntegerSequences`DiagonalSequence[
            ReplaceAll[
              IntegerSequences`Private`initialterms, 
               IntegerSequences`Private`x -> 
               IntegerSequences`Private`x IntegerSequences`Private`y] + (
                IntegerSequences`Private`x IntegerSequences`Private`y)^
               Max[IntegerSequences`Private`shiftlength - 1, 0] 
              IntegerSequences`Private`y ReplaceAll[
                D[
                IntegerSequences`Private`shiftedpolynomial, 
                 IntegerSequences`Private`y], IntegerSequences`Private`x -> 
                IntegerSequences`Private`x IntegerSequences`Private`y]/Cancel[
              ReplaceAll[
                IntegerSequences`Private`shiftedpolynomial, 
                 IntegerSequences`Private`x -> 
                 IntegerSequences`Private`x IntegerSequences`Private`y]/
               IntegerSequences`Private`y], {
             IntegerSequences`Private`x, IntegerSequences`Private`y}], 
            IntegerSequences`DiagonalSequence[
            ReplaceAll[
              IntegerSequences`Private`initialterms, 
               IntegerSequences`Private`x -> 
               IntegerSequences`Private`x IntegerSequences`Private`y] + (
                IntegerSequences`Private`x IntegerSequences`Private`y)^
               Max[IntegerSequences`Private`shiftlength - 1, 0] 
              IntegerSequences`Private`y PolynomialMod[
                ReplaceAll[
                 D[
                 IntegerSequences`Private`shiftedpolynomial, 
                  IntegerSequences`Private`y], IntegerSequences`Private`x -> 
                 IntegerSequences`Private`x IntegerSequences`Private`y], 
                IntegerSequences`Private`modulus]/PolynomialMod[
              ReplaceAll[
                IntegerSequences`Private`shiftedpolynomial, 
                 IntegerSequences`Private`x -> 
                 IntegerSequences`Private`x IntegerSequences`Private`y]/
               IntegerSequences`Private`y, 
               IntegerSequences`Private`modulus], {
             IntegerSequences`Private`x, IntegerSequences`Private`y}, Modulus -> 
             IntegerSequences`Private`modulus]][IntegerSequences`Private`n], 
           Not[IntegerSequences`Private`failed]]], 
       IntegerSequences`DiagonalSequenceReduce[
         Pattern[IntegerSequences`Private`s, 
          IntegerSequences`AlgebraicSequence[
           Blank[Function], 
           Except[
            Blank[Rule]], 
           OptionsPattern[]][
           Pattern[IntegerSequences`Private`n, 
            Blank[]]]], 
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[]], IntegerSequences`Private`PlausibleVariableQ]] :> 
       With[{IntegerSequences`Private`sequence = 
          IntegerSequences`AlgebraicSequenceReduce[
           IntegerSequences`Private`s, IntegerSequences`Private`n]}, 
         Condition[
          IntegerSequences`DiagonalSequenceReduce[
          IntegerSequences`Private`sequence, IntegerSequences`Private`n], 
          Not[
           MatchQ[IntegerSequences`Private`sequence, 
            Blank[IntegerSequences`AlgebraicSequenceReduce]]]]], 
       IntegerSequences`DiagonalSequenceReduce[
         IntegerSequences`ConstantTermSequence[
          Pattern[IntegerSequences`Private`powerpolynomial, 
           Blank[]], 
          Pattern[IntegerSequences`Private`factorpolynomial, 
           Blank[]], 
          Pattern[IntegerSequences`Private`variables, 
           Blank[List]]][
          Pattern[IntegerSequences`Private`n, 
           Blank[]]], 
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[]], IntegerSequences`Private`PlausibleVariableQ]] :> 
       Module[{IntegerSequences`Private`y}, 
         IntegerSequences`Private`y = SelectFirst[
            RotateRight[
             Map[Symbol, 
              CharacterRange["\[FormalA]", "\[FormalZ]"]], 2], 
            FreeQ[{IntegerSequences`Private`powerpolynomial, 
              IntegerSequences`Private`factorpolynomial}, #]& , 
            IntegerSequences`Private`y]; 
         IntegerSequences`DiagonalSequence[
          IntegerSequences`Private`factorpolynomial/(1 - 
           IntegerSequences`Private`powerpolynomial 
           Apply[Times, IntegerSequences`Private`variables] 
           IntegerSequences`Private`y), 
           Append[
           IntegerSequences`Private`variables, IntegerSequences`Private`y]][
          IntegerSequences`Private`n]], 
       IntegerSequences`DiagonalSequenceReduce[
         IntegerSequences`ConstantTermSequence[
          Pattern[IntegerSequences`Private`powerpolynomial, 
           Blank[]], 
          Pattern[IntegerSequences`Private`variables, 
           Blank[]]][
          Pattern[IntegerSequences`Private`n, 
           Blank[]]], 
         Pattern[IntegerSequences`Private`n, 
          Blank[]]] :> IntegerSequences`DiagonalSequenceReduce[
         IntegerSequences`ConstantTermSequence[
         IntegerSequences`Private`powerpolynomial, 1, 
          IntegerSequences`Private`variables][IntegerSequences`Private`n], 
         IntegerSequences`Private`n], IntegerSequences`DiagonalSequenceReduce[
         IntegerSequences`ConstantTermSequence[
          Pattern[IntegerSequences`Private`powerpolynomial, 
           Blank[]], 
          Pattern[IntegerSequences`Private`factorpolynomial, 
           Blank[]], 
          Pattern[IntegerSequences`Private`variable, 
           Except[
            Blank[List]]]][
          Pattern[IntegerSequences`Private`n, 
           Blank[]]], 
         Pattern[IntegerSequences`Private`n, 
          Blank[]]] :> IntegerSequences`DiagonalSequenceReduce[
         IntegerSequences`ConstantTermSequence[
         IntegerSequences`Private`powerpolynomial, 
          IntegerSequences`Private`factorpolynomial, {
          IntegerSequences`Private`variable}][IntegerSequences`Private`n], 
         IntegerSequences`Private`n], Condition[
         IntegerSequences`DiagonalSequenceReduce[
          Pattern[IntegerSequences`Private`sequence, 
           Blank[IntegerSequences`DiagonalSequence][
            Pattern[IntegerSequences`Private`n, 
             Blank[]]]], 
          Pattern[IntegerSequences`Private`n, 
           Blank[]]], 
         IntegerSequences`Private`PlausibleVariableQ[
         IntegerSequences`Private`n]] :> IntegerSequences`Private`sequence}], 
    "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`DiagonalSequenceReduce, {
      SyntaxInformation[IntegerSequences`DiagonalSequenceReduce] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           Blank[], 
           OptionsPattern[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`DiagonalSequenceReduce"], False]]], "Output",ExpressionU\
UID->"63aeed93-d77d-46bc-a389-fffaf0262c59"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DiagonalSequenceReduce", "[", 
  RowBox[{
   RowBox[{"CatalanNumber", "[", "n", "]"}], ",", "n"}], "]"}]], "Input",Expre\
ssionUUID->"13ab273d-ccca-4124-8306-0cf5b3415422"],

Cell[BoxData[
 RowBox[{
  RowBox[{"DiagonalSequence", "[", 
   RowBox[{
    FractionBox[
     RowBox[{"1", "-", "\[FormalX]"}], 
     RowBox[{"1", "-", 
      RowBox[{
       SuperscriptBox[
        RowBox[{"(", 
         RowBox[{"1", "+", "\[FormalX]"}], ")"}], "2"], " ", 
       "\[FormalY]"}]}]], ",", 
    RowBox[{"{", 
     RowBox[{"\[FormalX]", ",", "\[FormalY]"}], "}"}]}], "]"}], "[", "n", 
  "]"}]], "Output",ExpressionUUID->"50817e74-e206-402c-9dfe-d3fe51688bd9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DiagonalSequenceReduce", "[", 
  RowBox[{
   RowBox[{"MotzkinNumber", "[", "n", "]"}], ",", "n"}], "]"}]], "Input",Expre\
ssionUUID->"2056eadd-85ce-4db6-a20c-7d6144a3e7a7"],

Cell[BoxData[
 RowBox[{
  RowBox[{"DiagonalSequence", "[", 
   RowBox[{
    FractionBox[
     RowBox[{"1", "-", 
      SuperscriptBox["\[FormalX]", "2"]}], 
     RowBox[{"1", "-", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "+", "\[FormalX]", "+", 
         SuperscriptBox["\[FormalX]", "2"]}], ")"}], " ", "\[FormalY]"}]}]], 
    ",", 
    RowBox[{"{", 
     RowBox[{"\[FormalX]", ",", "\[FormalY]"}], "}"}]}], "]"}], "[", "n", 
  "]"}]], "Output",ExpressionUUID->"017be8bf-4bf0-41ce-b9e1-f5f1a6c407dd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DiagonalSequenceReduce", "[", 
  RowBox[{
   RowBox[{"AperyNumber", "[", "n", "]"}], ",", "n"}], "]"}]], "Input",Express\
ionUUID->"ae0e99ae-7f3c-4815-821a-c5dce408dc65"],

Cell[BoxData[
 RowBox[{
  RowBox[{"DiagonalSequence", "[", 
   RowBox[{
    FractionBox["1", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "-", "\[FormalW]", "-", "\[FormalX]"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"1", "-", "\[FormalY]", "-", "\[FormalZ]"}], ")"}]}], "-", 
      RowBox[{
      "\[FormalW]", " ", "\[FormalX]", " ", "\[FormalY]", " ", 
       "\[FormalZ]"}]}]], ",", 
    RowBox[{"{", 
     RowBox[{
     "\[FormalW]", ",", "\[FormalX]", ",", "\[FormalY]", ",", "\[FormalZ]"}], 
     "}"}]}], "]"}], "[", "n", "]"}]], "Output",ExpressionUUID->"4484a900-\
902f-458a-87d4-a3770b553665"]
}, Open  ]],

Cell["\<\
Render an algebraic sequence as the diagonal of a rational function:\
\>", "Text",ExpressionUUID->"61368ccd-c11d-497e-a4d6-9a4a825f1044"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DiagonalSequenceReduce", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"AlgebraicSequence", "[", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"y", ",", 
        RowBox[{
         SuperscriptBox["y", "2"], "-", "y", "+", "x"}]}], "]"}], ",", "x"}], 
     "]"}], "[", "n", "]"}], ",", "n"}], "]"}]], "Input",ExpressionUUID->\
"a5f3c22a-0e40-43c6-8ffd-7068f41d6d4b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"DiagonalSequence", "[", 
   RowBox[{
    FractionBox[
     RowBox[{"\[FormalY]", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "+", 
        RowBox[{"2", " ", "\[FormalY]"}]}], ")"}]}], 
     RowBox[{
      RowBox[{"-", "1"}], "+", "\[FormalY]", "+", "x"}]], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "\[FormalY]"}], "}"}]}], "]"}], "[", "n", 
  "]"}]], "Output",ExpressionUUID->"6997d449-d0e3-4722-a21e-4f0e78d81d29"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DiagonalSequenceReduce", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"AlgebraicSequence", "[", 
     RowBox[{"SeriesRoot", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Function", "[", 
         RowBox[{"y", ",", 
          RowBox[{
           RowBox[{"x", " ", 
            SuperscriptBox["y", "2"]}], "-", "y", "+", "1"}]}], "]"}], ",", 
        InterpretationBox[
         RowBox[{"1", "+", "x", "+", 
          RowBox[{"2", " ", 
           SuperscriptBox["x", "2"]}], "+", 
          InterpretationBox[
           SuperscriptBox[
            RowBox[{"O", "[", "x", "]"}], "3"],
           SeriesData[$CellContext`x, 0, {}, 0, 3, 1],
           Editable->False]}],
         SeriesData[$CellContext`x, 0, {1, 1, 2}, 0, 3, 1],
         Editable->False]}], "}"}], "]"}], "]"}], "[", "n", "]"}], ",", "n"}],
   "]"}]], "Input",ExpressionUUID->"e9a1956f-0e35-4db4-a416-f1eeed769dee"],

Cell[BoxData[
 RowBox[{
  RowBox[{"DiagonalSequence", "[", 
   RowBox[{
    RowBox[{"1", "+", 
     FractionBox[
      RowBox[{"\[FormalY]", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         RowBox[{"2", " ", "\[FormalY]", " ", 
          RowBox[{"(", 
           RowBox[{"1", "+", "\[FormalY]"}], ")"}], " ", "x"}]}], ")"}]}], 
      RowBox[{
       RowBox[{"-", "1"}], "+", "x", "+", 
       RowBox[{"2", " ", "\[FormalY]", " ", "x"}], "+", 
       RowBox[{
        SuperscriptBox["\[FormalY]", "2"], " ", "x"}]}]]}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "\[FormalY]"}], "}"}]}], "]"}], "[", "n", 
  "]"}]], "Output",ExpressionUUID->"a888cef4-a5dc-4049-90cc-2e120b571df4"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["DigitGet", "Input"],
 StyleBox[" (a generalization of ", "Text",
  FontWeight->"Plain"],
 StyleBox["BitGet", "Input"],
 StyleBox[")", "Text",
  FontWeight->"Plain"]
}], "Subsubsection",ExpressionUUID->"875918a0-9833-4ce7-ba19-3205078e7736"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "DigitGet"}]], "Input",ExpressionUUID->"02087ce3-ebb8-4d94-8e34-e49c31c074df"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"DigitGet\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"n\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"b\\\", \
\\\"TI\\\"], \\\",\\\", StyleBox[\\\"i\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) \
gives the coefficient of \\!\\(\\*SuperscriptBox[StyleBox[\\\"b\\\", \\\"TI\\\
\"], StyleBox[\\\"i\\\", \\\"TI\\\"]]\\) in the \
base\[Hyphen]\\!\\(\\*StyleBox[\\\"b\\\", \\\"TI\\\"]\\) representation of \
\\!\\(\\*StyleBox[\\\"n\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[List[\\\"DigitGet\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"n\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"B\\\", \
\\\"TI\\\"], \\\",\\\", StyleBox[\\\"i\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) \
gives the \\!\\(\\*StyleBox[\\\"i\\\", \\\"TI\\\"]\\)th digit in the \
numeration system \\!\\(\\*StyleBox[\\\"B\\\", \\\"TI\\\"]\\).\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"DigitGet", "[", 
                    RowBox[{
                    "IntegerSequences`Private`n_Integer", ",", 
                    "IntegerSequences`Private`numerationsystem_", ",", 
                    RowBox[{
                    "IntegerSequences`Private`position_Integer", "?", 
                    "NonNegative"}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`digitlist", "=", 
                    RowBox[{"DigitList", "[", 
                    RowBox[{
                    "IntegerSequences`Private`n", ",", 
                    "IntegerSequences`Private`numerationsystem", ",", 
                    RowBox[{"IntegerSequences`Private`position", "+", "1"}]}],
                     "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "Last", "[", "IntegerSequences`Private`digitlist", "]"}], 
                    "/;", 
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`digitlist", ",", "_DigitList"}],
                     "]"}]}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "DigitGet", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_", ",", "_"}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`DigitGet] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Blank[], 
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{"Listable", ",", "Protected"}], "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`DigitGet\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"DigitGet\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"n\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"b\\\", \
\\\"TI\\\"], \\\",\\\", StyleBox[\\\"i\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) \
gives the coefficient of \\!\\(\\*SuperscriptBox[StyleBox[\\\"b\\\", \\\"TI\\\
\"], StyleBox[\\\"i\\\", \\\"TI\\\"]]\\) in the \
base\[Hyphen]\\!\\(\\*StyleBox[\\\"b\\\", \\\"TI\\\"]\\) representation of \
\\!\\(\\*StyleBox[\\\"n\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[List[\\\"DigitGet\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"n\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"B\\\", \
\\\"TI\\\"], \\\",\\\", StyleBox[\\\"i\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) \
gives the \\!\\(\\*StyleBox[\\\"i\\\", \\\"TI\\\"]\\)th digit in the \
numeration system \\!\\(\\*StyleBox[\\\"B\\\", \\\"TI\\\"]\\).\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"DigitGet\", \"[\", RowBox[List[StyleBox[\"n\", \
\"TI\"], \",\", StyleBox[\"b\", \"TI\"], \",\", StyleBox[\"i\", \"TI\"]]], \
\"]\"]]\) gives the coefficient of \!\(\*SuperscriptBox[StyleBox[\"b\", \
\"TI\"], StyleBox[\"i\", \"TI\"]]\) in the base\[Hyphen]\!\(\*StyleBox[\"b\", \
\"TI\"]\) representation of \!\(\*StyleBox[\"n\", \"TI\"]\).\n\
\!\(\*RowBox[List[\"DigitGet\", \"[\", RowBox[List[StyleBox[\"n\", \"TI\"], \
\",\", StyleBox[\"B\", \"TI\"], \",\", StyleBox[\"i\", \"TI\"]]], \"]\"]]\) \
gives the \!\(\*StyleBox[\"i\", \"TI\"]\)th digit in the numeration system \!\
\(\*StyleBox[\"B\", \"TI\"]\).", "Documentation" -> None, "OwnValues" -> None,
     "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`DigitGet, {IntegerSequences`DigitGet[
         Pattern[IntegerSequences`Private`n, 
          Blank[Integer]], 
         Pattern[IntegerSequences`Private`numerationsystem, 
          Blank[]], 
         PatternTest[
          Pattern[IntegerSequences`Private`position, 
           Blank[Integer]], NonNegative]] :> 
       With[{IntegerSequences`Private`digitlist = 
          IntegerSequences`DigitList[
           IntegerSequences`Private`n, 
            IntegerSequences`Private`numerationsystem, 
            IntegerSequences`Private`position + 1]}, 
         Condition[
          Last[IntegerSequences`Private`digitlist], 
          Not[
           MatchQ[IntegerSequences`Private`digitlist, 
            Blank[IntegerSequences`DigitList]]]]]}], "SubValues" -> None, 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`DigitGet, {
      SyntaxInformation[IntegerSequences`DigitGet] -> {"ArgumentsPattern" -> {
           Blank[], 
           Blank[], 
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Listable, Protected}, "FullName" -> 
    "IntegerSequences`DigitGet"], False]]], "Output",ExpressionUUID->\
"4370a7f5-27de-410a-bc06-b129c7daea60"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DigitGet", "[", 
    RowBox[{"100", ",", "2", ",", "#"}], "]"}], "&"}], "/@", 
  RowBox[{"Range", "[", 
   RowBox[{"0", ",", "6"}], "]"}]}]], "Input",ExpressionUUID->"ed8a71b5-2d1a-\
4699-9fd7-cb695049023a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1"}], 
  "}"}]], "Output",ExpressionUUID->"b34735ee-0749-48f5-8a50-a4b27b45bd07"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DigitList", "[", 
  RowBox[{"100", ",", "2"}], "]"}]], "Input",ExpressionUUID->"9dfb93a8-34a1-\
45c3-a1ff-f809ed803c81"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "1"}], 
  "}"}]], "Output",ExpressionUUID->"4095ec1d-9697-4929-bfe0-4de6720ca550"]
}, Open  ]],

Cell[TextData[{
 StyleBox["DigitGet", "Input"],
 " works with negative integer bases."
}], "Text",ExpressionUUID->"8eb24b75-f89a-4517-8b5c-f908f5401ec5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DigitList", "[", 
  RowBox[{"2179", ",", 
   RowBox[{"-", "3"}]}], "]"}]], "Input",ExpressionUUID->"680c9b25-acb7-47ff-\
ac1c-850f0ba75112"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "0", ",", "2", ",", "1", ",", "0", ",", "0", ",", "0", ",", "2", 
   ",", "1"}], "}"}]], "Output",ExpressionUUID->"bd1173ed-93df-4825-a04b-\
04df27fef0d3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"DigitGet", "[", 
    RowBox[{"2179", ",", 
     RowBox[{"-", "3"}], ",", "#"}], "]"}], "&"}], "/@", 
  RowBox[{"Range", "[", 
   RowBox[{"0", ",", "10"}], "]"}]}]], "Input",ExpressionUUID->"67943154-9326-\
46f9-8963-9b39780534e7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "0", ",", "2", ",", "1", ",", "0", ",", "0", ",", "0", ",", "2", 
   ",", "1", ",", "0", ",", "0"}], "}"}]], "Output",ExpressionUUID->"5ef85561-\
673d-4b3f-8401-f842b454ac5f"]
}, Open  ]],

Cell[TextData[{
 "Use ",
 StyleBox["FromDigitList", "Input"],
 " to reconstruct the integer:"
}], "Text",ExpressionUUID->"586826f8-dafe-492f-ad8b-c32af345c74b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromDigitList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "0", ",", "2", ",", "1", ",", "0", ",", "0", ",", "0", ",", "2",
      ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"-", "3"}]}], "]"}]], "Input",ExpressionUUID->"494f7175-235a-4a35-\
9f2c-4617b2961a67"],

Cell[BoxData["2179"], "Output",ExpressionUUID->"bf982b76-c346-4400-b00c-bcadd99549a6"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["DigitList", "Input"],
 StyleBox[" (a variant and generalization of ", "Text",
  FontWeight->"Plain"],
 StyleBox["IntegerDigits", "Input"],
 StyleBox[")", "Text",
  FontWeight->"Plain"]
}], "Subsubsection",ExpressionUUID->"afaf1c56-c153-4140-8448-3f5b85309547"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "DigitList"}]], "Input",ExpressionUUID->"00bbb479-76f0-4d92-8502-a6a1903ad475"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"DigitList\\\", \\\"[\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives a list of the digits in \
the standard decimal representation of \\!\\(\\*StyleBox[\\\"n\\\", \
\\\"TI\\\"]\\), where successive digits increase in \
significance.\\n\\!\\(\\*RowBox[List[\\\"DigitList\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"n\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"b\\\", \
\\\"TI\\\"]]], \\\"]\\\"]]\\) gives the standard \
base\[Hyphen]\\!\\(\\*StyleBox[\\\"b\\\", \\\"TI\\\"]\\) representation of \
\\!\\(\\*StyleBox[\\\"n\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[List[\\\"DigitList\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"n\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[SubscriptBox[StyleBox[\\\"b\\\", \
\\\"TI\\\"], StyleBox[\\\"0\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"b\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"b\\\", \\\"TI\\\"], StyleBox[\\\"m\\\", \
\\\"TI\\\"]]]], \\\"}\\\"]]]], \\\"]\\\"]]\\) uses the mixed radix with bases \
\\!\\(\\*RowBox[List[SubscriptBox[StyleBox[\\\"b\\\", \\\"TI\\\"], \
StyleBox[\\\"0\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"b\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", \
SubscriptBox[StyleBox[\\\"b\\\", \\\"TI\\\"], StyleBox[\\\"m\\\", \
\\\"TI\\\"]]]]\\).\\n\\!\\(\\*RowBox[List[\\\"DigitList\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"n\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"B\\\", \
\\\"TI\\\"]]], \\\"]\\\"]]\\) gives the canonical representation of \
\\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\) in the numeration system \
\\!\\(\\*StyleBox[\\\"B\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[List[\\\"DigitList\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"n\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"B\\\", \
\\\"TI\\\"], \\\",\\\", StyleBox[\\\"len\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) \
pads the list on the right with zeros to give a list of length \
\\!\\(\\*StyleBox[\\\"len\\\", \\\"TI\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"DigitList", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{
                    "IntegerSequences`Private`base_Integer", ":", "10"}]}], 
                    "]"}], "/;", 
                    RowBox[{
                    "IntegerSequences`Private`base", "\[GreaterEqual]", 
                    "2"}]}], "=", 
                    RowBox[{"{", "}"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"DigitList", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`n_Integer", "?", "Positive"}], 
                    ",", 
                    RowBox[{
                    "IntegerSequences`Private`base_Integer", ":", "10"}]}], 
                    "]"}], "/;", 
                    RowBox[{
                    "IntegerSequences`Private`base", "\[GreaterEqual]", 
                    "2"}]}], ":=", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{"IntegerDigits", "[", 
                    RowBox[{
                    "IntegerSequences`Private`n", ",", 
                    "IntegerSequences`Private`base"}], "]"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"DigitList", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`n_Integer", "?", 
                    "NonNegative"}], ",", 
                    RowBox[{"IntegerSequences`Private`base_Integer", "/;", 
                    RowBox[{
                    "IntegerSequences`Private`base", "\[GreaterEqual]", 
                    "2"}]}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`length_Integer", "?", 
                    "NonNegative"}]}], "]"}], ":=", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{"IntegerDigits", "[", 
                    RowBox[{
                    "IntegerSequences`Private`n", ",", 
                    "IntegerSequences`Private`base", ",", 
                    "IntegerSequences`Private`length"}], "]"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"DigitList", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`n_Integer", "?", "Negative"}], 
                    ",", 
                    RowBox[{"IntegerSequences`Private`base_Integer", "/;", 
                    RowBox[{
                    "IntegerSequences`Private`base", "\[GreaterEqual]", 
                    "2"}]}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`length_Integer", "?", 
                    "NonNegative"}]}], "]"}], ":=", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{"IntegerDigits", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Ceiling", "[", 
                    RowBox[{
                    RowBox[{"-", "IntegerSequences`Private`n"}], ",", 
                    
                    SuperscriptBox["IntegerSequences`Private`base", 
                    "IntegerSequences`Private`length"]}], "]"}], "+", 
                    "IntegerSequences`Private`n"}], ",", 
                    "IntegerSequences`Private`base", ",", 
                    "IntegerSequences`Private`length"}], "]"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"DigitList", "[", 
                    RowBox[{"IntegerSequences`Private`n_Integer", ",", 
                    RowBox[{"IntegerSequences`Private`base_Integer", "/;", 
                    RowBox[{"IntegerSequences`Private`base", "\[LessEqual]", 
                    RowBox[{"-", "2"}]}]}], ",", 
                    RowBox[{"IntegerSequences`Private`length", ":", 
                    RowBox[{
                    RowBox[{"_Integer", "?", "NonNegative"}], "|", 
                    "Automatic"}], ":", "Automatic"}]}], "]"}], ":=", 
                    RowBox[{"PadRight", "[", 
                    RowBox[{
                    RowBox[{"Mod", "[", 
                    RowBox[{
                    RowBox[{"Most", "[", 
                    RowBox[{"NestWhileList", "[", 
                    RowBox[{
                    RowBox[{
                    FractionBox[
                    RowBox[{"#1", "-", 
                    RowBox[{"Mod", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"-", "IntegerSequences`Private`base"}]}], "]"}]}],
                     "IntegerSequences`Private`base"], "&"}], ",", 
                    "IntegerSequences`Private`n", ",", 
                    RowBox[{
                    RowBox[{"#1", "\[NotEqual]", "0"}], "&"}]}], "]"}], "]"}],
                     ",", 
                    RowBox[{"-", "IntegerSequences`Private`base"}]}], "]"}], 
                    ",", "IntegerSequences`Private`length"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"DigitList", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"{", 
                    RowBox[{"__Integer", "?", "Positive"}], "}"}]}], "]"}], ":=", 
                    RowBox[{"{", "}"}]}]},
                    {
                    RowBox[{
                    RowBox[{"DigitList", "[", 
                    RowBox[{"IntegerSequences`Private`n_Integer", ",", 
                    RowBox[{"IntegerSequences`Private`baselist", ":", 
                    RowBox[{"{", 
                    RowBox[{"__Integer", "?", "Positive"}], "}"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`length", ":", 
                    RowBox[{
                    RowBox[{"_Integer", "?", "NonNegative"}], "|", 
                    "Automatic"}], ":", "Automatic"}]}], "]"}], ":=", 
                    RowBox[{
                    RowBox[{"PadRight", "[", 
                    RowBox[{
                    RowBox[{"Reverse", "[", 
                    RowBox[{"IntegerDigits", "[", 
                    RowBox[{"IntegerSequences`Private`n", ",", 
                    RowBox[{"MixedRadix", "[", 
                    RowBox[{
                    "Reverse", "[", "IntegerSequences`Private`baselist", 
                    "]"}], "]"}]}], "]"}], "]"}], ",", 
                    "IntegerSequences`Private`length"}], "]"}], "/;", 
                    RowBox[{
                    "$VersionNumber", "\[GreaterEqual]", "10.2`"}]}]}]},
                    {
                    RowBox[{
                    RowBox[{"DigitList", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`n_Integer", "?", 
                    "NonNegative"}], ",", 
                    RowBox[{"IntegerSequences`Private`numerationsystem", ":", 
                    
                    RowBox[{"\<\"Fibonacci\"\>", "|", "\<\"Tribonacci\"\>", 
                    "|", 
                    RowBox[{
                    "_", "?", 
                    "IntegerSequences`Private`LinearNumerationSystemQ"}]}]}], 
                    ",", 
                    RowBox[{"IntegerSequences`Private`length", ":", 
                    RowBox[{
                    RowBox[{"_Integer", "?", "NonNegative"}], "|", 
                    "Automatic"}], ":", "Automatic"}]}], "]"}], ":=", 
                    RowBox[{"PadRight", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`GreedyPartitionDigitList", "[", 
                    RowBox[{"IntegerSequences`Private`n", ",", 
                    RowBox[{
                    "IntegerSequences`Private`NumerationSystemBasisFunction", 
                    "[", "IntegerSequences`Private`numerationsystem", "]"}]}],
                     "]"}], ",", "IntegerSequences`Private`length"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"DigitList", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`n_Integer", "?", 
                    "NonNegative"}], ",", "\<\"Factorial\"\>", ",", 
                    RowBox[{"IntegerSequences`Private`length", ":", 
                    RowBox[{
                    RowBox[{"_Integer", "?", "NonNegative"}], "|", 
                    "Automatic"}], ":", "Automatic"}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`a", "=", "2"}], ",", 
                    RowBox[{"IntegerSequences`Private`b", "=", "1"}]}], "}"}],
                     ",", 
                    RowBox[{"PadRight", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Mod", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"IntegerSequences`Private`a", "++"}]}], "]"}], 
                    "&"}], ")"}], "/@", 
                    RowBox[{"Most", "[", 
                    RowBox[{"NestWhileList", "[", 
                    RowBox[{
                    RowBox[{
                    FractionBox[
                    RowBox[{"#1", "-", 
                    RowBox[{"Mod", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"++", "IntegerSequences`Private`b"}]}], "]"}]}], 
                    "IntegerSequences`Private`b"], "&"}], ",", 
                    "IntegerSequences`Private`n", ",", 
                    RowBox[{
                    RowBox[{"#1", "\[NotEqual]", "0"}], "&"}]}], "]"}], 
                    "]"}]}], ",", "IntegerSequences`Private`length"}], 
                    "]"}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "DigitList", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_.", ",", "_."}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`DigitList] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Optional[
                    Blank[]], 
                    Optional[
                    Blank[]]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`DigitList\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"DigitList\\\", \\\"[\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives a list of the digits in \
the standard decimal representation of \\!\\(\\*StyleBox[\\\"n\\\", \
\\\"TI\\\"]\\), where successive digits increase in \
significance.\\n\\!\\(\\*RowBox[List[\\\"DigitList\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"n\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"b\\\", \
\\\"TI\\\"]]], \\\"]\\\"]]\\) gives the standard \
base\[Hyphen]\\!\\(\\*StyleBox[\\\"b\\\", \\\"TI\\\"]\\) representation of \
\\!\\(\\*StyleBox[\\\"n\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[List[\\\"DigitList\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"n\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[SubscriptBox[StyleBox[\\\"b\\\", \
\\\"TI\\\"], StyleBox[\\\"0\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"b\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"b\\\", \\\"TI\\\"], StyleBox[\\\"m\\\", \
\\\"TI\\\"]]]], \\\"}\\\"]]]], \\\"]\\\"]]\\) uses the mixed radix with bases \
\\!\\(\\*RowBox[List[SubscriptBox[StyleBox[\\\"b\\\", \\\"TI\\\"], \
StyleBox[\\\"0\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"b\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", \
SubscriptBox[StyleBox[\\\"b\\\", \\\"TI\\\"], StyleBox[\\\"m\\\", \
\\\"TI\\\"]]]]\\).\\n\\!\\(\\*RowBox[List[\\\"DigitList\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"n\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"B\\\", \
\\\"TI\\\"]]], \\\"]\\\"]]\\) gives the canonical representation of \
\\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\) in the numeration system \
\\!\\(\\*StyleBox[\\\"B\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[List[\\\"DigitList\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"n\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"B\\\", \
\\\"TI\\\"], \\\",\\\", StyleBox[\\\"len\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) \
pads the list on the right with zeros to give a list of length \
\\!\\(\\*StyleBox[\\\"len\\\", \\\"TI\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"DigitList\", \"[\", StyleBox[\"n\", \"TI\"], \"]\"]]\
\) gives a list of the digits in the standard decimal representation of \
\!\(\*StyleBox[\"n\", \"TI\"]\), where successive digits increase in \
significance.\n\!\(\*RowBox[List[\"DigitList\", \"[\", \
RowBox[List[StyleBox[\"n\", \"TI\"], \",\", StyleBox[\"b\", \"TI\"]]], \
\"]\"]]\) gives the standard base\[Hyphen]\!\(\*StyleBox[\"b\", \"TI\"]\) \
representation of \!\(\*StyleBox[\"n\", \"TI\"]\).\n\
\!\(\*RowBox[List[\"DigitList\", \"[\", RowBox[List[StyleBox[\"n\", \"TI\"], \
\",\", RowBox[List[\"{\", RowBox[List[SubscriptBox[StyleBox[\"b\", \"TI\"], \
StyleBox[\"0\", \"TR\"]], \",\", SubscriptBox[StyleBox[\"b\", \"TI\"], \
StyleBox[\"1\", \"TR\"]], \",\", StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", \
SubscriptBox[StyleBox[\"b\", \"TI\"], StyleBox[\"m\", \"TI\"]]]], \"}\"]]]], \
\"]\"]]\) uses the mixed radix with bases \
\!\(\*RowBox[List[SubscriptBox[StyleBox[\"b\", \"TI\"], StyleBox[\"0\", \
\"TR\"]], \",\", SubscriptBox[StyleBox[\"b\", \"TI\"], StyleBox[\"1\", \
\"TR\"]], \",\", StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", \
SubscriptBox[StyleBox[\"b\", \"TI\"], StyleBox[\"m\", \"TI\"]]]]\).\n\
\!\(\*RowBox[List[\"DigitList\", \"[\", RowBox[List[StyleBox[\"n\", \"TI\"], \
\",\", StyleBox[\"B\", \"TI\"]]], \"]\"]]\) gives the canonical \
representation of \!\(\*StyleBox[\"n\", \"TI\"]\) in the numeration system \!\
\(\*StyleBox[\"B\", \"TI\"]\).\n\!\(\*RowBox[List[\"DigitList\", \"[\", \
RowBox[List[StyleBox[\"n\", \"TI\"], \",\", StyleBox[\"B\", \"TI\"], \",\", \
StyleBox[\"len\", \"TI\"]]], \"]\"]]\) pads the list on the right with zeros \
to give a list of length \!\(\*StyleBox[\"len\", \"TI\"]\).", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`DigitList, {Condition[
         IntegerSequences`DigitList[0, 
          Optional[
           Pattern[IntegerSequences`Private`base, 
            Blank[Integer]], 10]], IntegerSequences`Private`base >= 2] -> {}, 
       Condition[
         IntegerSequences`DigitList[
          PatternTest[
           Pattern[IntegerSequences`Private`n, 
            Blank[Integer]], Positive], 
          Optional[
           Pattern[IntegerSequences`Private`base, 
            Blank[Integer]], 10]], IntegerSequences`Private`base >= 2] :> 
       Reverse[
         IntegerDigits[
         IntegerSequences`Private`n, IntegerSequences`Private`base]], 
       IntegerSequences`DigitList[
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[Integer]], NonNegative], 
         Condition[
          Pattern[IntegerSequences`Private`base, 
           Blank[Integer]], IntegerSequences`Private`base >= 2], 
         PatternTest[
          Pattern[IntegerSequences`Private`length, 
           Blank[Integer]], NonNegative]] :> Reverse[
         IntegerDigits[
         IntegerSequences`Private`n, IntegerSequences`Private`base, 
          IntegerSequences`Private`length]], IntegerSequences`DigitList[
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[Integer]], Negative], 
         Condition[
          Pattern[IntegerSequences`Private`base, 
           Blank[Integer]], IntegerSequences`Private`base >= 2], 
         PatternTest[
          Pattern[IntegerSequences`Private`length, 
           Blank[Integer]], NonNegative]] :> Reverse[
         IntegerDigits[
         Ceiling[-IntegerSequences`Private`n, IntegerSequences`Private`base^
            IntegerSequences`Private`length] + IntegerSequences`Private`n, 
          IntegerSequences`Private`base, IntegerSequences`Private`length]], 
       IntegerSequences`DigitList[
         Pattern[IntegerSequences`Private`n, 
          Blank[Integer]], 
         Condition[
          Pattern[IntegerSequences`Private`base, 
           Blank[Integer]], IntegerSequences`Private`base <= -2], 
         Optional[
          Pattern[IntegerSequences`Private`length, 
           Alternatives[
            PatternTest[
             Blank[Integer], NonNegative], Automatic]], Automatic]] :> 
       PadRight[
         Mod[
          Most[
           
           NestWhileList[(# - Mod[#, -IntegerSequences`Private`base])/
            IntegerSequences`Private`base& , IntegerSequences`Private`n, # != 
            0& ]], -IntegerSequences`Private`base], 
         IntegerSequences`Private`length], IntegerSequences`DigitList[0, {
          PatternTest[
           BlankSequence[Integer], Positive]}] :> {}, 
       IntegerSequences`DigitList[
         Pattern[IntegerSequences`Private`n, 
          Blank[Integer]], 
         Pattern[IntegerSequences`Private`baselist, {
           PatternTest[
            BlankSequence[Integer], Positive]}], 
         Optional[
          Pattern[IntegerSequences`Private`length, 
           Alternatives[
            PatternTest[
             Blank[Integer], NonNegative], Automatic]], Automatic]] :> 
       Condition[
         PadRight[
          Reverse[
           IntegerDigits[IntegerSequences`Private`n, 
            MixedRadix[
             Reverse[IntegerSequences`Private`baselist]]]], 
          IntegerSequences`Private`length], $VersionNumber >= 10.2], 
       IntegerSequences`DigitList[
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[Integer]], NonNegative], 
         Pattern[IntegerSequences`Private`numerationsystem, 
          Alternatives["Fibonacci", "Tribonacci", 
           PatternTest[
            Blank[], IntegerSequences`Private`LinearNumerationSystemQ]]], 
         Optional[
          Pattern[IntegerSequences`Private`length, 
           Alternatives[
            PatternTest[
             Blank[Integer], NonNegative], Automatic]], Automatic]] :> 
       PadRight[
         IntegerSequences`Private`GreedyPartitionDigitList[
         IntegerSequences`Private`n, 
          IntegerSequences`Private`NumerationSystemBasisFunction[
          IntegerSequences`Private`numerationsystem]], 
         IntegerSequences`Private`length], IntegerSequences`DigitList[
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[Integer]], NonNegative], "Factorial", 
         Optional[
          Pattern[IntegerSequences`Private`length, 
           Alternatives[
            PatternTest[
             Blank[Integer], NonNegative], Automatic]], Automatic]] :> 
       Module[{IntegerSequences`Private`a = 2, IntegerSequences`Private`b = 
          1}, 
         PadRight[
          Map[Mod[#, 
            Increment[IntegerSequences`Private`a]]& , 
           Most[
            NestWhileList[(# - Mod[#, 
               PreIncrement[IntegerSequences`Private`b]])/
             IntegerSequences`Private`b& , IntegerSequences`Private`n, # != 
             0& ]]], IntegerSequences`Private`length]]}], "SubValues" -> None,
     "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`DigitList, {
      SyntaxInformation[IntegerSequences`DigitList] -> {"ArgumentsPattern" -> {
           Blank[], 
           Optional[
            Blank[]], 
           Optional[
            Blank[]]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`DigitList"], False]]], "Output",ExpressionUUID->\
"d42f7ca2-a540-4290-9c9c-8e1473aad9d0"]
}, Open  ]],

Cell[TextData[{
 StyleBox["DigitList", "Input"],
 " extends functionality of ",
 StyleBox["IntegerDigits", "Input"],
 " to negative integer bases and some other numeration systems."
}], "Text",ExpressionUUID->"251beddc-2192-44db-918a-794782fb4a82"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DigitList", "[", 
  RowBox[{"2179", ",", 
   RowBox[{"-", "3"}]}], "]"}]], "Input",ExpressionUUID->"5735fa84-ccee-47fd-\
92ff-5b66f4640d1c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "0", ",", "2", ",", "1", ",", "0", ",", "0", ",", "0", ",", "2", 
   ",", "1"}], "}"}]], "Output",ExpressionUUID->"7822341f-692b-425d-a4ec-\
db9afa47b865"]
}, Open  ]],

Cell[TextData[{
 "Use ",
 StyleBox["FromDigitList", "Input"],
 " to reconstruct the integer:"
}], "Text",ExpressionUUID->"44bbb765-2ff3-4b1f-bd8f-5a0266297b0c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromDigitList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "0", ",", "2", ",", "1", ",", "0", ",", "0", ",", "0", ",", "2",
      ",", "1"}], "}"}], ",", 
   RowBox[{"-", "3"}]}], "]"}]], "Input",ExpressionUUID->"b443ef97-9897-4299-\
9bcb-73c81d333cea"],

Cell[BoxData["2179"], "Output",ExpressionUUID->"d659af08-4b9c-466c-aa2b-9d772e78764a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DigitList", "[", 
  RowBox[{"2179", ",", "\"\<Factorial\>\""}], "]"}]], "Input",ExpressionUUID->\
"cb5c5dfa-ee23-4da3-acec-681ed57d44db"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "0", ",", "3", ",", "0", ",", "0", ",", "3"}], 
  "}"}]], "Output",ExpressionUUID->"3fb1dc3d-975c-4d94-97a8-44c3a1939fa6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromDigitList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "3", ",", "0", ",", "0", ",", "3"}], "}"}], 
   ",", "\"\<Factorial\>\""}], "]"}]], "Input",ExpressionUUID->"31bcd606-498e-\
4f62-91f2-d79364b7b2ad"],

Cell[BoxData["2179"], "Output",ExpressionUUID->"fe2d8f7c-6658-40b9-96f5-677444020180"]
}, Open  ]],

Cell[TextData[{
 "Unlike ",
 StyleBox["IntegerDigits", "Input"],
 ", ",
 StyleBox["DigitList", "Input"],
 " considers 0 to have length 0:"
}], "Text",ExpressionUUID->"7e32c66e-c5f3-4346-ba3f-7b77d7b5d2ef"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IntegerDigits", "[", 
  RowBox[{"0", ",", "2"}], "]"}]], "Input",ExpressionUUID->"319c85b5-6da0-\
41e7-b85f-ab94ae9bf647"],

Cell[BoxData[
 RowBox[{"{", "0", "}"}]], "Output",ExpressionUUID->"03ec8848-cd02-4048-b166-4a264d6340e1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DigitList", "[", 
  RowBox[{"0", ",", "2"}], "]"}]], "Input",ExpressionUUID->"5a370115-41c6-\
41ba-a334-0ce04a8940af"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",ExpressionUUID->"9bf77f6a-2fca-4ab1-9970-5ea3f2f29443"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["DigitsCount", "Input"],
 StyleBox[" (a generalization of ", "Text",
  FontWeight->"Plain"],
 StyleBox["DigitCount", "Input"],
 StyleBox[")", "Text",
  FontWeight->"Plain"]
}], "Subsubsection",ExpressionUUID->"d5168dd9-d6bf-44bd-ae64-5aa4b181e641"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "DigitsCount"}]], "Input",ExpressionUUID->"d8264fb4-e886-4079-8be1-305de71e5908"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"DigitsCount\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"n\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"b\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"d\\\", \
\\\"TI\\\"]]], \\\"]\\\"]]\\) gives the number of \
\\!\\(\\*StyleBox[\\\"d\\\", \\\"TI\\\"]\\) digits in the standard base\
\[Hyphen]\\!\\(\\*StyleBox[\\\"b\\\", \\\"TI\\\"]\\) representation of \\!\\(\
\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[List[\\\"DigitsCount\
\\\", \\\"[\\\", RowBox[List[StyleBox[\\\"n\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"b\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"digitlist\\\", \
\\\"TI\\\"]]], \\\"]\\\"]]\\) gives the number of appearances of a block of \
digits in the standard base\[Hyphen]\\!\\(\\*StyleBox[\\\"b\\\", \
\\\"TI\\\"]\\) representation of \\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\), \
where successive digits increase in significance.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"DigitsCount", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`n_Integer", "?", 
                    "NonNegative"}], ",", 
                    RowBox[{"IntegerSequences`Private`base_Integer", "/;", 
                    RowBox[{
                    "IntegerSequences`Private`base", "\[GreaterEqual]", 
                    "2"}]}], ",", "IntegerSequences`Private`digit_Integer", 
                    ",", 
                    RowBox[{"IntegerSequences`Private`options", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"DigitsCount", "[", 
                    RowBox[{
                    "IntegerSequences`Private`n", ",", 
                    "IntegerSequences`Private`base", ",", 
                    RowBox[{"{", "IntegerSequences`Private`digit", "}"}], ",",
                     "IntegerSequences`Private`options"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"DigitsCount", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`n_Integer", "?", 
                    "NonNegative"}], ",", 
                    RowBox[{"IntegerSequences`Private`base_Integer", "/;", 
                    RowBox[{
                    "IntegerSequences`Private`base", "\[GreaterEqual]", 
                    "2"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`digits", ":", 
                    RowBox[{"{", "__Integer", "}"}]}], ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`digitlist", "=", 
                    RowBox[{"DigitList", "[", 
                    RowBox[{
                    "IntegerSequences`Private`n", ",", 
                    "IntegerSequences`Private`base"}], "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"TrueQ", "[", 
                    RowBox[{"OptionValue", "[", "LeadingZeros", "]"}], "]"}], 
                    ",", 
                    RowBox[{"IntegerSequences`Private`digitlist", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{"IntegerSequences`Private`digitlist", ",", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`digits", "]"}], 
                    "-", "1"}]}], "]"}]}], "]"}]}]}], "]"}], ";", 
                    RowBox[{"SequenceCount", "[", 
                    RowBox[{
                    "IntegerSequences`Private`digitlist", ",", 
                    "IntegerSequences`Private`digits", ",", 
                    RowBox[{"Overlaps", "\[Rule]", "True"}]}], "]"}]}]}], 
                    "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "DigitsCount", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_", ",", "_", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`DigitsCount] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Blank[], 
                    Blank[], 
                    OptionsPattern[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"LeadingZeros", "\[Rule]", "False"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`DigitsCount\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"DigitsCount\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"n\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"b\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"d\\\", \
\\\"TI\\\"]]], \\\"]\\\"]]\\) gives the number of \
\\!\\(\\*StyleBox[\\\"d\\\", \\\"TI\\\"]\\) digits in the standard base\
\[Hyphen]\\!\\(\\*StyleBox[\\\"b\\\", \\\"TI\\\"]\\) representation of \\!\\(\
\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[List[\\\"DigitsCount\
\\\", \\\"[\\\", RowBox[List[StyleBox[\\\"n\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"b\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"digitlist\\\", \
\\\"TI\\\"]]], \\\"]\\\"]]\\) gives the number of appearances of a block of \
digits in the standard base\[Hyphen]\\!\\(\\*StyleBox[\\\"b\\\", \
\\\"TI\\\"]\\) representation of \\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\), \
where successive digits increase in significance.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"DigitsCount\", \"[\", RowBox[List[StyleBox[\"n\", \
\"TI\"], \",\", StyleBox[\"b\", \"TI\"], \",\", StyleBox[\"d\", \"TI\"]]], \
\"]\"]]\) gives the number of \!\(\*StyleBox[\"d\", \"TI\"]\) digits in the \
standard base\[Hyphen]\!\(\*StyleBox[\"b\", \"TI\"]\) representation of \
\!\(\*StyleBox[\"n\", \"TI\"]\).\n\!\(\*RowBox[List[\"DigitsCount\", \"[\", \
RowBox[List[StyleBox[\"n\", \"TI\"], \",\", StyleBox[\"b\", \"TI\"], \",\", \
StyleBox[\"digitlist\", \"TI\"]]], \"]\"]]\) gives the number of appearances \
of a block of digits in the standard base\[Hyphen]\!\(\*StyleBox[\"b\", \
\"TI\"]\) representation of \!\(\*StyleBox[\"n\", \"TI\"]\), where successive \
digits increase in significance.", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`DigitsCount, {IntegerSequences`DigitsCount[
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[Integer]], NonNegative], 
         Condition[
          Pattern[IntegerSequences`Private`base, 
           Blank[Integer]], IntegerSequences`Private`base >= 2], 
         Pattern[IntegerSequences`Private`digit, 
          Blank[Integer]], 
         Pattern[IntegerSequences`Private`options, 
          OptionsPattern[]]] :> 
       IntegerSequences`DigitsCount[
        IntegerSequences`Private`n, IntegerSequences`Private`base, {
         IntegerSequences`Private`digit}, IntegerSequences`Private`options], 
       IntegerSequences`DigitsCount[
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[Integer]], NonNegative], 
         Condition[
          Pattern[IntegerSequences`Private`base, 
           Blank[Integer]], IntegerSequences`Private`base >= 2], 
         Pattern[IntegerSequences`Private`digits, {
           BlankSequence[Integer]}], 
         OptionsPattern[]] :> 
       Module[{IntegerSequences`Private`digitlist = 
          IntegerSequences`DigitList[
           IntegerSequences`Private`n, IntegerSequences`Private`base]}, If[
           TrueQ[
            OptionValue[IntegerSequences`LeadingZeros]], 
           IntegerSequences`Private`digitlist = 
           Join[IntegerSequences`Private`digitlist, 
             ConstantArray[0, Length[IntegerSequences`Private`digits] - 1]]]; 
         SequenceCount[
          IntegerSequences`Private`digitlist, IntegerSequences`Private`digits,
            Overlaps -> True]]}], "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`DigitsCount, {
      SyntaxInformation[IntegerSequences`DigitsCount] -> {"ArgumentsPattern" -> {
           Blank[], 
           Blank[], 
           Blank[], 
           OptionsPattern[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {IntegerSequences`LeadingZeros -> False}, 
    "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`DigitsCount"], False]]], "Output",ExpressionUUID->\
"d1afab34-abc1-42c8-8dce-42675578c27a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DigitsCount", "[", 
  RowBox[{"1111729111", ",", "10", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}]}], "]"}]], "Input",ExpressionUUID->\
"ac1fdb0c-c671-417d-8ca0-6fe224a34b5d"],

Cell[BoxData["5"], "Output",ExpressionUUID->"b86c374c-7aa7-4de6-bdf6-99914414449e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DigitsCount", "[", 
  RowBox[{"1111729111", ",", "10", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1"}], "}"}]}], "]"}]], "Input",ExpressionUUID\
->"4d91a446-cca5-43e5-9b27-7928a04d0a14"],

Cell[BoxData["3"], "Output",ExpressionUUID->"3e4a123c-f164-4db9-bf6a-250446921fc4"]
}, Open  ]],

Cell[TextData[{
 StyleBox["DigitsCount", "Input"],
 " does not pad the representation with zeros, even if the digit list ends \
with zeros:"
}], "Text",ExpressionUUID->"942c8a48-37f0-4a4e-8a4a-e99e2927555c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DigitsCount", "[", 
  RowBox[{
   RowBox[{"FromDigits", "[", 
    RowBox[{"\"\<101\>\"", ",", "2"}], "]"}], ",", "2", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}]}], "]"}]], "Input",ExpressionUUID->\
"99a717c4-f1d3-4134-aa9c-3e54a25b47ad"],

Cell[BoxData["1"], "Output",ExpressionUUID->"39e305b7-bd9b-400b-82e0-51595da9536b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DigitsCount", "[", 
  RowBox[{
   RowBox[{"FromDigits", "[", 
    RowBox[{"\"\<1010101\>\"", ",", "2"}], "]"}], ",", "2", ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}]}], "]"}]], "Input",ExpressionUUID\
->"3a96ba39-c82c-4e35-8efa-37d80e8979eb"],

Cell[BoxData["2"], "Output",ExpressionUUID->"013e6986-38c6-4de6-b035-233744158f88"]
}, Open  ]],

Cell[TextData[{
 "Unlike ",
 StyleBox["DigitCount", "Input"],
 ", ",
 StyleBox["DigitsCount", "Input"],
 " considers 0 to have length 0:"
}], "Text",ExpressionUUID->"f66440f6-7305-47fb-a4d4-eace9b2a5a67"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DigitCount", "[", 
  RowBox[{"0", ",", "2", ",", "0"}], "]"}]], "Input",ExpressionUUID->\
"d4d3bb87-607c-422b-bbd9-d616e9aab561"],

Cell[BoxData["1"], "Output",ExpressionUUID->"cd64df4e-79a3-4e7c-b637-e37a70cd2ce2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DigitsCount", "[", 
  RowBox[{"0", ",", "2", ",", "0"}], "]"}]], "Input",ExpressionUUID->\
"be1cc029-9a52-4132-a2ce-b72cbde75796"],

Cell[BoxData["0"], "Output",ExpressionUUID->"6a2391fa-7592-4ee4-9f39-fd0064701387"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["ExponentialFit", "Input"]], "Subsubsection",ExpressionUUID->"32808583-4180-4299-a49d-79ecfc0d2f2a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "ExponentialFit"}]], "Input",ExpressionUUID->"36ebc6b1-a12b-4dab-8730-4d7bd7f64b90"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"ExponentialFit\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"data\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"x\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) finds a \
least\[Hyphen]squares fit of the form \
\\!\\(\\*RowBox[List[StyleBox[\\\"a\\\", \\\"TI\\\"], \\\" \\\", \
SuperscriptBox[StyleBox[\\\"b\\\", \\\"TI\\\"], StyleBox[\\\"x\\\", \
\\\"TI\\\"]]]]\\) to a list of \
data.\\n\\!\\(\\*RowBox[List[\\\"ExponentialFit\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"data\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"x\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"d\\\", \
\\\"TI\\\"]]], \\\"]\\\"]]\\) indexes terms beginning at \\!\\(\\*StyleBox[\\\
\"d\\\", \\\"TI\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"ExponentialFit", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`data", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{"Except", "[", 
                    RowBox[{"0", "|", "0.`"}], "]"}]}], "}"}], ".."}], 
                    "}"}]}], ",", "IntegerSequences`Private`variable_"}], 
                    "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "IntegerSequences`Private`x", "}"}], ",", 
                    RowBox[{
                    RowBox[{"Times", "@@", 
                    SuperscriptBox[
                    RowBox[{"Exp", "[", 
                    RowBox[{"CoefficientList", "[", 
                    RowBox[{
                    RowBox[{"Fit", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"MapAt", "[", 
                    RowBox[{"Log", ",", "2"}], "]"}], "/@", 
                    "IntegerSequences`Private`data"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "IntegerSequences`Private`x"}], "}"}], 
                    ",", "IntegerSequences`Private`x"}], "]"}], ",", 
                    "IntegerSequences`Private`x", ",", "2"}], "]"}], "]"}], 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "IntegerSequences`Private`x"}], 
                    "}"}]]}], "/.", "\[VeryThinSpace]", 
                    RowBox[{
                    "IntegerSequences`Private`x", "\[Rule]", 
                    "IntegerSequences`Private`variable"}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"ExponentialFit", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`data", ":", 
                    RowBox[{"{", 
                    RowBox[{"___", "?", "NumericQ"}], "}"}]}], ",", 
                    "IntegerSequences`Private`variable_", ",", 
                    RowBox[{"IntegerSequences`Private`offset_", ":", "1"}]}], 
                    "]"}], ":=", 
                    RowBox[{"ExponentialFit", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{"IntegerSequences`Private`offset", ",", 
                    RowBox[{"IntegerSequences`Private`offset", "+", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`data", "]"}], 
                    "-", "1"}]}], "]"}], ",", 
                    "IntegerSequences`Private`data"}], "}"}], "]"}], ",", 
                    "IntegerSequences`Private`variable"}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "ExponentialFit", "]"}],
                     "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_", ",", "_."}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`ExponentialFit] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Blank[], 
                    Optional[
                    Blank[]]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`ExponentialFit\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"ExponentialFit\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"data\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"x\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) finds a \
least\[Hyphen]squares fit of the form \
\\!\\(\\*RowBox[List[StyleBox[\\\"a\\\", \\\"TI\\\"], \\\" \\\", \
SuperscriptBox[StyleBox[\\\"b\\\", \\\"TI\\\"], StyleBox[\\\"x\\\", \
\\\"TI\\\"]]]]\\) to a list of \
data.\\n\\!\\(\\*RowBox[List[\\\"ExponentialFit\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"data\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"x\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"d\\\", \
\\\"TI\\\"]]], \\\"]\\\"]]\\) indexes terms beginning at \\!\\(\\*StyleBox[\\\
\"d\\\", \\\"TI\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"ExponentialFit\", \"[\", RowBox[List[StyleBox[\"data\
\", \"TI\"], \",\", StyleBox[\"x\", \"TI\"]]], \"]\"]]\) finds a least\
\[Hyphen]squares fit of the form \!\(\*RowBox[List[StyleBox[\"a\", \"TI\"], \
\" \", SuperscriptBox[StyleBox[\"b\", \"TI\"], StyleBox[\"x\", \"TI\"]]]]\) \
to a list of data.\n\!\(\*RowBox[List[\"ExponentialFit\", \"[\", \
RowBox[List[StyleBox[\"data\", \"TI\"], \",\", StyleBox[\"x\", \"TI\"], \
\",\", StyleBox[\"d\", \"TI\"]]], \"]\"]]\) indexes terms beginning at \
\!\(\*StyleBox[\"d\", \"TI\"]\).", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`ExponentialFit, {
      IntegerSequences`ExponentialFit[
         Pattern[IntegerSequences`Private`data, {
           Repeated[{
             Blank[], 
             Except[
              Alternatives[0, 0.]]}]}], 
         Pattern[IntegerSequences`Private`variable, 
          Blank[]]] :> Module[{IntegerSequences`Private`x}, 
         ReplaceAll[
          Apply[Times, Exp[
             CoefficientList[
              Fit[
               Map[
                MapAt[Log, 2], IntegerSequences`Private`data], {
               1, IntegerSequences`Private`x}, IntegerSequences`Private`x], 
              IntegerSequences`Private`x, 2]]^{
            1, IntegerSequences`Private`x}], IntegerSequences`Private`x -> 
          IntegerSequences`Private`variable]], IntegerSequences`ExponentialFit[
         Pattern[IntegerSequences`Private`data, {
           PatternTest[
            BlankNullSequence[], NumericQ]}], 
         Pattern[IntegerSequences`Private`variable, 
          Blank[]], 
         Optional[
          Pattern[IntegerSequences`Private`offset, 
           Blank[]], 1]] :> IntegerSequences`ExponentialFit[
         Transpose[{
           Range[
           IntegerSequences`Private`offset, IntegerSequences`Private`offset + 
            Length[IntegerSequences`Private`data] - 1], 
           IntegerSequences`Private`data}], 
         IntegerSequences`Private`variable]}], "SubValues" -> None, 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`ExponentialFit, {
      SyntaxInformation[IntegerSequences`ExponentialFit] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           Blank[], 
           Optional[
            Blank[]]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`ExponentialFit"], False]]], "Output",ExpressionUUID->\
"82a7a77c-e9e4-4c86-b54a-a798cb028c22"]
}, Open  ]],

Cell[TextData[{
 "The Catalan numbers grow like ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["4", "n"], TraditionalForm]],ExpressionUUID->
  "9d397eb9-a432-4bb1-a50f-7c5841167c27"],
 ":"
}], "Text",ExpressionUUID->"75c759c5-96f5-461f-80b7-5e11333ee9b1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExponentialFit", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"CatalanNumber", "[", "n", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", 
       SuperscriptBox["2", "9"]}], "}"}]}], "]"}], ",", "n"}], "]"}]], "Input",\
ExpressionUUID->"b2d2b48a-eed0-4f98-97b4-395487571975"],

Cell[BoxData[
 RowBox[{"0.0019180053832704139`", " ", 
  SuperscriptBox["3.9658533247280556`", "n"]}]], "Output",ExpressionUUID->\
"6e35dfb9-5c0c-4669-bdad-1d2ec08a84a2"]
}, Open  ]],

Cell["Here\[CloseCurlyQuote]s some real-number data:", "Text",ExpressionUUID->"727c4e74-0349-4e57-b31a-308f6409c928"],

Cell[BoxData[
 RowBox[{
  RowBox[{"data", "=", 
   RowBox[{"{", 
    RowBox[{
    "10.`", ",", "15.612574113277207`", ",", "24.70386518931618`", ",", 
     "39.516342548916185`", ",", "63.765170063553484`", ",", 
     "103.61351355890355`", ",", "169.2961651538645`", ",", 
     "277.823146596014`", ",", "457.48256843480885`", ",", 
     "755.3413333419933`", ",", "1249.741064295883`", ",", 
     "2071.1178815045305`", ",", "3436.6932904541945`", ",", 
     "5708.281045106325`", ",", "9488.61735284084`", ",", 
     "15781.892410001776`", ",", "26261.278682627835`", ",", 
     "43714.78003088225`", ",", "72788.27311885271`", ",", 
     "121223.85752507689`", ",", "201923.7051529616`"}], "}"}]}], 
  ";"}]], "Input",ExpressionUUID->"37e671ce-6863-4b8a-b3a3-787416e3b638"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"exp", "=", 
  RowBox[{"ExponentialFit", "[", 
   RowBox[{"data", ",", "x"}], "]"}]}]], "Input",ExpressionUUID->"44ae08a4-\
627b-4e82-8833-704d42028a5d"],

Cell[BoxData[
 RowBox[{"5.3828479007040855`", " ", 
  SuperscriptBox["1.64697188966462`", "x"]}]], "Output",ExpressionUUID->\
"d8a21884-99ac-4fda-b3ff-fa450ed1b9bf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{"data", ",", 
     RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{"exp", ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", 
       RowBox[{"Length", "[", "data", "]"}]}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]}], "]"}]], "Input",Expre\
ssionUUID->"a52810b0-f40a-4f06-9684-2d91008e7e79"],

Cell[BoxData[
 GraphicsBox[{{{}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEf7CG0igNUwGHn2dyAxZb6UD6Hw9PnAU0GWyyg
fAGHnAk2zeKHnKF8EYcp2dvFPz70h/IlHHROxp9zfh4J5cs4MDtF6FdppkL5
Cg5Stw/P1o4thPKVHBJurp25Y3qNA8wdWst/8uye1Q7lqzmY8PTf/NY2GcrX
cGh7+y3KRm8BlK/lcCrt+7ekm6ugfB2HuJJJn9x9tkH5eg4HfmWx+nccgvIN
HBTW1Vp9unQOyjd0UFz5/mrg0ptQvpGDSjDzt4iIp1C+scPR+xvjXI5+hPJN
HHjMc3bUzvgL5Zs6pNmoL5FdxuEIAIWmWGo=
       "]]}, {
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.012833333333333334`], AbsoluteThickness[1.6]}, {}}, {
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.012833333333333334`], AbsoluteThickness[
       1.6]}, {}}}, {{}, {}}}, {{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1:eJwVV3c0FY4Xtykre0XPM3o883llJO/zECqEQhmFkBVSERVSViojCUlIQjah
MspMUfFFRkMyojSsZPXr99c9n3Pu/dx7zud8zr1X2sXPyo2JgYHhGCMDw//j
L5YLAl1NGXptr38lb4gRwnwQ0WDBOYQWOfPFsT1NCLMWMfVPnC/TUiQprdcf
COHEzifLmc7ptNr52cyDr4VQVnkgLcG5kPakf7znuogw3vhme8Q6P6alZJmt
DBUKw6nT+E2k8wtaOO/oYZb3IiCtiLNcch6iraadZL0fIA73Yr390/8N0dQS
k+eNL4vj7hGXHAujYZqT4fDftWxxSLUUQJL8jiYnbF9d0C0Owata56vn39Pi
nh+pYaRIIJyXfHa+eYTGNRvwuWVRAj7ZJvPytmM0M+9mE2KiJAxaL07Enf9K
W/8cpzAWRUC+U3zxfMVX2q1PlxWLkwngWU0/5fjlK83HTfTBhRwChigVTKr7
v9FYvxtYmjUQEJA1ItVDmqFZ/XGC/yIBOWd32or2fqddZvTTmvGQBkPaylEr
oV+0jN/bajfYEnFk38PeD97ztMnjrhfE7WRh6jglyR01T/vLjbEGL1loeUse
25E1T9sgNT7qf1YW/NGRf272ztN88kRG1jJk0dJgLWW5c4EGzVmB+hFZkFQW
jzXzLNJuSh8xH/KSw08uzZX75b9px3ZyHP0UK4/wF7XSJ34v08pMz/R0LpDQ
03/+3FuBFdqNA7qhvzgVIPtZ/+1OtRWaqOPMKwWiAp6vdF7Z6LlCG/Qazu0z
V8Am5U+/7w6t0CIIpTybCxRwJ37Dq/76Vdqcz1fvk86KaDhgF6J7aZ0W7DMj
0/mJjNAf56cucjBiMlpI1V5OFdoTDaEtQoxgXX/1SYamivl3fwVYZRjxx3j0
G+MhVXi+uKAXtZMR2WH/Wa1fUcWBe5HXYwIYsd1P32J5QRWK9ld3Xn3HiNoP
l7zY3dXQ35aRmFLGBO1Y4p0bhupQzXyiXXCQBZZPu8Jq5DSwWbD1LesxFoi7
+ZaOb9fAxsuvTrucZkFCqP9uGRMNjJ3+VC6RxIJc7z9znV4aSDdjV7z2kgUB
CiEFw2UaYFuzEj+px4riNa/ZWRoVH+ynl3Vl2UC8FnTB12sbroqJ1b35wQ7F
ndtGfs1pIrX0j+n0Gjv2dB1w59yghZxdQ++ZuTjQppkQoSmlheoTt/5uJ3Hg
8pGJhnYTLXzskDS47cQB9mdcQi8ytaAeQnzh2c2B70zkt67m2ugbIg8wVW6A
oExTk1edDiQz9OapgZwYTa35+uDtTjzOWftmf5ET7fLs8Wo/d8KmoG48IoET
NxmlbTs49HCtWuftm0JOMCrP39TU0cP6m+2PfT5y4r3cQAlHph4+sKqG55pw
gRjaNR/nSUOm3xYuQQluCAtmfTeOAQgGDLJzjTyI/hZ+Qd9SHz+eR8ttf8WD
q6YTFcnO+mgw590a/I4H99i2+C2c0Ie9nZTi3yUejB+ffjKapI+UE7pqnBRe
PBRIFPTt0wdX1hldmVxefPn4ynq/owHOhZ4pVDDcBBE3IcWaM4bwHP7ZdIjE
B7PSlDLWT0ZI77/7m1GVD5wv93JzzxvhRbeNUuE2PtzbnbxTlt0Yis/rbizr
86HCKdEsQtkY36piPG458uFPTnjmeogxfK8ReN4n8SE9uLmJWcwEAXSLQ05r
fOjbMWGf5bwbZ++X/nDv4cf+K/pP9pJM8Zjy6vbMAD/ilAL7QTPFUv23vac+
8oOx3qvAxMYUgb0K+Re+8cMhpKQy4ZIp/BlznTLYBHBzlZGDZdQU7vap3d06
Ahg/Z2QamWUGC94Llbp3BVDYsdjhrLQP8kFWQfynBHFZfNrhBt0S6/Q+ha1n
BfHT53DvoIUl+rkOvtsRIYhHawNdZCdLROU40t0SBPHp2KPApVBLTHR5cNYW
CYLu7fZrW70l8mTD7jiOC+JU0DVNU10rbO150J5vI4TDbY2lO3ftB0mZVZSm
LYxKnSlpkUhr7FYLCh2iCUPQnZ49lGINL42psdNGwtD4ePBFUb41irS7yov2
C2NmTHvP+U5rqBnd2CvuKwymKqLNG0EbaB6RC1vIEcbH3/Veu/NtYJS4a+IB
lwgkJBjZR4Zs4boQWSU6IgLp/wxsok7YQUrLYYv+pAjGDzPtUou1w0AI5bL3
dxH0LY85/ciygxnDxyMNqyKgh857F7+xw3ZOLU5XMVHo+3JMKKrbg0N62rnU
ShQFlwYP6i7ao9jUnNeoVRRzNYS9homOWLwr7HWyUAwKvhq3G6Kd0Bh40Pxs
uRhK+sUUDVOcELM7nXKxVgz7hPvP9Oc6QeyH5EpSmxj4V4pjpJucoKsjd6Vi
VAyWNUIlVmtOuPBGo+SXuDismA7zkwOdwbVmMesXJ47TbHuOswW4QNomLsTH
RwI3jx9tkrjhCopzHf9KgAROfoTK0j1XGPrMFMYGS+BptbjXaLUrPCL2DedF
ScDpHG/YyIArSkoEdD9lScDNX8zxkqQbdNgz1qz7JOD+xYXxdIEbDtQWhdP0
NmOgMe6Oaac7osRfRfFvkkR2rHBSHDyh7nZURlVEEnWy6hKrNp54V7rUuFdK
El3jzDfCj3uCskvmzyUlSRyhN2W3pnvig98Z798mkijhKBTQX/TEtlaixbsL
koidfa0sWO6FMb8gsbw5SWz1ea99Z7sP6K2EIu23Uhhim09OjfQD1eTe6rv3
Uti1sGek7o4fSC8VzMLHpPBZuXJw8ZEfNnVTvrf9kkLa9XKpou9+GHlnqHaA
awtO0umL15T8ETrvUeVL3wJp+SULkTR/1MmU1919sAVHNjYvNYecgMSzrAk2
ENAyne300OUkXIhCiXcMCLjYwJclfeok8i/G7tAyJiAuTDHmduRJbDcKSPA0
JyAzo+RyS/5JWLw00Ol0IGC5X2XizY+TuNQ3cTUxmADXuPTLP8JP4fuU0rbN
lQSQw9D/oPQ0nvE/uqguL43qEuZ30fpnwKP72euRgjRU4m53/LA9Awc3biu6
sjRsD5xP9zp+Bks1zgRLqjR4NdpJaalnoOa4sd5fXxpFci+6hn+cQeZ9+8XS
w9LgSirfzJYTjBDddQ+Vm9LIhTe7p9BZaLgbmJM5iKg8eJ7fVzcUeWS3+EBO
IuyV/8xYWIdC9FfUm2c8RBQI8O8y8Q3F6tkXVgeFiCjXSy04lRWKlkRL20gi
EWeeHN/axhoGm/ojTh91iVj/j8Bg3xuGEMFzAddPEKE7yVr5+Wk4mpqqUlaG
iPjt7c8ynBABxnyOoasfiJB96DHhkx0BXHWQJIwS4cmsncRdEYEGW5Zcwyki
+l5qnTv7XwQefdtffvU3EWMvlHg4RS6iTHju5RZBGSzuez/Pkn0Rd7zUGQ3N
ZPA+8Ghey9NLOMdf4n2lUQYp0Sa0XEo0Rq7/4RhtksE7n2HDpV3RMBDalafZ
JoP4LgE3h0PR2Cj6bmS0Uwb2a2SydXg0bkputNEekoGLgJ/JxtfRqCC5Y2Je
BvslRZ9e84vBFz0pISjKwjX9Y4dLfSz2e19rmEuWxf20Vyt+8VfQUBWfqpUq
i3qnV6vNeVdAWk8IOH9LFtsinnGSG65gPeG6PHuOLHa8fZ1ImbmC/OrUa+Kl
slDfGLxAMr2KVca7h+kdsrijmbf6lPsa7qXWrF9bk8UKc14Hb1Y8freO6Cm6
y0F5qvfWiYhEqKgKSlR7yoGZYU1oMTER7qnGv+nH5WCZXmQRk52IXq+S0kOn
5NAtd1yr/2kiynjPEWIj5OAnc1hBjCEJXodEmL5kyv3z9+5TRheS8OGbWeu9
t3K4yhQomHrtOtoEnuyV3i2PfJ5erg0DN0AUm7jgbyqPqzMUY7HpGwiV4qtt
3CcP4dfnTmit3sA2hWOyh23kEWxi2H6XkIJcPYG19KPykKlk6lX1SsEFT+8S
wVB5+MXvCCIx3IRuowQfR6U8xoy3ai5qpqLC61z/981b8dSyyHh5MB1D8YM8
kYStiK1MH+CcTQfzw+3GErJbscAdtUrZeAsH/v6sMSZvxSanxj1NOrewcN0t
LUt7K0RCzxEnM25Bq97cwcpmKx5LD7LZu2WggVd69GH8P37xmoRg9kx0VLXO
nGMi4ek2Bvs7L7KwlD3gwsRGQn1iB5P7YBZI8V/fRm8gobdW/YH2lyzEePI1
JW0igfi6iMzBlg0jKceUfCkSjpSTVAz0s9EUPa/Xq0PCCfeEEzvqs/HETiaB
fJKE/sHmgZj6HBQzXKAMfSYhY+OAhN10LhgvxzHKTJKg1Di+69JKLqwFUt54
T5Pwplcyqo7rHtbkHviu/SRhMeZAkK3qPZjt7SskrJPgMDzmonX6HmZuKMgc
E1VAeJtrSRlzHpTJPQLzpgpYCTmf+pp8H8XWMgvc1QpI1RMzuvKgAK/Wj7Td
fqSA/uXIW25NBfh+P+Omcr0CyEf9jfcPFkBtWUjHrOVf/SXNr97shajI5Ai7
0qMAhRxP52TXQtROznBw/lCAq/IAtYf4AM3BtZs5SIoY2j1kElVahMHbZoZM
6Yqw7uD6LcJeBqnPF/ysbysi92v4Gw/BMriSqtPzsxTx1o79cYt0Gb5XSP0y
v68Ic1Ph0du6ZWB6/uP2rSpF7KoIiu0PKIPSbOJv6mtFnHSL8fD8VIZQo/7C
YyxkkBZisw62l4P44zBfly8ZZXFCjxNrK+G7ahLMG0BG44kW2+znlXi8QeOT
5WkyPogxbGwYqMR+Wfby/rNk6DQ39Uv9qcSlQ6UWIzFkEF1GdobpVGGy+W/8
XA4ZeZXFTS2NVShKzeIRf0vGBKZCy3ofQlN/lPMYTQn9f+uIqYq1sPBbP/1T
XwmuS/uF52m18MwQHwk2UgJHcNW0i3Utbi1aVV0xU8KiX+aZ4PBa/C1sdqiw
V4JpwNTfuLe1aBe4V7wWpISDijy51rGPYDt+bF9ymRIeqlfnLKw8RlDMTNIz
aeV/9wZh0E+6AVWWjLY8cspY/bswaqzTgFlxIQl7kjK+j0x4UPc3wKdY9+68
ijKECmqV9kY2wKUnrnKrrjJe3jjrf2K6AeabFXuv2ihjy+yLP6W1jZAvcxey
i1OGbzHr7tqKp+h9+/Hm7LwypO5Yh7FFNOHDU7nDUUvK6DFvlktKasKXAm9Z
8VVltD55kqJ0t+nffvhdRmdWwfM+Xe5rLU2QI/C+SOBTgczV/GcsHM0I9NBb
VVFRgaRDm2hXYjNE/2Q4eR9TwQ9yZYxieQscxe0UxgZVsJRDrt1DbMeVOzd3
73ivgoP23R/StrXjsWyfZ9KICkTu2sv8MWmHqKpFISZV4CG1tOOLXzt6DIzI
t+dVUGfUKH+5oR1GxynKNryqEJQ68PnL4edQe7pR/bmhKhw7hp1OFXWAyf2J
VlGpKqoNGFzWz3dCq7LkxmzFv/yM3GnzG53wZciZ1apWBSlQK7qiqBOD6TFF
rXWq6FEu1qkc7kTZa2vCxw5V1LRyG2TodOGw9k92/rF/f+EbWpv4ahcco5K+
7uBSQwfBpWzHtdd4dKj9cTbUEJ2pFOoW3A2dTXZeHvpqGPN0TPgS0426tm9i
qoZqGDF5eCw4tRsNGvzBdcZqWLd+kdJS040mbkfNt+ZqaGA+t4/pdzc6n81W
cjmqIX5rubD8mR6MKEgVBwWrwT48J98j8j+wL5+6Y1ahhnN9k8+7XvUhPZR5
daHyHz49n/VhpA8qzEkHMx+qoZvd0H99tg8HuEr5ftSqobnUTN5bpB85UlMX
ExrVkNFeY7bs1A89A0eP/zrVkKsRmLa82I/TV3apH5pUw467za/eqwzgs5Rw
s+tmdaibepmSuofgUFmfpSalDuRtkdCdGkK/sVvo6hZ1rN79Ge3GOIwX/lXa
yTLq0PqWFvtHfRgVTVZlzYrqcCh8aUFKHka4e/xtorY6DNmbjSoc3mFzCceZ
EWt1yE3cM2L7+x7WO1eUHOL/4fvtm8vaRtDzcC1/S6I6klu33Q/uG4GFCoPc
5yR1zDC66ViMjWDPFlZJrxR1lN9jLZBl+gQw8nKfua2Oo67hX731PoHcSpy5
/kAdfrdSTUIffQKj2Z7il+3qSNphnsv2eBTFDmnKOxgoMJ1h++A9OQbduzdt
RhgpiKHXxdxaGkPn1I2wSGYKUg9kHRjcMI5vgUndr9koSK49HRqmNA7FxLjT
rtwUpGxacA4KGEde6/n6q+IU9OmztW5hnECWiovZCJWC0rXpyfsKk0hmIB+P
9KSgSIi58XDhFDba6ouYe1OQp6TagGdTCC8+9Ez4OAXNsZqymgNT8LGLEcr3
p4B4v/S4M9s0DKvG618EUXCq4drv4qPTmDuWxbMpioKz/klbNYlfYfVaqCw9
hwIflU9+8aXfsCmTYa50mILxAz6hH9h/IrVJYI/dewqsH5hxbxf6CcKkfDbL
RwokaSPVqcSfUFcz23dolIL7AaJhYTt/wqop7QHTFAXaweFf/jv5E9cnKK7W
ixTo+RMOZ43+hLCqW9/yJg0oMI8f5+z4BYmnHTW7jDSQqzgr5vJkDnnPNYsn
jTVQxbkl+OzLOVC67+XE7tZAcMmn5ezhOewZvXC1y1QD6ws8icKrcwhh0Tlq
vV8Dv2YMtt/ZOY8Bk0IeNycNxGN9VrN5Hsndl90uhWjgFcep6L6BBXB93ivQ
XKKBxNFfUVZqSwhd6YmNKdOAXktmed2uJfwUsGMwr9BAzYfGbm37JfQaeswM
PNRA4HLCtuNRS7idd6n9e50G2EP43B6/X4KKV/1Z8ZcaUH0q5rIW/wcWv1TG
TkxqQEI66FcW8wqu/+V7SCBQ8Zg7RciHvA7RieSBdmkqEn16W2wN15HRKbLq
K0NFRMSrDQcd15GbJmlQL0/FrQD2tJT4dVRrKHQfUqbCqmtzEffCOgaOYSZJ
h/pPd943s81/IfXGV47Vmort1vXlGx8x0POzXt6YiqWi8fvs6mQsE/1gqe2P
Z3H/+reGfWe4xUTnaPhskn6VivaZ6lyFIia65/DKyp5EKuSWHNIKXzHRFYWV
XIpSqdiixK7nI8hML467ouJ3n4qfAWdPr+Qw0ysCzdrnW6jgSlA4X9XJQneJ
HCR0tVGxzb1jx+ePLHT+ZLeQe8+pMGlyeiAzx0I/WX5e2aaTCo7rzz8MirHS
qd+Kr9f8R0XgH86jkh6s9GpnHqeQ0X/zRq8F8XKw0d390x9ZjVHhSDXldt7M
RhcOkxcgT1Bx5nHnkVY1NnpQhl7b8BQVPHrJF9oOsdG13voq7fxFRbWtQFZR
ERv9y/hypNAcFdf1D7KlPGOjp81HfZyZp0IprOdhUj8bfZnvTlLmEhWjPRma
bQzs9EIC+VvgMhWW38uU14TY6XaqNbv2rVJxLCKiypjMTt+oZ3Bn6zoV5MnN
H+6Bnf7E9PXS379UTItm1InYsNP/BzRvGGk=
        "]]},
      Annotation[#, "Charting`Private`Tag$127051#1"]& ]}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0.5833333333333335, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0.5833333333333335, 21.}, {0, 201923.7051529616}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",ExpressionUUID->"a6d52ac8-f6cf-\
4e47-b728-76404c92b9e2"]
}, Open  ]],

Cell[TextData[{
 StyleBox["ExponentialFit", "Input"],
 " fits a least-squares line to the logarithm of the data:"
}], "Text",ExpressionUUID->"ec79ccae-c637-4de0-a5cb-16410900e76e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Show", "[", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{"Log", "[", "data", "]"}], "]"}], ",", 
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{"Log", "[", "exp", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", 
       RowBox[{"Length", "[", "data", "]"}]}], "}"}]}], "]"}]}], 
  "]"}]], "Input",ExpressionUUID->"7ca83005-3d2e-4c6d-8f8f-211355516752"],

Cell[BoxData[
 GraphicsBox[{{{}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.012833333333333334`], AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxTTMoPSmViYGAQBWIQDQEf7MVCt+7emM3kABVw+PB08Qz+P6xQPofDr8k/
624t54TyBRwuVh41epnJC+WLOAS4hs99N08AypdwuLB5qSn3BCEoX8Yhd9tC
zfNtIlC+gkP+SV0vjiYxKF/JYf36q6sONkhA+SoOpV8FT1o0SUH5ag7i325x
XGmVgfI1HCZ07l8o1S0H5Ws57HpS/O2ahwKUr+PQb7Lp+0IfRShfz6FlhXnV
xQAlKN/AYbJGG6t/qDKUb+jArscjzxmlAuUbOZQc6jD8FKcK5Rs7GJ/dveF/
shqUb+KwLuNbjmamOpRv6sB0r5QnM0/DAQDSB1O9
       "]]}, {
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.012833333333333334`], AbsoluteThickness[1.6]}, {}}, {
      {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
       0.012833333333333334`], AbsoluteThickness[
       1.6]}, {}}}, {{}, {}}}, {{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1:eJwV0vlbzAkAx/HRRqV7YsZ0maOar07la6VM349NRIe2FeohhrTpwqKekmjb
POjQoWh046k8JTq3JqqhSKLH9ihNG4qIatCEZpK1P7yf1z/w5uw54LtPhUaj
ef3ofz+qJhh0S/JcIkMWdB6dVFDyaK7rtDCWEtDrAguVCuqTz+lbYuFZSqt5
r/y+upI6JBArCoQiqly3bakxT0ndqNmSmy68Ro3WH4uSbFNSPZHFIWeETVTg
/I883TYltfvhhp4k4QPKs0QaX5Y1SxFKQ9W/hAOU1eANUuo4R7m2J44mH39P
Jb55aazzmoZdm+t6h8LkVJygixF+TgUnH/zNOfRFQVU4S2fC7VURLzs+lqg+
D+ExheXSz/NhVyBeXb5dFQ1Zd3rUCtSQymI198jUkDFx6W5xiAZM8lzkZJQm
SmSi4iFLTbBdaWZTLTqgHs1M9z/Swn7pB4k/oY+wcS3m2hwdHCutkgU/oSNj
qmVbzVI9WET7RtOPLIJGe8pF5gc9EDbzl1CrGXCvr2lxeKKPoOmk2iUvmOjO
PltifZWOz5cZoYevscDKFof9e8YAnK3JseHhRkh4e6J8V+ginDJ8dIquZwI7
S3lJq/NirG1nV6zuM8WVZMmf/aYMGLUVjS4AG7ukMH38iYE2emOivQUHw5tY
RXH9TKwIdvW2UufipE5SjrJxCSSS2hzlABdBrUXu/iksxNGvh6W08KCbyXgZ
cdAQv4Wl3Z46bwaa75qVQjcjfGl/4WIZbA7t4Olv5gxjdBiIPTgbLTCcq15Z
/NUY1aFxTyeN+ZgVdzFnu0zQWds+EadCYOjb2xDtm6aopCU4DIwQGMzKtf2Q
sRSVfrxp7fpl0NX61tdvz8azfK91KiJLLA4c0My+zAZXFqjfHWkFQem5/FZt
Dlb9Mqz5O2WNw6K0sd6jHESfnshs49ggNb+p7O4oB719zy98ktug88Ltdp4P
FzsNA5a9emaLd8Uyv0AJFyrBYseKKjvYXP7qqm7DQ6P/vaZiLEe8t8e4KJsH
NcWRQq/q5ajW6FLTUDPDiCnjTpCxPTSauQmjB83gJ1Ba7zhnj3XxpRGFI2ao
3JFr40xzQOq7o4vWbjHHeZpVRNJ+B8x4GbN8b5lDr4A2VSV1gHubLN3FzgJG
rZ0NbutXoMnqUrAo1wJaIx4Gd66vgDPSPw/N4yPru34dm02iMKh6Zu4PPsqK
urLHzpCwOFkRkDbIx/aqbbK2ZBI3J2Nq9g3xoX57xF2USkKwc4OW4AX/x49K
5aYMEn5Ow7fej/BhybDeU3GRRJKcydn4no/K5BTbA6UkXockvvlJwUd1lNc9
+V0SV34NOBLDJLAn6Rm7u4PE8lZ+tw+LAP38vtir90k0206bE0YEDt88brP1
IYlezfS+p6YEyPHKrIZ/SKh2tDuRFgTqhTq7Y4dJ7HWynycjCQQfFDX6viIx
WTbn3/EzAcYJCwOrURKxzIfV+Y4EovNcOqRjJDLlwUGeawg49kVaCz6SkFzP
u1fuSuDta0XS4ikS3iah7AQ3ArnyU88n5CQGklfFbN9AQKFfmFnwlcRUyBNL
NQ8C19hW41EKEvF9hYlDngQC7BrcNs+SWLg+YrDOm8BCF9dC/hyJnFqnlak+
BMSej79+/06Cy1NPC/Il8B+cOSOz
        "]]},
      Annotation[#, "Charting`Private`Tag$127158#1"]& ]}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 21.}, {0, 12.2156452077752}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",ExpressionUUID->"fc54b962-979d-\
4dc3-a1fa-cd75f88fce41"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", 
  RowBox[{"data", ",", "exp"}], "]"}]], "Input",ExpressionUUID->"bd6aaac0-\
e357-4a2a-98f1-b82c45c371e4"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["FactorForm", "Input"]], "Subsubsection",ExpressionUUID->"aeb6f77e-ef28-4b37-b60b-c8835eafb1ca"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "FactorForm"}]], "Input",ExpressionUUID->"0f243e45-0452-4ccc-8994-c2d6c05eded7"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"FactorForm\\\", \\\"[\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) writes integers, rationals, \
and Gaussian integers as products of their prime factors.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"FactorForm", "[", 
                    RowBox[{"IntegerSequences`Private`n", ":", 
                    RowBox[{"_Integer", "|", "_Rational", "|", 
                    RowBox[{"Complex", "[", 
                    RowBox[{
                    RowBox[{"_Integer", "|", "_Rational"}], ",", 
                    RowBox[{"_Integer", "|", "_Rational"}]}], "]"}]}]}], 
                    "]"}], ":=", 
                    RowBox[{"Interpretation", "[", 
                    RowBox[{
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{
                    "FactorInteger", "[", "IntegerSequences`Private`n", "]"}],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`p_", ",", "1"}], "}"}], 
                    "\[RuleDelayed]", "IntegerSequences`Private`p"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`p_", ",", 
                    "IntegerSequences`Private`a_"}], "}"}], "\[RuleDelayed]", 
                    
                    TemplateBox[{
                    "IntegerSequences`Private`p","IntegerSequences`Private`a"},
                    "Superscript"]}]}], "}"}], ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "{", "IntegerSequences`Private`primepower_", "}"}], 
                    "\[RuleDelayed]", "IntegerSequences`Private`primepower"}],
                     ",", 
                    RowBox[{
                    "IntegerSequences`Private`composite_", "\[RuleDelayed]", 
                    RowBox[{"Row", "[", 
                    RowBox[{
                    "IntegerSequences`Private`composite", 
                    ",", "\<\"\[Times]\"\>"}], "]"}]}]}], "}"}]}], "]"}], ",",
                     "IntegerSequences`Private`n"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    "FactorForm", "[", "IntegerSequences`Private`expr_", 
                    "]"}], ":=", 
                    RowBox[{
                    "IntegerSequences`Private`expr", "/.", "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`n", ":", 
                    RowBox[{"_Integer", "|", "_Rational", "|", 
                    RowBox[{"Complex", "[", 
                    RowBox[{
                    RowBox[{"_Integer", "|", "_Rational"}], ",", 
                    RowBox[{"_Integer", "|", "_Rational"}]}], "]"}]}]}], 
                    "\[RuleDelayed]", 
                    RowBox[{
                    "FactorForm", "[", "IntegerSequences`Private`n", 
                    "]"}]}]}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "FactorForm", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`FactorForm] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`FactorForm\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"FactorForm\\\", \\\"[\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) writes integers, rationals, \
and Gaussian integers as products of their prime factors.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"FactorForm\", \"[\", StyleBox[\"n\", \"TI\"], \
\"]\"]]\) writes integers, rationals, and Gaussian integers as products of \
their prime factors.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`FactorForm, {IntegerSequences`FactorForm[
         Pattern[IntegerSequences`Private`n, 
          Alternatives[
           Blank[Integer], 
           Blank[Rational], 
           Complex[
            Alternatives[
             Blank[Integer], 
             Blank[Rational]], 
            Alternatives[
             Blank[Integer], 
             Blank[Rational]]]]]] :> Interpretation[
         Replace[
          Replace[
           FactorInteger[IntegerSequences`Private`n], {{
              Pattern[IntegerSequences`Private`p, 
               Blank[]], 1} :> IntegerSequences`Private`p, {
              Pattern[IntegerSequences`Private`p, 
               Blank[]], 
              Pattern[IntegerSequences`Private`a, 
               Blank[]]} :> 
            Superscript[
             IntegerSequences`Private`p, IntegerSequences`Private`a]}, {1}], {{
             Pattern[IntegerSequences`Private`primepower, 
              Blank[]]} :> IntegerSequences`Private`primepower, 
           Pattern[IntegerSequences`Private`composite, 
             Blank[]] :> 
           Row[IntegerSequences`Private`composite, "\[Times]"]}], 
         IntegerSequences`Private`n], IntegerSequences`FactorForm[
         Pattern[IntegerSequences`Private`expr, 
          Blank[]]] :> 
       ReplaceAll[
        IntegerSequences`Private`expr, Pattern[IntegerSequences`Private`n, 
           Alternatives[
            Blank[Integer], 
            Blank[Rational], 
            Complex[
             Alternatives[
              Blank[Integer], 
              Blank[Rational]], 
             Alternatives[
              Blank[Integer], 
              Blank[Rational]]]]] :> 
         IntegerSequences`FactorForm[IntegerSequences`Private`n]]}], 
    "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`FactorForm, {
      SyntaxInformation[IntegerSequences`FactorForm] -> {"ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`FactorForm"], False]]], "Output",ExpressionUUID->\
"cfe9a4d6-a20c-4b55-b272-c494bea72f87"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Grid", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n", ",", 
      RowBox[{"FactorForm", "[", 
       RowBox[{"n", "!"}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "0", ",", "10"}], "}"}]}], "]"}], "]"}]], "Input",Expre\
ssionUUID->"0b08cc13-b515-4798-b778-c6b30ec8584a"],

Cell[BoxData[
 TagBox[GridBox[{
    {"0", 
     InterpretationBox["1",
      1]},
    {"1", 
     InterpretationBox["1",
      1]},
    {"2", 
     InterpretationBox["2",
      2]},
    {"3", 
     InterpretationBox[
      TemplateBox[{"\[Times]","\"\[Times]\"","2","3"},
       "RowWithSeparators"],
      6]},
    {"4", 
     InterpretationBox[
      TemplateBox[{
       "\[Times]","\"\[Times]\"",
        TemplateBox[{"2", "3"}, "Superscript", SyntaxForm -> SuperscriptBox],
        "3"},
       "RowWithSeparators"],
      24]},
    {"5", 
     InterpretationBox[
      TemplateBox[{
       "\[Times]","\"\[Times]\"",
        TemplateBox[{"2", "3"}, "Superscript", SyntaxForm -> SuperscriptBox],
        "3","5"},
       "RowWithSeparators"],
      120]},
    {"6", 
     InterpretationBox[
      TemplateBox[{
       "\[Times]","\"\[Times]\"",
        TemplateBox[{"2", "4"}, "Superscript", SyntaxForm -> SuperscriptBox],
        TemplateBox[{"3", "2"}, "Superscript", SyntaxForm -> SuperscriptBox],
        "5"},
       "RowWithSeparators"],
      720]},
    {"7", 
     InterpretationBox[
      TemplateBox[{
       "\[Times]","\"\[Times]\"",
        TemplateBox[{"2", "4"}, "Superscript", SyntaxForm -> SuperscriptBox],
        TemplateBox[{"3", "2"}, "Superscript", SyntaxForm -> SuperscriptBox],
        "5","7"},
       "RowWithSeparators"],
      5040]},
    {"8", 
     InterpretationBox[
      TemplateBox[{
       "\[Times]","\"\[Times]\"",
        TemplateBox[{"2", "7"}, "Superscript", SyntaxForm -> SuperscriptBox],
        TemplateBox[{"3", "2"}, "Superscript", SyntaxForm -> SuperscriptBox],
        "5","7"},
       "RowWithSeparators"],
      40320]},
    {"9", 
     InterpretationBox[
      TemplateBox[{
       "\[Times]","\"\[Times]\"",
        TemplateBox[{"2", "7"}, "Superscript", SyntaxForm -> SuperscriptBox],
        TemplateBox[{"3", "4"}, "Superscript", SyntaxForm -> SuperscriptBox],
        "5","7"},
       "RowWithSeparators"],
      362880]},
    {"10", 
     InterpretationBox[
      TemplateBox[{
       "\[Times]","\"\[Times]\"",
        TemplateBox[{"2", "8"}, "Superscript", SyntaxForm -> SuperscriptBox],
        TemplateBox[{"3", "4"}, "Superscript", SyntaxForm -> SuperscriptBox],
        TemplateBox[{"5", "2"}, "Superscript", SyntaxForm -> SuperscriptBox],
        "7"},
       "RowWithSeparators"],
      3628800]}
   },
   AutoDelete->False,
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Output",ExpressionUUID->"b4421bff-19eb-42d4-acf5-5ec765b6c2b5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FactorForm", "[", 
  RowBox[{"Zeta", "[", "8", "]"}], "]"}]], "Input",ExpressionUUID->"fdad8d0a-\
cad4-4ba7-b8a2-ef1c5bb9f462"],

Cell[BoxData[
 RowBox[{
  SuperscriptBox["\[Pi]", 
   InterpretationBox[
    TemplateBox[{"2","3"},
     "Superscript"],
    8]], " ", 
  InterpretationBox[
   TemplateBox[{"\[Times]","\"\[Times]\"",TemplateBox[{"2", 
       RowBox[{"-", "1"}]}, "Superscript", SyntaxForm -> SuperscriptBox],
     TemplateBox[{"3", 
       RowBox[{"-", "3"}]}, "Superscript", SyntaxForm -> SuperscriptBox],
     TemplateBox[{"5", 
       RowBox[{"-", "2"}]}, "Superscript", SyntaxForm -> SuperscriptBox],
     TemplateBox[{"7", 
       RowBox[{"-", "1"}]}, "Superscript", SyntaxForm -> SuperscriptBox]},
    "RowWithSeparators"],
   Rational[1, 9450]]}]], "Output",ExpressionUUID->"6695e6c4-8916-4396-8c89-\
fd078a34191a"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["FactorGrid", "Input"]], "Subsubsection",ExpressionUUID->"9924d723-03ec-4c27-881a-8b1c0be622fe"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "FactorGrid"}]], "Input",ExpressionUUID->"92632273-90c4-4673-9d70-f6ae37e1f07d"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"FactorGrid\\\", \\\"[\\\", \
StyleBox[\\\"list\\\", \\\"TI\\\"], \\\"]\\\"]]\\) displays a grid containing \
the order to which all primes dividing at least one of the Gaussian rational \
numbers in \\!\\(\\*StyleBox[\\\"list\\\", \\\"TI\\\"]\\) divide \
each.\\n\\!\\(\\*RowBox[List[\\\"FactorGrid\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"list\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"zero\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) replaces each 0 in the \
table with \\!\\(\\*StyleBox[\\\"zero\\\", \\\"TI\\\"]\\) rather than with \
Null.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"FactorGrid", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`list", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_Integer", "|", "_Rational"}], ")"}], "..."}], 
                    "}"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`zero_", ":", "Null"}]}],
                     "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`factors", "=", 
                    RowBox[{"Complement", "[", 
                    RowBox[{
                    RowBox[{"First", "/@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{
                    "FactorInteger", "[", "IntegerSequences`Private`list", 
                    "]"}], ",", "1"}], "]"}]}], ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1"}], "]"}]}], "]"}]}], "}"}], 
                    ",", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"Prepend", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Prepend", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`RationalExponent", "[", 
                    RowBox[{"#1", ",", "IntegerSequences`Private`factors"}], 
                    "]"}], "&"}], ")"}], "/@", 
                    "IntegerSequences`Private`list"}], "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{
                    "0", "\[Rule]", "IntegerSequences`Private`zero"}]}], ",", 
                    RowBox[{"Replace", "[", 
                    RowBox[{"IntegerSequences`Private`list", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`n_Integer", " ", 
                    "IntegerSequences`Private`d_."}], "|", 
                    RowBox[{"Rational", "[", 
                    RowBox[{
                    "IntegerSequences`Private`n_", ",", 
                    "IntegerSequences`Private`d_"}], "]"}]}], 
                    "\[RuleDelayed]", 
                    RowBox[{"Divide", "@@", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`x", ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "IntegerLength", "[", "IntegerSequences`Private`x", "]"}],
                     "\[LessEqual]", "18"}], ",", 
                    "IntegerSequences`Private`x", ",", 
                    RowBox[{"Interpretation", "[", 
                    RowBox[{
                    RowBox[{"Row", "[", 
                    RowBox[{"ReplacePart", "[", 
                    RowBox[{
                    RowBox[{"Riffle", "[", 
                    RowBox[{
                    RowBox[{"StringJoin", "/@", 
                    RowBox[{"MapAt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#1", "/.", "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Longest", "[", 
                    RowBox[{
                    RowBox[{"(", "0", ")"}], "..."}], "]"}], ",", 
                    "IntegerSequences`Private`a__"}], "}"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`x", "\[GreaterEqual]", "0"}], 
                    ",", "\<\"\"\>", ",", "\<\"-\"\>"}], "]"}], ",", 
                    "IntegerSequences`Private`a"}], "}"}]}]}], "&"}], ",", 
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"Partition", "[", 
                    RowBox[{
                    RowBox[{"PadLeft", "[", 
                    RowBox[{
                    RowBox[{"ToString", "/@", 
                    RowBox[{
                    "IntegerDigits", "[", "IntegerSequences`Private`x", 
                    "]"}]}], ",", 
                    RowBox[{"Ceiling", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerLength", "[", "IntegerSequences`Private`x", "]"}],
                     ",", "3"}], "]"}]}], "]"}], ",", "3"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"4", ",", 
                    RowBox[{"-", "4"}]}], "}"}]}], "]"}], ",", "1"}], "]"}]}],
                     ",", 
                    RowBox[{"Spacer", "[", "2", "]"}]}], "]"}], ",", 
                    RowBox[{"6", "\[Rule]", "\<\"\[CenterEllipsis]\"\>"}]}], 
                    "]"}], "]"}], ",", "IntegerSequences`Private`x"}], 
                    "]"}]}], "]"}]}], "]"}], "/@", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`n", ",", 
                    "IntegerSequences`Private`d"}], "}"}]}]}]}], ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"Prepend", "[", 
                    RowBox[{"IntegerSequences`Private`factors", ",", "Null"}],
                     "]"}]}], "]"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Right"}], ",", 
                    RowBox[{"Dividers", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"False", ",", "True"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "True"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"ItemSize", "\[Rule]", "Full"}]}], "]"}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"FactorGrid", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`list", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_Integer", "|", "_Rational", "|", 
                    RowBox[{"Complex", "[", 
                    RowBox[{
                    RowBox[{"_Integer", "|", "_Rational"}], ",", 
                    RowBox[{"_Integer", "|", "_Rational"}]}], "]"}]}], ")"}], 
                    "..."}], "}"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`zero_", ":", "Null"}]}],
                     "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`factorlist", ",", 
                    "IntegerSequences`Private`factors"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`factorlist", "=", 
                    RowBox[{
                    RowBox[{"FactorInteger", "[", 
                    RowBox[{"IntegerSequences`Private`list", ",", 
                    RowBox[{"GaussianIntegers", "\[Rule]", "True"}]}], "]"}], 
                    "/.", "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"0", "|", "1", "|", "\[ImaginaryI]", "|", 
                    RowBox[{"-", "1"}], "|", 
                    RowBox[{"-", "\[ImaginaryI]"}]}], ",", "_"}], "}"}], 
                    "\[Rule]", 
                    RowBox[{"Sequence", "[", "]"}]}]}]}], ";", 
                    RowBox[{"IntegerSequences`Private`factors", "=", 
                    RowBox[{"SortBy", "[", 
                    RowBox[{
                    RowBox[{"Union", "@@", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    "First", ",", "IntegerSequences`Private`factorlist", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], ",", "Abs"}], "]"}]}],
                     ";", 
                    RowBox[{"Grid", "[", 
                    RowBox[{
                    RowBox[{"Prepend", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Prepend", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Replace", "[", 
                    RowBox[{"IntegerSequences`Private`factors", ",", 
                    RowBox[{"Append", "[", 
                    RowBox[{
                    RowBox[{"Apply", "[", 
                    RowBox[{"Rule", ",", "#1", ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], ",", 
                    RowBox[{
                    "_", "\[Rule]", "IntegerSequences`Private`zero"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], "&"}], ")"}], "/@", 
                    "IntegerSequences`Private`factorlist"}], ",", 
                    "IntegerSequences`Private`list"}], "}"}]}], "]"}], ",", 
                    RowBox[{"Prepend", "[", 
                    RowBox[{"IntegerSequences`Private`factors", ",", "Null"}],
                     "]"}]}], "]"}], ",", 
                    RowBox[{"Alignment", "\[Rule]", "Right"}], ",", 
                    RowBox[{"Dividers", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"False", ",", "True"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"False", ",", "True"}], "}"}]}], "}"}]}], ",", 
                    RowBox[{"ItemSize", "\[Rule]", "Full"}]}], "]"}]}]}], 
                    "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "FactorGrid", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_."}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`FactorGrid] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Optional[
                    Blank[]]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`FactorGrid\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"FactorGrid\\\", \\\"[\\\", \
StyleBox[\\\"list\\\", \\\"TI\\\"], \\\"]\\\"]]\\) displays a grid containing \
the order to which all primes dividing at least one of the Gaussian rational \
numbers in \\!\\(\\*StyleBox[\\\"list\\\", \\\"TI\\\"]\\) divide \
each.\\n\\!\\(\\*RowBox[List[\\\"FactorGrid\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"list\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"zero\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) replaces each 0 in the \
table with \\!\\(\\*StyleBox[\\\"zero\\\", \\\"TI\\\"]\\) rather than with \
Null.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"FactorGrid\", \"[\", StyleBox[\"list\", \"TI\"], \"]\
\"]]\) displays a grid containing the order to which all primes dividing at \
least one of the Gaussian rational numbers in \!\(\*StyleBox[\"list\", \
\"TI\"]\) divide each.\n\!\(\*RowBox[List[\"FactorGrid\", \"[\", \
RowBox[List[StyleBox[\"list\", \"TI\"], \",\", StyleBox[\"zero\", \"TI\"]]], \
\"]\"]]\) replaces each 0 in the table with \!\(\*StyleBox[\"zero\", \
\"TI\"]\) rather than with Null.", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`FactorGrid, {IntegerSequences`FactorGrid[
         Pattern[IntegerSequences`Private`list, {
           RepeatedNull[
            Alternatives[
             Blank[Integer], 
             Blank[Rational]]]}], 
         Optional[
          Pattern[IntegerSequences`Private`zero, 
           Blank[]], Null]] :> 
       Module[{IntegerSequences`Private`factors = Complement[
            Map[First, 
             Flatten[
              FactorInteger[IntegerSequences`Private`list], 1]], 
            Range[-1, 1]]}, 
         Grid[
          Prepend[
           MapThread[Prepend, {
             ReplaceAll[
              Map[
              IntegerSequences`Private`RationalExponent[#, 
                IntegerSequences`Private`factors]& , 
               IntegerSequences`Private`list], 0 -> 
              IntegerSequences`Private`zero], 
             Replace[
             IntegerSequences`Private`list, 
              Alternatives[Pattern[IntegerSequences`Private`n, 
                  Blank[Integer]] Optional[
                  Pattern[IntegerSequences`Private`d, 
                   Blank[]]], 
                Rational[
                 Pattern[IntegerSequences`Private`n, 
                  Blank[]], 
                 Pattern[IntegerSequences`Private`d, 
                  Blank[]]]] :> Apply[Divide, 
                Map[
                 Function[IntegerSequences`Private`x, 
                  If[
                  IntegerLength[IntegerSequences`Private`x] <= 18, 
                   IntegerSequences`Private`x, 
                   Interpretation[
                    Row[
                    ReplacePart[
                    Riffle[
                    Map[StringJoin, 
                    MapAt[ReplaceAll[#, {
                    Longest[
                    RepeatedNull[0]], 
                    Pattern[IntegerSequences`Private`a, 
                    BlankSequence[]]} :> {
                    If[IntegerSequences`Private`x >= 0, "", "-"], 
                    IntegerSequences`Private`a}]& , 
                    Drop[
                    Partition[
                    PadLeft[
                    Map[ToString, 
                    IntegerDigits[IntegerSequences`Private`x]], 
                    Ceiling[
                    IntegerLength[IntegerSequences`Private`x], 3]], 3], {
                    4, -4}], 1]], 
                    Spacer[2]], 6 -> "\[CenterEllipsis]"]], 
                    IntegerSequences`Private`x]]], {
                 IntegerSequences`Private`n, IntegerSequences`Private`d}]], {
              1}]}], 
           Prepend[IntegerSequences`Private`factors, Null]], Alignment -> 
          Right, Dividers -> {{False, True}, {False, True}}, ItemSize -> 
          Full]], IntegerSequences`FactorGrid[
         Pattern[IntegerSequences`Private`list, {
           RepeatedNull[
            Alternatives[
             Blank[Integer], 
             Blank[Rational], 
             Complex[
              Alternatives[
               Blank[Integer], 
               Blank[Rational]], 
              Alternatives[
               Blank[Integer], 
               Blank[Rational]]]]]}], 
         Optional[
          Pattern[IntegerSequences`Private`zero, 
           Blank[]], Null]] :> 
       Module[{IntegerSequences`Private`factorlist, 
          IntegerSequences`Private`factors}, 
         IntegerSequences`Private`factorlist = ReplaceAll[
            FactorInteger[
            IntegerSequences`Private`list, GaussianIntegers -> True], {
              Alternatives[0, 1, I, -1, -I], 
              Blank[]} -> Sequence[]]; 
         IntegerSequences`Private`factors = SortBy[
            Apply[Union, 
             Map[First, IntegerSequences`Private`factorlist, {2}]], Abs]; Grid[
           Prepend[
            MapThread[Prepend, {
              Map[Replace[IntegerSequences`Private`factors, 
                Append[
                 Apply[Rule, #, {1}], Blank[] -> 
                 IntegerSequences`Private`zero], {1}]& , 
               IntegerSequences`Private`factorlist], 
              IntegerSequences`Private`list}], 
            Prepend[IntegerSequences`Private`factors, Null]], Alignment -> 
           Right, Dividers -> {{False, True}, {False, True}}, ItemSize -> 
           Full]]}], "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`FactorGrid, {
      SyntaxInformation[IntegerSequences`FactorGrid] -> {"ArgumentsPattern" -> {
           Blank[], 
           Optional[
            Blank[]]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`FactorGrid"], False]]], "Output",ExpressionUUID->\
"b5d5a524-54bc-4509-bd5b-cda0e797ed22"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FactorGrid", "[", 
  RowBox[{
   SuperscriptBox["2", 
    RowBox[{"Range", "[", "20", "]"}]], "-", "1"}], "]"}]], "Input",Expression\
UUID->"e50769d0-290b-4d71-b224-e1d4c8184ed8"],

Cell[BoxData[
 TagBox[GridBox[{
    {"", "3", "5", "7", "11", "13", "17", "19", "23", "31", "41", "43", "73", 
     "89", "127", "151", "257", "8191", "131071", "524287"},
    {"1", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
     "", ""},
    {"3", "1", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", ""},
    {"7", "", "", "1", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", ""},
    {"15", "1", "1", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
     "", "", ""},
    {"31", "", "", "", "", "", "", "", "", "1", "", "", "", "", "", "", "", 
     "", "", ""},
    {"63", "2", "", "1", "", "", "", "", "", "", "", "", "", "", "", "", "", 
     "", "", ""},
    {"127", "", "", "", "", "", "", "", "", "", "", "", "", "", "1", "", "", 
     "", "", ""},
    {"255", "1", "1", "", "", "", "1", "", "", "", "", "", "", "", "", "", "",
      "", "", ""},
    {"511", "", "", "1", "", "", "", "", "", "", "", "", "1", "", "", "", "", 
     "", "", ""},
    {"1023", "1", "", "", "1", "", "", "", "", "1", "", "", "", "", "", "", 
     "", "", "", ""},
    {"2047", "", "", "", "", "", "", "", "1", "", "", "", "", "1", "", "", "",
      "", "", ""},
    {"4095", "2", "1", "1", "", "1", "", "", "", "", "", "", "", "", "", "", 
     "", "", "", ""},
    {"8191", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
     "1", "", ""},
    {"16383", "1", "", "", "", "", "", "", "", "", "", "1", "", "", "1", "", 
     "", "", "", ""},
    {"32767", "", "", "1", "", "", "", "", "", "1", "", "", "", "", "", "1", 
     "", "", "", ""},
    {"65535", "1", "1", "", "", "", "1", "", "", "", "", "", "", "", "", "", 
     "1", "", "", ""},
    {"131071", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "1", ""},
    {"262143", "3", "", "1", "", "", "", "1", "", "", "", "", "1", "", "", "",
      "", "", "", ""},
    {"524287", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "",
      "", "", "1"},
    {"1048575", "1", "2", "", "1", "", "", "", "", "1", "1", "", "", "", "", 
     "", "", "", "", ""}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Right}}},
   GridBoxDividers->{"Columns" -> {False, True}, "Rows" -> {False, True}},
   GridBoxItemSize->{"Columns" -> {{All}}, "Rows" -> {{All}}}],
  "Grid"]], "Output",ExpressionUUID->"d23ea1d2-f0a2-42c9-a1b2-79a3d17e9a55"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FactorGrid", "[", 
  RowBox[{"BernoulliB", "[", 
   RowBox[{"Range", "[", 
    RowBox[{"0", ",", "20", ",", "2"}], "]"}], "]"}], "]"}]], "Input",Expressi\
onUUID->"d9508aa2-8437-42e6-bcc0-9a7aca6468d4"],

Cell[BoxData[
 TagBox[GridBox[{
    {"", "2", "3", "5", "7", "11", "13", "17", "19", "283", "617", "691", 
     "3617", "43867"},
    {"1", "", "", "", "", "", "", "", "", "", "", "", "", ""},
    {
     FractionBox["1", "6"], 
     RowBox[{"-", "1"}], 
     RowBox[{"-", "1"}], "", "", "", "", "", "", "", "", "", "", ""},
    {
     RowBox[{"-", 
      FractionBox["1", "30"]}], 
     RowBox[{"-", "1"}], 
     RowBox[{"-", "1"}], 
     RowBox[{"-", "1"}], "", "", "", "", "", "", "", "", "", ""},
    {
     FractionBox["1", "42"], 
     RowBox[{"-", "1"}], 
     RowBox[{"-", "1"}], "", 
     RowBox[{"-", "1"}], "", "", "", "", "", "", "", "", ""},
    {
     RowBox[{"-", 
      FractionBox["1", "30"]}], 
     RowBox[{"-", "1"}], 
     RowBox[{"-", "1"}], 
     RowBox[{"-", "1"}], "", "", "", "", "", "", "", "", "", ""},
    {
     FractionBox["5", "66"], 
     RowBox[{"-", "1"}], 
     RowBox[{"-", "1"}], "1", "", 
     RowBox[{"-", "1"}], "", "", "", "", "", "", "", ""},
    {
     RowBox[{"-", 
      FractionBox["691", "2730"]}], 
     RowBox[{"-", "1"}], 
     RowBox[{"-", "1"}], 
     RowBox[{"-", "1"}], 
     RowBox[{"-", "1"}], "", 
     RowBox[{"-", "1"}], "", "", "", "", "1", "", ""},
    {
     FractionBox["7", "6"], 
     RowBox[{"-", "1"}], 
     RowBox[{"-", "1"}], "", "1", "", "", "", "", "", "", "", "", ""},
    {
     RowBox[{"-", 
      FractionBox["3617", "510"]}], 
     RowBox[{"-", "1"}], 
     RowBox[{"-", "1"}], 
     RowBox[{"-", "1"}], "", "", "", 
     RowBox[{"-", "1"}], "", "", "", "", "1", ""},
    {
     FractionBox["43867", "798"], 
     RowBox[{"-", "1"}], 
     RowBox[{"-", "1"}], "", 
     RowBox[{"-", "1"}], "", "", "", 
     RowBox[{"-", "1"}], "", "", "", "", "1"},
    {
     RowBox[{"-", 
      FractionBox["174611", "330"]}], 
     RowBox[{"-", "1"}], 
     RowBox[{"-", "1"}], 
     RowBox[{"-", "1"}], "", 
     RowBox[{"-", "1"}], "", "", "", "1", "1", "", "", ""}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Right}}},
   GridBoxDividers->{"Columns" -> {False, True}, "Rows" -> {False, True}},
   GridBoxItemSize->{"Columns" -> {{All}}, "Rows" -> {{All}}}],
  "Grid"]], "Output",ExpressionUUID->"c5b721ed-5d16-4607-a0d8-e8e9cfd6f35c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FactorGrid", "[", 
  RowBox[{"1", "+", 
   RowBox[{
    RowBox[{"Range", "[", "20", "]"}], " ", "\[ImaginaryI]"}]}], 
  "]"}]], "Input",ExpressionUUID->"438f68ff-d8ac-42c2-bb46-e1b70b4909fa"],

Cell[BoxData[
 TagBox[GridBox[{
    {"", 
     RowBox[{"1", "+", "\[ImaginaryI]"}], 
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "\[ImaginaryI]"}]}], 
     RowBox[{"2", "+", "\[ImaginaryI]"}], 
     RowBox[{"2", "+", 
      RowBox[{"3", " ", "\[ImaginaryI]"}]}], 
     RowBox[{"3", "+", 
      RowBox[{"2", " ", "\[ImaginaryI]"}]}], 
     RowBox[{"1", "+", 
      RowBox[{"4", " ", "\[ImaginaryI]"}]}], 
     RowBox[{"4", "+", "\[ImaginaryI]"}], 
     RowBox[{"2", "+", 
      RowBox[{"5", " ", "\[ImaginaryI]"}]}], 
     RowBox[{"5", "+", 
      RowBox[{"2", " ", "\[ImaginaryI]"}]}], 
     RowBox[{"1", "+", 
      RowBox[{"6", " ", "\[ImaginaryI]"}]}], 
     RowBox[{"5", "+", 
      RowBox[{"4", " ", "\[ImaginaryI]"}]}], 
     RowBox[{"6", "+", 
      RowBox[{"5", " ", "\[ImaginaryI]"}]}], 
     RowBox[{"1", "+", 
      RowBox[{"10", " ", "\[ImaginaryI]"}]}], 
     RowBox[{"8", "+", 
      RowBox[{"7", " ", "\[ImaginaryI]"}]}], 
     RowBox[{"10", "+", 
      RowBox[{"9", " ", "\[ImaginaryI]"}]}], 
     RowBox[{"1", "+", 
      RowBox[{"14", " ", "\[ImaginaryI]"}]}], 
     RowBox[{"1", "+", 
      RowBox[{"16", " ", "\[ImaginaryI]"}]}], 
     RowBox[{"1", "+", 
      RowBox[{"20", " ", "\[ImaginaryI]"}]}]},
    {
     RowBox[{"1", "+", "\[ImaginaryI]"}], "1", "", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", ""},
    {
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "\[ImaginaryI]"}]}], "", "1", "", "", "", "", "", "", 
     "", "", "", "", "", "", "", "", "", ""},
    {
     RowBox[{"1", "+", 
      RowBox[{"3", " ", "\[ImaginaryI]"}]}], "1", "", "1", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", ""},
    {
     RowBox[{"1", "+", 
      RowBox[{"4", " ", "\[ImaginaryI]"}]}], "", "", "", "", "", "1", "", "", 
     "", "", "", "", "", "", "", "", "", ""},
    {
     RowBox[{"1", "+", 
      RowBox[{"5", " ", "\[ImaginaryI]"}]}], "1", "", "", "", "1", "", "", "",
      "", "", "", "", "", "", "", "", "", ""},
    {
     RowBox[{"1", "+", 
      RowBox[{"6", " ", "\[ImaginaryI]"}]}], "", "", "", "", "", "", "", "", 
     "", "1", "", "", "", "", "", "", "", ""},
    {
     RowBox[{"1", "+", 
      RowBox[{"7", " ", "\[ImaginaryI]"}]}], "1", "2", "", "", "", "", "", "",
      "", "", "", "", "", "", "", "", "", ""},
    {
     RowBox[{"1", "+", 
      RowBox[{"8", " ", "\[ImaginaryI]"}]}], "", "", "1", "1", "", "", "", "",
      "", "", "", "", "", "", "", "", "", ""},
    {
     RowBox[{"1", "+", 
      RowBox[{"9", " ", "\[ImaginaryI]"}]}], "1", "", "", "", "", "", "", "", 
     "", "", "1", "", "", "", "", "", "", ""},
    {
     RowBox[{"1", "+", 
      RowBox[{"10", " ", "\[ImaginaryI]"}]}], "", "", "", "", "", "", "", "", 
     "", "", "", "", "1", "", "", "", "", ""},
    {
     RowBox[{"1", "+", 
      RowBox[{"11", " ", "\[ImaginaryI]"}]}], "1", "", "", "", "", "", "", "",
      "", "", "", "1", "", "", "", "", "", ""},
    {
     RowBox[{"1", "+", 
      RowBox[{"12", " ", "\[ImaginaryI]"}]}], "", "1", "", "", "", "", "", "",
      "1", "", "", "", "", "", "", "", "", ""},
    {
     RowBox[{"1", "+", 
      RowBox[{"13", " ", "\[ImaginaryI]"}]}], "1", "", "1", "", "", "", "1", 
     "", "", "", "", "", "", "", "", "", "", ""},
    {
     RowBox[{"1", "+", 
      RowBox[{"14", " ", "\[ImaginaryI]"}]}], "", "", "", "", "", "", "", "", 
     "", "", "", "", "", "", "", "1", "", ""},
    {
     RowBox[{"1", "+", 
      RowBox[{"15", " ", "\[ImaginaryI]"}]}], "1", "", "", "", "", "", "", "",
      "", "", "", "", "", "1", "", "", "", ""},
    {
     RowBox[{"1", "+", 
      RowBox[{"16", " ", "\[ImaginaryI]"}]}], "", "", "", "", "", "", "", "", 
     "", "", "", "", "", "", "", "", "1", ""},
    {
     RowBox[{"1", "+", 
      RowBox[{"17", " ", "\[ImaginaryI]"}]}], "1", "1", "", "", "", "", "", 
     "1", "", "", "", "", "", "", "", "", "", ""},
    {
     RowBox[{"1", "+", 
      RowBox[{"18", " ", "\[ImaginaryI]"}]}], "", "", "2", "", "1", "", "", 
     "", "", "", "", "", "", "", "", "", "", ""},
    {
     RowBox[{"1", "+", 
      RowBox[{"19", " ", "\[ImaginaryI]"}]}], "1", "", "", "", "", "", "", "",
      "", "", "", "", "", "", "1", "", "", ""},
    {
     RowBox[{"1", "+", 
      RowBox[{"20", " ", "\[ImaginaryI]"}]}], "", "", "", "", "", "", "", "", 
     "", "", "", "", "", "", "", "", "", "1"}
   },
   AutoDelete->False,
   GridBoxAlignment->{"Columns" -> {{Right}}},
   GridBoxDividers->{"Columns" -> {False, True}, "Rows" -> {False, True}},
   GridBoxItemSize->{"Columns" -> {{All}}, "Rows" -> {{All}}}],
  "Grid"]], "Output",ExpressionUUID->"104d0b61-16ed-4210-ae88-e12f59105fbe"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["FindAutomaticSequenceAutomaton", "Input"]], \
"Subsubsection",ExpressionUUID->"552f135b-4fb9-4929-a3de-e1382a750a2f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "FindAutomaticSequenceAutomaton"}]], "Input",ExpressionUUID->"494c5594-519b-4b3f-84bc-35ef23cf690a"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"\
FindAutomaticSequenceAutomaton\\\", \\\"[\\\", \
RowBox[List[RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], StyleBox[\\\"0\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"]]], \\\"}\\\"]], \\\",\\\", StyleBox[\\\"k\\\", \\\"TI\\\"]]], \
\\\"]\\\"]]\\) attempts to find an automaton which reproduces the sequence \
\\!\\(\\*SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], StyleBox[\\\"n\\\", \\\
\"TI\\\"]]\\) when fed the base\[Hyphen]\\!\\(\\*StyleBox[\\\"k\\\", \\\"TI\\\
\"]\\) digits of \\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\), starting with \
the least significant \
digit.\\n\\!\\(\\*RowBox[List[\\\"FindAutomaticSequenceAutomaton\\\", \\\"[\\\
\", RowBox[List[StyleBox[\\\"array\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"d\\\", \
\\\"TI\\\"]]]], \\\"}\\\"]]]], \\\"]\\\"]]\\) finds an automaton which \
reproduces a \\!\\(\\*StyleBox[\\\"d\\\", \\\"TI\\\"]\\)\[Hyphen]dimensional \
sequence in bases \\!\\(\\*RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"d\\\", \
\\\"TI\\\"]]]]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"FindAutomaticSequenceAutomaton", "[", 
                    RowBox[{
                    "IntegerSequences`Private`array_", ",", 
                    "IntegerSequences`Private`numerationsystem_", ",", 
                    RowBox[{"IntegerSequences`Private`options", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`automaticsequence", "=", 
                    RowBox[{"FindAutomaticSequenceFunction", "[", 
                    RowBox[{
                    "IntegerSequences`Private`array", ",", 
                    "IntegerSequences`Private`numerationsystem", ",", 
                    "IntegerSequences`Private`options"}], "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "First", "[", 
                    "IntegerSequences`Private`automaticsequence", "]"}], "/;", 
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`automaticsequence", ",", 
                    "_FindAutomaticSequenceFunction"}], "]"}]}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", 
                    "FindAutomaticSequenceAutomaton", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "__", "}"}], ",", "_", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`FindAutomaticSequenceAutomaton] = {
                    "ArgumentsPattern" -> {{
                    BlankSequence[]}, 
                    Blank[], 
                    OptionsPattern[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"FlattenInputAlphabet", "\[Rule]", "True"}], ",", 
                    RowBox[{"IndexedStateNames", "\[Rule]", "True"}], ",", 
                    RowBox[{"Monitor", "\[Rule]", "False"}]}], "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`FindAutomaticSequenceAutomaton\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"\
FindAutomaticSequenceAutomaton\\\", \\\"[\\\", \
RowBox[List[RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], StyleBox[\\\"0\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"]]], \\\"}\\\"]], \\\",\\\", StyleBox[\\\"k\\\", \\\"TI\\\"]]], \
\\\"]\\\"]]\\) attempts to find an automaton which reproduces the sequence \
\\!\\(\\*SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], StyleBox[\\\"n\\\", \\\
\"TI\\\"]]\\) when fed the base\[Hyphen]\\!\\(\\*StyleBox[\\\"k\\\", \\\"TI\\\
\"]\\) digits of \\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\), starting with \
the least significant \
digit.\\n\\!\\(\\*RowBox[List[\\\"FindAutomaticSequenceAutomaton\\\", \\\"[\\\
\", RowBox[List[StyleBox[\\\"array\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"d\\\", \
\\\"TI\\\"]]]], \\\"}\\\"]]]], \\\"]\\\"]]\\) finds an automaton which \
reproduces a \\!\\(\\*StyleBox[\\\"d\\\", \\\"TI\\\"]\\)\[Hyphen]dimensional \
sequence in bases \\!\\(\\*RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"d\\\", \
\\\"TI\\\"]]]]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"FindAutomaticSequenceAutomaton\", \"[\", \
RowBox[List[RowBox[List[\"{\", RowBox[List[SubscriptBox[StyleBox[\"a\", \
\"TI\"], StyleBox[\"0\", \"TR\"]], \",\", SubscriptBox[StyleBox[\"a\", \
\"TI\"], StyleBox[\"1\", \"TR\"]], \",\", StyleBox[\"\\[Ellipsis]\", \
\"TR\"]]], \"}\"]], \",\", StyleBox[\"k\", \"TI\"]]], \"]\"]]\) attempts to \
find an automaton which reproduces the sequence \
\!\(\*SubscriptBox[StyleBox[\"a\", \"TI\"], StyleBox[\"n\", \"TI\"]]\) when \
fed the base\[Hyphen]\!\(\*StyleBox[\"k\", \"TI\"]\) digits of \
\!\(\*StyleBox[\"n\", \"TI\"]\), starting with the least significant digit.\n\
\!\(\*RowBox[List[\"FindAutomaticSequenceAutomaton\", \"[\", \
RowBox[List[StyleBox[\"array\", \"TI\"], \",\", RowBox[List[\"{\", \
RowBox[List[SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"1\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"2\", \"TR\"]], \",\", \
StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", SubscriptBox[StyleBox[\"k\", \
\"TI\"], StyleBox[\"d\", \"TI\"]]]], \"}\"]]]], \"]\"]]\) finds an automaton \
which reproduces a \!\(\*StyleBox[\"d\", \"TI\"]\)\[Hyphen]dimensional \
sequence in bases \!\(\*RowBox[List[SubscriptBox[StyleBox[\"k\", \"TI\"], \
StyleBox[\"1\", \"TR\"]], \",\", SubscriptBox[StyleBox[\"k\", \"TI\"], \
StyleBox[\"2\", \"TR\"]], \",\", StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", \
SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"d\", \"TI\"]]]]\).", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`FindAutomaticSequenceAutomaton, {
      IntegerSequences`FindAutomaticSequenceAutomaton[
         Pattern[IntegerSequences`Private`array, 
          Blank[]], 
         Pattern[IntegerSequences`Private`numerationsystem, 
          Blank[]], 
         Pattern[IntegerSequences`Private`options, 
          OptionsPattern[]]] :> 
       With[{IntegerSequences`Private`automaticsequence = 
          IntegerSequences`FindAutomaticSequenceFunction[
           IntegerSequences`Private`array, 
            IntegerSequences`Private`numerationsystem, 
            IntegerSequences`Private`options]}, 
         Condition[
          First[IntegerSequences`Private`automaticsequence], 
          Not[
           MatchQ[IntegerSequences`Private`automaticsequence, 
            Blank[IntegerSequences`FindAutomaticSequenceFunction]]]]]}], 
    "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`FindAutomaticSequenceAutomaton, {
      SyntaxInformation[IntegerSequences`FindAutomaticSequenceAutomaton] -> {
        "ArgumentsPattern" -> {{
            BlankSequence[]}, 
           Blank[], 
           OptionsPattern[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {
     IntegerSequences`FlattenInputAlphabet -> True, 
      IntegerSequences`IndexedStateNames -> True, Monitor -> False}, 
    "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`FindAutomaticSequenceAutomaton"], False]]], "Output",Exp\
ressionUUID->"255270c9-4e4b-4a65-aba3-c15a13785681"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindAutomaticSequenceAutomaton", "[", 
  RowBox[{
   RowBox[{"ThueMorse", "[", 
    RowBox[{"Range", "[", 
     RowBox[{"0", ",", "100"}], "]"}], "]"}], ",", "2"}], "]"}]], "Input",Expr\
essionUUID->"c3a208a1-11fa-4bd5-8292-9ccc072115e6"],

Cell[BoxData[
 RowBox[{"Automaton", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "1"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "1"}], ",", "1"}], "}"}]}], "}"}], ",", "1", 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "0"}], ",", 
     RowBox[{"2", "\[Rule]", "1"}]}], "}"}]}], "]"}]], "Output",ExpressionUUID\
->"8b59397c-e590-4ff5-b0a4-11ce672a1c7b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"AutomaticSequence", "[", "%", "]"}], "/@", 
  RowBox[{"Range", "[", 
   RowBox[{"0", ",", "15"}], "]"}]}]], "Input",ExpressionUUID->"83c158a1-bebc-\
4d04-a865-145950ce7249"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", 
   ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
   "0"}], "}"}]], "Output",ExpressionUUID->"7015f364-7f53-4ce8-845e-\
9f08383a3288"]
}, Open  ]],

Cell[TextData[{
 "Binomial coefficients modulo ",
 Cell[BoxData[
  FormBox["2", TraditionalForm]],ExpressionUUID->
  "4c4d836c-8614-4a62-8efe-0e9ea151f359"],
 ":"
}], "Text",ExpressionUUID->"f151021c-93e6-4703-b376-8acc6a5e791f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindAutomaticSequenceAutomaton", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Mod", "[", 
      RowBox[{
       RowBox[{"Binomial", "[", 
        RowBox[{"n", ",", "m"}], "]"}], ",", "2"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "0", ",", "100"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"m", ",", "0", ",", "100"}], "}"}]}], "]"}], ",", "2"}], 
  "]"}]], "Input",ExpressionUUID->"d26e40db-6e82-4795-a9bf-d6e259ef5b0f"],

Cell[BoxData[
 RowBox[{"Automaton", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "1"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "1"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "1"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "2"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "2"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "2"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "2"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}]}], "}"}]}], "}"}], ",", "1", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "1"}], ",", 
     RowBox[{"2", "\[Rule]", "0"}]}], "}"}]}], "]"}]], "Output",ExpressionUUID\
->"75f79ed4-49d0-43ba-a04f-128d46d8f9d2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArrayPlot", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"AutomaticSequence", "[", "%", "]"}], "[", 
     RowBox[{"n", ",", "m"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "0", ",", "63"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"m", ",", "0", ",", "63"}], "}"}]}], "]"}], "]"}]], "Input",Expre\
ssionUUID->"84735f3c-14c9-4b77-8cf8-3d9ec1f9da06"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJylldEJAzEMQ+1u0k06Q0foAt3/r7R3JRebSJF9IQgjLg9jhO+v9/N1M7PH
edufN49573rzflvo6O+Vhh5SV2/qf4zV+jzl2kYvpfrSS6m262uFenqtUM+l
XnuzjnFW/XBkP+RZ9sOV/ZBn2Q95lv2QZ9kPKvuLuW77i7lu+4u5bvu+7m3L
B71t+fD1DR/b3Mc298lHfk/5ZnnPfHw5H1/Ox/ud8w0q52PlfKycj/c75+P9
zvl4v3M+3u+cj/c75+P9zvm45nxcc76W98zX8p75Wt4zX8t75mt5z3wt75k/
q86fVefX5j74tbkPfr33g1/v/eB36PW5D37r9ybd/QNaOg9Q
   "], {{0, 0}, {64, 64}}, {0, 1}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic}]], "Output",ExpressionUUID->"e374ecd2-7556-4823-aa0e-\
f7d9b464dbf6"]
}, Open  ]],

Cell[TextData[{
 StyleBox["FindAutomaticSequenceAutomaton", "Input"],
 " has a few options:"
}], "Text",ExpressionUUID->"25807244-35ed-47e7-8c6d-657ab3c92ebd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Options", "[", "FindAutomaticSequenceAutomaton", "]"}]], "Input",Exp\
ressionUUID->"8d4416e2-b5c6-47cb-bd24-00054bff950e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"FlattenInputAlphabet", "\[Rule]", "True"}], ",", 
   RowBox[{"IndexedStateNames", "\[Rule]", "True"}], ",", 
   RowBox[{"Monitor", "\[Rule]", "False"}]}], "}"}]], "Output",ExpressionUUID->\
"e05160fd-47bc-4069-a098-b6a8577d1eae"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "IndexedStateNames"}]], "Input",ExpressionUUID->"c1826f7e-6b6f-4ff5-a1e4-47774e6a488d"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"IndexedStateNames is an option for \
FindAutomaticSequenceAutomaton and related functions that specifies whether \
to replace state names with integers.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`IndexedStateNames\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"IndexedStateNames is an option for \
FindAutomaticSequenceAutomaton and related functions that specifies whether \
to replace state names with integers.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "IndexedStateNames is an option for FindAutomaticSequenceAutomaton and \
related functions that specifies whether to replace state names with \
integers.", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> None, "SubValues" -> None, "DefaultValues" -> None, 
    "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`IndexedStateNames"], False]]], "Output",ExpressionUUID->\
"8bcd87ad-f0d8-4fc1-afc1-f53982df6f39"]
}, Open  ]],

Cell[TextData[{
 "By default, states are assigned integer names.  To preserve information \
about the ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "e86faf15-4ad5-440c-ae56-485ac5fbd076"],
 "-kernel subsequence corresponding to each state, set the ",
 StyleBox["IndexedStateNames", "Input"],
 " option to ",
 StyleBox["False", "Input"],
 "."
}], "Text",ExpressionUUID->"2446aae2-e764-41d0-aeb2-9a608701d830"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"FindAutomaticSequenceAutomaton", "[", 
  RowBox[{
   RowBox[{"ThueMorse", "[", 
    RowBox[{"Range", "[", 
     RowBox[{"0", ",", "100"}], "]"}], "]"}], ",", "2"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"FindAutomaticSequenceAutomaton", "[", 
  RowBox[{
   RowBox[{"ThueMorse", "[", 
    RowBox[{"Range", "[", 
     RowBox[{"0", ",", "100"}], "]"}], "]"}], ",", "2", ",", 
   RowBox[{"IndexedStateNames", "\[Rule]", "False"}]}], "]"}]}], "Input",Expre\
ssionUUID->"bfe98ee5-be36-4fde-8a19-4cdda6b681a8"],

Cell[BoxData[
 RowBox[{"Automaton", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "1"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "1"}], ",", "1"}], "}"}]}], "}"}], ",", "1", 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "0"}], ",", 
     RowBox[{"2", "\[Rule]", "1"}]}], "}"}]}], "]"}]], "Output",ExpressionUUID\
->"e2b05f48-01f9-4a1e-9ac2-dd0ef010d1dd"],

Cell[BoxData[
 RowBox[{"Automaton", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"{", "}"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"{", "}"}], "}"}]}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"{", "}"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"{", "1", "}"}], "}"}]}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"{", "1", "}"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"{", "1", "}"}], "}"}]}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"{", "1", "}"}], "}"}], "\[Rule]", 
        RowBox[{"{", 
         RowBox[{"{", "}"}], "}"}]}], ",", "1"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"{", "}"}], "}"}], "\[Rule]", "0"}], ",", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"{", "1", "}"}], "}"}], "\[Rule]", "1"}]}], "}"}]}], 
  "]"}]], "Output",ExpressionUUID->"57cb37ce-b273-4e47-93fc-874667c1d27a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "FlattenInputAlphabet"}]], "Input",ExpressionUUID->"b72acae9-486e-4a46-bdb7-a90f1df97145"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"FlattenInputAlphabet is an option for \
FindAutomaticSequenceAutomaton and related functions that specifies whether \
to replace the input alphabet \\!\\(\\*RowBox[List[\\\"{\\\", \
RowBox[List[RowBox[List[\\\"{\\\", StyleBox[\\\"0\\\", \\\"TR\\\"], \
\\\"}\\\"]], \\\",\\\", RowBox[List[\\\"{\\\", StyleBox[\\\"1\\\", \
\\\"TR\\\"], \\\"}\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"], \\\",\\\", RowBox[List[\\\"{\\\", \
RowBox[List[StyleBox[\\\"k\\\", \\\"TI\\\"], \\\"-\\\", StyleBox[\\\"1\\\", \
\\\"TR\\\"]]], \\\"}\\\"]]]], \\\"}\\\"]]\\) with \
\\!\\(\\*RowBox[List[\\\"{\\\", RowBox[List[StyleBox[\\\"0\\\", \\\"TR\\\"], \
\\\",\\\", StyleBox[\\\"1\\\", \\\"TR\\\"], \\\",\\\", \
StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", \
RowBox[List[StyleBox[\\\"k\\\", \\\"TI\\\"], \\\"-\\\", StyleBox[\\\"1\\\", \
\\\"TR\\\"]]]]], \\\"}\\\"]]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`FlattenInputAlphabet\
\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"FlattenInputAlphabet is an option for \
FindAutomaticSequenceAutomaton and related functions that specifies whether \
to replace the input alphabet \\!\\(\\*RowBox[List[\\\"{\\\", \
RowBox[List[RowBox[List[\\\"{\\\", StyleBox[\\\"0\\\", \\\"TR\\\"], \
\\\"}\\\"]], \\\",\\\", RowBox[List[\\\"{\\\", StyleBox[\\\"1\\\", \
\\\"TR\\\"], \\\"}\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"], \\\",\\\", RowBox[List[\\\"{\\\", \
RowBox[List[StyleBox[\\\"k\\\", \\\"TI\\\"], \\\"-\\\", StyleBox[\\\"1\\\", \
\\\"TR\\\"]]], \\\"}\\\"]]]], \\\"}\\\"]]\\) with \
\\!\\(\\*RowBox[List[\\\"{\\\", RowBox[List[StyleBox[\\\"0\\\", \\\"TR\\\"], \
\\\",\\\", StyleBox[\\\"1\\\", \\\"TR\\\"], \\\",\\\", \
StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", \
RowBox[List[StyleBox[\\\"k\\\", \\\"TI\\\"], \\\"-\\\", StyleBox[\\\"1\\\", \
\\\"TR\\\"]]]]], \\\"}\\\"]]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "FlattenInputAlphabet is an option for FindAutomaticSequenceAutomaton and \
related functions that specifies whether to replace the input alphabet \
\!\(\*RowBox[List[\"{\", RowBox[List[RowBox[List[\"{\", StyleBox[\"0\", \
\"TR\"], \"}\"]], \",\", RowBox[List[\"{\", StyleBox[\"1\", \"TR\"], \"}\"]], \
\",\", StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", RowBox[List[\"{\", \
RowBox[List[StyleBox[\"k\", \"TI\"], \"-\", StyleBox[\"1\", \"TR\"]]], \
\"}\"]]]], \"}\"]]\) with \!\(\*RowBox[List[\"{\", \
RowBox[List[StyleBox[\"0\", \"TR\"], \",\", StyleBox[\"1\", \"TR\"], \",\", \
StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", RowBox[List[StyleBox[\"k\", \
\"TI\"], \"-\", StyleBox[\"1\", \"TR\"]]]]], \"}\"]]\).", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {Protected}, 
    "FullName" -> "IntegerSequences`FlattenInputAlphabet"], False]]], "Output",\
ExpressionUUID->"8ebd3713-7275-4602-a541-91696476665a"]
}, Open  ]],

Cell[TextData[{
 "For one-dimensional sequences, the digit lists are stripped by default, \
since they contain only one element.  To retain the lists, use the ",
 StyleBox["FlattenInputAlphabet", "Input"],
 " option:"
}], "Text",ExpressionUUID->"e4ae8198-ad49-43ad-becb-5f8ab85e6a4c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"FindAutomaticSequenceAutomaton", "[", 
  RowBox[{
   RowBox[{"ThueMorse", "[", 
    RowBox[{"Range", "[", 
     RowBox[{"0", ",", "100"}], "]"}], "]"}], ",", "2"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"FindAutomaticSequenceAutomaton", "[", 
  RowBox[{
   RowBox[{"ThueMorse", "[", 
    RowBox[{"Range", "[", 
     RowBox[{"0", ",", "100"}], "]"}], "]"}], ",", "2", ",", 
   RowBox[{"FlattenInputAlphabet", "\[Rule]", "False"}]}], "]"}]}], "Input",Ex\
pressionUUID->"a9abe5a7-0062-43e3-bb23-f371c8539148"],

Cell[BoxData[
 RowBox[{"Automaton", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "1"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "1"}], ",", "1"}], "}"}]}], "}"}], ",", "1", 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "0"}], ",", 
     RowBox[{"2", "\[Rule]", "1"}]}], "}"}]}], "]"}]], "Output",ExpressionUUID\
->"06fc18c6-0b36-4a33-a51b-c4b378a1a8ea"],

Cell[BoxData[
 RowBox[{"Automaton", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "1"}], ",", 
       RowBox[{"{", "0", "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "2"}], ",", 
       RowBox[{"{", "1", "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "2"}], ",", 
       RowBox[{"{", "0", "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"2", "\[Rule]", "1"}], ",", 
       RowBox[{"{", "1", "}"}]}], "}"}]}], "}"}], ",", "1", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "0"}], ",", 
     RowBox[{"2", "\[Rule]", "1"}]}], "}"}]}], "]"}]], "Output",ExpressionUUID\
->"8df72dcc-46a9-4237-94d8-92be33a46d9a"]
}, Open  ]],

Cell[TextData[{
 "Use ",
 StyleBox["Monitor", "Input"],
 " to display progress information:"
}], "Text",ExpressionUUID->"4d29d71f-24fc-42c3-97cc-18983d66b96b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AutomatonStateCount", "[", 
  RowBox[{"FindAutomaticSequenceAutomaton", "[", 
   RowBox[{
    RowBox[{"Mod", "[", 
     RowBox[{
      RowBox[{"CatalanNumber", "[", 
       RowBox[{"Range", "[", 
        RowBox[{"0", ",", "5000"}], "]"}], "]"}], ",", "32"}], "]"}], ",", 
    "2", ",", 
    RowBox[{"Monitor", "\[Rule]", "True"}]}], "]"}], "]"}]], "Input",Expressio\
nUUID->"370abb14-d527-42d6-bff3-f2c2003e4384"],

Cell[BoxData["56"], "Output",ExpressionUUID->"bcea2d38-daa8-460d-ac3d-6e170d3d9abe"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["FindAutomaticSequenceFunction", "Input"]], \
"Subsubsection",ExpressionUUID->"aed96deb-d3c7-48c1-b7fe-a6ea72715a16"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "FindAutomaticSequenceFunction"}]], "Input",ExpressionUUID->"8b39c3b1-ab74-455b-9dd8-aae17d2ba931"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"\
FindAutomaticSequenceFunction\\\", \\\"[\\\", RowBox[List[RowBox[List[\\\"{\\\
\", RowBox[List[SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], \
StyleBox[\\\"0\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"a\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"]]], \\\"}\\\"]], \\\",\\\", \
StyleBox[\\\"k\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) attempts to find a \
\\!\\(\\*StyleBox[\\\"k\\\", \\\"TI\\\"]\\)\[Hyphen]automatic sequence which \
reproduces the sequence \\!\\(\\*SubscriptBox[StyleBox[\\\"a\\\", \
\\\"TI\\\"], StyleBox[\\\"n\\\", \
\\\"TI\\\"]]\\).\\n\\!\\(\\*RowBox[List[\\\"FindAutomaticSequenceFunction\\\",\
 \\\"[\\\", RowBox[List[StyleBox[\\\"array\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"d\\\", \
\\\"TI\\\"]]]], \\\"}\\\"]]]], \\\"]\\\"]]\\) finds a \\!\\(\\*StyleBox[\\\"d\
\\\", \\\"TI\\\"]\\)\[Hyphen]dimensional \
(\\!\\(\\*RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\
\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\
\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\
\\\", \\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], \
StyleBox[\\\"d\\\", \\\"TI\\\"]]]]\\))\[Hyphen]automatic sequence which \
reproduces a full array of \
values.\\n\\!\\(\\*RowBox[List[\\\"FindAutomaticSequenceFunction\\\", \\\"[\\\
\", RowBox[List[StyleBox[\\\"array\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"kspec\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"n\\\", \
\\\"TI\\\"]]], \\\"]\\\"]]\\) gives the function applied to \
\\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"FindAutomaticSequenceFunction", "[", 
                    RowBox[{"IntegerSequences`Private`array_", ",", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystem_", "?", 
                    "IntegerSequences`Private`PositiveNumerationSystemQ"}], 
                    ",", 
                    RowBox[{"IntegerSequences`Private`options", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"FindAutomaticSequenceFunction", "[", 
                    RowBox[{"IntegerSequences`Private`array", ",", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"IntegerSequences`Private`numerationsystem", ",", 
                    RowBox[{
                    "ArrayDepth", "[", "IntegerSequences`Private`array", 
                    "]"}]}], "]"}], ",", "IntegerSequences`Private`options"}],
                     "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"FindAutomaticSequenceFunction", "[", 
                    RowBox[{"IntegerSequences`Private`array_List", ",", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystemlist", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    "__", "?", 
                    "IntegerSequences`Private`PositiveNumerationSystemQ"}], 
                    "}"}]}], ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{
                    "Length", "[", 
                    "IntegerSequences`Private`numerationsystemlist", "]"}], 
                    "\[LessEqual]", 
                    RowBox[{
                    "ArrayDepth", "[", "IntegerSequences`Private`array", 
                    "]"}]}]}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`dimension", ",", 
                    "IntegerSequences`Private`relations", ",", 
                    "IntegerSequences`Private`basissequences", ",", 
                    "IntegerSequences`Private`redundantsequencechains", ",", 
                    "IntegerSequences`Private`initialconditions", ",", 
                    "IntegerSequences`Private`edges", ",", 
                    "IntegerSequences`Private`newbasissequence", ",", 
                    "IntegerSequences`Private`numerationsystem", ",", 
                    "IntegerSequences`Private`automaton", ",", 
                    "IntegerSequences`Private`failed"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`failed", "=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`dimension", "=", 
                    RowBox[{
                    "Length", "[", 
                    "IntegerSequences`Private`numerationsystemlist", "]"}]}], 
                    ";", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`relations", ",", 
                    "IntegerSequences`Private`basissequences", ",", 
                    "IntegerSequences`Private`redundantsequencechains"}], 
                    "}"}], "=", 
                    RowBox[{
                    "IntegerSequences`Private`FindSequenceRelations", "[", 
                    RowBox[{
                    "IntegerSequences`Private`array", ",", 
                    "IntegerSequences`Private`numerationsystemlist", 
                    ",", "\<\"AutomaticSequence\"\>", ",", 
                    RowBox[{"Monitor", "\[Rule]", 
                    RowBox[{"OptionValue", "[", "Monitor", "]"}]}]}], "]"}]}],
                     ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`relations", "===", "$Failed"}], 
                    ",", 
                    RowBox[{"Throw", "[", "True", "]"}]}], "]"}], ";", 
                    RowBox[{"IntegerSequences`Private`initialconditions", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#1", "\[Rule]", 
                    RowBox[{
                    "IntegerSequences`Private`array", "\[LeftDoubleBracket]", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{"FromDigitList", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "#1", ",", 
                    "IntegerSequences`Private`numerationsystemlist"}], 
                    "}"}]}], "]"}], "+", "1"}], ")"}]}], 
                    "\[RightDoubleBracket]"}]}], "&"}], ")"}], "/@", 
                    RowBox[{"Join", "[", 
                    RowBox[{"IntegerSequences`Private`basissequences", ",", 
                    RowBox[{
                    "Last", "/@", 
                    "IntegerSequences`Private`redundantsequencechains"}]}], 
                    "]"}]}]}], ";", 
                    RowBox[{"IntegerSequences`Private`edges", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"Join", "@@", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`basissequence", ",", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`subsequence", ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`newbasissequence", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    "IntegerSequences`Private`subsequence", ",", 
                    "IntegerSequences`Private`relations"}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"Or", "@@", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`subsequenceprefix", ",", 
                    "IntegerSequences`Private`endprefix", ",", 
                    "IntegerSequences`Private`numsystem"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`numsystem", 
                    "===", "\<\"Fibonacci\"\>"}], "&&", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"IntegerSequences`Private`subsequenceprefix", ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", "0"}], "}"}]}], "]"}], "&&", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"IntegerSequences`Private`endprefix", ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", "1"}], "}"}]}], "]"}]}], ")"}], "||", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`numsystem", 
                    "===", "\<\"Tribonacci\"\>"}], "&&", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"IntegerSequences`Private`subsequenceprefix", ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", "0"}], "}"}]}], "]"}], "&&", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"IntegerSequences`Private`endprefix", ",", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", "1", ",", "1"}], "}"}]}], "]"}]}], 
                    ")"}]}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`subsequence", ",", 
                    "IntegerSequences`Private`newbasissequence", ",", 
                    "IntegerSequences`Private`numerationsystemlist"}], 
                    "}"}]}], "]"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`newbasissequence", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Append", "[", 
                    RowBox[{"#1", ",", "0"}], "]"}], "&"}], ")"}], "/@", 
                    "IntegerSequences`Private`newbasissequence"}]}]}], "]"}], 
                    ";", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`basissequence", "\[Rule]", 
                    "IntegerSequences`Private`newbasissequence"}], ",", 
                    RowBox[{
                    "Last", "/@", "IntegerSequences`Private`subsequence"}]}], 
                    "}"}]}]}], "]"}], "/@", 
                    RowBox[{
                    "IntegerSequences`Private`ArithmeticSubsequences", "[", 
                    RowBox[{
                    "IntegerSequences`Private`basissequence", ",", 
                    "IntegerSequences`Private`numerationsystemlist"}], 
                    "]"}]}]}], "]"}], "/@", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    "IntegerSequences`Private`basissequences", ",", 
                    "IntegerSequences`Private`redundantsequencechains", ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}]}], ",", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    "IntegerSequences`Private`redundantsequencechain", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`redundantsequencechain", ",", 
                    RowBox[{"Last", "/@", 
                    RowBox[{
                    "Last", "[", 
                    "IntegerSequences`Private`redundantsequencechain", 
                    "]"}]}]}], "}"}]}], "]"}], "/@", 
                    "IntegerSequences`Private`redundantsequencechains"}]}], 
                    "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"TrueQ", "[", 
                    RowBox[{"OptionValue", "[", "FlattenInputAlphabet", "]"}],
                     "]"}], "&&", 
                    RowBox[{
                    "IntegerSequences`Private`dimension", "\[Equal]", "1"}]}],
                     ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`edges", "=", 
                    RowBox[{
                    RowBox[{"MapAt", "[", 
                    RowBox[{"First", ",", "2"}], "]"}], "/@", 
                    "IntegerSequences`Private`edges"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`numerationsystem", "=", 
                    RowBox[{
                    "First", "[", 
                    "IntegerSequences`Private`numerationsystemlist", 
                    "]"}]}]}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystem", "=", 
                    "IntegerSequences`Private`numerationsystemlist"}]}], 
                    "]"}], ";", 
                    RowBox[{"IntegerSequences`Private`automaton", "=", 
                    RowBox[{"Automaton", "[", 
                    RowBox[{"IntegerSequences`Private`edges", ",", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", 
                    "IntegerSequences`Private`dimension"}], "]"}], ",", 
                    "IntegerSequences`Private`initialconditions"}], "]"}]}], 
                    ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"TrueQ", "[", 
                    RowBox[{"OptionValue", "[", "IndexedStateNames", "]"}], 
                    "]"}], ",", 
                    RowBox[{"IntegerSequences`Private`automaton", "=", 
                    RowBox[{
                    "IntegerSequences`Private`IndexAutomaton", "[", 
                    "IntegerSequences`Private`automaton", "]"}]}]}], "]"}], 
                    ";", "False"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"AutomaticSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`automaton", ",", 
                    "IntegerSequences`Private`numerationsystem"}], "]"}], "/;", 
                    RowBox[{"!", "IntegerSequences`Private`failed"}]}]}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"FindAutomaticSequenceFunction", "[", 
                    RowBox[{
                    "IntegerSequences`Private`array_", ",", 
                    "IntegerSequences`Private`numerationsystem_", ",", 
                    "IntegerSequences`Private`n_", ",", 
                    RowBox[{"IntegerSequences`Private`options", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`automaticsequence", "=", 
                    RowBox[{"FindAutomaticSequenceFunction", "[", 
                    RowBox[{
                    "IntegerSequences`Private`array", ",", 
                    "IntegerSequences`Private`numerationsystem", ",", 
                    "IntegerSequences`Private`options"}], "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`automaticsequence", "[", 
                    "IntegerSequences`Private`n", "]"}], "/;", 
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`automaticsequence", ",", 
                    "_FindAutomaticSequenceFunction"}], "]"}]}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "FindAutomaticSequenceFunction",
                     "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "__", "}"}], ",", "_", ",", "_.", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`FindAutomaticSequenceFunction] = {
                    "ArgumentsPattern" -> {{
                    BlankSequence[]}, 
                    Blank[], 
                    Optional[
                    Blank[]], 
                    OptionsPattern[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"FlattenInputAlphabet", "\[Rule]", "True"}], ",", 
                    RowBox[{"IndexedStateNames", "\[Rule]", "True"}], ",", 
                    RowBox[{"Monitor", "\[Rule]", "False"}]}], "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`FindAutomaticSequenceFunction\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"\
FindAutomaticSequenceFunction\\\", \\\"[\\\", RowBox[List[RowBox[List[\\\"{\\\
\", RowBox[List[SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], \
StyleBox[\\\"0\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"a\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"]]], \\\"}\\\"]], \\\",\\\", \
StyleBox[\\\"k\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) attempts to find a \
\\!\\(\\*StyleBox[\\\"k\\\", \\\"TI\\\"]\\)\[Hyphen]automatic sequence which \
reproduces the sequence \\!\\(\\*SubscriptBox[StyleBox[\\\"a\\\", \
\\\"TI\\\"], StyleBox[\\\"n\\\", \
\\\"TI\\\"]]\\).\\n\\!\\(\\*RowBox[List[\\\"FindAutomaticSequenceFunction\\\",\
 \\\"[\\\", RowBox[List[StyleBox[\\\"array\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"d\\\", \
\\\"TI\\\"]]]], \\\"}\\\"]]]], \\\"]\\\"]]\\) finds a \\!\\(\\*StyleBox[\\\"d\
\\\", \\\"TI\\\"]\\)\[Hyphen]dimensional \
(\\!\\(\\*RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\
\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\
\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\
\\\", \\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], \
StyleBox[\\\"d\\\", \\\"TI\\\"]]]]\\))\[Hyphen]automatic sequence which \
reproduces a full array of \
values.\\n\\!\\(\\*RowBox[List[\\\"FindAutomaticSequenceFunction\\\", \\\"[\\\
\", RowBox[List[StyleBox[\\\"array\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"kspec\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"n\\\", \
\\\"TI\\\"]]], \\\"]\\\"]]\\) gives the function applied to \
\\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"FindAutomaticSequenceFunction\", \"[\", \
RowBox[List[RowBox[List[\"{\", RowBox[List[SubscriptBox[StyleBox[\"a\", \
\"TI\"], StyleBox[\"0\", \"TR\"]], \",\", SubscriptBox[StyleBox[\"a\", \
\"TI\"], StyleBox[\"1\", \"TR\"]], \",\", StyleBox[\"\\[Ellipsis]\", \
\"TR\"]]], \"}\"]], \",\", StyleBox[\"k\", \"TI\"]]], \"]\"]]\) attempts to \
find a \!\(\*StyleBox[\"k\", \"TI\"]\)\[Hyphen]automatic sequence which \
reproduces the sequence \!\(\*SubscriptBox[StyleBox[\"a\", \"TI\"], StyleBox[\
\"n\", \"TI\"]]\).\n\!\(\*RowBox[List[\"FindAutomaticSequenceFunction\", \
\"[\", RowBox[List[StyleBox[\"array\", \"TI\"], \",\", RowBox[List[\"{\", \
RowBox[List[SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"1\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"2\", \"TR\"]], \",\", \
StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", SubscriptBox[StyleBox[\"k\", \
\"TI\"], StyleBox[\"d\", \"TI\"]]]], \"}\"]]]], \"]\"]]\) finds a \
\!\(\*StyleBox[\"d\", \"TI\"]\)\[Hyphen]dimensional \
(\!\(\*RowBox[List[SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"1\", \"TR\
\"]], \",\", SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"2\", \"TR\"]], \
\",\", StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", \
SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"d\", \
\"TI\"]]]]\))\[Hyphen]automatic sequence which reproduces a full array of \
values.\n\!\(\*RowBox[List[\"FindAutomaticSequenceFunction\", \"[\", \
RowBox[List[StyleBox[\"array\", \"TI\"], \",\", StyleBox[\"kspec\", \"TI\"], \
\",\", StyleBox[\"n\", \"TI\"]]], \"]\"]]\) gives the function applied to \
\!\(\*StyleBox[\"n\", \"TI\"]\).", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`FindAutomaticSequenceFunction, {
      IntegerSequences`FindAutomaticSequenceFunction[
         Pattern[IntegerSequences`Private`array, 
          Blank[]], 
         PatternTest[
          Pattern[IntegerSequences`Private`numerationsystem, 
           Blank[]], IntegerSequences`Private`PositiveNumerationSystemQ], 
         Pattern[IntegerSequences`Private`options, 
          OptionsPattern[]]] :> 
       IntegerSequences`FindAutomaticSequenceFunction[
        IntegerSequences`Private`array, 
         ConstantArray[IntegerSequences`Private`numerationsystem, 
          ArrayDepth[IntegerSequences`Private`array]], 
         IntegerSequences`Private`options], Condition[
         IntegerSequences`FindAutomaticSequenceFunction[
          Pattern[IntegerSequences`Private`array, 
           Blank[List]], 
          Pattern[IntegerSequences`Private`numerationsystemlist, {
            PatternTest[
             BlankSequence[], 
             IntegerSequences`Private`PositiveNumerationSystemQ]}], 
          OptionsPattern[]], 
         Length[IntegerSequences`Private`numerationsystemlist] <= 
         ArrayDepth[IntegerSequences`Private`array]] :> 
       Module[{IntegerSequences`Private`dimension, 
          IntegerSequences`Private`relations, 
          IntegerSequences`Private`basissequences, 
          IntegerSequences`Private`redundantsequencechains, 
          IntegerSequences`Private`initialconditions, 
          IntegerSequences`Private`edges, 
          IntegerSequences`Private`newbasissequence, 
          IntegerSequences`Private`numerationsystem, 
          IntegerSequences`Private`automaton, 
          IntegerSequences`Private`failed}, 
         IntegerSequences`Private`failed = 
          Catch[IntegerSequences`Private`dimension = 
             Length[IntegerSequences`Private`numerationsystemlist]; {
              IntegerSequences`Private`relations, 
               IntegerSequences`Private`basissequences, 
               IntegerSequences`Private`redundantsequencechains} = 
             IntegerSequences`Private`FindSequenceRelations[
              IntegerSequences`Private`array, 
               IntegerSequences`Private`numerationsystemlist, 
               "AutomaticSequence", Monitor -> OptionValue[Monitor]]; 
            If[IntegerSequences`Private`relations === $Failed, 
              Throw[True]]; 
            IntegerSequences`Private`initialconditions = 
             Map[# -> Part[IntegerSequences`Private`array, 
                 Apply[
                 Sequence, 
                  MapThread[
                   IntegerSequences`FromDigitList, {#, 
                    IntegerSequences`Private`numerationsystemlist}] + 1]]& , 
               Join[IntegerSequences`Private`basissequences, 
                Map[Last, IntegerSequences`Private`redundantsequencechains]]]; 
            IntegerSequences`Private`edges = Join[
               Apply[Join, 
                Map[
                 Function[IntegerSequences`Private`basissequence, 
                  Map[
                   Function[
                   IntegerSequences`Private`subsequence, 
                    IntegerSequences`Private`newbasissequence = 
                    Replace[
                    IntegerSequences`Private`subsequence, 
                    IntegerSequences`Private`relations]; If[
                    Apply[Or, 
                    MapThread[
                    
                    Function[{
                    IntegerSequences`Private`subsequenceprefix, 
                    IntegerSequences`Private`endprefix, 
                    IntegerSequences`Private`numsystem}, 
                    Or[
                    And[IntegerSequences`Private`numsystem === "Fibonacci", 
                    MatchQ[IntegerSequences`Private`subsequenceprefix, {
                    BlankNullSequence[], 0}], 
                    MatchQ[IntegerSequences`Private`endprefix, {
                    BlankNullSequence[], 1}]], 
                    And[IntegerSequences`Private`numsystem === "Tribonacci", 
                    MatchQ[IntegerSequences`Private`subsequenceprefix, {
                    BlankNullSequence[], 0}], 
                    MatchQ[IntegerSequences`Private`endprefix, {
                    BlankNullSequence[], 1, 1}]]]], {
                    IntegerSequences`Private`subsequence, 
                    IntegerSequences`Private`newbasissequence, 
                    IntegerSequences`Private`numerationsystemlist}]], 
                    IntegerSequences`Private`newbasissequence = 
                    Map[Append[#, 0]& , 
                    IntegerSequences`Private`newbasissequence]]; {
                    IntegerSequences`Private`basissequence -> 
                    IntegerSequences`Private`newbasissequence, 
                    Map[Last, IntegerSequences`Private`subsequence]}], 
                   IntegerSequences`Private`ArithmeticSubsequences[
                   IntegerSequences`Private`basissequence, 
                    IntegerSequences`Private`numerationsystemlist]]], 
                 Replace[
                 IntegerSequences`Private`basissequences, 
                  IntegerSequences`Private`redundantsequencechains, {1}]]], 
               Map[
                Function[
                IntegerSequences`Private`redundantsequencechain, {
                 IntegerSequences`Private`redundantsequencechain, 
                  Map[Last, 
                   Last[IntegerSequences`Private`redundantsequencechain]]}], 
                IntegerSequences`Private`redundantsequencechains]]; If[
              And[
               TrueQ[
                OptionValue[IntegerSequences`FlattenInputAlphabet]], 
               IntegerSequences`Private`dimension == 1], 
              IntegerSequences`Private`edges = Map[
                 MapAt[First, 2], IntegerSequences`Private`edges]; 
              IntegerSequences`Private`numerationsystem = 
               First[IntegerSequences`Private`numerationsystemlist], 
              IntegerSequences`Private`numerationsystem = 
              IntegerSequences`Private`numerationsystemlist]; 
            IntegerSequences`Private`automaton = 
             IntegerSequences`Automaton[IntegerSequences`Private`edges, 
               ConstantArray[{}, IntegerSequences`Private`dimension], 
               IntegerSequences`Private`initialconditions]; If[
              TrueQ[
               OptionValue[IntegerSequences`IndexedStateNames]], 
              IntegerSequences`Private`automaton = 
              IntegerSequences`Private`IndexAutomaton[
               IntegerSequences`Private`automaton]]; False]; Condition[
           IntegerSequences`AutomaticSequence[
           IntegerSequences`Private`automaton, 
            IntegerSequences`Private`numerationsystem], 
           Not[IntegerSequences`Private`failed]]], 
       IntegerSequences`FindAutomaticSequenceFunction[
         Pattern[IntegerSequences`Private`array, 
          Blank[]], 
         Pattern[IntegerSequences`Private`numerationsystem, 
          Blank[]], 
         Pattern[IntegerSequences`Private`n, 
          Blank[]], 
         Pattern[IntegerSequences`Private`options, 
          OptionsPattern[]]] :> 
       With[{IntegerSequences`Private`automaticsequence = 
          IntegerSequences`FindAutomaticSequenceFunction[
           IntegerSequences`Private`array, 
            IntegerSequences`Private`numerationsystem, 
            IntegerSequences`Private`options]}, 
         Condition[
          IntegerSequences`Private`automaticsequence[
          IntegerSequences`Private`n], 
          Not[
           MatchQ[IntegerSequences`Private`automaticsequence, 
            Blank[IntegerSequences`FindAutomaticSequenceFunction]]]]]}], 
    "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`FindAutomaticSequenceFunction, {
      SyntaxInformation[IntegerSequences`FindAutomaticSequenceFunction] -> {
        "ArgumentsPattern" -> {{
            BlankSequence[]}, 
           Blank[], 
           Optional[
            Blank[]], 
           OptionsPattern[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {
     IntegerSequences`FlattenInputAlphabet -> True, 
      IntegerSequences`IndexedStateNames -> True, Monitor -> False}, 
    "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`FindAutomaticSequenceFunction"], False]]], "Output",Expr\
essionUUID->"3bf303e8-7a27-41e2-92f8-b578c3a01cc1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"t", "=", 
  RowBox[{"FindAutomaticSequenceFunction", "[", 
   RowBox[{
    RowBox[{"ThueMorse", "[", 
     RowBox[{"Range", "[", 
      RowBox[{"0", ",", "100"}], "]"}], "]"}], ",", "2"}], "]"}]}]], "Input",E\
xpressionUUID->"32ade8e7-6c6a-4ad2-8c50-a0adb3ed3586"],

Cell[BoxData[
 RowBox[{"AutomaticSequence", "[", 
  RowBox[{
   RowBox[{"Automaton", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "1"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "1"}], ",", "1"}], "}"}]}], "}"}], ",", "1", 
     ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "0"}], ",", 
       RowBox[{"2", "\[Rule]", "1"}]}], "}"}]}], "]"}], ",", "2"}], 
  "]"}]], "Output",ExpressionUUID->"77c39be9-10ab-4c5d-af8d-f7474fb0214f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"t", "[", "n", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "15"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"353795f0-ca55-4fee-88b7-7a2a271c8234"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "1", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", 
   ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "1", ",", "1", ",", 
   "0"}], "}"}]], "Output",ExpressionUUID->"8feb05b3-ed28-4823-a09b-\
c233bc5521b2"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", "t", "]"}]], "Input",ExpressionUUID->"27a976a5-2b9e-4414-9f71-f1469fa039ad"],

Cell[TextData[{
 "Binomial coefficients modulo ",
 Cell[BoxData[
  FormBox["2", TraditionalForm]],ExpressionUUID->
  "2677e9a1-3d23-4dc0-b72f-1707bde8c2d4"],
 ":"
}], "Text",ExpressionUUID->"6b91be58-38fb-4500-a618-e8c6ef22fce5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"b", "=", 
  RowBox[{"FindAutomaticSequenceFunction", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{
        RowBox[{"Binomial", "[", 
         RowBox[{"n", ",", "m"}], "]"}], ",", "2"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "0", ",", "100"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"m", ",", "0", ",", "100"}], "}"}]}], "]"}], ",", "2"}], 
   "]"}]}]], "Input",ExpressionUUID->"4e5e9fcb-c41f-4cea-ab56-e2cbd42f353b"],

Cell[BoxData[
 RowBox[{"AutomaticSequence", "[", 
  RowBox[{
   RowBox[{"Automaton", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "1"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "2"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "1"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "1"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "2"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "0"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "2"}], ",", 
         RowBox[{"{", 
          RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "2"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "0"}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"2", "\[Rule]", "2"}], ",", 
         RowBox[{"{", 
          RowBox[{"1", ",", "1"}], "}"}]}], "}"}]}], "}"}], ",", "1", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"1", "\[Rule]", "1"}], ",", 
       RowBox[{"2", "\[Rule]", "0"}]}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}]}], "]"}]], "Output",ExpressionUUID->\
"4215144b-dd2a-4c88-b284-79f66d086d7a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArrayPlot", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"b", "[", 
     RowBox[{"n", ",", "m"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "0", ",", "63"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"m", ",", "0", ",", "63"}], "}"}]}], "]"}], "]"}]], "Input",Expre\
ssionUUID->"c6653512-cae8-411d-a74b-00aeace60369"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJylldEJAzEMQ+1u0k06Q0foAt3/r7R3JRebSJF9IQgjLg9jhO+v9/N1M7PH
edufN49573rzflvo6O+Vhh5SV2/qf4zV+jzl2kYvpfrSS6m262uFenqtUM+l
XnuzjnFW/XBkP+RZ9sOV/ZBn2Q95lv2QZ9kPKvuLuW77i7lu+4u5bvu+7m3L
B71t+fD1DR/b3Mc298lHfk/5ZnnPfHw5H1/Ox/ud8w0q52PlfKycj/c75+P9
zvl4v3M+3u+cj/c75+P9zvm45nxcc76W98zX8p75Wt4zX8t75mt5z3wt75k/
q86fVefX5j74tbkPfr33g1/v/eB36PW5D37r9ybd/QNaOg9Q
   "], {{0, 0}, {64, 64}}, {0, 1}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic}]], "Output",ExpressionUUID->"2f631c0b-1069-4f77-ab32-\
e82f107d9a6f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", "b", "]"}]], "Input",ExpressionUUID->"cf2363ca-6239-4ce8-8811-00bea40d52c3"],

Cell[TextData[{
 StyleBox["FindAutomaticSequenceFunction", "Input"],
 " has the same options as ",
 StyleBox["FindAutomaticSequenceAutomaton", "Input"],
 ":"
}], "Text",ExpressionUUID->"e0f2ae17-8796-4aba-b82f-7b53a47b77c4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Options", "[", "FindAutomaticSequenceFunction", "]"}]], "Input",Expr\
essionUUID->"8c0f0e9b-c720-43aa-8981-042c647e1cb3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"FlattenInputAlphabet", "\[Rule]", "True"}], ",", 
   RowBox[{"IndexedStateNames", "\[Rule]", "True"}], ",", 
   RowBox[{"Monitor", "\[Rule]", "False"}]}], "}"}]], "Output",ExpressionUUID->\
"56f11eca-95ef-4349-81cf-21da32670935"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["FindAutomaticSequenceRecurrence", "Input"]], \
"Subsubsection",ExpressionUUID->"f307f14a-4a88-4c0a-a331-c1b752167aad"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "FindAutomaticSequenceRecurrence"}]], "Input",ExpressionUUID->"264b63a2-b76e-485a-ab22-765e9cbb03ee"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"\
FindAutomaticSequenceRecurrence\\\", \\\"[\\\", RowBox[List[RowBox[List[\\\"{\
\\\", RowBox[List[SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], \
StyleBox[\\\"0\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"a\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"]]], \\\"}\\\"]], \\\",\\\", \
StyleBox[\\\"k\\\", \\\"TI\\\"], \\\",\\\", RowBox[List[StyleBox[\\\"s\\\", \
\\\"TI\\\"], \\\"[\\\", StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]]], \\\"]\
\\\"]]\\) attempts to find equalities between subsequences of the sequence \
\\!\\(\\*SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], StyleBox[\\\"n\\\", \\\
\"TI\\\"]]\\) of the form \\!\\(\\*RowBox[List[StyleBox[\\\"s\\\", \
\\\"TI\\\"], \\\"[\\\", RowBox[List[RowBox[List[SuperscriptBox[StyleBox[\\\"k\
\\\", \\\"TI\\\"], StyleBox[\\\"e\\\", \\\"TI\\\"]], \\\" \\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"]]], \\\"+\\\", StyleBox[\\\"i\\\", \
\\\"TI\\\"]]], \\\"]\\\"]]\\) that determine the \
sequence.\\n\\!\\(\\*RowBox[List[\\\"FindAutomaticSequenceRecurrence\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"array\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"d\\\", \
\\\"TI\\\"]]]], \\\"}\\\"]], \\\",\\\", RowBox[List[StyleBox[\\\"s\\\", \
\\\"TI\\\"], \\\"[\\\", RowBox[List[SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\
\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"n\
\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\
\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"n\\\", \
\\\"TI\\\"], StyleBox[\\\"d\\\", \\\"TI\\\"]]]], \\\"]\\\"]]]], \
\\\"]\\\"]]\\) finds equalities between subarrays of a \
\\!\\(\\*StyleBox[\\\"d\\\", \\\"TI\\\"]\\)\[Hyphen]dimensional sequence in \
bases \\!\\(\\*RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \
\\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", \
StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", \
SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"d\\\", \
\\\"TI\\\"]]]]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"FindAutomaticSequenceRecurrence", "[", 
                    RowBox[{"IntegerSequences`Private`array_", ",", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystem_", "?", 
                    "IntegerSequences`Private`PositiveNumerationSystemQ"}], 
                    ",", 
                    RowBox[{"IntegerSequences`Private`symbol", ":", 
                    RowBox[{
                    RowBox[{"Except", "[", "Rule", "]"}], "[", "__", "]"}]}], 
                    ",", 
                    RowBox[{"IntegerSequences`Private`options", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"FindAutomaticSequenceRecurrence", "[", 
                    RowBox[{"IntegerSequences`Private`array", ",", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"IntegerSequences`Private`numerationsystem", ",", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`symbol", "]"}]}],
                     "]"}], ",", "IntegerSequences`Private`symbol", ",", 
                    "IntegerSequences`Private`options"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"FindAutomaticSequenceRecurrence", "[", 
                    RowBox[{"IntegerSequences`Private`array_List", ",", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystemlist", ":", 
                    RowBox[{"{", 
                    RowBox[{"__", "?", 
                    "IntegerSequences`Private`PositiveNumerationSystemQ"}], 
                    "}"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`symbol", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"IntegerSequences`Private`a", ":", 
                    RowBox[{"Except", "[", "Rule", "]"}]}], ")"}], "[", 
                    RowBox[{
                    "__", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}], "]"}]}], 
                    ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{
                    "Length", "[", 
                    "IntegerSequences`Private`numerationsystemlist", "]"}], 
                    "\[Equal]", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`symbol", "]"}], 
                    "\[LessEqual]", 
                    RowBox[{
                    "ArrayDepth", "[", "IntegerSequences`Private`array", 
                    "]"}]}]}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`dimension", ",", 
                    "IntegerSequences`Private`relations", ",", 
                    "IntegerSequences`Private`basissequences", ",", 
                    "IntegerSequences`Private`initialconditions", ",", 
                    "IntegerSequences`Private`failed", ",", 
                    "IntegerSequences`Private`head"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`failed", "=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`dimension", "=", 
                    RowBox[{
                    "Length", "[", 
                    "IntegerSequences`Private`numerationsystemlist", "]"}]}], 
                    ";", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`relations", ",", 
                    "IntegerSequences`Private`basissequences"}], "}"}], "=", 
                    RowBox[{"Most", "[", 
                    RowBox[{
                    "IntegerSequences`Private`FindSequenceRelations", "[", 
                    RowBox[{
                    "IntegerSequences`Private`array", ",", 
                    "IntegerSequences`Private`numerationsystemlist", 
                    ",", "\<\"AutomaticSequence\"\>", ",", 
                    RowBox[{"Monitor", "\[Rule]", 
                    RowBox[{"OptionValue", "[", "Monitor", "]"}]}]}], "]"}], 
                    "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`relations", "===", "$Failed"}], 
                    ",", 
                    RowBox[{"Throw", "[", "True", "]"}]}], "]"}], ";", 
                    RowBox[{"IntegerSequences`Private`initialconditions", "=", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`SymbolicSubsequence", "[", 
                    RowBox[{
                    "#1", ",", 
                    "IntegerSequences`Private`numerationsystemlist", ",", 
                    RowBox[{"IntegerSequences`Private`head", "@@", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"0", ",", "IntegerSequences`Private`dimension"}], 
                    "]"}]}]}], "]"}], "\[Equal]", 
                    RowBox[{
                    "IntegerSequences`Private`array", "\[LeftDoubleBracket]", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{"FromDigitList", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "#1", ",", 
                    "IntegerSequences`Private`numerationsystemlist"}], 
                    "}"}]}], "]"}], "+", "1"}], ")"}]}], 
                    "\[RightDoubleBracket]"}]}], "&"}], ")"}], "/@", 
                    "IntegerSequences`Private`basissequences"}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`relations", "=", 
                    RowBox[{"Apply", "[", 
                    RowBox[{"Equal", ",", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`SymbolicSubsequence", "[", 
                    RowBox[{
                    "#1", ",", 
                    "IntegerSequences`Private`numerationsystemlist", ",", 
                    "IntegerSequences`Private`symbol"}], "]"}], "&"}], ",", 
                    "IntegerSequences`Private`relations", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}], ";", "False"}], 
                    "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Switch", "[", 
                    RowBox[{
                    RowBox[{"OptionValue", "[", "\<\"Output\"\>", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"\<\"Full\"\>", "|", "Full"}], ",", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    "IntegerSequences`Private`relations", ",", 
                    "IntegerSequences`Private`initialconditions"}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"\<\"Condensed\"\>", "|", "_"}], ",", 
                    RowBox[{"KeyValueMap", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`rightside", ",", 
                    "IntegerSequences`Private`class"}], "}"}], ",", 
                    RowBox[{"Equal", "@@", 
                    RowBox[{"Append", "[", 
                    RowBox[{
                    "IntegerSequences`Private`class", ",", 
                    "IntegerSequences`Private`rightside"}], "]"}]}]}], "]"}], 
                    ",", 
                    RowBox[{"GroupBy", "[", 
                    RowBox[{
                    RowBox[{"Join", "[", 
                    RowBox[{
                    "IntegerSequences`Private`relations", ",", 
                    "IntegerSequences`Private`initialconditions"}], "]"}], 
                    ",", 
                    RowBox[{"Last", "\[Rule]", "First"}]}], "]"}]}], "]"}]}], 
                    "]"}], "/.", "\[VeryThinSpace]", 
                    RowBox[{
                    "IntegerSequences`Private`head", "\[Rule]", 
                    "IntegerSequences`Private`a"}]}], ")"}], "/;", 
                    RowBox[{"!", "IntegerSequences`Private`failed"}]}]}]}], 
                    "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", 
                    "FindAutomaticSequenceRecurrence", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "__", "}"}], ",", "_", ",", "_", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`FindAutomaticSequenceRecurrence] = {
                    "ArgumentsPattern" -> {{
                    BlankSequence[]}, 
                    Blank[], 
                    Blank[], 
                    OptionsPattern[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\<\"Output\"\>", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"Monitor", "\[Rule]", "False"}]}], "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`FindAutomaticSequenceRecurrence\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"\
FindAutomaticSequenceRecurrence\\\", \\\"[\\\", RowBox[List[RowBox[List[\\\"{\
\\\", RowBox[List[SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], \
StyleBox[\\\"0\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"a\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"]]], \\\"}\\\"]], \\\",\\\", \
StyleBox[\\\"k\\\", \\\"TI\\\"], \\\",\\\", RowBox[List[StyleBox[\\\"s\\\", \
\\\"TI\\\"], \\\"[\\\", StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]]], \\\"]\
\\\"]]\\) attempts to find equalities between subsequences of the sequence \
\\!\\(\\*SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], StyleBox[\\\"n\\\", \\\
\"TI\\\"]]\\) of the form \\!\\(\\*RowBox[List[StyleBox[\\\"s\\\", \
\\\"TI\\\"], \\\"[\\\", RowBox[List[RowBox[List[SuperscriptBox[StyleBox[\\\"k\
\\\", \\\"TI\\\"], StyleBox[\\\"e\\\", \\\"TI\\\"]], \\\" \\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"]]], \\\"+\\\", StyleBox[\\\"i\\\", \
\\\"TI\\\"]]], \\\"]\\\"]]\\) that determine the \
sequence.\\n\\!\\(\\*RowBox[List[\\\"FindAutomaticSequenceRecurrence\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"array\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"d\\\", \
\\\"TI\\\"]]]], \\\"}\\\"]], \\\",\\\", RowBox[List[StyleBox[\\\"s\\\", \
\\\"TI\\\"], \\\"[\\\", RowBox[List[SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\
\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"n\
\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\
\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"n\\\", \
\\\"TI\\\"], StyleBox[\\\"d\\\", \\\"TI\\\"]]]], \\\"]\\\"]]]], \
\\\"]\\\"]]\\) finds equalities between subarrays of a \
\\!\\(\\*StyleBox[\\\"d\\\", \\\"TI\\\"]\\)\[Hyphen]dimensional sequence in \
bases \\!\\(\\*RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \
\\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", \
StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", \
SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"d\\\", \
\\\"TI\\\"]]]]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"FindAutomaticSequenceRecurrence\", \"[\", \
RowBox[List[RowBox[List[\"{\", RowBox[List[SubscriptBox[StyleBox[\"a\", \
\"TI\"], StyleBox[\"0\", \"TR\"]], \",\", SubscriptBox[StyleBox[\"a\", \
\"TI\"], StyleBox[\"1\", \"TR\"]], \",\", StyleBox[\"\\[Ellipsis]\", \
\"TR\"]]], \"}\"]], \",\", StyleBox[\"k\", \"TI\"], \",\", \
RowBox[List[StyleBox[\"s\", \"TI\"], \"[\", StyleBox[\"n\", \"TI\"], \
\"]\"]]]], \"]\"]]\) attempts to find equalities between subsequences of the \
sequence \!\(\*SubscriptBox[StyleBox[\"a\", \"TI\"], StyleBox[\"n\", \"TI\"]]\
\) of the form \!\(\*RowBox[List[StyleBox[\"s\", \"TI\"], \"[\", \
RowBox[List[RowBox[List[SuperscriptBox[StyleBox[\"k\", \"TI\"], \
StyleBox[\"e\", \"TI\"]], \" \", StyleBox[\"n\", \"TI\"]]], \"+\", \
StyleBox[\"i\", \"TI\"]]], \"]\"]]\) that determine the sequence.\n\
\!\(\*RowBox[List[\"FindAutomaticSequenceRecurrence\", \"[\", \
RowBox[List[StyleBox[\"array\", \"TI\"], \",\", RowBox[List[\"{\", \
RowBox[List[SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"1\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"2\", \"TR\"]], \",\", \
StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", SubscriptBox[StyleBox[\"k\", \
\"TI\"], StyleBox[\"d\", \"TI\"]]]], \"}\"]], \",\", RowBox[List[StyleBox[\"s\
\", \"TI\"], \"[\", RowBox[List[SubscriptBox[StyleBox[\"n\", \"TI\"], \
StyleBox[\"1\", \"TR\"]], \",\", SubscriptBox[StyleBox[\"n\", \"TI\"], \
StyleBox[\"2\", \"TR\"]], \",\", StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", \
SubscriptBox[StyleBox[\"n\", \"TI\"], StyleBox[\"d\", \"TI\"]]]], \"]\"]]]], \
\"]\"]]\) finds equalities between subarrays of a \!\(\*StyleBox[\"d\", \
\"TI\"]\)\[Hyphen]dimensional sequence in bases \
\!\(\*RowBox[List[SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"1\", \
\"TR\"]], \",\", SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"2\", \
\"TR\"]], \",\", StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", \
SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"d\", \"TI\"]]]]\).", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`FindAutomaticSequenceRecurrence, {
      IntegerSequences`FindAutomaticSequenceRecurrence[
         Pattern[IntegerSequences`Private`array, 
          Blank[]], 
         PatternTest[
          Pattern[IntegerSequences`Private`numerationsystem, 
           Blank[]], IntegerSequences`Private`PositiveNumerationSystemQ], 
         Pattern[IntegerSequences`Private`symbol, 
          Except[Rule][
           BlankSequence[]]], 
         Pattern[IntegerSequences`Private`options, 
          OptionsPattern[]]] :> 
       IntegerSequences`FindAutomaticSequenceRecurrence[
        IntegerSequences`Private`array, 
         ConstantArray[IntegerSequences`Private`numerationsystem, 
          Length[IntegerSequences`Private`symbol]], 
         IntegerSequences`Private`symbol, IntegerSequences`Private`options], 
       Condition[
         IntegerSequences`FindAutomaticSequenceRecurrence[
          Pattern[IntegerSequences`Private`array, 
           Blank[List]], 
          Pattern[IntegerSequences`Private`numerationsystemlist, {
            PatternTest[
             BlankSequence[], 
             IntegerSequences`Private`PositiveNumerationSystemQ]}], 
          Pattern[IntegerSequences`Private`symbol, 
           Pattern[IntegerSequences`Private`a, 
            Except[Rule]][
            PatternTest[
             BlankSequence[], IntegerSequences`Private`PlausibleVariableQ]]], 
          OptionsPattern[]], 
         Inequality[
          Length[IntegerSequences`Private`numerationsystemlist], Equal, 
          Length[IntegerSequences`Private`symbol], LessEqual, 
          ArrayDepth[IntegerSequences`Private`array]]] :> 
       Module[{IntegerSequences`Private`dimension, 
          IntegerSequences`Private`relations, 
          IntegerSequences`Private`basissequences, 
          IntegerSequences`Private`initialconditions, 
          IntegerSequences`Private`failed, IntegerSequences`Private`head}, 
         IntegerSequences`Private`failed = 
          Catch[IntegerSequences`Private`dimension = 
             Length[IntegerSequences`Private`numerationsystemlist]; {
              IntegerSequences`Private`relations, 
               IntegerSequences`Private`basissequences} = Most[
               IntegerSequences`Private`FindSequenceRelations[
               IntegerSequences`Private`array, 
                IntegerSequences`Private`numerationsystemlist, 
                "AutomaticSequence", Monitor -> OptionValue[Monitor]]]; 
            If[IntegerSequences`Private`relations === $Failed, 
              Throw[True]]; 
            IntegerSequences`Private`initialconditions = DeleteDuplicates[
               Map[
               IntegerSequences`Private`SymbolicSubsequence[#, 
                  IntegerSequences`Private`numerationsystemlist, 
                  Apply[IntegerSequences`Private`head, 
                   ConstantArray[0, IntegerSequences`Private`dimension]]] == 
                Part[IntegerSequences`Private`array, 
                  Apply[
                  Sequence, 
                   MapThread[
                    IntegerSequences`FromDigitList, {#, 
                    IntegerSequences`Private`numerationsystemlist}] + 1]]& , 
                IntegerSequences`Private`basissequences]]; 
            IntegerSequences`Private`relations = Apply[Equal, 
               Map[
               IntegerSequences`Private`SymbolicSubsequence[#, 
                 IntegerSequences`Private`numerationsystemlist, 
                 IntegerSequences`Private`symbol]& , 
                IntegerSequences`Private`relations, {2}], {1}]; False]; 
         Condition[
           ReplaceAll[
            Switch[
             OptionValue["Output"], 
             Alternatives["Full", Full], 
             Join[
             IntegerSequences`Private`relations, 
              IntegerSequences`Private`initialconditions], 
             Alternatives["Condensed", 
              Blank[]], 
             KeyValueMap[
              
              Function[{
               IntegerSequences`Private`rightside, 
                IntegerSequences`Private`class}, 
               Apply[Equal, 
                Append[
                IntegerSequences`Private`class, 
                 IntegerSequences`Private`rightside]]], 
              GroupBy[
               Join[
               IntegerSequences`Private`relations, 
                IntegerSequences`Private`initialconditions], Last -> First]]],
             IntegerSequences`Private`head -> IntegerSequences`Private`a], 
           Not[IntegerSequences`Private`failed]]]}], "SubValues" -> None, 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`FindAutomaticSequenceRecurrence, {
      SyntaxInformation[IntegerSequences`FindAutomaticSequenceRecurrence] -> {
        "ArgumentsPattern" -> {{
            BlankSequence[]}, 
           Blank[], 
           Blank[], 
           OptionsPattern[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {"Output" -> Automatic, Monitor -> False}, 
    "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`FindAutomaticSequenceRecurrence"], False]]], "Output",Ex\
pressionUUID->"f0fdb04e-e401-42d9-89f5-1df0ef4961a8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindAutomaticSequenceRecurrence", "[", 
  RowBox[{
   RowBox[{"ThueMorse", "[", 
    RowBox[{"Range", "[", 
     RowBox[{"0", ",", "100"}], "]"}], "]"}], ",", "2", ",", 
   RowBox[{"T", "[", "n", "]"}]}], "]"}]], "Input",ExpressionUUID->"594e8f4d-\
09d4-4262-8776-930e89ef5c4e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"T", "[", 
     RowBox[{"2", " ", "n"}], "]"}], "\[Equal]", 
    RowBox[{"T", "[", 
     RowBox[{"3", "+", 
      RowBox[{"4", " ", "n"}]}], "]"}], "\[Equal]", 
    RowBox[{"T", "[", "n", "]"}]}], ",", 
   RowBox[{
    RowBox[{"T", "[", 
     RowBox[{"1", "+", 
      RowBox[{"4", " ", "n"}]}], "]"}], "\[Equal]", 
    RowBox[{"T", "[", 
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "n"}]}], "]"}]}], ",", 
   RowBox[{
    RowBox[{"T", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
   RowBox[{
    RowBox[{"T", "[", "1", "]"}], "\[Equal]", "1"}]}], "}"}]], "Output",Expres\
sionUUID->"bea56d40-b6d4-482d-bb73-2b398c332314"]
}, Open  ]],

Cell[TextData[{
 "Binomial coefficients modulo ",
 Cell[BoxData[
  FormBox["2", TraditionalForm]],ExpressionUUID->
  "b8f62557-4d1d-44b9-ac91-3d6531503add"],
 ":"
}], "Text",ExpressionUUID->"60aeca87-6136-4160-884b-aa130eec8041"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindAutomaticSequenceRecurrence", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Mod", "[", 
      RowBox[{
       RowBox[{"Binomial", "[", 
        RowBox[{"n", ",", "m"}], "]"}], ",", "2"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "0", ",", "100"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"m", ",", "0", ",", "100"}], "}"}]}], "]"}], ",", "2", ",", 
   RowBox[{"b", "[", 
    RowBox[{"n", ",", "m"}], "]"}]}], "]"}]], "Input",ExpressionUUID->\
"a17222d3-491f-4698-be0b-b55e378b6444"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"b", "[", 
     RowBox[{
      RowBox[{"2", " ", "n"}], ",", 
      RowBox[{"2", " ", "m"}]}], "]"}], "\[Equal]", 
    RowBox[{"b", "[", 
     RowBox[{
      RowBox[{"1", "+", 
       RowBox[{"2", " ", "n"}]}], ",", 
      RowBox[{"2", " ", "m"}]}], "]"}], "\[Equal]", 
    RowBox[{"b", "[", 
     RowBox[{
      RowBox[{"1", "+", 
       RowBox[{"2", " ", "n"}]}], ",", 
      RowBox[{"1", "+", 
       RowBox[{"2", " ", "m"}]}]}], "]"}], "\[Equal]", 
    RowBox[{"b", "[", 
     RowBox[{"n", ",", "m"}], "]"}]}], ",", 
   RowBox[{
    RowBox[{"b", "[", 
     RowBox[{
      RowBox[{"4", " ", "n"}], ",", 
      RowBox[{"1", "+", 
       RowBox[{"4", " ", "m"}]}]}], "]"}], "\[Equal]", 
    RowBox[{"b", "[", 
     RowBox[{
      RowBox[{"4", " ", "n"}], ",", 
      RowBox[{"3", "+", 
       RowBox[{"4", " ", "m"}]}]}], "]"}], "\[Equal]", 
    RowBox[{"b", "[", 
     RowBox[{
      RowBox[{"2", "+", 
       RowBox[{"4", " ", "n"}]}], ",", 
      RowBox[{"1", "+", 
       RowBox[{"4", " ", "m"}]}]}], "]"}], "\[Equal]", 
    RowBox[{"b", "[", 
     RowBox[{
      RowBox[{"2", "+", 
       RowBox[{"4", " ", "n"}]}], ",", 
      RowBox[{"3", "+", 
       RowBox[{"4", " ", "m"}]}]}], "]"}], "\[Equal]", 
    RowBox[{"b", "[", 
     RowBox[{
      RowBox[{"2", " ", "n"}], ",", 
      RowBox[{"1", "+", 
       RowBox[{"2", " ", "m"}]}]}], "]"}]}], ",", 
   RowBox[{
    RowBox[{"b", "[", 
     RowBox[{"0", ",", "0"}], "]"}], "\[Equal]", "1"}], ",", 
   RowBox[{
    RowBox[{"b", "[", 
     RowBox[{"0", ",", "1"}], "]"}], "\[Equal]", "0"}]}], "}"}]], "Output",Exp\
ressionUUID->"d874cd7e-8716-450e-8ad8-6ca65f239896"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["FindPolynomial", "Input"],
 StyleBox[" (a variant of ", "Text",
  FontWeight->"Plain"],
 StyleBox["InterpolatingPolynomial", "Input"],
 StyleBox[")", "Text",
  FontWeight->"Plain"]
}], "Subsubsection",ExpressionUUID->"6c33381a-ce66-40ff-b12d-ebe53ffbf7b1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "FindPolynomial"}]], "Input",ExpressionUUID->"fd0b30d9-c703-4836-a291-8467d9690bd4"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"FindPolynomial\\\", \
\\\"[\\\", RowBox[List[RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"]]], \\\"}\\\"]], \\\",\\\", StyleBox[\\\"x\\\", \\\"TI\\\"]]], \
\\\"]\\\"]]\\) constructs an interpolating polynomial in \\!\\(\\*StyleBox[\\\
\"x\\\", \\\"TI\\\"]\\) which reproduces the function values \
\\!\\(\\*SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], StyleBox[\\\"i\\\", \\\
\"TI\\\"]]\\) at successive integer values \
\\!\\(\\*RowBox[List[StyleBox[\\\"1\\\", \\\"TR\\\"], \\\",\\\", \
StyleBox[\\\"2\\\", \\\"TR\\\"], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"]]]\\) of \\!\\(\\*StyleBox[\\\"x\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[List[\\\"FindPolynomial\\\", \\\"[\\\", \
RowBox[List[RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], StyleBox[\\\"d\\\", \
\\\"TI\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], \
RowBox[List[StyleBox[\\\"d\\\", \\\"TI\\\"], \\\"+\\\", StyleBox[\\\"1\\\", \
\\\"TR\\\"]]]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"]]], \\\
\"}\\\"]], \\\",\\\", StyleBox[\\\"x\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\
\"d\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) indexes terms beginning at \
\\!\\(\\*StyleBox[\\\"d\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[List[\\\"FindPolynomial\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"array\\\", \\\"TI\\\"], \\\",\\\", RowBox[List[\\\"{\
\\\", RowBox[List[StyleBox[\\\"x\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"y\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"]]], \\\"}\\\"]], \\\",\\\", RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"d\\\", \\\"TI\\\"], StyleBox[\\\"x\\\", \
\\\"TI\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"d\\\", \\\"TI\\\"], \
StyleBox[\\\"y\\\", \\\"TI\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"]]], \\\"}\\\"]]]], \\\"]\\\"]]\\) gives a multivariate polynomial \
which provides an exact fit to a full array of values.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"FindPolynomial", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`data_List", "/;", 
                    RowBox[{
                    RowBox[{
                    "ArrayDepth", "[", "IntegerSequences`Private`data", "]"}],
                     "\[Equal]", "1"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`var", ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`offset", ":", 
                    RowBox[{"Except", "[", "_Rule", "]"}], ":", "1"}], ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`f", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"OptionValue", "[", "IntermediateFunction", "]"}],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Automatic", "\[Rule]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"#1", ",", "IntegerSequences`Private`var"}], 
                    "]"}], "&"}], ")"}]}], ",", 
                    RowBox[{"None", "\[Rule]", "Identity"}]}], "}"}]}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"IntegerSequences`Private`f", "[", 
                    RowBox[{
                    RowBox[{"InterpolatingPolynomial", "[", 
                    RowBox[{
                    "IntegerSequences`Private`data", ",", 
                    "IntegerSequences`Private`var"}], "]"}], "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{"IntegerSequences`Private`var", "\[Rule]", 
                    RowBox[{"IntegerSequences`Private`var", "-", 
                    "IntegerSequences`Private`offset", "+", "1"}]}]}], 
                    "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"FindPolynomial", "[", 
                    RowBox[{
                    "IntegerSequences`Private`data_List", ",", 
                    "IntegerSequences`Private`vars_List", ",", 
                    "IntegerSequences`Private`offsets_List", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{
                    "ArrayDepth", "[", "IntegerSequences`Private`data", "]"}],
                     "\[Equal]", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`vars", "]"}], 
                    "\[Equal]", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`offsets", 
                    "]"}]}]}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`f", ",", 
                    "IntegerSequences`Private`g"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`f", ",", 
                    "IntegerSequences`Private`g"}], "}"}], "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"OptionValue", "[", "IntermediateFunction", "]"}],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Automatic", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`symbolicvariables", "=", 
                    RowBox[{"Alternatives", "@@", 
                    RowBox[{
                    "Variables", "[", "IntegerSequences`Private`data", 
                    "]"}]}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    "#1", ",", "IntegerSequences`Private`symbolicvariables"}],
                     "]"}], "&"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{
                    "Alternatives", "@@", "IntegerSequences`Private`vars"}]}],
                     "]"}], "&"}]}], "}"}]}], ",", 
                    RowBox[{"None", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"Identity", ",", "Identity"}], "}"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`h_", "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`h", ",", 
                    "IntegerSequences`Private`h"}], "}"}]}]}], "}"}]}], 
                    "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`g", "[", 
                    RowBox[{"FromCoefficientList", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`FindPolynomialCoefficientList", 
                    "[", 
                    RowBox[{
                    "IntegerSequences`Private`data", ",", 
                    "IntegerSequences`Private`offsets", ",", 
                    "IntegerSequences`Private`f"}], "]"}], ",", 
                    "IntegerSequences`Private`vars"}], "]"}], "]"}]}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"FindPolynomial", "[", 
                    RowBox[{
                    "IntegerSequences`Private`data_List", ",", 
                    "IntegerSequences`Private`vars_List", ",", 
                    RowBox[{"IntegerSequences`Private`options", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{
                    "ArrayDepth", "[", "IntegerSequences`Private`data", "]"}],
                     "\[Equal]", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`vars", "]"}]}]}],
                     ":=", 
                    RowBox[{"FindPolynomial", "[", 
                    RowBox[{
                    "IntegerSequences`Private`data", ",", 
                    "IntegerSequences`Private`vars", ",", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`vars", "]"}]}], 
                    "]"}], ",", "IntegerSequences`Private`options"}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "FindPolynomial", "]"}],
                     "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "__", "}"}], ",", "_", ",", "_.", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`FindPolynomial] = {
                    "ArgumentsPattern" -> {{
                    BlankSequence[]}, 
                    Blank[], 
                    Optional[
                    Blank[]], 
                    OptionsPattern[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"IntermediateFunction", "\[Rule]", "Automatic"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`FindPolynomial\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"FindPolynomial\\\", \
\\\"[\\\", RowBox[List[RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"]]], \\\"}\\\"]], \\\",\\\", StyleBox[\\\"x\\\", \\\"TI\\\"]]], \
\\\"]\\\"]]\\) constructs an interpolating polynomial in \\!\\(\\*StyleBox[\\\
\"x\\\", \\\"TI\\\"]\\) which reproduces the function values \
\\!\\(\\*SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], StyleBox[\\\"i\\\", \\\
\"TI\\\"]]\\) at successive integer values \
\\!\\(\\*RowBox[List[StyleBox[\\\"1\\\", \\\"TR\\\"], \\\",\\\", \
StyleBox[\\\"2\\\", \\\"TR\\\"], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"]]]\\) of \\!\\(\\*StyleBox[\\\"x\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[List[\\\"FindPolynomial\\\", \\\"[\\\", \
RowBox[List[RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], StyleBox[\\\"d\\\", \
\\\"TI\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], \
RowBox[List[StyleBox[\\\"d\\\", \\\"TI\\\"], \\\"+\\\", StyleBox[\\\"1\\\", \
\\\"TR\\\"]]]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"]]], \\\
\"}\\\"]], \\\",\\\", StyleBox[\\\"x\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\
\"d\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) indexes terms beginning at \
\\!\\(\\*StyleBox[\\\"d\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[List[\\\"FindPolynomial\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"array\\\", \\\"TI\\\"], \\\",\\\", RowBox[List[\\\"{\
\\\", RowBox[List[StyleBox[\\\"x\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"y\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"]]], \\\"}\\\"]], \\\",\\\", RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"d\\\", \\\"TI\\\"], StyleBox[\\\"x\\\", \
\\\"TI\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"d\\\", \\\"TI\\\"], \
StyleBox[\\\"y\\\", \\\"TI\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"]]], \\\"}\\\"]]]], \\\"]\\\"]]\\) gives a multivariate polynomial \
which provides an exact fit to a full array of values.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"FindPolynomial\", \"[\", RowBox[List[RowBox[List[\"{\
\", RowBox[List[SubscriptBox[StyleBox[\"a\", \"TI\"], StyleBox[\"1\", \
\"TR\"]], \",\", SubscriptBox[StyleBox[\"a\", \"TI\"], StyleBox[\"2\", \
\"TR\"]], \",\", StyleBox[\"\\[Ellipsis]\", \"TR\"]]], \"}\"]], \",\", \
StyleBox[\"x\", \"TI\"]]], \"]\"]]\) constructs an interpolating polynomial \
in \!\(\*StyleBox[\"x\", \"TI\"]\) which reproduces the function values \
\!\(\*SubscriptBox[StyleBox[\"a\", \"TI\"], StyleBox[\"i\", \"TI\"]]\) at \
successive integer values \!\(\*RowBox[List[StyleBox[\"1\", \"TR\"], \",\", \
StyleBox[\"2\", \"TR\"], \",\", StyleBox[\"\\[Ellipsis]\", \"TR\"]]]\) of \
\!\(\*StyleBox[\"x\", \"TI\"]\).\n\!\(\*RowBox[List[\"FindPolynomial\", \
\"[\", RowBox[List[RowBox[List[\"{\", \
RowBox[List[SubscriptBox[StyleBox[\"a\", \"TI\"], StyleBox[\"d\", \"TI\"]], \
\",\", SubscriptBox[StyleBox[\"a\", \"TI\"], RowBox[List[StyleBox[\"d\", \"TI\
\"], \"+\", StyleBox[\"1\", \"TR\"]]]], \",\", StyleBox[\"\\[Ellipsis]\", \
\"TR\"]]], \"}\"]], \",\", StyleBox[\"x\", \"TI\"], \",\", StyleBox[\"d\", \
\"TI\"]]], \"]\"]]\) indexes terms beginning at \!\(\*StyleBox[\"d\", \"TI\"]\
\).\n\!\(\*RowBox[List[\"FindPolynomial\", \"[\", \
RowBox[List[StyleBox[\"array\", \"TI\"], \",\", RowBox[List[\"{\", \
RowBox[List[StyleBox[\"x\", \"TI\"], \",\", StyleBox[\"y\", \"TI\"], \",\", \
StyleBox[\"\\[Ellipsis]\", \"TR\"]]], \"}\"]], \",\", RowBox[List[\"{\", \
RowBox[List[SubscriptBox[StyleBox[\"d\", \"TI\"], StyleBox[\"x\", \"TI\"]], \
\",\", SubscriptBox[StyleBox[\"d\", \"TI\"], StyleBox[\"y\", \"TI\"]], \",\", \
StyleBox[\"\\[Ellipsis]\", \"TR\"]]], \"}\"]]]], \"]\"]]\) gives a \
multivariate polynomial which provides an exact fit to a full array of \
values.", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`FindPolynomial, {
      IntegerSequences`FindPolynomial[
         Condition[
          Pattern[IntegerSequences`Private`data, 
           Blank[List]], ArrayDepth[IntegerSequences`Private`data] == 1], 
         Pattern[IntegerSequences`Private`var, 
          Except[
           Blank[List]]], 
         Optional[
          Pattern[IntegerSequences`Private`offset, 
           Except[
            Blank[Rule]]], 1], 
         OptionsPattern[]] :> With[{IntegerSequences`Private`f = Replace[
            OptionValue[IntegerSequences`IntermediateFunction], {
            Automatic -> (Expand[#, IntegerSequences`Private`var]& ), None -> 
             Identity}]}, 
         IntegerSequences`Private`f[
          ReplaceAll[
           InterpolatingPolynomial[
           IntegerSequences`Private`data, IntegerSequences`Private`var], 
           IntegerSequences`Private`var -> 
           IntegerSequences`Private`var - IntegerSequences`Private`offset + 
            1]]], Condition[
         IntegerSequences`FindPolynomial[
          Pattern[IntegerSequences`Private`data, 
           Blank[List]], 
          Pattern[IntegerSequences`Private`vars, 
           Blank[List]], 
          Pattern[IntegerSequences`Private`offsets, 
           Blank[List]], 
          OptionsPattern[]], ArrayDepth[IntegerSequences`Private`data] == 
         Length[IntegerSequences`Private`vars] == 
         Length[IntegerSequences`Private`offsets]] :> 
       Module[{IntegerSequences`Private`f, 
          IntegerSequences`Private`g}, {
           IntegerSequences`Private`f, IntegerSequences`Private`g} = Replace[
            OptionValue[IntegerSequences`IntermediateFunction], {Automatic -> {
               
               With[{IntegerSequences`Private`symbolicvariables = 
                 Apply[Alternatives, 
                   Variables[IntegerSequences`Private`data]]}, 
                Expand[#, IntegerSequences`Private`symbolicvariables]& ], 
               Expand[#, 
                Apply[Alternatives, IntegerSequences`Private`vars]]& }, 
             None -> {Identity, Identity}, Pattern[IntegerSequences`Private`h, 
               Blank[]] :> {
              IntegerSequences`Private`h, IntegerSequences`Private`h}}]; 
         IntegerSequences`Private`g[
           IntegerSequences`FromCoefficientList[
            IntegerSequences`Private`FindPolynomialCoefficientList[
            IntegerSequences`Private`data, IntegerSequences`Private`offsets, 
             IntegerSequences`Private`f], IntegerSequences`Private`vars]]], 
       Condition[
         IntegerSequences`FindPolynomial[
          Pattern[IntegerSequences`Private`data, 
           Blank[List]], 
          Pattern[IntegerSequences`Private`vars, 
           Blank[List]], 
          Pattern[IntegerSequences`Private`options, 
           OptionsPattern[]]], ArrayDepth[IntegerSequences`Private`data] == 
         Length[IntegerSequences`Private`vars]] :> 
       IntegerSequences`FindPolynomial[
        IntegerSequences`Private`data, IntegerSequences`Private`vars, 
         ConstantArray[1, 
          Length[IntegerSequences`Private`vars]], 
         IntegerSequences`Private`options]}], "SubValues" -> None, 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`FindPolynomial, {
      SyntaxInformation[IntegerSequences`FindPolynomial] -> {
        "ArgumentsPattern" -> {{
            BlankSequence[]}, 
           Blank[], 
           Optional[
            Blank[]], 
           OptionsPattern[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {IntegerSequences`IntermediateFunction -> Automatic}, 
    "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`FindPolynomial"], False]]], "Output",ExpressionUUID->\
"77f735e0-cffa-4841-aa06-99c0fe0f861d"]
}, Open  ]],

Cell["One-dimensional data:", "Text",ExpressionUUID->"2b3afcf7-78f7-4636-ac03-39bbec57e8ad"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"x", "-", 
    SuperscriptBox["x", "2"]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "1"}], ",", "3"}], "}"}]}], "]"}]], "Input",ExpressionUUID->\
"dbbd333d-0e7e-456f-8bb0-268e9de6af5d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"-", "2"}], ",", "0", ",", "0", ",", 
   RowBox[{"-", "2"}], ",", 
   RowBox[{"-", "6"}]}], "}"}]], "Output",ExpressionUUID->"ed29a693-f4e7-432e-\
8d80-2c206944aff3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindPolynomial", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "2"}], ",", "0", ",", "0", ",", 
     RowBox[{"-", "2"}], ",", 
     RowBox[{"-", "6"}]}], "}"}], ",", "x"}], "]"}]], "Input",ExpressionUUID->\
"d874efab-c35c-473a-931c-12e0abb5c2b0"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "6"}], "+", 
  RowBox[{"5", " ", "x"}], "-", 
  SuperscriptBox["x", "2"]}]], "Output",ExpressionUUID->"87847f3d-a6ef-4af1-\
9148-2c76bf5c0a57"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindPolynomial", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "2"}], ",", "0", ",", "0", ",", 
     RowBox[{"-", "2"}], ",", 
     RowBox[{"-", "6"}]}], "}"}], ",", "x", ",", 
   RowBox[{"-", "1"}]}], "]"}]], "Input",ExpressionUUID->"31aac141-d9b4-4433-\
adf4-464de0d62055"],

Cell[BoxData[
 RowBox[{"x", "-", 
  SuperscriptBox["x", "2"]}]], "Output",ExpressionUUID->"6042c820-0c55-4b9b-86db-e7a7913a2233"]
}, Open  ]],

Cell["Two-dimensional data:", "Text",ExpressionUUID->"411db7f6-3228-4da9-bac1-7a9cebbfa980"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "x"}], "+", 
    RowBox[{"x", " ", "y"}], "+", 
    RowBox[{"3", " ", 
     SuperscriptBox["y", "2"]}], "+", 
    RowBox[{"2", " ", 
     SuperscriptBox["x", "2"], " ", 
     SuperscriptBox["y", "3"]}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", "1", ",", "4"}], "}"}]}], "]"}]], "Input",ExpressionUUID\
->"75495265-470a-4891-b88e-e4f92c9c64c1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "29", ",", "83", ",", "179"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"11", ",", "78", ",", "247", ",", "566"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"21", ",", "159", ",", "519", ",", "1209"}], "}"}]}], 
  "}"}]], "Output",ExpressionUUID->"93283693-b896-417b-90d7-303bf09bb9b7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindPolynomial", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5", ",", "29", ",", "83", ",", "179"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"11", ",", "78", ",", "247", ",", "566"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"21", ",", "159", ",", "519", ",", "1209"}], "}"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]], "Input",ExpressionUUID->\
"99108cce-49c8-426d-afeb-2260779432f8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"-", "x"}], "+", 
  RowBox[{"x", " ", "y"}], "+", 
  RowBox[{"3", " ", 
   SuperscriptBox["y", "2"]}], "+", 
  RowBox[{"2", " ", 
   SuperscriptBox["x", "2"], " ", 
   SuperscriptBox["y", "3"]}]}]], "Output",ExpressionUUID->"1deeb0cf-6b57-\
40a3-985b-088af0316363"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindPolynomial", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"3", " ", 
       SuperscriptBox["y", "2"]}], "-", 
      RowBox[{"3", " ", "z"}], "+", 
      RowBox[{"x", " ", "y", " ", "z"}], "+", 
      RowBox[{"2", " ", 
       SuperscriptBox["x", "2"], " ", 
       SuperscriptBox["y", "3"], " ", "z"}], "-", 
      RowBox[{"x", " ", 
       SuperscriptBox["z", "3"]}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", "1", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"z", ",", "1", ",", "4"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", "z"}], "}"}]}], "]"}]], "Input",ExpressionUUID\
->"9649441a-5c74-450c-b231-74157f9285fe"],

Cell[BoxData[
 RowBox[{
  RowBox[{"3", " ", 
   SuperscriptBox["y", "2"]}], "-", 
  RowBox[{"3", " ", "z"}], "+", 
  RowBox[{"x", " ", "y", " ", "z"}], "+", 
  RowBox[{"2", " ", 
   SuperscriptBox["x", "2"], " ", 
   SuperscriptBox["y", "3"], " ", "z"}], "-", 
  RowBox[{"x", " ", 
   SuperscriptBox["z", "3"]}]}]], "Output",ExpressionUUID->"7d9d1189-f1aa-\
43aa-a01d-a3f1a7d0cab2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindPolynomial", "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"3", " ", 
       SuperscriptBox["y", "2"]}], "-", 
      RowBox[{"3", " ", "z"}], "+", 
      RowBox[{"x", " ", "y", " ", "z"}], "+", 
      RowBox[{"2", " ", 
       SuperscriptBox["x", "2"], " ", 
       SuperscriptBox["y", "3"], " ", "z"}], "-", 
      RowBox[{"x", " ", 
       SuperscriptBox["z", "3"]}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"y", ",", "0", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"z", ",", "0", ",", "4"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", "z"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0"}], "}"}]}], "]"}]], "Input",ExpressionUUID\
->"c1bd5ced-04e7-42a8-8a5c-84494867fc86"],

Cell[BoxData[
 RowBox[{
  RowBox[{"3", " ", 
   SuperscriptBox["y", "2"]}], "-", 
  RowBox[{"3", " ", "z"}], "+", 
  RowBox[{"x", " ", "y", " ", "z"}], "+", 
  RowBox[{"2", " ", 
   SuperscriptBox["x", "2"], " ", 
   SuperscriptBox["y", "3"], " ", "z"}], "-", 
  RowBox[{"x", " ", 
   SuperscriptBox["z", "3"]}]}]], "Output",ExpressionUUID->"c01d87e6-3334-\
4b50-b44a-6d002983f788"]
}, Open  ]],

Cell["\<\
The option IntermediateFunction can be used to simplify intermediate \
expressions:\
\>", "Text",ExpressionUUID->"7b491606-2010-4663-a053-5db3048cd6b8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "IntermediateFunction"}]], "Input",ExpressionUUID->"b8843b2d-21d0-4088-afa2-e1204f1d6186"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"IntermediateFunction is an option for \
FindPolynomial that specifies a function to apply at each intermediate \
step.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`IntermediateFunction\
\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"IntermediateFunction is an option for \
FindPolynomial that specifies a function to apply at each intermediate \
step.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "IntermediateFunction is an option for FindPolynomial that specifies a \
function to apply at each intermediate step.", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {Protected}, 
    "FullName" -> "IntegerSequences`IntermediateFunction"], False]]], "Output",\
ExpressionUUID->"d1f83d7e-21b5-421c-8806-7605930030b0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{"FindPolynomial", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"24", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "8"}], "+", "n"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "34650"}], "+", 
         RowBox[{"4955", " ", "n"}], "-", 
         RowBox[{"186", " ", 
          SuperscriptBox["n", "2"]}], "+", 
         SuperscriptBox["n", "3"]}], ")"}]}], ",", 
      RowBox[{"120", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "9"}], "+", "n"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "18480"}], "+", 
         RowBox[{"2662", " ", "n"}], "-", 
         RowBox[{"109", " ", 
          SuperscriptBox["n", "2"]}], "+", 
         SuperscriptBox["n", "3"]}], ")"}]}], ",", 
      RowBox[{"72", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "10"}], "+", "n"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "72072"}], "+", 
         RowBox[{"10307", " ", "n"}], "-", 
         RowBox[{"440", " ", 
          SuperscriptBox["n", "2"]}], "+", 
         RowBox[{"5", " ", 
          SuperscriptBox["n", "3"]}]}], ")"}]}], ",", 
      RowBox[{"168", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "11"}], "+", "n"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "65520"}], "+", 
         RowBox[{"9214", " ", "n"}], "-", 
         RowBox[{"399", " ", 
          SuperscriptBox["n", "2"]}], "+", 
         RowBox[{"5", " ", 
          SuperscriptBox["n", "3"]}]}], ")"}]}], ",", 
      RowBox[{"48", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "12"}], "+", "n"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "450450"}], "+", 
         RowBox[{"61905", " ", "n"}], "-", 
         RowBox[{"2674", " ", 
          SuperscriptBox["n", "2"]}], "+", 
         RowBox[{"35", " ", 
          SuperscriptBox["n", "3"]}]}], ")"}]}], ",", 
      RowBox[{"432", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "20"}], "+", "n"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "13"}], "+", "n"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"4620", "-", 
         RowBox[{"387", " ", "n"}], "+", 
         RowBox[{"7", " ", 
          SuperscriptBox["n", "2"]}]}], ")"}]}], ",", 
      RowBox[{"720", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "14"}], "+", "n"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "97240"}], "+", 
         RowBox[{"12629", " ", "n"}], "-", 
         RowBox[{"528", " ", 
          SuperscriptBox["n", "2"]}], "+", 
         RowBox[{"7", " ", 
          SuperscriptBox["n", "3"]}]}], ")"}]}], ",", 
      RowBox[{"528", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "15"}], "+", "n"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "222768"}], "+", 
         RowBox[{"28048", " ", "n"}], "-", 
         RowBox[{"1145", " ", 
          SuperscriptBox["n", "2"]}], "+", 
         RowBox[{"15", " ", 
          SuperscriptBox["n", "3"]}]}], ")"}]}], ",", 
      RowBox[{"72", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "16"}], "+", "n"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "2645370"}], "+", 
         RowBox[{"322631", " ", "n"}], "-", 
         RowBox[{"12826", " ", 
          SuperscriptBox["n", "2"]}], "+", 
         RowBox[{"165", " ", 
          SuperscriptBox["n", "3"]}]}], ")"}]}], ",", 
      RowBox[{"312", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "17"}], "+", "n"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "957600"}], "+", 
         RowBox[{"113090", " ", "n"}], "-", 
         RowBox[{"4371", " ", 
          SuperscriptBox["n", "2"]}], "+", 
         RowBox[{"55", " ", 
          SuperscriptBox["n", "3"]}]}], ")"}]}], ",", 
      RowBox[{"168", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "18"}], "+", "n"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "2713200"}], "+", 
         RowBox[{"310265", " ", "n"}], "-", 
         RowBox[{"11648", " ", 
          SuperscriptBox["n", "2"]}], "+", 
         RowBox[{"143", " ", 
          SuperscriptBox["n", "3"]}]}], ")"}]}], ",", 
      RowBox[{"360", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "19"}], "+", "n"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1884960"}], "+", 
         RowBox[{"208762", " ", "n"}], "-", 
         RowBox[{"7609", " ", 
          SuperscriptBox["n", "2"]}], "+", 
         RowBox[{"91", " ", 
          SuperscriptBox["n", "3"]}]}], ")"}]}], ",", 
      RowBox[{"96", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "20"}], "+", "n"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "10296594"}], "+", 
         RowBox[{"1104829", " ", "n"}], "-", 
         RowBox[{"39090", " ", 
          SuperscriptBox["n", "2"]}], "+", 
         RowBox[{"455", " ", 
          SuperscriptBox["n", "3"]}]}], ")"}]}], ",", 
      RowBox[{"1632", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "21"}], "+", "n"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "865260"}], "+", 
         RowBox[{"89991", " ", "n"}], "-", 
         RowBox[{"3091", " ", 
          SuperscriptBox["n", "2"]}], "+", 
         RowBox[{"35", " ", 
          SuperscriptBox["n", "3"]}]}], ")"}]}], ",", 
      RowBox[{"864", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "22"}], "+", "n"}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "2294250"}], "+", 
         RowBox[{"231405", " ", "n"}], "-", 
         RowBox[{"7718", " ", 
          SuperscriptBox["n", "2"]}], "+", 
         RowBox[{"85", " ", 
          SuperscriptBox["n", "3"]}]}], ")"}]}]}], "}"}], ",", "m", ",", 
    RowBox[{"IntermediateFunction", "\[Rule]", "Factor"}]}], "]"}], 
  "]"}], "\n", 
 RowBox[{"ByteCount", "[", 
  RowBox[{"%", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
  "]"}]}], "Input",ExpressionUUID->"14b7f248-9f7e-49d3-aac1-206251595ed1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.470963`", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"3", "+", "m"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "7"}], "-", "m", "+", "n"}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "86400"}], "-", 
      RowBox[{"82320", " ", "m"}], "-", 
      RowBox[{"31948", " ", 
       SuperscriptBox["m", "2"]}], "-", 
      RowBox[{"6468", " ", 
       SuperscriptBox["m", "3"]}], "-", 
      RowBox[{"721", " ", 
       SuperscriptBox["m", "4"]}], "-", 
      RowBox[{"42", " ", 
       SuperscriptBox["m", "5"]}], "-", 
      SuperscriptBox["m", "6"], "+", 
      RowBox[{"12000", " ", "n"}], "+", 
      RowBox[{"11956", " ", "m", " ", "n"}], "+", 
      RowBox[{"4746", " ", 
       SuperscriptBox["m", "2"], " ", "n"}], "+", 
      RowBox[{"938", " ", 
       SuperscriptBox["m", "3"], " ", "n"}], "+", 
      RowBox[{"87", " ", 
       SuperscriptBox["m", "4"], " ", "n"}], "+", 
      RowBox[{"3", " ", 
       SuperscriptBox["m", "5"], " ", "n"}], "-", 
      RowBox[{"384", " ", 
       SuperscriptBox["n", "2"]}], "-", 
      RowBox[{"462", " ", "m", " ", 
       SuperscriptBox["n", "2"]}], "-", 
      RowBox[{"219", " ", 
       SuperscriptBox["m", "2"], " ", 
       SuperscriptBox["n", "2"]}], "-", 
      RowBox[{"48", " ", 
       SuperscriptBox["m", "3"], " ", 
       SuperscriptBox["n", "2"]}], "-", 
      RowBox[{"3", " ", 
       SuperscriptBox["m", "4"], " ", 
       SuperscriptBox["n", "2"]}], "+", 
      RowBox[{"2", " ", "m", " ", 
       SuperscriptBox["n", "3"]}], "+", 
      RowBox[{"3", " ", 
       SuperscriptBox["m", "2"], " ", 
       SuperscriptBox["n", "3"]}], "+", 
      RowBox[{
       SuperscriptBox["m", "3"], " ", 
       SuperscriptBox["n", "3"]}]}], ")"}]}]}], "}"}]], "Output",ExpressionUUI\
D->"54e2ebdf-26de-42c2-b8d4-bd7548b96d5c"],

Cell[BoxData["3608"], "Output",ExpressionUUID->"b325efe7-033e-4167-bb4a-381b4f240043"]
}, Open  ]],

Cell["\<\
Without intermediate simplification, the computation takes longer and uses \
more memory:\
\>", "Text",ExpressionUUID->"70fe5c06-56d4-4b78-91e3-24fd68c8ca2b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{"ByteCount", "[", 
   RowBox[{"FindPolynomial", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"24", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "8"}], "+", "n"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "34650"}], "+", 
          RowBox[{"4955", " ", "n"}], "-", 
          RowBox[{"186", " ", 
           SuperscriptBox["n", "2"]}], "+", 
          SuperscriptBox["n", "3"]}], ")"}]}], ",", 
       RowBox[{"120", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "9"}], "+", "n"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "18480"}], "+", 
          RowBox[{"2662", " ", "n"}], "-", 
          RowBox[{"109", " ", 
           SuperscriptBox["n", "2"]}], "+", 
          SuperscriptBox["n", "3"]}], ")"}]}], ",", 
       RowBox[{"72", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "10"}], "+", "n"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "72072"}], "+", 
          RowBox[{"10307", " ", "n"}], "-", 
          RowBox[{"440", " ", 
           SuperscriptBox["n", "2"]}], "+", 
          RowBox[{"5", " ", 
           SuperscriptBox["n", "3"]}]}], ")"}]}], ",", 
       RowBox[{"168", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "11"}], "+", "n"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "65520"}], "+", 
          RowBox[{"9214", " ", "n"}], "-", 
          RowBox[{"399", " ", 
           SuperscriptBox["n", "2"]}], "+", 
          RowBox[{"5", " ", 
           SuperscriptBox["n", "3"]}]}], ")"}]}], ",", 
       RowBox[{"48", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "12"}], "+", "n"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "450450"}], "+", 
          RowBox[{"61905", " ", "n"}], "-", 
          RowBox[{"2674", " ", 
           SuperscriptBox["n", "2"]}], "+", 
          RowBox[{"35", " ", 
           SuperscriptBox["n", "3"]}]}], ")"}]}], ",", 
       RowBox[{"432", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "20"}], "+", "n"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "13"}], "+", "n"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{"4620", "-", 
          RowBox[{"387", " ", "n"}], "+", 
          RowBox[{"7", " ", 
           SuperscriptBox["n", "2"]}]}], ")"}]}], ",", 
       RowBox[{"720", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "14"}], "+", "n"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "97240"}], "+", 
          RowBox[{"12629", " ", "n"}], "-", 
          RowBox[{"528", " ", 
           SuperscriptBox["n", "2"]}], "+", 
          RowBox[{"7", " ", 
           SuperscriptBox["n", "3"]}]}], ")"}]}], ",", 
       RowBox[{"528", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "15"}], "+", "n"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "222768"}], "+", 
          RowBox[{"28048", " ", "n"}], "-", 
          RowBox[{"1145", " ", 
           SuperscriptBox["n", "2"]}], "+", 
          RowBox[{"15", " ", 
           SuperscriptBox["n", "3"]}]}], ")"}]}], ",", 
       RowBox[{"72", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "16"}], "+", "n"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "2645370"}], "+", 
          RowBox[{"322631", " ", "n"}], "-", 
          RowBox[{"12826", " ", 
           SuperscriptBox["n", "2"]}], "+", 
          RowBox[{"165", " ", 
           SuperscriptBox["n", "3"]}]}], ")"}]}], ",", 
       RowBox[{"312", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "17"}], "+", "n"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "957600"}], "+", 
          RowBox[{"113090", " ", "n"}], "-", 
          RowBox[{"4371", " ", 
           SuperscriptBox["n", "2"]}], "+", 
          RowBox[{"55", " ", 
           SuperscriptBox["n", "3"]}]}], ")"}]}], ",", 
       RowBox[{"168", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "18"}], "+", "n"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "2713200"}], "+", 
          RowBox[{"310265", " ", "n"}], "-", 
          RowBox[{"11648", " ", 
           SuperscriptBox["n", "2"]}], "+", 
          RowBox[{"143", " ", 
           SuperscriptBox["n", "3"]}]}], ")"}]}], ",", 
       RowBox[{"360", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "19"}], "+", "n"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1884960"}], "+", 
          RowBox[{"208762", " ", "n"}], "-", 
          RowBox[{"7609", " ", 
           SuperscriptBox["n", "2"]}], "+", 
          RowBox[{"91", " ", 
           SuperscriptBox["n", "3"]}]}], ")"}]}], ",", 
       RowBox[{"96", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "20"}], "+", "n"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "10296594"}], "+", 
          RowBox[{"1104829", " ", "n"}], "-", 
          RowBox[{"39090", " ", 
           SuperscriptBox["n", "2"]}], "+", 
          RowBox[{"455", " ", 
           SuperscriptBox["n", "3"]}]}], ")"}]}], ",", 
       RowBox[{"1632", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "21"}], "+", "n"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "865260"}], "+", 
          RowBox[{"89991", " ", "n"}], "-", 
          RowBox[{"3091", " ", 
           SuperscriptBox["n", "2"]}], "+", 
          RowBox[{"35", " ", 
           SuperscriptBox["n", "3"]}]}], ")"}]}], ",", 
       RowBox[{"864", " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "22"}], "+", "n"}], ")"}], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "2294250"}], "+", 
          RowBox[{"231405", " ", "n"}], "-", 
          RowBox[{"7718", " ", 
           SuperscriptBox["n", "2"]}], "+", 
          RowBox[{"85", " ", 
           SuperscriptBox["n", "3"]}]}], ")"}]}]}], "}"}], ",", "m"}], "]"}], 
   "]"}], "]"}]], "Input",ExpressionUUID->"39610476-4d5c-4afe-8d72-\
780cff74547e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2.554138`", ",", "242119928"}], "}"}]], "Output",ExpressionUUID->\
"6452b14e-f66e-4da2-b4b1-d042d24acc89"]
}, Open  ]],

Cell[TextData[{
 "Interpolate a ",
 Cell[BoxData[
  FormBox["2", TraditionalForm]],ExpressionUUID->
  "ecbe4f96-cc81-4e73-84d8-2d9d6567a86b"],
 "-dimensional sequence of symbolic polynomials in ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "598c21be-fb5c-45d5-9a11-a2b670a1f270"],
 " and ",
 Cell[BoxData[
  FormBox["z", TraditionalForm]],ExpressionUUID->
  "72cff704-5f56-4d33-8729-fc39f9ea58af"],
 ":"
}], "Text",ExpressionUUID->"72964d9f-df61-48cb-b949-8955d6eb4106"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"polynomial", "=", 
   RowBox[{"FromCoefficientList", "[", 
    RowBox[{
     RowBox[{"RandomInteger", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "10"}], ",", "10"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "3", ",", "4", ",", "5"}], "}"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"w", ",", "x", ",", "y", ",", "z"}], "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{"FindPolynomial", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{"polynomial", ",", 
      RowBox[{"{", 
       RowBox[{"w", ",", "0", ",", "10"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"x", ",", "0", ",", "10"}], "}"}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"w", ",", "x"}], "}"}]}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"ByteCount", "[", 
  RowBox[{"%", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
  "]"}]}], "Input",ExpressionUUID->"ceb4f334-6404-49c3-a1de-b78c07364a5b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.089437`", ",", 
   RowBox[{
    RowBox[{"-", "11"}], "+", 
    RowBox[{"12", " ", "y"}], "+", 
    RowBox[{"16", " ", 
     SuperscriptBox["y", "2"]}], "-", 
    RowBox[{"13", " ", 
     SuperscriptBox["y", "3"]}], "-", 
    RowBox[{"4", " ", "z"}], "-", 
    RowBox[{"2", " ", "y", " ", "z"}], "-", 
    RowBox[{"25", " ", 
     SuperscriptBox["y", "2"], " ", "z"}], "-", 
    RowBox[{"15", " ", 
     SuperscriptBox["y", "3"], " ", "z"}], "-", 
    RowBox[{"14", " ", 
     SuperscriptBox["z", "2"]}], "-", 
    RowBox[{"15", " ", "y", " ", 
     SuperscriptBox["z", "2"]}], "-", 
    RowBox[{"20", " ", 
     SuperscriptBox["y", "2"], " ", 
     SuperscriptBox["z", "2"]}], "+", 
    RowBox[{"17", " ", 
     SuperscriptBox["y", "3"], " ", 
     SuperscriptBox["z", "2"]}], "-", 
    RowBox[{"5", " ", 
     SuperscriptBox["z", "3"]}], "+", 
    RowBox[{"21", " ", "y", " ", 
     SuperscriptBox["z", "3"]}], "+", 
    RowBox[{"46", " ", 
     SuperscriptBox["y", "2"], " ", 
     SuperscriptBox["z", "3"]}], "+", 
    RowBox[{"3", " ", 
     SuperscriptBox["y", "3"], " ", 
     SuperscriptBox["z", "3"]}], "-", 
    RowBox[{"14", " ", 
     SuperscriptBox["z", "4"]}], "+", 
    RowBox[{"11", " ", "y", " ", 
     SuperscriptBox["z", "4"]}], "-", 
    RowBox[{"27", " ", 
     SuperscriptBox["y", "2"], " ", 
     SuperscriptBox["z", "4"]}], "-", 
    RowBox[{"20", " ", 
     SuperscriptBox["y", "3"], " ", 
     SuperscriptBox["z", "4"]}], "+", 
    RowBox[{"w", " ", 
     RowBox[{"(", 
      RowBox[{"7", "-", 
       RowBox[{"5", " ", "y"}], "-", 
       RowBox[{"16", " ", 
        SuperscriptBox["y", "2"]}], "+", 
       RowBox[{"12", " ", 
        SuperscriptBox["y", "3"]}], "-", 
       RowBox[{"2", " ", "z"}], "+", 
       RowBox[{"12", " ", "y", " ", "z"}], "+", 
       RowBox[{"22", " ", 
        SuperscriptBox["y", "2"], " ", "z"}], "+", 
       RowBox[{"16", " ", 
        SuperscriptBox["y", "3"], " ", "z"}], "+", 
       RowBox[{"12", " ", 
        SuperscriptBox["z", "2"]}], "+", 
       RowBox[{"4", " ", "y", " ", 
        SuperscriptBox["z", "2"]}], "+", 
       RowBox[{"3", " ", 
        SuperscriptBox["y", "2"], " ", 
        SuperscriptBox["z", "2"]}], "-", 
       RowBox[{"6", " ", 
        SuperscriptBox["y", "3"], " ", 
        SuperscriptBox["z", "2"]}], "-", 
       RowBox[{"9", " ", 
        SuperscriptBox["z", "3"]}], "-", 
       RowBox[{"19", " ", 
        SuperscriptBox["y", "2"], " ", 
        SuperscriptBox["z", "3"]}], "-", 
       RowBox[{
        SuperscriptBox["y", "3"], " ", 
        SuperscriptBox["z", "3"]}], "-", 
       SuperscriptBox["z", "4"], "-", 
       RowBox[{"26", " ", "y", " ", 
        SuperscriptBox["z", "4"]}], "+", 
       RowBox[{"12", " ", 
        SuperscriptBox["y", "2"], " ", 
        SuperscriptBox["z", "4"]}]}], ")"}]}], "+", 
    RowBox[{
     SuperscriptBox["x", "2"], " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "17"}], "+", 
       RowBox[{"9", " ", "y"}], "-", 
       RowBox[{"5", " ", 
        SuperscriptBox["y", "2"]}], "-", 
       RowBox[{"6", " ", 
        SuperscriptBox["y", "3"]}], "-", 
       RowBox[{"10", " ", "z"}], "+", 
       RowBox[{"2", " ", "y", " ", "z"}], "+", 
       RowBox[{
        SuperscriptBox["y", "2"], " ", "z"}], "-", 
       RowBox[{"9", " ", 
        SuperscriptBox["y", "3"], " ", "z"}], "-", 
       RowBox[{"4", " ", 
        SuperscriptBox["z", "2"]}], "+", 
       RowBox[{"8", " ", "y", " ", 
        SuperscriptBox["z", "2"]}], "-", 
       RowBox[{"12", " ", 
        SuperscriptBox["y", "2"], " ", 
        SuperscriptBox["z", "2"]}], "-", 
       RowBox[{"9", " ", 
        SuperscriptBox["y", "3"], " ", 
        SuperscriptBox["z", "2"]}], "+", 
       RowBox[{"8", " ", 
        SuperscriptBox["z", "3"]}], "-", 
       RowBox[{"5", " ", "y", " ", 
        SuperscriptBox["z", "3"]}], "+", 
       RowBox[{"19", " ", 
        SuperscriptBox["y", "2"], " ", 
        SuperscriptBox["z", "3"]}], "+", 
       RowBox[{"2", " ", 
        SuperscriptBox["y", "3"], " ", 
        SuperscriptBox["z", "3"]}], "-", 
       RowBox[{"15", " ", 
        SuperscriptBox["z", "4"]}], "+", 
       RowBox[{"13", " ", "y", " ", 
        SuperscriptBox["z", "4"]}], "-", 
       RowBox[{"10", " ", 
        SuperscriptBox["y", "2"], " ", 
        SuperscriptBox["z", "4"]}], "-", 
       RowBox[{"5", " ", 
        SuperscriptBox["y", "3"], " ", 
        SuperscriptBox["z", "4"]}]}], ")"}]}], "+", 
    RowBox[{"w", " ", "x", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "26"}], "+", 
       RowBox[{"16", " ", "y"}], "+", 
       RowBox[{"2", " ", 
        SuperscriptBox["y", "2"]}], "-", 
       RowBox[{"29", " ", 
        SuperscriptBox["y", "3"]}], "-", 
       RowBox[{"5", " ", "z"}], "+", 
       RowBox[{"3", " ", "y", " ", "z"}], "-", 
       RowBox[{"18", " ", 
        SuperscriptBox["y", "2"], " ", "z"}], "-", 
       RowBox[{"17", " ", 
        SuperscriptBox["y", "3"], " ", "z"}], "-", 
       RowBox[{"7", " ", 
        SuperscriptBox["z", "2"]}], "+", 
       RowBox[{"6", " ", "y", " ", 
        SuperscriptBox["z", "2"]}], "-", 
       RowBox[{"12", " ", 
        SuperscriptBox["y", "2"], " ", 
        SuperscriptBox["z", "2"]}], "-", 
       RowBox[{"5", " ", 
        SuperscriptBox["y", "3"], " ", 
        SuperscriptBox["z", "2"]}], "+", 
       RowBox[{"22", " ", 
        SuperscriptBox["z", "3"]}], "-", 
       RowBox[{"18", " ", "y", " ", 
        SuperscriptBox["z", "3"]}], "+", 
       RowBox[{"18", " ", 
        SuperscriptBox["y", "2"], " ", 
        SuperscriptBox["z", "3"]}], "-", 
       RowBox[{"11", " ", 
        SuperscriptBox["y", "3"], " ", 
        SuperscriptBox["z", "3"]}], "-", 
       RowBox[{"13", " ", 
        SuperscriptBox["z", "4"]}], "+", 
       RowBox[{"26", " ", "y", " ", 
        SuperscriptBox["z", "4"]}], "-", 
       RowBox[{"16", " ", 
        SuperscriptBox["y", "2"], " ", 
        SuperscriptBox["z", "4"]}], "-", 
       RowBox[{"2", " ", 
        SuperscriptBox["y", "3"], " ", 
        SuperscriptBox["z", "4"]}]}], ")"}]}], "+", 
    RowBox[{"w", " ", 
     SuperscriptBox["x", "2"], " ", 
     RowBox[{"(", 
      RowBox[{"10", "-", 
       RowBox[{"9", " ", "y"}], "+", 
       RowBox[{"4", " ", 
        SuperscriptBox["y", "2"]}], "+", 
       RowBox[{"10", " ", 
        SuperscriptBox["y", "3"]}], "+", "z", "-", 
       RowBox[{"5", " ", "y", " ", "z"}], "+", 
       RowBox[{"4", " ", 
        SuperscriptBox["y", "2"], " ", "z"}], "+", 
       RowBox[{"10", " ", 
        SuperscriptBox["y", "3"], " ", "z"}], "+", 
       RowBox[{"4", " ", 
        SuperscriptBox["z", "2"]}], "+", 
       RowBox[{"5", " ", 
        SuperscriptBox["y", "2"], " ", 
        SuperscriptBox["z", "2"]}], "+", 
       RowBox[{"5", " ", 
        SuperscriptBox["y", "3"], " ", 
        SuperscriptBox["z", "2"]}], "-", 
       RowBox[{"9", " ", 
        SuperscriptBox["z", "3"]}], "+", 
       RowBox[{"9", " ", "y", " ", 
        SuperscriptBox["z", "3"]}], "-", 
       RowBox[{"9", " ", 
        SuperscriptBox["y", "2"], " ", 
        SuperscriptBox["z", "3"]}], "+", 
       RowBox[{"6", " ", 
        SuperscriptBox["y", "3"], " ", 
        SuperscriptBox["z", "3"]}], "+", 
       RowBox[{"6", " ", 
        SuperscriptBox["z", "4"]}], "-", 
       RowBox[{"9", " ", "y", " ", 
        SuperscriptBox["z", "4"]}], "+", 
       RowBox[{"9", " ", 
        SuperscriptBox["y", "2"], " ", 
        SuperscriptBox["z", "4"]}], "-", 
       RowBox[{
        SuperscriptBox["y", "3"], " ", 
        SuperscriptBox["z", "4"]}]}], ")"}]}], "+", 
    RowBox[{"x", " ", 
     RowBox[{"(", 
      RowBox[{"47", "-", 
       RowBox[{"21", " ", "y"}], "+", 
       RowBox[{"4", " ", 
        SuperscriptBox["y", "2"]}], "+", 
       RowBox[{"24", " ", 
        SuperscriptBox["y", "3"]}], "+", 
       RowBox[{"27", " ", "z"}], "-", 
       RowBox[{"y", " ", "z"}], "+", 
       RowBox[{"12", " ", 
        SuperscriptBox["y", "2"], " ", "z"}], "+", 
       RowBox[{"19", " ", 
        SuperscriptBox["y", "3"], " ", "z"}], "+", 
       RowBox[{"6", " ", 
        SuperscriptBox["z", "2"]}], "-", 
       RowBox[{"13", " ", "y", " ", 
        SuperscriptBox["z", "2"]}], "+", 
       RowBox[{"35", " ", 
        SuperscriptBox["y", "2"], " ", 
        SuperscriptBox["z", "2"]}], "+", 
       RowBox[{"5", " ", 
        SuperscriptBox["y", "3"], " ", 
        SuperscriptBox["z", "2"]}], "-", 
       RowBox[{"15", " ", 
        SuperscriptBox["z", "3"]}], "+", 
       RowBox[{"y", " ", 
        SuperscriptBox["z", "3"]}], "-", 
       RowBox[{"46", " ", 
        SuperscriptBox["y", "2"], " ", 
        SuperscriptBox["z", "3"]}], "+", 
       RowBox[{
        SuperscriptBox["y", "3"], " ", 
        SuperscriptBox["z", "3"]}], "+", 
       RowBox[{"30", " ", 
        SuperscriptBox["z", "4"]}], "-", 
       RowBox[{"25", " ", "y", " ", 
        SuperscriptBox["z", "4"]}], "+", 
       RowBox[{"27", " ", 
        SuperscriptBox["y", "2"], " ", 
        SuperscriptBox["z", "4"]}], "+", 
       RowBox[{"22", " ", 
        SuperscriptBox["y", "3"], " ", 
        SuperscriptBox["z", "4"]}]}], ")"}]}]}]}], "}"}]], "Output",Expression\
UUID->"8b15c18b-85a5-4c15-aa75-f9d602c3f0ad"],

Cell[BoxData["19400"], "Output",ExpressionUUID->"b699214d-9c29-4bca-9693-dfefd6a9c7d2"]
}, Open  ]],

Cell[TextData[{
 "Without expanding intermediate steps in the variables ",
 Cell[BoxData[
  FormBox["y", TraditionalForm]],ExpressionUUID->
  "1de8d2d0-1394-4ea0-b4b9-9e7a976d364c"],
 " and ",
 Cell[BoxData[
  FormBox["z", TraditionalForm]],ExpressionUUID->
  "9ef061ec-88e5-48a1-80ce-5442e2ef7fff"],
 ", the computation takes longer and uses more memory:"
}], "Text",ExpressionUUID->"486a4d97-d2fc-4c36-9b9c-56d34fbad0ea"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{"ByteCount", "[", 
   RowBox[{"FindPolynomial", "[", 
    RowBox[{
     RowBox[{"Table", "[", 
      RowBox[{"polynomial", ",", 
       RowBox[{"{", 
        RowBox[{"w", ",", "0", ",", "10"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"x", ",", "0", ",", "10"}], "}"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"w", ",", "x"}], "}"}], ",", 
     RowBox[{"IntermediateFunction", "\[Rule]", "None"}]}], "]"}], "]"}], 
  "]"}]], "Input",ExpressionUUID->"d110938a-10a0-4795-9b0d-6d5fc46866bf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"6.508706`", ",", "1550761840"}], "}"}]], "Output",ExpressionUUID->\
"e4cd75ea-fbcb-4697-8ca0-c035cf586408"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", "polynomial", "]"}]], "Input",ExpressionUUID->"c6ed27ae-7032-44f0-a08a-f8c2feefb723"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["FindQuasiPolynomial", "Input"]], "Subsubsection",ExpressionUUID->"665bc1e7-0822-4d63-bd8b-f603980b2f73"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "FindQuasiPolynomial"}]], "Input",ExpressionUUID->"768aafdc-126c-43e3-b5b7-016abd5b6b26"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"FindQuasiPolynomial\\\", \
\\\"[\\\", RowBox[List[RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"]]], \\\"}\\\"]], \\\",\\\", StyleBox[\\\"x\\\", \\\"TI\\\"], \\\",\
\\\", StyleBox[\\\"m\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) constructs an \
interpolating polynomial in \\!\\(\\*StyleBox[\\\"x\\\", \\\"TI\\\"]\\) for \
each residue class of \\!\\(\\*StyleBox[\\\"x\\\", \\\"TI\\\"]\\) modulo \
\\!\\(\\*StyleBox[\\\"m\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[List[\\\"FindQuasiPolynomial\\\", \
\\\"[\\\", RowBox[List[RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], StyleBox[\\\"d\\\", \
\\\"TI\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], \
RowBox[List[StyleBox[\\\"d\\\", \\\"TI\\\"], \\\"+\\\", StyleBox[\\\"1\\\", \
\\\"TR\\\"]]]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"]]], \\\
\"}\\\"]], \\\",\\\", StyleBox[\\\"x\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\
\"m\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"d\\\", \\\"TI\\\"]]], \
\\\"]\\\"]]\\) indexes terms beginning at \\!\\(\\*StyleBox[\\\"d\\\", \\\"TI\
\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"FindQuasiPolynomial", "[", 
                    RowBox[{
                    "IntegerSequences`Private`data_List", ",", 
                    "IntegerSequences`Private`var_", ",", 
                    RowBox[{
                    "IntegerSequences`Private`modulus_Integer", "?", 
                    "Positive"}], ",", 
                    RowBox[{"IntegerSequences`Private`offset", ":", 
                    RowBox[{"Except", "[", "_Rule", "]"}], ":", "1"}]}], 
                    "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`piecewise", ",", 
                    "IntegerSequences`Private`x"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`piecewise", "=", 
                    RowBox[{
                    RowBox[{"SequenceRiffle", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"FindPolynomial", "[", 
                    RowBox[{"#1", ",", "IntegerSequences`Private`x"}], "]"}], 
                    "&"}], ")"}], "/@", 
                    RowBox[{"IntegerSequences`Private`Unriffle", "[", 
                    RowBox[{
                    "IntegerSequences`Private`data", ",", 
                    "IntegerSequences`Private`modulus"}], "]"}]}], ",", 
                    "IntegerSequences`Private`x"}], "]"}], "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{"IntegerSequences`Private`x", "\[Rule]", 
                    RowBox[{
                    "IntegerSequences`Private`var", "-", 
                    "IntegerSequences`Private`offset", "+", "1"}]}]}]}], ";", 
                    RowBox[{"Replace", "[", 
                    RowBox[{"IntegerSequences`Private`piecewise", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"HoldPattern", "[", "Piecewise", "]"}], "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`cases", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_"}], "}"}], ".."}], "}"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`val_", ":", "0"}]}], 
                    "]"}], "\[RuleDelayed]", 
                    RowBox[{"Piecewise", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`MapAcross", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Expand", ",", "Identity"}], "}"}], ",", "#1"}], 
                    "]"}], "&"}], ")"}], "/@", 
                    "IntegerSequences`Private`cases"}], ",", 
                    "IntegerSequences`Private`val"}], "]"}]}]}], "]"}]}]}], 
                    "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "FindQuasiPolynomial", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "__", "}"}], ",", "_", ",", "_", ",", "_."}],
                     "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`FindQuasiPolynomial] = {
                    "ArgumentsPattern" -> {{
                    BlankSequence[]}, 
                    Blank[], 
                    Blank[], 
                    Optional[
                    Blank[]]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`FindQuasiPolynomial\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"FindQuasiPolynomial\\\", \
\\\"[\\\", RowBox[List[RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"]]], \\\"}\\\"]], \\\",\\\", StyleBox[\\\"x\\\", \\\"TI\\\"], \\\",\
\\\", StyleBox[\\\"m\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) constructs an \
interpolating polynomial in \\!\\(\\*StyleBox[\\\"x\\\", \\\"TI\\\"]\\) for \
each residue class of \\!\\(\\*StyleBox[\\\"x\\\", \\\"TI\\\"]\\) modulo \
\\!\\(\\*StyleBox[\\\"m\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[List[\\\"FindQuasiPolynomial\\\", \
\\\"[\\\", RowBox[List[RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], StyleBox[\\\"d\\\", \
\\\"TI\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], \
RowBox[List[StyleBox[\\\"d\\\", \\\"TI\\\"], \\\"+\\\", StyleBox[\\\"1\\\", \
\\\"TR\\\"]]]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"]]], \\\
\"}\\\"]], \\\",\\\", StyleBox[\\\"x\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\
\"m\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"d\\\", \\\"TI\\\"]]], \
\\\"]\\\"]]\\) indexes terms beginning at \\!\\(\\*StyleBox[\\\"d\\\", \\\"TI\
\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"FindQuasiPolynomial\", \"[\", \
RowBox[List[RowBox[List[\"{\", RowBox[List[SubscriptBox[StyleBox[\"a\", \
\"TI\"], StyleBox[\"1\", \"TR\"]], \",\", SubscriptBox[StyleBox[\"a\", \
\"TI\"], StyleBox[\"2\", \"TR\"]], \",\", StyleBox[\"\\[Ellipsis]\", \
\"TR\"]]], \"}\"]], \",\", StyleBox[\"x\", \"TI\"], \",\", StyleBox[\"m\", \
\"TI\"]]], \"]\"]]\) constructs an interpolating polynomial in \
\!\(\*StyleBox[\"x\", \"TI\"]\) for each residue class of \
\!\(\*StyleBox[\"x\", \"TI\"]\) modulo \!\(\*StyleBox[\"m\", \"TI\"]\).\n\!\(\
\*RowBox[List[\"FindQuasiPolynomial\", \"[\", RowBox[List[RowBox[List[\"{\", \
RowBox[List[SubscriptBox[StyleBox[\"a\", \"TI\"], StyleBox[\"d\", \"TI\"]], \
\",\", SubscriptBox[StyleBox[\"a\", \"TI\"], RowBox[List[StyleBox[\"d\", \"TI\
\"], \"+\", StyleBox[\"1\", \"TR\"]]]], \",\", StyleBox[\"\\[Ellipsis]\", \
\"TR\"]]], \"}\"]], \",\", StyleBox[\"x\", \"TI\"], \",\", StyleBox[\"m\", \
\"TI\"], \",\", StyleBox[\"d\", \"TI\"]]], \"]\"]]\) indexes terms beginning \
at \!\(\*StyleBox[\"d\", \"TI\"]\).", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`FindQuasiPolynomial, {
      IntegerSequences`FindQuasiPolynomial[
         Pattern[IntegerSequences`Private`data, 
          Blank[List]], 
         Pattern[IntegerSequences`Private`var, 
          Blank[]], 
         PatternTest[
          Pattern[IntegerSequences`Private`modulus, 
           Blank[Integer]], Positive], 
         Optional[
          Pattern[IntegerSequences`Private`offset, 
           Except[
            Blank[Rule]]], 1]] :> 
       Module[{IntegerSequences`Private`piecewise, 
          IntegerSequences`Private`x}, 
         IntegerSequences`Private`piecewise = ReplaceAll[
            IntegerSequences`SequenceRiffle[
             Map[
             IntegerSequences`FindPolynomial[#, IntegerSequences`Private`x]& , 
              IntegerSequences`Private`Unriffle[
              IntegerSequences`Private`data, 
               IntegerSequences`Private`modulus]], 
             IntegerSequences`Private`x], IntegerSequences`Private`x -> 
            IntegerSequences`Private`var - IntegerSequences`Private`offset + 
             1]; Replace[
          IntegerSequences`Private`piecewise, HoldPattern[Piecewise][
             Pattern[IntegerSequences`Private`cases, {
               Repeated[{
                 Blank[], 
                 Blank[]}]}], 
             Optional[
              Pattern[IntegerSequences`Private`val, 
               Blank[]], 0]] :> Piecewise[
             Map[
             IntegerSequences`Private`MapAcross[{Expand, Identity}, #]& , 
              IntegerSequences`Private`cases], 
             IntegerSequences`Private`val]]]}], "SubValues" -> None, 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`FindQuasiPolynomial, {
      SyntaxInformation[IntegerSequences`FindQuasiPolynomial] -> {
        "ArgumentsPattern" -> {{
            BlankSequence[]}, 
           Blank[], 
           Blank[], 
           Optional[
            Blank[]]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`FindQuasiPolynomial"], False]]], "Output",ExpressionUUID\
->"84ac1d6a-ddfc-44a0-b528-388b176cf221"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"s", "=", 
  RowBox[{"FindQuasiPolynomial", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "0", ",", "8", ",", "11", ",", "13", ",", "20", ",", "30", ",", "18", 
      ",", "35", ",", "41", ",", "45", ",", "57", ",", "73", ",", "55", ",", 
      "81", ",", "90", ",", "96", ",", "113", ",", "135", ",", "111", ",", 
      "146", ",", "158", ",", "166", ",", "188", ",", "216", ",", "186", ",", 
      "230", ",", "245", ",", "255", ",", "282", ",", "316", ",", "280", ",", 
      "333", ",", "351", ",", "363", ",", "395"}], "}"}], ",", "x", ",", 
    "6"}], "]"}]}]], "Input",ExpressionUUID->"3ffc01ee-fa4c-481e-8773-\
46ea605ad4e0"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\[Piecewise]", GridBox[{
       {
        RowBox[{"6", "+", 
         FractionBox[
          RowBox[{"29", " ", "x"}], "12"], "+", 
         FractionBox[
          RowBox[{"19", " ", 
           SuperscriptBox["x", "2"]}], "72"]}], 
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{"x", ",", "6"}], "]"}], "\[Equal]", "0"}]},
       {
        RowBox[{
         RowBox[{"-", 
          FractionBox["83", "72"]}], "+", 
         FractionBox[
          RowBox[{"8", " ", "x"}], "9"], "+", 
         FractionBox[
          RowBox[{"19", " ", 
           SuperscriptBox["x", "2"]}], "72"]}], 
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{"x", ",", "6"}], "]"}], "\[Equal]", "1"}]},
       {
        RowBox[{
         FractionBox["29", "9"], "+", 
         FractionBox[
          RowBox[{"67", " ", "x"}], "36"], "+", 
         FractionBox[
          RowBox[{"19", " ", 
           SuperscriptBox["x", "2"]}], "72"]}], 
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{"x", ",", "6"}], "]"}], "\[Equal]", "2"}]},
       {
        RowBox[{
         FractionBox["25", "8"], "+", 
         FractionBox[
          RowBox[{"11", " ", "x"}], "6"], "+", 
         FractionBox[
          RowBox[{"19", " ", 
           SuperscriptBox["x", "2"]}], "72"]}], 
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{"x", ",", "6"}], "]"}], "\[Equal]", "3"}]},
       {
        RowBox[{
         FractionBox["20", "9"], "+", 
         FractionBox[
          RowBox[{"59", " ", "x"}], "36"], "+", 
         FractionBox[
          RowBox[{"19", " ", 
           SuperscriptBox["x", "2"]}], "72"]}], 
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{"x", ",", "6"}], "]"}], "\[Equal]", "4"}]},
       {
        RowBox[{
         FractionBox["265", "72"], "+", 
         FractionBox[
          RowBox[{"35", " ", "x"}], "18"], "+", 
         FractionBox[
          RowBox[{"19", " ", 
           SuperscriptBox["x", "2"]}], "72"]}], 
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{"x", ",", "6"}], "]"}], "\[Equal]", "5"}]},
       {"0", 
        TagBox["True",
         "PiecewiseDefault",
         AutoDelete->True]}
      },
      AllowedDimensions->{2, Automatic},
      Editable->True,
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.84]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}},
      Selectable->True]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.35]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  "Piecewise",
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True,
  Selectable->False,
  StripWrapperBoxes->True]], "Output",ExpressionUUID->"399a67b7-0ff1-4996-\
828c-841b5d3ba7ba"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{"s", ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "35"}], "}"}]}], "]"}]], "Input",ExpressionUUID->\
"c6388edd-b50c-4922-a127-c8fceb0f4de5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "8", ",", "11", ",", "13", ",", "20", ",", "30", ",", "18", ",", 
   "35", ",", "41", ",", "45", ",", "57", ",", "73", ",", "55", ",", "81", 
   ",", "90", ",", "96", ",", "113", ",", "135", ",", "111", ",", "146", ",", 
   "158", ",", "166", ",", "188", ",", "216", ",", "186", ",", "230", ",", 
   "245", ",", "255", ",", "282", ",", "316", ",", "280", ",", "333", ",", 
   "351", ",", "363", ",", "395"}], "}"}]], "Output",ExpressionUUID->\
"791ffaf7-9828-4402-a5a6-8e1974375b5d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", "s", "]"}]], "Input",ExpressionUUID->"e93f4b7d-b297-4913-b3f3-4a9e5e165bb0"],

Cell[TextData[{
 "Begin indexing the list at ",
 Cell[BoxData[
  FormBox["0", TraditionalForm]],ExpressionUUID->
  "fd5018bb-26d8-42ff-b63f-b27dad5fbbbe"],
 ":"
}], "Text",ExpressionUUID->"29e75374-3182-4be0-b1f0-9f9d7727eb80"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"s", "=", 
  RowBox[{"FindQuasiPolynomial", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "0", ",", "8", ",", "11", ",", "13", ",", "20", ",", "30", ",", "18", 
      ",", "35", ",", "41", ",", "45", ",", "57", ",", "73", ",", "55", ",", 
      "81", ",", "90", ",", "96", ",", "113", ",", "135", ",", "111", ",", 
      "146", ",", "158", ",", "166", ",", "188", ",", "216", ",", "186", ",", 
      "230", ",", "245", ",", "255", ",", "282", ",", "316", ",", "280", ",", 
      "333", ",", "351", ",", "363", ",", "395"}], "}"}], ",", "x", ",", "6", 
    ",", "0"}], "]"}]}]], "Input",ExpressionUUID->"5ab9c388-c440-4702-bd5c-\
a991ecf5558b"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\[Piecewise]", GridBox[{
       {
        RowBox[{
         FractionBox["625", "72"], "+", 
         FractionBox[
          RowBox[{"53", " ", "x"}], "18"], "+", 
         FractionBox[
          RowBox[{"19", " ", 
           SuperscriptBox["x", "2"]}], "72"]}], 
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{
           RowBox[{"1", "+", "x"}], ",", "6"}], "]"}], "\[Equal]", "0"}]},
       {
        RowBox[{
         FractionBox[
          RowBox[{"17", " ", "x"}], "12"], "+", 
         FractionBox[
          RowBox[{"19", " ", 
           SuperscriptBox["x", "2"]}], "72"]}], 
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{
           RowBox[{"1", "+", "x"}], ",", "6"}], "]"}], "\[Equal]", "1"}]},
       {
        RowBox[{
         FractionBox["385", "72"], "+", 
         FractionBox[
          RowBox[{"43", " ", "x"}], "18"], "+", 
         FractionBox[
          RowBox[{"19", " ", 
           SuperscriptBox["x", "2"]}], "72"]}], 
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{
           RowBox[{"1", "+", "x"}], ",", "6"}], "]"}], "\[Equal]", "2"}]},
       {
        RowBox[{
         FractionBox["47", "9"], "+", 
         FractionBox[
          RowBox[{"85", " ", "x"}], "36"], "+", 
         FractionBox[
          RowBox[{"19", " ", 
           SuperscriptBox["x", "2"]}], "72"]}], 
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{
           RowBox[{"1", "+", "x"}], ",", "6"}], "]"}], "\[Equal]", "3"}]},
       {
        RowBox[{
         FractionBox["33", "8"], "+", 
         FractionBox[
          RowBox[{"13", " ", "x"}], "6"], "+", 
         FractionBox[
          RowBox[{"19", " ", 
           SuperscriptBox["x", "2"]}], "72"]}], 
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{
           RowBox[{"1", "+", "x"}], ",", "6"}], "]"}], "\[Equal]", "4"}]},
       {
        RowBox[{
         FractionBox["53", "9"], "+", 
         FractionBox[
          RowBox[{"89", " ", "x"}], "36"], "+", 
         FractionBox[
          RowBox[{"19", " ", 
           SuperscriptBox["x", "2"]}], "72"]}], 
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{
           RowBox[{"1", "+", "x"}], ",", "6"}], "]"}], "\[Equal]", "5"}]},
       {"0", 
        TagBox["True",
         "PiecewiseDefault",
         AutoDelete->True]}
      },
      AllowedDimensions->{2, Automatic},
      Editable->True,
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.84]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}},
      Selectable->True]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.35]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  "Piecewise",
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True,
  Selectable->False,
  StripWrapperBoxes->True]], "Output",ExpressionUUID->"850f38d2-99ce-4ab9-\
8c03-16a04738e21b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{"s", ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "34"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"e9c2366e-c8eb-475e-aeab-14a8cb4538f4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "8", ",", "11", ",", "13", ",", "20", ",", "30", ",", "18", ",", 
   "35", ",", "41", ",", "45", ",", "57", ",", "73", ",", "55", ",", "81", 
   ",", "90", ",", "96", ",", "113", ",", "135", ",", "111", ",", "146", ",", 
   "158", ",", "166", ",", "188", ",", "216", ",", "186", ",", "230", ",", 
   "245", ",", "255", ",", "282", ",", "316", ",", "280", ",", "333", ",", 
   "351", ",", "363", ",", "395"}], "}"}]], "Output",ExpressionUUID->\
"bcf2fae8-2952-4f08-9df9-62e182ed2d00"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", "s", "]"}]], "Input",ExpressionUUID->"0cdf56b2-493c-4a4d-bcda-f1802822cc51"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["FindRegularSequenceFunction", "Input"]], \
"Subsubsection",ExpressionUUID->"306c7e2f-84ca-460a-a6a4-eb0c2e048d15"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "FindRegularSequenceFunction"}]], "Input",ExpressionUUID->"56423750-c766-4f88-842c-eb83530a6035"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"\
FindRegularSequenceFunction\\\", \\\"[\\\", \
RowBox[List[RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], StyleBox[\\\"0\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"]]], \\\"}\\\"]], \\\",\\\", StyleBox[\\\"k\\\", \\\"TI\\\"]]], \
\\\"]\\\"]]\\) attempts to find a \\!\\(\\*StyleBox[\\\"k\\\", \\\"TI\\\"]\\)\
\[Hyphen]regular sequence which reproduces the sequence \
\\!\\(\\*SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], StyleBox[\\\"n\\\", \\\
\"TI\\\"]]\\).\\n\\!\\(\\*RowBox[List[\\\"FindRegularSequenceFunction\\\", \\\
\"[\\\", RowBox[List[StyleBox[\\\"array\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"d\\\", \
\\\"TI\\\"]]]], \\\"}\\\"]]]], \\\"]\\\"]]\\) finds a \\!\\(\\*StyleBox[\\\"d\
\\\", \\\"TI\\\"]\\)\[Hyphen]dimensional \
(\\!\\(\\*RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\
\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\
\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\
\\\", \\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], \
StyleBox[\\\"d\\\", \\\"TI\\\"]]]]\\))\[Hyphen]regular sequence which \
reproduces a full array of \
values.\\n\\!\\(\\*RowBox[List[\\\"FindRegularSequenceFunction\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"array\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"kspec\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"n\\\", \
\\\"TI\\\"]]], \\\"]\\\"]]\\) gives the function applied to \
\\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"FindRegularSequenceFunction", "[", 
                    RowBox[{"IntegerSequences`Private`array_", ",", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystem_", "?", 
                    "IntegerSequences`Private`PositiveNumerationSystemQ"}], 
                    ",", 
                    RowBox[{"IntegerSequences`Private`options", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"FindRegularSequenceFunction", "[", 
                    RowBox[{"IntegerSequences`Private`array", ",", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"IntegerSequences`Private`numerationsystem", ",", 
                    RowBox[{
                    "ArrayDepth", "[", "IntegerSequences`Private`array", 
                    "]"}]}], "]"}], ",", "IntegerSequences`Private`options"}],
                     "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"FindRegularSequenceFunction", "[", 
                    RowBox[{"IntegerSequences`Private`array_List", ",", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystemlist", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    "__", "?", 
                    "IntegerSequences`Private`PositiveNumerationSystemQ"}], 
                    "}"}]}], ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "Length", "[", 
                    "IntegerSequences`Private`numerationsystemlist", "]"}], 
                    "\[LessEqual]", 
                    RowBox[{
                    "ArrayDepth", "[", "IntegerSequences`Private`array", 
                    "]"}]}], "&&", 
                    RowBox[{"!", 
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`array", ",", "_List", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "Length", "[", 
                    "IntegerSequences`Private`numerationsystemlist", "]"}], 
                    "}"}]}], "]"}]}]}]}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`relations", ",", 
                    "IntegerSequences`Private`basissequences", ",", 
                    "IntegerSequences`Private`redundantsequencechains", ",", 
                    "IntegerSequences`Private`basissequencecount", ",", 
                    "IntegerSequences`Private`failed"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`failed", "=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`array", ",", 
                    "_DirectedInfinity", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "Length", "[", 
                    "IntegerSequences`Private`numerationsystemlist", "]"}], 
                    "}"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"FindRegularSequenceFunction", "::", "inf"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ";", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`relations", ",", 
                    "IntegerSequences`Private`basissequences", ",", 
                    "IntegerSequences`Private`redundantsequencechains"}], 
                    "}"}], "=", 
                    RowBox[{
                    "IntegerSequences`Private`FindSequenceRelations", "[", 
                    RowBox[{
                    "IntegerSequences`Private`array", ",", 
                    "IntegerSequences`Private`numerationsystemlist", 
                    ",", "\<\"RegularSequence\"\>", ",", 
                    RowBox[{"Monitor", "\[Rule]", 
                    RowBox[{"OptionValue", "[", "Monitor", "]"}]}]}], "]"}]}],
                     ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`relations", "===", "$Failed"}], 
                    ",", 
                    RowBox[{"Throw", "[", "True", "]"}]}], "]"}], ";", 
                    RowBox[{
                    "IntegerSequences`Private`basissequencecount", "=", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`basissequences", 
                    "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`relations", "=", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#1", "\[Rule]", 
                    RowBox[{"UnitVector", "[", 
                    RowBox[{
                    "IntegerSequences`Private`basissequencecount", ",", 
                    RowBox[{"First", "[", "#2", "]"}]}], "]"}]}], "&"}], ",", 
                    "IntegerSequences`Private`basissequences"}], "]"}], ",", 
                    "IntegerSequences`Private`relations"}], "]"}]}], ";", 
                    "False"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`basissequencecount", "\[Equal]",
                     "0"}], ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"UnitVector", "[", 
                    RowBox[{
                    "IntegerSequences`Private`basissequencecount", ",", "1"}],
                     "]"}]}], "]"}], ",", 
                    RowBox[{"Outer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`basissequence", ",", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Append", ",", 
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`basissequence", ",", 
                    RowBox[{"{", "##1", "}"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"Append", "[", 
                    RowBox[{"IntegerSequences`Private`relations", ",", 
                    RowBox[{"_", "\[Rule]", "$Failed"}]}], "]"}]}], "]"}]}], 
                    "]"}], "/@", "IntegerSequences`Private`basissequences"}], 
                    "&"}], ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{
                    "IntegerSequences`Private`NumerationSystemDigitList", "/@",
                     "IntegerSequences`Private`numerationsystemlist"}]}]}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`array", "\[LeftDoubleBracket]", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{"FromDigitList", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "#1", ",", 
                    "IntegerSequences`Private`numerationsystemlist"}], 
                    "}"}]}], "]"}], "+", "1"}], ")"}]}], 
                    "\[RightDoubleBracket]"}], "&"}], ")"}], "/@", 
                    "IntegerSequences`Private`basissequences"}], ",", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystemlist", ",", 
                    RowBox[{
                    RowBox[{
                    "{", "IntegerSequences`Private`numerationsystem_", "}"}], 
                    "\[RuleDelayed]", 
                    "IntegerSequences`Private`numerationsystem"}]}], "]"}]}], 
                    "]"}], "/;", 
                    RowBox[{"!", "IntegerSequences`Private`failed"}]}]}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"FindRegularSequenceFunction", "[", 
                    RowBox[{
                    "IntegerSequences`Private`array_", ",", 
                    "IntegerSequences`Private`numerationsystem_", ",", 
                    "IntegerSequences`Private`n_", ",", 
                    RowBox[{"IntegerSequences`Private`options", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`regularsequence", "=", 
                    RowBox[{"FindRegularSequenceFunction", "[", 
                    RowBox[{
                    "IntegerSequences`Private`array", ",", 
                    "IntegerSequences`Private`numerationsystem", ",", 
                    "IntegerSequences`Private`options"}], "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`regularsequence", "[", 
                    "IntegerSequences`Private`n", "]"}], "/;", 
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`regularsequence", ",", 
                    "_FindRegularSequenceFunction"}], "]"}]}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "FindRegularSequenceFunction", 
                    "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "__", "}"}], ",", "_", ",", "_.", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`FindRegularSequenceFunction] = {
                    "ArgumentsPattern" -> {{
                    BlankSequence[]}, 
                    Blank[], 
                    Optional[
                    Blank[]], 
                    OptionsPattern[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"Monitor", "\[Rule]", "False"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`FindRegularSequenceFunction\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"\
FindRegularSequenceFunction\\\", \\\"[\\\", \
RowBox[List[RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], StyleBox[\\\"0\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"]]], \\\"}\\\"]], \\\",\\\", StyleBox[\\\"k\\\", \\\"TI\\\"]]], \
\\\"]\\\"]]\\) attempts to find a \\!\\(\\*StyleBox[\\\"k\\\", \\\"TI\\\"]\\)\
\[Hyphen]regular sequence which reproduces the sequence \
\\!\\(\\*SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], StyleBox[\\\"n\\\", \\\
\"TI\\\"]]\\).\\n\\!\\(\\*RowBox[List[\\\"FindRegularSequenceFunction\\\", \\\
\"[\\\", RowBox[List[StyleBox[\\\"array\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"d\\\", \
\\\"TI\\\"]]]], \\\"}\\\"]]]], \\\"]\\\"]]\\) finds a \\!\\(\\*StyleBox[\\\"d\
\\\", \\\"TI\\\"]\\)\[Hyphen]dimensional \
(\\!\\(\\*RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\
\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\
\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\
\\\", \\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], \
StyleBox[\\\"d\\\", \\\"TI\\\"]]]]\\))\[Hyphen]regular sequence which \
reproduces a full array of \
values.\\n\\!\\(\\*RowBox[List[\\\"FindRegularSequenceFunction\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"array\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"kspec\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"n\\\", \
\\\"TI\\\"]]], \\\"]\\\"]]\\) gives the function applied to \
\\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"FindRegularSequenceFunction\", \"[\", \
RowBox[List[RowBox[List[\"{\", RowBox[List[SubscriptBox[StyleBox[\"a\", \
\"TI\"], StyleBox[\"0\", \"TR\"]], \",\", SubscriptBox[StyleBox[\"a\", \
\"TI\"], StyleBox[\"1\", \"TR\"]], \",\", StyleBox[\"\\[Ellipsis]\", \
\"TR\"]]], \"}\"]], \",\", StyleBox[\"k\", \"TI\"]]], \"]\"]]\) attempts to \
find a \!\(\*StyleBox[\"k\", \"TI\"]\)\[Hyphen]regular sequence which \
reproduces the sequence \!\(\*SubscriptBox[StyleBox[\"a\", \"TI\"], StyleBox[\
\"n\", \"TI\"]]\).\n\!\(\*RowBox[List[\"FindRegularSequenceFunction\", \"[\", \
RowBox[List[StyleBox[\"array\", \"TI\"], \",\", RowBox[List[\"{\", \
RowBox[List[SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"1\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"2\", \"TR\"]], \",\", \
StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", SubscriptBox[StyleBox[\"k\", \
\"TI\"], StyleBox[\"d\", \"TI\"]]]], \"}\"]]]], \"]\"]]\) finds a \
\!\(\*StyleBox[\"d\", \"TI\"]\)\[Hyphen]dimensional \
(\!\(\*RowBox[List[SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"1\", \"TR\
\"]], \",\", SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"2\", \"TR\"]], \
\",\", StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", \
SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"d\", \
\"TI\"]]]]\))\[Hyphen]regular sequence which reproduces a full array of \
values.\n\!\(\*RowBox[List[\"FindRegularSequenceFunction\", \"[\", \
RowBox[List[StyleBox[\"array\", \"TI\"], \",\", StyleBox[\"kspec\", \"TI\"], \
\",\", StyleBox[\"n\", \"TI\"]]], \"]\"]]\) gives the function applied to \
\!\(\*StyleBox[\"n\", \"TI\"]\).", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`FindRegularSequenceFunction, {
      IntegerSequences`FindRegularSequenceFunction[
         Pattern[IntegerSequences`Private`array, 
          Blank[]], 
         PatternTest[
          Pattern[IntegerSequences`Private`numerationsystem, 
           Blank[]], IntegerSequences`Private`PositiveNumerationSystemQ], 
         Pattern[IntegerSequences`Private`options, 
          OptionsPattern[]]] :> 
       IntegerSequences`FindRegularSequenceFunction[
        IntegerSequences`Private`array, 
         ConstantArray[IntegerSequences`Private`numerationsystem, 
          ArrayDepth[IntegerSequences`Private`array]], 
         IntegerSequences`Private`options], Condition[
         IntegerSequences`FindRegularSequenceFunction[
          Pattern[IntegerSequences`Private`array, 
           Blank[List]], 
          Pattern[IntegerSequences`Private`numerationsystemlist, {
            PatternTest[
             BlankSequence[], 
             IntegerSequences`Private`PositiveNumerationSystemQ]}], 
          OptionsPattern[]], 
         And[
         Length[IntegerSequences`Private`numerationsystemlist] <= 
          ArrayDepth[IntegerSequences`Private`array], 
          Not[
           MemberQ[IntegerSequences`Private`array, 
            Blank[List], {
             Length[IntegerSequences`Private`numerationsystemlist]}]]]] :> 
       Module[{IntegerSequences`Private`relations, 
          IntegerSequences`Private`basissequences, 
          IntegerSequences`Private`redundantsequencechains, 
          IntegerSequences`Private`basissequencecount, 
          IntegerSequences`Private`failed}, 
         IntegerSequences`Private`failed = Catch[If[
              MemberQ[IntegerSequences`Private`array, 
               Blank[DirectedInfinity], {
                Length[IntegerSequences`Private`numerationsystemlist]}], 
              Message[
                MessageName[
                IntegerSequences`FindRegularSequenceFunction, "inf"]]; 
              Throw[True]]; {
              IntegerSequences`Private`relations, 
               IntegerSequences`Private`basissequences, 
               IntegerSequences`Private`redundantsequencechains} = 
             IntegerSequences`Private`FindSequenceRelations[
              IntegerSequences`Private`array, 
               IntegerSequences`Private`numerationsystemlist, 
               "RegularSequence", Monitor -> OptionValue[Monitor]]; 
            If[IntegerSequences`Private`relations === $Failed, 
              Throw[True]]; 
            IntegerSequences`Private`basissequencecount = 
             Length[IntegerSequences`Private`basissequences]; 
            IntegerSequences`Private`relations = Join[
               
               MapIndexed[# -> 
                UnitVector[IntegerSequences`Private`basissequencecount, 
                  First[#2]]& , IntegerSequences`Private`basissequences], 
               IntegerSequences`Private`relations]; False]; Condition[
           IntegerSequences`RegularSequence[
            If[IntegerSequences`Private`basissequencecount == 0, {}, 
             UnitVector[IntegerSequences`Private`basissequencecount, 1]], 
            Outer[Map[
              Function[IntegerSequences`Private`basissequence, 
               Replace[
                MapThread[Append, {IntegerSequences`Private`basissequence, {
                   SlotSequence[1]}}], 
                Append[
                IntegerSequences`Private`relations, Blank[] -> $Failed]]], 
              IntegerSequences`Private`basissequences]& , 
             Apply[Sequence, 
              Map[
              IntegerSequences`Private`NumerationSystemDigitList, 
               IntegerSequences`Private`numerationsystemlist]]], 
            Map[Part[IntegerSequences`Private`array, 
              Apply[
              Sequence, 
               MapThread[
                IntegerSequences`FromDigitList, {#, 
                  IntegerSequences`Private`numerationsystemlist}] + 1]]& , 
             IntegerSequences`Private`basissequences], 
            Replace[IntegerSequences`Private`numerationsystemlist, {
               Pattern[IntegerSequences`Private`numerationsystem, 
                Blank[]]} :> IntegerSequences`Private`numerationsystem]], 
           Not[IntegerSequences`Private`failed]]], 
       IntegerSequences`FindRegularSequenceFunction[
         Pattern[IntegerSequences`Private`array, 
          Blank[]], 
         Pattern[IntegerSequences`Private`numerationsystem, 
          Blank[]], 
         Pattern[IntegerSequences`Private`n, 
          Blank[]], 
         Pattern[IntegerSequences`Private`options, 
          OptionsPattern[]]] :> 
       With[{IntegerSequences`Private`regularsequence = 
          IntegerSequences`FindRegularSequenceFunction[
           IntegerSequences`Private`array, 
            IntegerSequences`Private`numerationsystem, 
            IntegerSequences`Private`options]}, 
         Condition[
          IntegerSequences`Private`regularsequence[
          IntegerSequences`Private`n], 
          Not[
           MatchQ[IntegerSequences`Private`regularsequence, 
            Blank[IntegerSequences`FindRegularSequenceFunction]]]]]}], 
    "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`FindRegularSequenceFunction, {
      SyntaxInformation[IntegerSequences`FindRegularSequenceFunction] -> {
        "ArgumentsPattern" -> {{
            BlankSequence[]}, 
           Blank[], 
           Optional[
            Blank[]], 
           OptionsPattern[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {Monitor -> False}, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`FindRegularSequenceFunction"], False]]], "Output",Expres\
sionUUID->"3959a34e-f0d5-486b-a62d-d618f0bd0717"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"s", "=", 
  RowBox[{"FindRegularSequenceFunction", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"DigitCount", "[", 
       RowBox[{"n", ",", "2", ",", "1"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "0", ",", "31"}], "}"}]}], "]"}], ",", "2"}], 
   "]"}]}]], "Input",ExpressionUUID->"31752ba0-7b9c-486d-9013-339bae2bcaed"],

Cell[BoxData[
 RowBox[{"RegularSequence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "2"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", "2"}], "]"}]], "Output",ExpressionUUI\
D->"5c2e8adb-9353-4da6-83c6-4ad45084d6ca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"s", "[", "n", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "15"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"9d165f1a-8d56-4d7b-96cc-32b0dcc291b8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "1", ",", "2", ",", "1", ",", "2", ",", "2", ",", "3", 
   ",", "1", ",", "2", ",", "2", ",", "3", ",", "2", ",", "3", ",", "3", ",", 
   "4"}], "}"}]], "Output",ExpressionUUID->"50b1dd47-3163-4057-bf28-\
7193f419ad5d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", "s", "]"}]], "Input",ExpressionUUID->"9f04fb1c-e2f6-431f-86dc-42e72b9d6172"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceMatrixForm", "[", 
  RowBox[{"FindRegularSequenceFunction", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Total", "[", 
       RowBox[{"IntegerDigits", "[", 
        RowBox[{"n", ",", "2"}], "]"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "0", ",", 
        RowBox[{
         SuperscriptBox["2", "5"], "-", "1"}]}], "}"}]}], "]"}], ",", "2"}], 
   "]"}], "]"}]], "Input",ExpressionUUID->"3c3b6684-b06b-45db-b456-\
68261ac4e9c5"],

Cell[BoxData[
 RowBox[{"RegularSequence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "0"},
         {"0", "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], ",", 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "1"},
         {
          RowBox[{"-", "1"}], "2"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", "2"}], "]"}]], "Output",ExpressionUUI\
D->"349eb96b-aa41-4bec-bc16-1eb0d8f66cbf"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceMatrixForm", "[", 
  RowBox[{"FindRegularSequenceFunction", "[", 
   RowBox[{
    RowBox[{"Nest", "[", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"matrix", ",", 
        RowBox[{"ArrayFlatten", "[", 
         RowBox[{
          RowBox[{"matrix", "/.", "\[InvisibleSpace]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"1", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"1", ",", "0"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"1", ",", "1"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], "}"}]}], ",", 
             RowBox[{"0", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"0", ",", "1"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"1", ",", "1"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], "}"}]}]}], 
            "}"}]}], ",", "3"}], "]"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"{", "1", "}"}], "}"}], "}"}], ",", "5"}], "]"}], ",", "2"}], 
   "]"}], "]"}]], "Input",ExpressionUUID->"752937c9-11d2-4053-b63e-\
f49c4ddc712e"],

Cell[BoxData[
 RowBox[{"RegularSequence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         TagBox[
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {"1", "0"},
             {"0", "1"}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}],
          Function[BoxForm`e$, 
           MatrixForm[BoxForm`e$]]], ",", 
         TagBox[
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {"0", "1"},
             {"1", "0"}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}],
          Function[BoxForm`e$, 
           MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         TagBox[
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {"1", "1"},
             {"0", "0"}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}],
          Function[BoxForm`e$, 
           MatrixForm[BoxForm`e$]]], ",", 
         TagBox[
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {"1", "1"},
             {"0", "0"}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}],
          Function[BoxForm`e$, 
           MatrixForm[BoxForm`e$]]]}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         TagBox[
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {"1", "1"},
             {"0", "0"}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}],
          Function[BoxForm`e$, 
           MatrixForm[BoxForm`e$]]], ",", 
         TagBox[
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {"1", "1"},
             {"0", "0"}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}],
          Function[BoxForm`e$, 
           MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         TagBox[
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {"0", "1"},
             {"1", "0"}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}],
          Function[BoxForm`e$, 
           MatrixForm[BoxForm`e$]]], ",", 
         TagBox[
          RowBox[{"(", "\[NoBreak]", GridBox[{
             {"1", "0"},
             {"0", "1"}
            },
            
            GridBoxAlignment->{
             "Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.7]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[0.4]}, 
                Offset[0.2]}}], "\[NoBreak]", ")"}],
          Function[BoxForm`e$, 
           MatrixForm[BoxForm`e$]]]}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "2"}], "}"}]}], "]"}]], "Output",ExpressionUUI\
D->"0eb6c4dc-3c7c-4a37-93ab-c0610c972eb9"]
}, Open  ]],

Cell[TextData[{
 "The array of binomial coefficients modulo ",
 Cell[BoxData[
  FormBox["6", TraditionalForm]],ExpressionUUID->
  "e9e75970-de66-41df-83de-280046488347"],
 " is not ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"6", ",", "6"}], ")"}], TraditionalForm]],ExpressionUUID->
  "771cfd53-c956-4f54-b155-dd1a48fb1b73"],
 "-regular:"
}], "Text",ExpressionUUID->"b074f96e-c501-4207-8577-90a0f20ecc37"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindRegularSequenceFunction", "[", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{
        RowBox[{"Binomial", "[", 
         RowBox[{"n", ",", "m"}], "]"}], ",", "6"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"n", ",", "0", ",", 
        RowBox[{
         SuperscriptBox["6", "3"], "-", "1"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"m", ",", "0", ",", 
        RowBox[{
         SuperscriptBox["6", "3"], "-", "1"}]}], "}"}]}], "]"}], ",", "6"}], 
   "]"}], "//", "Short"}]], "Input",ExpressionUUID->"501c5d08-c2bd-4303-9812-\
e59d007ab151"],

Cell[BoxData[
 TagBox[
  RowBox[{"FindRegularSequenceFunction", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\[LeftSkeleton]", "1", "\[RightSkeleton]"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"6", ",", "6"}], "}"}]}], "]"}],
  Short]], "Output",ExpressionUUID->"a627248d-26f8-4179-b275-045d5c233427"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["FindRegularSequenceRecurrence", "Input"]], \
"Subsubsection",ExpressionUUID->"60080500-3101-4545-985a-bcb2002b013e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", 
  StyleBox["FindRegularSequenceRecurrence", "Input"]}]], "Input",ExpressionUUI\
D->"c88c242f-908f-45ca-ba2f-11e437ee1e13"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"\
FindRegularSequenceRecurrence\\\", \\\"[\\\", RowBox[List[RowBox[List[\\\"{\\\
\", RowBox[List[SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], \
StyleBox[\\\"0\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"a\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"]]], \\\"}\\\"]], \\\",\\\", \
StyleBox[\\\"k\\\", \\\"TI\\\"], \\\",\\\", RowBox[List[StyleBox[\\\"s\\\", \
\\\"TI\\\"], \\\"[\\\", StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]]], \\\"]\
\\\"]]\\) attempts to find linear relations between subsequences of the \
sequence \\!\\(\\*SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], \
StyleBox[\\\"n\\\", \\\"TI\\\"]]\\) of the form \
\\!\\(\\*RowBox[List[StyleBox[\\\"s\\\", \\\"TI\\\"], \\\"[\\\", \
RowBox[List[RowBox[List[SuperscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], \
StyleBox[\\\"e\\\", \\\"TI\\\"]], \\\" \\\", StyleBox[\\\"n\\\", \
\\\"TI\\\"]]], \\\"+\\\", StyleBox[\\\"i\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) \
that determine the \
sequence.\\n\\!\\(\\*RowBox[List[\\\"FindRegularSequenceRecurrence\\\", \\\"[\
\\\", RowBox[List[StyleBox[\\\"array\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"d\\\", \
\\\"TI\\\"]]]], \\\"}\\\"]], \\\",\\\", RowBox[List[StyleBox[\\\"s\\\", \
\\\"TI\\\"], \\\"[\\\", RowBox[List[SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\
\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"n\
\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\
\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"n\\\", \
\\\"TI\\\"], StyleBox[\\\"d\\\", \\\"TI\\\"]]]], \\\"]\\\"]]]], \
\\\"]\\\"]]\\) finds relations between subarrays of a \\!\\(\\*StyleBox[\\\"d\
\\\", \\\"TI\\\"]\\)\[Hyphen]dimensional sequence in bases \
\\!\\(\\*RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \
\\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", \
StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", \
SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"d\\\", \
\\\"TI\\\"]]]]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"FindRegularSequenceRecurrence", "[", 
                    RowBox[{"IntegerSequences`Private`array_", ",", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystem_", "?", 
                    "IntegerSequences`Private`PositiveNumerationSystemQ"}], 
                    ",", 
                    RowBox[{"IntegerSequences`Private`symbol", ":", 
                    RowBox[{
                    RowBox[{"Except", "[", "Rule", "]"}], "[", "__", "]"}]}], 
                    ",", 
                    RowBox[{"IntegerSequences`Private`options", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"FindRegularSequenceRecurrence", "[", 
                    RowBox[{"IntegerSequences`Private`array", ",", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"IntegerSequences`Private`numerationsystem", ",", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`symbol", "]"}]}],
                     "]"}], ",", "IntegerSequences`Private`symbol", ",", 
                    "IntegerSequences`Private`options"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"FindRegularSequenceRecurrence", "[", 
                    RowBox[{"IntegerSequences`Private`array_List", ",", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystemlist", ":", 
                    RowBox[{"{", 
                    RowBox[{"__", "?", 
                    "IntegerSequences`Private`PositiveNumerationSystemQ"}], 
                    "}"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`symbol", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"IntegerSequences`Private`a", ":", 
                    RowBox[{"Except", "[", "Rule", "]"}]}], ")"}], "[", 
                    RowBox[{
                    "__", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}], "]"}]}], 
                    ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "Length", "[", 
                    "IntegerSequences`Private`numerationsystemlist", "]"}], 
                    "\[Equal]", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`symbol", "]"}], 
                    "\[LessEqual]", 
                    RowBox[{
                    "ArrayDepth", "[", "IntegerSequences`Private`array", 
                    "]"}]}], "&&", 
                    RowBox[{"!", 
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`array", ",", "_List", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "Length", "[", 
                    "IntegerSequences`Private`numerationsystemlist", "]"}], 
                    "}"}]}], "]"}]}]}]}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`dimension", ",", 
                    "IntegerSequences`Private`relations", ",", 
                    "IntegerSequences`Private`basissequences", ",", 
                    "IntegerSequences`Private`initialconditions", ",", 
                    "IntegerSequences`Private`failed", ",", 
                    "IntegerSequences`Private`head"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`failed", "=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`array", ",", 
                    "_DirectedInfinity", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "Length", "[", 
                    "IntegerSequences`Private`numerationsystemlist", "]"}], 
                    "}"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"FindRegularSequenceRecurrence", "::", "inf"}], 
                    "MessageName"], "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ";", 
                    RowBox[{"IntegerSequences`Private`dimension", "=", 
                    RowBox[{
                    "Length", "[", 
                    "IntegerSequences`Private`numerationsystemlist", "]"}]}], 
                    ";", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`relations", ",", 
                    "IntegerSequences`Private`basissequences"}], "}"}], "=", 
                    RowBox[{"Most", "[", 
                    RowBox[{
                    "IntegerSequences`Private`FindSequenceRelations", "[", 
                    RowBox[{
                    "IntegerSequences`Private`array", ",", 
                    "IntegerSequences`Private`numerationsystemlist", 
                    ",", "\<\"RegularSequence\"\>", ",", 
                    RowBox[{"Monitor", "\[Rule]", 
                    RowBox[{"OptionValue", "[", "Monitor", "]"}]}]}], "]"}], 
                    "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`relations", "===", "$Failed"}], 
                    ",", 
                    RowBox[{"Throw", "[", "True", "]"}]}], "]"}], ";", 
                    RowBox[{"IntegerSequences`Private`initialconditions", "=", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`SymbolicSubsequence", "[", 
                    RowBox[{
                    "#1", ",", 
                    "IntegerSequences`Private`numerationsystemlist", ",", 
                    RowBox[{"IntegerSequences`Private`head", "@@", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"0", ",", "IntegerSequences`Private`dimension"}], 
                    "]"}]}]}], "]"}], "\[Equal]", 
                    RowBox[{
                    "IntegerSequences`Private`array", "\[LeftDoubleBracket]", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{"FromDigitList", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "#1", ",", 
                    "IntegerSequences`Private`numerationsystemlist"}], 
                    "}"}]}], "]"}], "+", "1"}], ")"}]}], 
                    "\[RightDoubleBracket]"}]}], "&"}], ")"}], "/@", 
                    "IntegerSequences`Private`basissequences"}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`basissequences", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`SymbolicSubsequence", "[", 
                    RowBox[{
                    "#1", ",", 
                    "IntegerSequences`Private`numerationsystemlist", ",", 
                    "IntegerSequences`Private`symbol"}], "]"}], "&"}], ")"}], 
                    "/@", "IntegerSequences`Private`basissequences"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`relations", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`SymbolicSubsequence", "[", 
                    RowBox[{
                    RowBox[{"First", "[", "#1", "]"}], ",", 
                    "IntegerSequences`Private`numerationsystemlist", ",", 
                    "IntegerSequences`Private`symbol"}], "]"}], "\[Equal]", 
                    RowBox[{
                    RowBox[{"Last", "[", "#1", "]"}], ".", 
                    "IntegerSequences`Private`basissequences"}]}], "&"}], 
                    ")"}], "/@", "IntegerSequences`Private`relations"}]}], 
                    ";", "False"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Switch", "[", 
                    RowBox[{
                    RowBox[{"OptionValue", "[", "\<\"Output\"\>", "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"\<\"Full\"\>", "|", "Full"}], ",", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    "IntegerSequences`Private`relations", ",", 
                    "IntegerSequences`Private`initialconditions"}], "]"}], 
                    ",", "\[IndentingNewLine]", 
                    RowBox[{"\<\"Condensed\"\>", "|", "_"}], ",", 
                    RowBox[{"KeyValueMap", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`rightside", ",", 
                    "IntegerSequences`Private`class"}], "}"}], ",", 
                    RowBox[{"Equal", "@@", 
                    RowBox[{"Append", "[", 
                    RowBox[{
                    "IntegerSequences`Private`class", ",", 
                    "IntegerSequences`Private`rightside"}], "]"}]}]}], "]"}], 
                    ",", 
                    RowBox[{"GroupBy", "[", 
                    RowBox[{
                    RowBox[{"Join", "[", 
                    RowBox[{
                    "IntegerSequences`Private`relations", ",", 
                    "IntegerSequences`Private`initialconditions"}], "]"}], 
                    ",", 
                    RowBox[{"Last", "\[Rule]", "First"}]}], "]"}]}], "]"}]}], 
                    "]"}], "/.", "\[VeryThinSpace]", 
                    RowBox[{
                    "IntegerSequences`Private`head", "\[Rule]", 
                    "IntegerSequences`Private`a"}]}], ")"}], "/;", 
                    RowBox[{"!", "IntegerSequences`Private`failed"}]}]}]}], 
                    "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "FindRegularSequenceRecurrence",
                     "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "__", "}"}], ",", "_", ",", "_", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`FindRegularSequenceRecurrence] = {
                    "ArgumentsPattern" -> {{
                    BlankSequence[]}, 
                    Blank[], 
                    Blank[], 
                    OptionsPattern[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\<\"Output\"\>", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"Monitor", "\[Rule]", "False"}]}], "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`FindRegularSequenceRecurrence\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"\
FindRegularSequenceRecurrence\\\", \\\"[\\\", RowBox[List[RowBox[List[\\\"{\\\
\", RowBox[List[SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], \
StyleBox[\\\"0\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"a\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"]]], \\\"}\\\"]], \\\",\\\", \
StyleBox[\\\"k\\\", \\\"TI\\\"], \\\",\\\", RowBox[List[StyleBox[\\\"s\\\", \
\\\"TI\\\"], \\\"[\\\", StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]]], \\\"]\
\\\"]]\\) attempts to find linear relations between subsequences of the \
sequence \\!\\(\\*SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], \
StyleBox[\\\"n\\\", \\\"TI\\\"]]\\) of the form \
\\!\\(\\*RowBox[List[StyleBox[\\\"s\\\", \\\"TI\\\"], \\\"[\\\", \
RowBox[List[RowBox[List[SuperscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], \
StyleBox[\\\"e\\\", \\\"TI\\\"]], \\\" \\\", StyleBox[\\\"n\\\", \
\\\"TI\\\"]]], \\\"+\\\", StyleBox[\\\"i\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) \
that determine the \
sequence.\\n\\!\\(\\*RowBox[List[\\\"FindRegularSequenceRecurrence\\\", \\\"[\
\\\", RowBox[List[StyleBox[\\\"array\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"d\\\", \
\\\"TI\\\"]]]], \\\"}\\\"]], \\\",\\\", RowBox[List[StyleBox[\\\"s\\\", \
\\\"TI\\\"], \\\"[\\\", RowBox[List[SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\
\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"n\
\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\
\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"n\\\", \
\\\"TI\\\"], StyleBox[\\\"d\\\", \\\"TI\\\"]]]], \\\"]\\\"]]]], \
\\\"]\\\"]]\\) finds relations between subarrays of a \\!\\(\\*StyleBox[\\\"d\
\\\", \\\"TI\\\"]\\)\[Hyphen]dimensional sequence in bases \
\\!\\(\\*RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \
\\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", \
StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", \
SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"d\\\", \
\\\"TI\\\"]]]]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"FindRegularSequenceRecurrence\", \"[\", \
RowBox[List[RowBox[List[\"{\", RowBox[List[SubscriptBox[StyleBox[\"a\", \
\"TI\"], StyleBox[\"0\", \"TR\"]], \",\", SubscriptBox[StyleBox[\"a\", \
\"TI\"], StyleBox[\"1\", \"TR\"]], \",\", StyleBox[\"\\[Ellipsis]\", \
\"TR\"]]], \"}\"]], \",\", StyleBox[\"k\", \"TI\"], \",\", \
RowBox[List[StyleBox[\"s\", \"TI\"], \"[\", StyleBox[\"n\", \"TI\"], \
\"]\"]]]], \"]\"]]\) attempts to find linear relations between subsequences \
of the sequence \!\(\*SubscriptBox[StyleBox[\"a\", \"TI\"], StyleBox[\"n\", \
\"TI\"]]\) of the form \!\(\*RowBox[List[StyleBox[\"s\", \"TI\"], \"[\", \
RowBox[List[RowBox[List[SuperscriptBox[StyleBox[\"k\", \"TI\"], \
StyleBox[\"e\", \"TI\"]], \" \", StyleBox[\"n\", \"TI\"]]], \"+\", \
StyleBox[\"i\", \"TI\"]]], \"]\"]]\) that determine the sequence.\n\
\!\(\*RowBox[List[\"FindRegularSequenceRecurrence\", \"[\", \
RowBox[List[StyleBox[\"array\", \"TI\"], \",\", RowBox[List[\"{\", \
RowBox[List[SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"1\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"2\", \"TR\"]], \",\", \
StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", SubscriptBox[StyleBox[\"k\", \
\"TI\"], StyleBox[\"d\", \"TI\"]]]], \"}\"]], \",\", RowBox[List[StyleBox[\"s\
\", \"TI\"], \"[\", RowBox[List[SubscriptBox[StyleBox[\"n\", \"TI\"], \
StyleBox[\"1\", \"TR\"]], \",\", SubscriptBox[StyleBox[\"n\", \"TI\"], \
StyleBox[\"2\", \"TR\"]], \",\", StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", \
SubscriptBox[StyleBox[\"n\", \"TI\"], StyleBox[\"d\", \"TI\"]]]], \"]\"]]]], \
\"]\"]]\) finds relations between subarrays of a \!\(\*StyleBox[\"d\", \
\"TI\"]\)\[Hyphen]dimensional sequence in bases \
\!\(\*RowBox[List[SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"1\", \
\"TR\"]], \",\", SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"2\", \
\"TR\"]], \",\", StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", \
SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"d\", \"TI\"]]]]\).", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`FindRegularSequenceRecurrence, {
      IntegerSequences`FindRegularSequenceRecurrence[
         Pattern[IntegerSequences`Private`array, 
          Blank[]], 
         PatternTest[
          Pattern[IntegerSequences`Private`numerationsystem, 
           Blank[]], IntegerSequences`Private`PositiveNumerationSystemQ], 
         Pattern[IntegerSequences`Private`symbol, 
          Except[Rule][
           BlankSequence[]]], 
         Pattern[IntegerSequences`Private`options, 
          OptionsPattern[]]] :> 
       IntegerSequences`FindRegularSequenceRecurrence[
        IntegerSequences`Private`array, 
         ConstantArray[IntegerSequences`Private`numerationsystem, 
          Length[IntegerSequences`Private`symbol]], 
         IntegerSequences`Private`symbol, IntegerSequences`Private`options], 
       Condition[
         IntegerSequences`FindRegularSequenceRecurrence[
          Pattern[IntegerSequences`Private`array, 
           Blank[List]], 
          Pattern[IntegerSequences`Private`numerationsystemlist, {
            PatternTest[
             BlankSequence[], 
             IntegerSequences`Private`PositiveNumerationSystemQ]}], 
          Pattern[IntegerSequences`Private`symbol, 
           Pattern[IntegerSequences`Private`a, 
            Except[Rule]][
            PatternTest[
             BlankSequence[], IntegerSequences`Private`PlausibleVariableQ]]], 
          OptionsPattern[]], 
         And[
          Inequality[
           Length[IntegerSequences`Private`numerationsystemlist], Equal, 
           Length[IntegerSequences`Private`symbol], LessEqual, 
           ArrayDepth[IntegerSequences`Private`array]], 
          Not[
           MemberQ[IntegerSequences`Private`array, 
            Blank[List], {
             Length[IntegerSequences`Private`numerationsystemlist]}]]]] :> 
       Module[{IntegerSequences`Private`dimension, 
          IntegerSequences`Private`relations, 
          IntegerSequences`Private`basissequences, 
          IntegerSequences`Private`initialconditions, 
          IntegerSequences`Private`failed, IntegerSequences`Private`head}, 
         IntegerSequences`Private`failed = Catch[If[
              MemberQ[IntegerSequences`Private`array, 
               Blank[DirectedInfinity], {
                Length[IntegerSequences`Private`numerationsystemlist]}], 
              Message[
                MessageName[
                IntegerSequences`FindRegularSequenceRecurrence, "inf"]]; 
              Throw[True]]; 
            IntegerSequences`Private`dimension = 
             Length[IntegerSequences`Private`numerationsystemlist]; {
              IntegerSequences`Private`relations, 
               IntegerSequences`Private`basissequences} = Most[
               IntegerSequences`Private`FindSequenceRelations[
               IntegerSequences`Private`array, 
                IntegerSequences`Private`numerationsystemlist, 
                "RegularSequence", Monitor -> OptionValue[Monitor]]]; 
            If[IntegerSequences`Private`relations === $Failed, 
              Throw[True]]; 
            IntegerSequences`Private`initialconditions = DeleteDuplicates[
               Map[
               IntegerSequences`Private`SymbolicSubsequence[#, 
                  IntegerSequences`Private`numerationsystemlist, 
                  Apply[IntegerSequences`Private`head, 
                   ConstantArray[0, IntegerSequences`Private`dimension]]] == 
                Part[IntegerSequences`Private`array, 
                  Apply[
                  Sequence, 
                   MapThread[
                    IntegerSequences`FromDigitList, {#, 
                    IntegerSequences`Private`numerationsystemlist}] + 1]]& , 
                IntegerSequences`Private`basissequences]]; 
            IntegerSequences`Private`basissequences = 
             Map[IntegerSequences`Private`SymbolicSubsequence[#, 
                IntegerSequences`Private`numerationsystemlist, 
                IntegerSequences`Private`symbol]& , 
               IntegerSequences`Private`basissequences]; 
            IntegerSequences`Private`relations = 
             Map[IntegerSequences`Private`SymbolicSubsequence[
                 First[#], IntegerSequences`Private`numerationsystemlist, 
                 IntegerSequences`Private`symbol] == Dot[
                 Last[#], IntegerSequences`Private`basissequences]& , 
               IntegerSequences`Private`relations]; False]; Condition[
           ReplaceAll[
            Switch[
             OptionValue["Output"], 
             Alternatives["Full", Full], 
             Join[
             IntegerSequences`Private`relations, 
              IntegerSequences`Private`initialconditions], 
             Alternatives["Condensed", 
              Blank[]], 
             KeyValueMap[
              
              Function[{
               IntegerSequences`Private`rightside, 
                IntegerSequences`Private`class}, 
               Apply[Equal, 
                Append[
                IntegerSequences`Private`class, 
                 IntegerSequences`Private`rightside]]], 
              GroupBy[
               Join[
               IntegerSequences`Private`relations, 
                IntegerSequences`Private`initialconditions], Last -> First]]],
             IntegerSequences`Private`head -> IntegerSequences`Private`a], 
           Not[IntegerSequences`Private`failed]]]}], "SubValues" -> None, 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`FindRegularSequenceRecurrence, {
      SyntaxInformation[IntegerSequences`FindRegularSequenceRecurrence] -> {
        "ArgumentsPattern" -> {{
            BlankSequence[]}, 
           Blank[], 
           Blank[], 
           OptionsPattern[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {"Output" -> Automatic, Monitor -> False}, 
    "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`FindRegularSequenceRecurrence"], False]]], "Output",Expr\
essionUUID->"66cad083-046c-407b-b5fc-f77f30e0a48e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox["FindRegularSequenceRecurrence", "Input"], "[", 
  RowBox[{
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"DigitCount", "[", 
      RowBox[{"n", ",", "2", ",", "1"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "0", ",", "31"}], "}"}]}], "]"}], ",", "2", ",", 
   RowBox[{"s", "[", "n", "]"}]}], "]"}]], "Input",ExpressionUUID->"55573042-\
4c14-402e-a256-901ba9360287"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"s", "[", 
     RowBox[{"2", " ", "n"}], "]"}], "\[Equal]", 
    RowBox[{"s", "[", "n", "]"}]}], ",", 
   RowBox[{
    RowBox[{"s", "[", 
     RowBox[{"1", "+", 
      RowBox[{"4", " ", "n"}]}], "]"}], "\[Equal]", 
    RowBox[{"s", "[", 
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "n"}]}], "]"}]}], ",", 
   RowBox[{
    RowBox[{"s", "[", 
     RowBox[{"3", "+", 
      RowBox[{"4", " ", "n"}]}], "]"}], "\[Equal]", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"s", "[", "n", "]"}]}], "+", 
     RowBox[{"2", " ", 
      RowBox[{"s", "[", 
       RowBox[{"1", "+", 
        RowBox[{"2", " ", "n"}]}], "]"}]}]}]}], ",", 
   RowBox[{
    RowBox[{"s", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
   RowBox[{
    RowBox[{"s", "[", "1", "]"}], "\[Equal]", "1"}]}], "}"}]], "Output",Expres\
sionUUID->"4c4f1fa1-5905-4a3d-816c-23003ab1e3f0"]
}, Open  ]],

Cell[TextData[{
 "Find the ",
 Cell[BoxData[
  FormBox["2", TraditionalForm]],ExpressionUUID->
  "c3e95573-aa23-4b7f-9f92-0155fea83e19"],
 "-regular system of recurrences that defines a three-dimensional morphic \
sequence:"
}], "Text",ExpressionUUID->"be583edf-3107-4b2b-a450-c4cbefa1f246"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindRegularSequenceRecurrence", "[", 
   RowBox[{
    RowBox[{"Nest", "[", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"matrix", ",", 
        RowBox[{"ArrayFlatten", "[", 
         RowBox[{
          RowBox[{"matrix", "/.", "\[VeryThinSpace]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"1", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"1", ",", "0"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"1", ",", "1"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], "}"}]}], ",", 
             RowBox[{"0", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"0", ",", "1"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"1", ",", "1"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], "}"}]}]}], 
            "}"}]}], ",", "3"}], "]"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"{", "1", "}"}], "}"}], "}"}], ",", "4"}], "]"}], ",", "2", 
    ",", 
    RowBox[{"s", "[", 
     RowBox[{"n1", ",", "n2", ",", "n3"}], "]"}]}], "]"}], "//", 
  "Column"}]], "Input",ExpressionUUID->"b98917d6-b533-449b-8ced-7d3853b826a3"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"2", " ", "n1"}], ",", 
        RowBox[{"2", " ", "n2"}], ",", 
        RowBox[{"2", " ", "n3"}]}], "]"}], "\[Equal]", 
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n1"}]}], ",", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n2"}]}], ",", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n3"}]}]}], "]"}], "\[Equal]", 
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"4", " ", "n1"}], ",", 
        RowBox[{"4", " ", "n2"}], ",", 
        RowBox[{"3", "+", 
         RowBox[{"4", " ", "n3"}]}]}], "]"}], "\[Equal]", 
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"2", "+", 
         RowBox[{"4", " ", "n1"}]}], ",", 
        RowBox[{"2", "+", 
         RowBox[{"4", " ", "n2"}]}], ",", 
        RowBox[{"1", "+", 
         RowBox[{"4", " ", "n3"}]}]}], "]"}], "\[Equal]", 
      RowBox[{"s", "[", 
       RowBox[{"n1", ",", "n2", ",", "n3"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"2", " ", "n1"}], ",", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n2"}]}], ",", 
        RowBox[{"2", " ", "n3"}]}], "]"}], "\[Equal]", 
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"2", " ", "n1"}], ",", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n2"}]}], ",", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n3"}]}]}], "]"}], "\[Equal]", 
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n1"}]}], ",", 
        RowBox[{"2", " ", "n2"}], ",", 
        RowBox[{"2", " ", "n3"}]}], "]"}], "\[Equal]", 
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n1"}]}], ",", 
        RowBox[{"2", " ", "n2"}], ",", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n3"}]}]}], "]"}], "\[Equal]", 
      RowBox[{
       RowBox[{"s", "[", 
        RowBox[{"n1", ",", "n2", ",", "n3"}], "]"}], "+", 
       RowBox[{"s", "[", 
        RowBox[{
         RowBox[{"2", " ", "n1"}], ",", 
         RowBox[{"2", " ", "n2"}], ",", 
         RowBox[{"1", "+", 
          RowBox[{"2", " ", "n3"}]}]}], "]"}]}]}]},
    {
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n1"}]}], ",", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n2"}]}], ",", 
        RowBox[{"2", " ", "n3"}]}], "]"}], "\[Equal]", 
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"4", " ", "n1"}], ",", 
        RowBox[{"4", " ", "n2"}], ",", 
        RowBox[{"1", "+", 
         RowBox[{"4", " ", "n3"}]}]}], "]"}], "\[Equal]", 
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"2", "+", 
         RowBox[{"4", " ", "n1"}]}], ",", 
        RowBox[{"2", "+", 
         RowBox[{"4", " ", "n2"}]}], ",", 
        RowBox[{"3", "+", 
         RowBox[{"4", " ", "n3"}]}]}], "]"}], "\[Equal]", 
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"2", " ", "n1"}], ",", 
        RowBox[{"2", " ", "n2"}], ",", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n3"}]}]}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"4", " ", "n1"}], ",", 
        RowBox[{"2", "+", 
         RowBox[{"4", " ", "n2"}]}], ",", 
        RowBox[{"1", "+", 
         RowBox[{"4", " ", "n3"}]}]}], "]"}], "\[Equal]", 
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"4", " ", "n1"}], ",", 
        RowBox[{"2", "+", 
         RowBox[{"4", " ", "n2"}]}], ",", 
        RowBox[{"3", "+", 
         RowBox[{"4", " ", "n3"}]}]}], "]"}], "\[Equal]", 
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"2", "+", 
         RowBox[{"4", " ", "n1"}]}], ",", 
        RowBox[{"4", " ", "n2"}], ",", 
        RowBox[{"1", "+", 
         RowBox[{"4", " ", "n3"}]}]}], "]"}], "\[Equal]", 
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"2", "+", 
         RowBox[{"4", " ", "n1"}]}], ",", 
        RowBox[{"4", " ", "n2"}], ",", 
        RowBox[{"3", "+", 
         RowBox[{"4", " ", "n3"}]}]}], "]"}], "\[Equal]", 
      RowBox[{"s", "[", 
       RowBox[{"0", ",", "0", ",", "1"}], "]"}], "\[Equal]", "0"}]},
    {
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{"0", ",", "0", ",", "0"}], "]"}], "\[Equal]", "1"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",ExpressionUUID->"be0dbe91-7d9a-4d60-b56b-a53bd2fcd047"]
}, Open  ]],

Cell[TextData[{
 "Specifying ",
 StyleBox["\"Output\"->Full", "Input"],
 " gives a list where each equation only has two sides:"
}], "Text",ExpressionUUID->"c4e513e1-52ac-4b10-bdc5-3a394684f18f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"FindRegularSequenceRecurrence", "[", 
   RowBox[{
    RowBox[{"Nest", "[", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"matrix", ",", 
        RowBox[{"ArrayFlatten", "[", 
         RowBox[{
          RowBox[{"matrix", "/.", "\[VeryThinSpace]", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"1", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"1", ",", "0"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"1", ",", "1"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], "}"}]}], ",", 
             RowBox[{"0", "\[Rule]", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"0", ",", "1"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{"1", ",", "1"}], "}"}], ",", 
                  RowBox[{"{", 
                   RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], "}"}]}]}], 
            "}"}]}], ",", "3"}], "]"}]}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"{", 
        RowBox[{"{", "1", "}"}], "}"}], "}"}], ",", "4"}], "]"}], ",", "2", 
    ",", 
    RowBox[{"s", "[", 
     RowBox[{"n1", ",", "n2", ",", "n3"}], "]"}], ",", 
    RowBox[{"\"\<Output\>\"", "\[Rule]", "Full"}]}], "]"}], "//", 
  "Column"}]], "Input",ExpressionUUID->"27156d91-6f8e-4222-84ef-426668a25434"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"2", " ", "n1"}], ",", 
        RowBox[{"2", " ", "n2"}], ",", 
        RowBox[{"2", " ", "n3"}]}], "]"}], "\[Equal]", 
      RowBox[{"s", "[", 
       RowBox[{"n1", ",", "n2", ",", "n3"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"2", " ", "n1"}], ",", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n2"}]}], ",", 
        RowBox[{"2", " ", "n3"}]}], "]"}], "\[Equal]", 
      RowBox[{
       RowBox[{"s", "[", 
        RowBox[{"n1", ",", "n2", ",", "n3"}], "]"}], "+", 
       RowBox[{"s", "[", 
        RowBox[{
         RowBox[{"2", " ", "n1"}], ",", 
         RowBox[{"2", " ", "n2"}], ",", 
         RowBox[{"1", "+", 
          RowBox[{"2", " ", "n3"}]}]}], "]"}]}]}]},
    {
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"2", " ", "n1"}], ",", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n2"}]}], ",", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n3"}]}]}], "]"}], "\[Equal]", 
      RowBox[{
       RowBox[{"s", "[", 
        RowBox[{"n1", ",", "n2", ",", "n3"}], "]"}], "+", 
       RowBox[{"s", "[", 
        RowBox[{
         RowBox[{"2", " ", "n1"}], ",", 
         RowBox[{"2", " ", "n2"}], ",", 
         RowBox[{"1", "+", 
          RowBox[{"2", " ", "n3"}]}]}], "]"}]}]}]},
    {
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n1"}]}], ",", 
        RowBox[{"2", " ", "n2"}], ",", 
        RowBox[{"2", " ", "n3"}]}], "]"}], "\[Equal]", 
      RowBox[{
       RowBox[{"s", "[", 
        RowBox[{"n1", ",", "n2", ",", "n3"}], "]"}], "+", 
       RowBox[{"s", "[", 
        RowBox[{
         RowBox[{"2", " ", "n1"}], ",", 
         RowBox[{"2", " ", "n2"}], ",", 
         RowBox[{"1", "+", 
          RowBox[{"2", " ", "n3"}]}]}], "]"}]}]}]},
    {
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n1"}]}], ",", 
        RowBox[{"2", " ", "n2"}], ",", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n3"}]}]}], "]"}], "\[Equal]", 
      RowBox[{
       RowBox[{"s", "[", 
        RowBox[{"n1", ",", "n2", ",", "n3"}], "]"}], "+", 
       RowBox[{"s", "[", 
        RowBox[{
         RowBox[{"2", " ", "n1"}], ",", 
         RowBox[{"2", " ", "n2"}], ",", 
         RowBox[{"1", "+", 
          RowBox[{"2", " ", "n3"}]}]}], "]"}]}]}]},
    {
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n1"}]}], ",", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n2"}]}], ",", 
        RowBox[{"2", " ", "n3"}]}], "]"}], "\[Equal]", 
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"2", " ", "n1"}], ",", 
        RowBox[{"2", " ", "n2"}], ",", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n3"}]}]}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n1"}]}], ",", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n2"}]}], ",", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n3"}]}]}], "]"}], "\[Equal]", 
      RowBox[{"s", "[", 
       RowBox[{"n1", ",", "n2", ",", "n3"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"4", " ", "n1"}], ",", 
        RowBox[{"4", " ", "n2"}], ",", 
        RowBox[{"1", "+", 
         RowBox[{"4", " ", "n3"}]}]}], "]"}], "\[Equal]", 
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"2", " ", "n1"}], ",", 
        RowBox[{"2", " ", "n2"}], ",", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n3"}]}]}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"4", " ", "n1"}], ",", 
        RowBox[{"4", " ", "n2"}], ",", 
        RowBox[{"3", "+", 
         RowBox[{"4", " ", "n3"}]}]}], "]"}], "\[Equal]", 
      RowBox[{"s", "[", 
       RowBox[{"n1", ",", "n2", ",", "n3"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"4", " ", "n1"}], ",", 
        RowBox[{"2", "+", 
         RowBox[{"4", " ", "n2"}]}], ",", 
        RowBox[{"1", "+", 
         RowBox[{"4", " ", "n3"}]}]}], "]"}], "\[Equal]", "0"}]},
    {
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"4", " ", "n1"}], ",", 
        RowBox[{"2", "+", 
         RowBox[{"4", " ", "n2"}]}], ",", 
        RowBox[{"3", "+", 
         RowBox[{"4", " ", "n3"}]}]}], "]"}], "\[Equal]", "0"}]},
    {
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"2", "+", 
         RowBox[{"4", " ", "n1"}]}], ",", 
        RowBox[{"4", " ", "n2"}], ",", 
        RowBox[{"1", "+", 
         RowBox[{"4", " ", "n3"}]}]}], "]"}], "\[Equal]", "0"}]},
    {
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"2", "+", 
         RowBox[{"4", " ", "n1"}]}], ",", 
        RowBox[{"4", " ", "n2"}], ",", 
        RowBox[{"3", "+", 
         RowBox[{"4", " ", "n3"}]}]}], "]"}], "\[Equal]", "0"}]},
    {
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"2", "+", 
         RowBox[{"4", " ", "n1"}]}], ",", 
        RowBox[{"2", "+", 
         RowBox[{"4", " ", "n2"}]}], ",", 
        RowBox[{"1", "+", 
         RowBox[{"4", " ", "n3"}]}]}], "]"}], "\[Equal]", 
      RowBox[{"s", "[", 
       RowBox[{"n1", ",", "n2", ",", "n3"}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"2", "+", 
         RowBox[{"4", " ", "n1"}]}], ",", 
        RowBox[{"2", "+", 
         RowBox[{"4", " ", "n2"}]}], ",", 
        RowBox[{"3", "+", 
         RowBox[{"4", " ", "n3"}]}]}], "]"}], "\[Equal]", 
      RowBox[{"s", "[", 
       RowBox[{
        RowBox[{"2", " ", "n1"}], ",", 
        RowBox[{"2", " ", "n2"}], ",", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n3"}]}]}], "]"}]}]},
    {
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{"0", ",", "0", ",", "0"}], "]"}], "\[Equal]", "1"}]},
    {
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{"0", ",", "0", ",", "1"}], "]"}], "\[Equal]", "0"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",ExpressionUUID->"ebe14671-731d-4b57-a2d8-8f8d6842dd04"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["FromCoefficientList", "Input"]], "Subsubsection",ExpressionUUID->"4f78f2aa-709c-4648-b0a6-1252954480f5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "FromCoefficientList"}]], "Input",ExpressionUUID->"848565a8-2a6b-46cb-aabd-8b109e424b98"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"FromCoefficientList\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"list\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"var\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) constructs a polynomial \
in \\!\\(\\*StyleBox[\\\"var\\\", \\\"TI\\\"]\\) from its coefficient \
list.\\n\\!\\(\\*RowBox[List[\\\"FromCoefficientList\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"array\\\", \\\"TI\\\"], \\\",\\\", RowBox[List[\\\"{\
\\\", RowBox[List[SubscriptBox[StyleBox[\\\"var\\\", \\\"TI\\\"], StyleBox[\\\
\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"var\\\", \\\"TI\\\
\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\
\\\", \\\"TR\\\"]]], \\\"}\\\"]]]], \\\"]\\\"]]\\) constructs a multivariate \
polynomial from its coefficient array.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"FromCoefficientList", "[", 
                    RowBox[{
                    "IntegerSequences`Private`coefficientlist_List", ",", 
                    "IntegerSequences`Private`variables_List"}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{
                    "ArrayDepth", "[", 
                    "IntegerSequences`Private`coefficientlist", "]"}], 
                    "\[GreaterEqual]", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`variables", 
                    "]"}], "\[GreaterEqual]", "1"}]}], ":=", 
                    RowBox[{"Total", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`coefficientlist", " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Outer", "[", 
                    RowBox[{"Times", ",", "##1"}], "]"}], "&"}], ")"}], "@@", 
                    RowBox[{"IntegerSequences`Private`DiscretePower", "[", 
                    RowBox[{"IntegerSequences`Private`variables", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"#1", "-", "1"}]}], "]"}], "&"}], ")"}], "/@", 
                    RowBox[{"Dimensions", "[", 
                    RowBox[{"IntegerSequences`Private`coefficientlist", ",", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`variables", 
                    "]"}]}], "]"}]}]}], "]"}]}]}], ",", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`variables", 
                    "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"FromCoefficientList", "[", 
                    RowBox[{
                    "IntegerSequences`Private`coefficientlist_List", ",", 
                    RowBox[{"IntegerSequences`Private`var", ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"FromCoefficientList", "[", 
                    RowBox[{"IntegerSequences`Private`coefficientlist", ",", 
                    RowBox[{"{", "IntegerSequences`Private`var", "}"}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"FromCoefficientList", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", "_List"}], "]"}], ":=", "0"}]},
                    {
                    RowBox[{
                    RowBox[{"FromCoefficientList", "[", 
                    RowBox[{"IntegerSequences`Private`expression_", ",", 
                    RowBox[{"{", "}"}]}], "]"}], ":=", 
                    "IntegerSequences`Private`expression"}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "FromCoefficientList", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_"}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`FromCoefficientList] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`FromCoefficientList\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"FromCoefficientList\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"list\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"var\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) constructs a polynomial \
in \\!\\(\\*StyleBox[\\\"var\\\", \\\"TI\\\"]\\) from its coefficient \
list.\\n\\!\\(\\*RowBox[List[\\\"FromCoefficientList\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"array\\\", \\\"TI\\\"], \\\",\\\", RowBox[List[\\\"{\
\\\", RowBox[List[SubscriptBox[StyleBox[\\\"var\\\", \\\"TI\\\"], StyleBox[\\\
\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"var\\\", \\\"TI\\\
\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\
\\\", \\\"TR\\\"]]], \\\"}\\\"]]]], \\\"]\\\"]]\\) constructs a multivariate \
polynomial from its coefficient array.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"FromCoefficientList\", \"[\", \
RowBox[List[StyleBox[\"list\", \"TI\"], \",\", StyleBox[\"var\", \"TI\"]]], \
\"]\"]]\) constructs a polynomial in \!\(\*StyleBox[\"var\", \"TI\"]\) from \
its coefficient list.\n\!\(\*RowBox[List[\"FromCoefficientList\", \"[\", \
RowBox[List[StyleBox[\"array\", \"TI\"], \",\", RowBox[List[\"{\", \
RowBox[List[SubscriptBox[StyleBox[\"var\", \"TI\"], StyleBox[\"1\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"var\", \"TI\"], StyleBox[\"2\", \"TR\"]], \
\",\", StyleBox[\"\\[Ellipsis]\", \"TR\"]]], \"}\"]]]], \"]\"]]\) constructs \
a multivariate polynomial from its coefficient array.", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`FromCoefficientList, {Condition[
         IntegerSequences`FromCoefficientList[
          Pattern[IntegerSequences`Private`coefficientlist, 
           Blank[List]], 
          Pattern[IntegerSequences`Private`variables, 
           Blank[List]]], 
         ArrayDepth[IntegerSequences`Private`coefficientlist] >= 
         Length[IntegerSequences`Private`variables] >= 1] :> 
       Total[IntegerSequences`Private`coefficientlist Apply[Outer[Times, 
            SlotSequence[1]]& , 
           IntegerSequences`Private`DiscretePower[
           IntegerSequences`Private`variables, 
            Map[Range[0, # - 1]& , 
             Dimensions[IntegerSequences`Private`coefficientlist, 
              Length[IntegerSequences`Private`variables]]]]], 
         Length[IntegerSequences`Private`variables]], 
       IntegerSequences`FromCoefficientList[
         Pattern[IntegerSequences`Private`coefficientlist, 
          Blank[List]], 
         Pattern[IntegerSequences`Private`var, 
          Except[
           Blank[List]]]] :> 
       IntegerSequences`FromCoefficientList[
        IntegerSequences`Private`coefficientlist, {
         IntegerSequences`Private`var}], 
       IntegerSequences`FromCoefficientList[{}, 
         Blank[List]] :> 0, IntegerSequences`FromCoefficientList[
         Pattern[IntegerSequences`Private`expression, 
          Blank[]], {}] :> IntegerSequences`Private`expression}], "SubValues" -> 
    None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`FromCoefficientList, {
      SyntaxInformation[IntegerSequences`FromCoefficientList] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`FromCoefficientList"], False]]], "Output",ExpressionUUID\
->"e0090933-b0e1-4cae-8ad7-2b0dc07e833c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromCoefficientList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", 
     RowBox[{"-", "10"}], ",", "0", ",", "1"}], "}"}], ",", "x"}], 
  "]"}]], "Input",ExpressionUUID->"9e973ac4-de80-4bd2-adf0-a5bfa71f2646"],

Cell[BoxData[
 RowBox[{"1", "-", 
  RowBox[{"10", " ", 
   SuperscriptBox["x", "2"]}], "+", 
  SuperscriptBox["x", "4"]}]], "Output",ExpressionUUID->"7f8d04a1-a28a-455f-\
bd17-965fc99445a9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromCoefficientList", "[", 
  RowBox[{
   RowBox[{"IdentityMatrix", "[", "3", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]], "Input",ExpressionUUID->\
"5d59486d-5ce8-4c38-9ea6-8c22d55bc0c8"],

Cell[BoxData[
 RowBox[{"1", "+", 
  RowBox[{"x", " ", "y"}], "+", 
  RowBox[{
   SuperscriptBox["x", "2"], " ", 
   SuperscriptBox["y", "2"]}]}]], "Output",ExpressionUUID->"5cae8430-b334-\
485a-adbc-08bf38bc4659"]
}, Open  ]],

Cell[TextData[{
 StyleBox["FromCoefficientList", "Input"],
 " provides an inverse to ",
 StyleBox["CoefficientList", "Input"],
 ":"
}], "Text",ExpressionUUID->"26ad768d-b3ce-474b-92fa-9fdfd3eb6a4b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromCoefficientList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", "x"}], 
  "]"}]], "Input",ExpressionUUID->"2246c6e6-c1e9-4d22-bcf5-4ce565c08785"],

Cell[BoxData[
 RowBox[{"a", "+", 
  RowBox[{"b", " ", "x"}], "+", 
  RowBox[{"c", " ", 
   SuperscriptBox["x", "2"]}], "+", 
  RowBox[{"d", " ", 
   SuperscriptBox["x", "3"]}]}]], "Output",ExpressionUUID->"d0ed4af0-d839-\
4f2b-9f41-3357d1661a6a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CoefficientList", "[", 
  RowBox[{
   RowBox[{"a", "+", 
    RowBox[{"b", " ", "x"}], "+", 
    RowBox[{"c", " ", 
     SuperscriptBox["x", "2"]}], "+", 
    RowBox[{"d", " ", 
     SuperscriptBox["x", "3"]}]}], ",", "x"}], "]"}]], "Input",ExpressionUUID->\
"602c2f32-36fd-47b2-a55a-9166d35a5b6d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}]], "Output",ExpressionUUID\
->"1b2573ce-9936-46a4-8279-98e325fa6c6d"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["FromDigitList", "Input"],
 StyleBox[" (a variant and generalization of ", "Text",
  FontWeight->"Plain"],
 StyleBox["FromDigits", "Input"],
 StyleBox[")", "Text",
  FontWeight->"Plain"]
}], "Subsubsection",ExpressionUUID->"e2d28d33-d2a9-4ad0-baef-f84ae3143d48"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "FromDigitList"}]], "Input",ExpressionUUID->"0b1b15fe-3dac-4de5-be1e-f93ae3154809"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"FromDigitList\\\", \\\"[\\\
\", RowBox[List[StyleBox[\\\"list\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"b\
\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) constructs an integer from the list of \
its base\[Hyphen]\\!\\(\\*StyleBox[\\\"b\\\", \\\"TI\\\"]\\) digits, where \
successive digits increase in \
significance.\\n\\!\\(\\*RowBox[List[\\\"FromDigitList\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"list\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[SubscriptBox[StyleBox[\\\"b\\\", \
\\\"TI\\\"], StyleBox[\\\"0\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"b\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"b\\\", \\\"TI\\\"], StyleBox[\\\"m\\\", \
\\\"TI\\\"]]]], \\\"}\\\"]]]], \\\"]\\\"]]\\) uses the mixed radix with bases \
\\!\\(\\*RowBox[List[SubscriptBox[StyleBox[\\\"b\\\", \\\"TI\\\"], \
StyleBox[\\\"0\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"b\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", \
SubscriptBox[StyleBox[\\\"b\\\", \\\"TI\\\"], StyleBox[\\\"m\\\", \
\\\"TI\\\"]]]]\\).\\n\\!\\(\\*RowBox[List[\\\"FromDigitList\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"list\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"B\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) constructs an integer from \
its representation in the numeration system \\!\\(\\*StyleBox[\\\"B\\\", \
\\\"TI\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"FromDigitList", "[", 
                    RowBox[{"IntegerSequences`Private`digits_List", ",", 
                    RowBox[{
                    "IntegerSequences`Private`base_Integer", ":", "10"}]}], 
                    "]"}], "/;", 
                    RowBox[{
                    RowBox[{
                    "Abs", "[", "IntegerSequences`Private`base", "]"}], 
                    "\[GreaterEqual]", "2"}]}], ":=", 
                    RowBox[{"IntegerSequences`Private`digits", ".", 
                    SuperscriptBox["IntegerSequences`Private`base", 
                    RowBox[{"Range", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`digits", "]"}], 
                    "-", "1"}]}], "]"}]]}]}]},
                    {
                    RowBox[{
                    RowBox[{"FromDigitList", "[", 
                    RowBox[{"IntegerSequences`Private`digits_List", ",", 
                    RowBox[{"IntegerSequences`Private`numerationsystem", ":", 
                    
                    RowBox[{"\<\"Fibonacci\"\>", 
                    "|", "\<\"Tribonacci\"\>"}]}]}], "]"}], ":=", 
                    RowBox[{"IntegerSequences`Private`digits", ".", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`NumerationSystemBasisFunction", 
                    "[", "IntegerSequences`Private`numerationsystem", "]"}], "/@", 
                    RowBox[{"Range", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`digits", "]"}], 
                    "-", "1"}]}], "]"}]}]}]}]},
                    {
                    RowBox[{
                    RowBox[{"FromDigitList", "[", 
                    RowBox[{"IntegerSequences`Private`digits_List", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "IntegerSequences`Private`LinearNumerationSystem", "[", 
                    RowBox[{
                    "IntegerSequences`Private`kernel_", ",", 
                    "IntegerSequences`Private`initialterms_"}], "]"}], ")"}], 
                    "?", "IntegerSequences`Private`LinearNumerationSystemQ"}]}\
], "]"}], ":=", 
                    RowBox[{"IntegerSequences`Private`digits", ".", 
                    RowBox[{"LinearRecurrence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`kernel", ",", 
                    "IntegerSequences`Private`initialterms", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`digits", "]"}]}],
                     "}"}]}], "]"}]}]}]},
                    {
                    RowBox[{
                    RowBox[{"FromDigitList", "[", 
                    RowBox[{
                    "IntegerSequences`Private`digits_List", 
                    ",", "\<\"Factorial\"\>"}], "]"}], ":=", 
                    RowBox[{"IntegerSequences`Private`digits", ".", 
                    RowBox[{
                    RowBox[{"Range", "[", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`digits", "]"}], 
                    "]"}], "!"}]}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"FromDigitList", "[", 
                    RowBox[{
                    "IntegerSequences`Private`digits_List", ",", 
                    "IntegerSequences`Private`bases_List"}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`bases", "]"}], 
                    "+", "1"}], "\[GreaterEqual]", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`digits", 
                    "]"}]}]}], ":=", 
                    RowBox[{
                    RowBox[{"PadRight", "[", 
                    RowBox[{"IntegerSequences`Private`digits", ",", 
                    RowBox[{
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`bases", "]"}], 
                    "+", "1"}]}], "]"}], ".", 
                    RowBox[{"FoldList", "[", 
                    RowBox[{
                    "Times", ",", "1", ",", 
                    "IntegerSequences`Private`bases"}], "]"}]}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "FromDigitList", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_."}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`FromDigitList] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Optional[
                    Blank[]]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`FromDigitList\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"FromDigitList\\\", \\\"[\\\
\", RowBox[List[StyleBox[\\\"list\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"b\
\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) constructs an integer from the list of \
its base\[Hyphen]\\!\\(\\*StyleBox[\\\"b\\\", \\\"TI\\\"]\\) digits, where \
successive digits increase in \
significance.\\n\\!\\(\\*RowBox[List[\\\"FromDigitList\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"list\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[SubscriptBox[StyleBox[\\\"b\\\", \
\\\"TI\\\"], StyleBox[\\\"0\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"b\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"b\\\", \\\"TI\\\"], StyleBox[\\\"m\\\", \
\\\"TI\\\"]]]], \\\"}\\\"]]]], \\\"]\\\"]]\\) uses the mixed radix with bases \
\\!\\(\\*RowBox[List[SubscriptBox[StyleBox[\\\"b\\\", \\\"TI\\\"], \
StyleBox[\\\"0\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"b\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", \
SubscriptBox[StyleBox[\\\"b\\\", \\\"TI\\\"], StyleBox[\\\"m\\\", \
\\\"TI\\\"]]]]\\).\\n\\!\\(\\*RowBox[List[\\\"FromDigitList\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"list\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"B\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) constructs an integer from \
its representation in the numeration system \\!\\(\\*StyleBox[\\\"B\\\", \
\\\"TI\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"FromDigitList\", \"[\", \
RowBox[List[StyleBox[\"list\", \"TI\"], \",\", StyleBox[\"b\", \"TI\"]]], \"]\
\"]]\) constructs an integer from the list of its \
base\[Hyphen]\!\(\*StyleBox[\"b\", \"TI\"]\) digits, where successive digits \
increase in significance.\n\!\(\*RowBox[List[\"FromDigitList\", \"[\", \
RowBox[List[StyleBox[\"list\", \"TI\"], \",\", RowBox[List[\"{\", \
RowBox[List[SubscriptBox[StyleBox[\"b\", \"TI\"], StyleBox[\"0\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"b\", \"TI\"], StyleBox[\"1\", \"TR\"]], \",\", \
StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", SubscriptBox[StyleBox[\"b\", \
\"TI\"], StyleBox[\"m\", \"TI\"]]]], \"}\"]]]], \"]\"]]\) uses the mixed \
radix with bases \!\(\*RowBox[List[SubscriptBox[StyleBox[\"b\", \"TI\"], \
StyleBox[\"0\", \"TR\"]], \",\", SubscriptBox[StyleBox[\"b\", \"TI\"], \
StyleBox[\"1\", \"TR\"]], \",\", StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", \
SubscriptBox[StyleBox[\"b\", \"TI\"], StyleBox[\"m\", \"TI\"]]]]\).\n\
\!\(\*RowBox[List[\"FromDigitList\", \"[\", RowBox[List[StyleBox[\"list\", \
\"TI\"], \",\", StyleBox[\"B\", \"TI\"]]], \"]\"]]\) constructs an integer \
from its representation in the numeration system \!\(\*StyleBox[\"B\", \
\"TI\"]\).", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None,
     "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`FromDigitList, {Condition[
         IntegerSequences`FromDigitList[
          Pattern[IntegerSequences`Private`digits, 
           Blank[List]], 
          Optional[
           Pattern[IntegerSequences`Private`base, 
            Blank[Integer]], 10]], Abs[IntegerSequences`Private`base] >= 2] :> 
       Dot[IntegerSequences`Private`digits, IntegerSequences`Private`base^
         Range[0, Length[IntegerSequences`Private`digits] - 1]], 
       IntegerSequences`FromDigitList[
         Pattern[IntegerSequences`Private`digits, 
          Blank[List]], 
         Pattern[IntegerSequences`Private`numerationsystem, 
          Alternatives["Fibonacci", "Tribonacci"]]] :> 
       Dot[IntegerSequences`Private`digits, 
         Map[
          IntegerSequences`Private`NumerationSystemBasisFunction[
          IntegerSequences`Private`numerationsystem], 
          Range[0, Length[IntegerSequences`Private`digits] - 1]]], 
       IntegerSequences`FromDigitList[
         Pattern[IntegerSequences`Private`digits, 
          Blank[List]], 
         PatternTest[
          IntegerSequences`Private`LinearNumerationSystem[
           Pattern[IntegerSequences`Private`kernel, 
            Blank[]], 
           Pattern[IntegerSequences`Private`initialterms, 
            Blank[]]], IntegerSequences`Private`LinearNumerationSystemQ]] :> 
       Dot[IntegerSequences`Private`digits, 
         LinearRecurrence[
         IntegerSequences`Private`kernel, 
          IntegerSequences`Private`initialterms, {1, 
           Length[IntegerSequences`Private`digits]}]], 
       IntegerSequences`FromDigitList[
         Pattern[IntegerSequences`Private`digits, 
          Blank[List]], "Factorial"] :> Dot[IntegerSequences`Private`digits, 
         Factorial[
          Range[
           Length[IntegerSequences`Private`digits]]]], Condition[
         IntegerSequences`FromDigitList[
          Pattern[IntegerSequences`Private`digits, 
           Blank[List]], 
          Pattern[IntegerSequences`Private`bases, 
           Blank[List]]], Length[IntegerSequences`Private`bases] + 1 >= 
         Length[IntegerSequences`Private`digits]] :> Dot[
         PadRight[
         IntegerSequences`Private`digits, 
          Length[IntegerSequences`Private`bases] + 1], 
         FoldList[Times, 1, IntegerSequences`Private`bases]]}], "SubValues" -> 
    None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`FromDigitList, {
      SyntaxInformation[IntegerSequences`FromDigitList] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           Optional[
            Blank[]]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`FromDigitList"], False]]], "Output",ExpressionUUID->\
"fa8c9dd7-73f8-44a9-9b7b-60adff5d94ca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DigitList", "[", 
  RowBox[{"2179", ",", 
   RowBox[{"-", "3"}]}], "]"}]], "Input",ExpressionUUID->"ffd52cfb-4d9c-4421-\
82d8-da7e0ff8ee09"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "0", ",", "2", ",", "1", ",", "0", ",", "0", ",", "0", ",", "2", 
   ",", "1"}], "}"}]], "Output",ExpressionUUID->"1744c08c-f546-4580-bd90-\
4e9aaeeb7556"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromDigitList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "0", ",", "2", ",", "1", ",", "0", ",", "0", ",", "0", ",", "2",
      ",", "1"}], "}"}], ",", 
   RowBox[{"-", "3"}]}], "]"}]], "Input",ExpressionUUID->"170c49e2-087b-4625-\
9473-b3158ad3cfab"],

Cell[BoxData["2179"], "Output",ExpressionUUID->"83d593da-194e-4d59-a3d4-4a6fd737acc8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DigitList", "[", 
  RowBox[{"2179", ",", "\"\<Factorial\>\""}], "]"}]], "Input",ExpressionUUID->\
"6067c02a-8fef-4043-a640-d2b2dd84f24b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "0", ",", "3", ",", "0", ",", "0", ",", "3"}], 
  "}"}]], "Output",ExpressionUUID->"b47aacd2-dad8-4f7c-a0e4-ebe9054ca8d6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromDigitList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "3", ",", "0", ",", "0", ",", "3"}], "}"}], 
   ",", "\"\<Factorial\>\""}], "]"}]], "Input",ExpressionUUID->"3c14f70f-d042-\
4258-8614-6dd99f2ffbae"],

Cell[BoxData["2179"], "Output",ExpressionUUID->"42c1df9f-8089-41b7-8f37-aca3e8e54e1e"]
}, Open  ]],

Cell["\<\
Compute the number of seconds in 2 weeks, 1 day, 15 hours, 45 minutes, and 3 \
seconds:\
\>", "Text",ExpressionUUID->"9fb298e1-2fc2-4063-a209-d8841a38e9c6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromDigitList", "[", 
  RowBox[{
   RowBox[{"Reverse", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "1", ",", "15", ",", "45", ",", "3"}], "}"}], "]"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"60", ",", "60", ",", "24", ",", "7"}], "}"}]}], "]"}]], "Input",E\
xpressionUUID->"dd98c905-7ad1-4593-9dbb-567a016d66f0"],

Cell[BoxData["1352703"], "Output",ExpressionUUID->"19400f00-ffa6-4085-9e1e-bce6d3817ab8"]
}, Open  ]],

Cell[TextData[{
 StyleBox["FromDigits", "Input"],
 " evaluates by dropping information when a mixed radix has too few bases:"
}], "Text",ExpressionUUID->"5c68ff47-df72-4fde-a66a-648fa03c87ad"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"FromDigits", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"8", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"MixedRadix", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}], "]"}]}], "]"}], "\n", 
 RowBox[{"IntegerDigits", "[", 
  RowBox[{"%", ",", 
   RowBox[{"MixedRadix", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}], "]"}]}], "]"}]}], "Input",ExpressionUUID->\
"e3a2e2f0-37a9-41ba-9ed4-5c1f7740c5f3"],

Cell[BoxData["6"], "Output",ExpressionUUID->"8de38bfd-b0ba-4ce1-81d6-63cf53b50c6f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "0", ",", "0"}], "}"}]], "Output",ExpressionUUID->\
"6e9f0ce4-035e-406c-91d4-781ac308ca1f"]
}, Open  ]],

Cell[TextData[{
 StyleBox["FromDigitList", "Input"],
 " does not drop information; it returns unevaluated instead:"
}], "Text",ExpressionUUID->"b4a6d65a-c960-46f8-91d4-7245f60c9124"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromDigitList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2"}], "}"}]}], "]"}]], "Input",ExpressionUUID->\
"98354fb2-0c2b-45a0-9cd6-d5c99d971505"],

Cell[BoxData[
 RowBox[{"FromDigitList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2"}], "}"}]}], "]"}]], "Output",ExpressionUUID->\
"4f97472a-4623-495c-8305-6c64b1f5a4ee"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["FromRecurrence", "Input"]], "Subsubsection",ExpressionUUID->"38453cc0-0181-47d9-b889-0029a7167e7c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "FromRecurrence"}]], "Input",ExpressionUUID->"9dd99250-aeba-48d9-b231-772ff5337bc6"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"FromRecurrence\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"eqns\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[List[StyleBox[\\\"s\\\", \\\"TI\\\"], \\\"[\\\", StyleBox[\\\"n\\\", \
\\\"TI\\\"], \\\"]\\\"]]]], \\\"]\\\"]]\\) makes \\!\\(\\*StyleBox[\\\"s\\\", \
\\\"TI\\\"]\\) into a function satisfying the recurrence equations \
\\!\\(\\*StyleBox[\\\"eqns\\\", \\\"TI\\\"]\\) of fixed order.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"FromRecurrence", "[", 
                    RowBox[{"IntegerSequences`Private`equation_Equal", ",", 
                    RowBox[{
                    "IntegerSequences`Private`s_", "[", 
                    "IntegerSequences`Private`m_", "]"}]}], "]"}], ":=", 
                    RowBox[{"FromRecurrence", "[", 
                    RowBox[{
                    RowBox[{"{", "IntegerSequences`Private`equation", "}"}], 
                    ",", 
                    RowBox[{
                    "IntegerSequences`Private`s", "[", 
                    "IntegerSequences`Private`m", "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"FromRecurrence", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`equations", ":", 
                    RowBox[{
                    RowBox[{"HoldPattern", "[", "And", "]"}], "[", "__Equal", 
                    "]"}]}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`s_", "[", 
                    "IntegerSequences`Private`m_", "]"}]}], "]"}], ":=", 
                    RowBox[{"FromRecurrence", "[", 
                    RowBox[{
                    RowBox[{
                    "List", "@@", "IntegerSequences`Private`equations"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`s", "[", 
                    "IntegerSequences`Private`m", "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"FromRecurrence", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`equationlist", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_Equal", "|", "True"}], ")"}], ".."}], "}"}]}], 
                    ",", 
                    RowBox[{
                    "IntegerSequences`Private`s_Symbol", "[", 
                    "IntegerSequences`Private`m_Symbol", "]"}]}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`PlausibleVariableQ", "[", 
                    "IntegerSequences`Private`m", "]"}], "&&", 
                    RowBox[{"!", 
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    RowBox[{
                    "Attributes", "[", "IntegerSequences`Private`s", "]"}], 
                    ",", "Protected"}], "]"}]}]}]}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`equations", ",", 
                    "IntegerSequences`Private`initialconditions", ",", 
                    "IntegerSequences`Private`recurrence", ",", 
                    "IntegerSequences`Private`initialconditionarguments", ",",
                     "IntegerSequences`Private`recurrencearguments", ",", 
                    "IntegerSequences`Private`solution", ",", 
                    "IntegerSequences`Private`n", ",", 
                    "IntegerSequences`Private`block", ",", 
                    "IntegerSequences`Private`failed"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`failed", "=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`equations", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    "IntegerSequences`Private`equationlist", ",", "True"}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`equal_", "/;", 
                    RowBox[{
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`equal", "]"}], 
                    "\[GreaterEqual]", "3"}]}], "\[RuleDelayed]", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`constants", "=", 
                    RowBox[{"Select", "[", 
                    RowBox[{
                    RowBox[{"List", "@@", "IntegerSequences`Private`equal"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#1", ",", "IntegerSequences`Private`s"}], "]"}], 
                    "&"}]}], "]"}]}], "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`constants", 
                    "]"}], "\[Equal]", "1"}], ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#1", "\[Equal]", 
                    RowBox[{
                    "First", "[", "IntegerSequences`Private`constants", 
                    "]"}]}], "&"}], ")"}], "/@", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{
                    RowBox[{"List", "@@", "IntegerSequences`Private`equal"}], 
                    ",", 
                    RowBox[{
                    "First", "[", "IntegerSequences`Private`constants", 
                    "]"}]}], "]"}]}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"FromRecurrence", "::", "init"}], "MessageName"], 
                    "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}]}], "]"}]}],
                     ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`initialconditions", "=", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"IntegerSequences`Private`equations", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`s", "[", "_Integer", "]"}], 
                    "\[Equal]", "IntegerSequences`Private`constant_"}], "|", 
                    RowBox[{"IntegerSequences`Private`constant_", "\[Equal]", 
                    RowBox[{
                    "IntegerSequences`Private`s", "[", "_Integer", "]"}]}]}], 
                    "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`constant", ",", 
                    "IntegerSequences`Private`m"}], "]"}]}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`initialconditions", "===", 
                    RowBox[{"{", "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"FromRecurrence", "::", "init"}], "MessageName"], 
                    "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ";", 
                    RowBox[{"IntegerSequences`Private`initialconditions", "=", 
                    RowBox[{"Union", "[", 
                    RowBox[{"Replace", "[", 
                    RowBox[{"IntegerSequences`Private`initialconditions", ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`constant", ":", 
                    RowBox[{
                    RowBox[{
                    "Except", "[", "_IntegerSequences`Private`s", "]"}], 
                    "\[Equal]", 
                    "IntegerSequences`Private`term_IntegerSequences`Private`\
s"}]}], "\[RuleDelayed]", 
                    RowBox[{
                    "IntegerSequences`Private`term", "\[Equal]", 
                    "IntegerSequences`Private`constant"}]}], ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`recurrence", "=", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{"IntegerSequences`Private`equations", ",", 
                    RowBox[{
                    "Alternatives", "@@", 
                    "IntegerSequences`Private`initialconditions"}]}], "]"}]}],
                     ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`recurrence", 
                    "]"}], "\[NotEqual]", "1"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"FromRecurrence", "::", "soln"}], "MessageName"], 
                    "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ";", 
                    RowBox[{"IntegerSequences`Private`recurrence", "=", 
                    RowBox[{
                    "First", "[", "IntegerSequences`Private`recurrence", 
                    "]"}]}], ";", 
                    RowBox[{
                    "IntegerSequences`Private`initialconditionarguments", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#1", "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "1"}], "\[RightDoubleBracket]"}], "&"}],
                     ")"}], "/@", 
                    "IntegerSequences`Private`initialconditions"}]}], ";", 
                    RowBox[{
                    "IntegerSequences`Private`recurrencearguments", "=", 
                    RowBox[{"Union", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"IntegerSequences`Private`recurrence", ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`s", "[", 
                    RowBox[{"IntegerSequences`Private`argument_", "/;", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"IntegerSequences`Private`argument", ",", 
                    "_IntegerSequences`Private`s"}], "]"}], "&&", 
                    RowBox[{"!", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`argument", ",", 
                    "IntegerSequences`Private`m"}], "]"}]}]}]}], "]"}], 
                    "\[RuleDelayed]", "IntegerSequences`Private`argument"}], 
                    ",", "\[Infinity]"}], "]"}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`solution", "=", 
                    RowBox[{"Solve", "[", 
                    RowBox[{"IntegerSequences`Private`recurrence", ",", 
                    RowBox[{"IntegerSequences`Private`s", "[", 
                    RowBox[{
                    "Last", "[", 
                    "IntegerSequences`Private`recurrencearguments", "]"}], 
                    "]"}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`solution", "]"}],
                     "\[NotEqual]", "1"}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"FromRecurrence", "::", "soln"}], "MessageName"], 
                    "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ";", 
                    RowBox[{"IntegerSequences`Private`solution", "=", 
                    RowBox[{
                    "First", "[", "IntegerSequences`Private`solution", 
                    "]"}]}], ";", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`order", "=", 
                    RowBox[{
                    RowBox[{
                    "Last", "[", 
                    "IntegerSequences`Private`recurrencearguments", "]"}], 
                    "-", 
                    RowBox[{
                    "First", "[", 
                    "IntegerSequences`Private`recurrencearguments", "]"}]}]}],
                     ",", 
                    RowBox[{"IntegerSequences`Private`min", "=", 
                    RowBox[{
                    "First", "[", 
                    "IntegerSequences`Private`initialconditionarguments", 
                    "]"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`threshold", "=", 
                    RowBox[{
                    RowBox[{
                    "First", "[", 
                    "IntegerSequences`Private`initialconditionarguments", 
                    "]"}], "+", 
                    RowBox[{"2", " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "Last", "[", 
                    "IntegerSequences`Private`recurrencearguments", "]"}], 
                    "-", 
                    RowBox[{
                    "First", "[", 
                    "IntegerSequences`Private`recurrencearguments", "]"}]}], 
                    ")"}]}]}]}], ",", 
                    RowBox[{"IntegerSequences`Private`expression", "=", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`solution", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"1", ",", "2"}], "\[RightDoubleBracket]"}], "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{"IntegerSequences`Private`m", "\[Rule]", 
                    RowBox[{
                    "IntegerSequences`Private`n", "+", 
                    "IntegerSequences`Private`m", "-", 
                    RowBox[{
                    "Last", "[", 
                    "IntegerSequences`Private`recurrencearguments", 
                    "]"}]}]}]}]}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{
                    "IntegerQ", "[", "IntegerSequences`Private`order", 
                    "]"}]}], "||", 
                    RowBox[{
                    "IntegerSequences`Private`initialconditionarguments", "=!=", 
                    RowBox[{
                    RowBox[{
                    "First", "[", 
                    "IntegerSequences`Private`initialconditionarguments", 
                    "]"}], "+", 
                    RowBox[{"Range", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"IntegerSequences`Private`order", "-", "1"}]}], 
                    "]"}]}]}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    StyleBox[
                    RowBox[{"FromRecurrence", "::", "init"}], "MessageName"], 
                    "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ";", 
                    RowBox[{"Apply", "[", 
                    RowBox[{
                    "Set", ",", "IntegerSequences`Private`initialconditions", 
                    ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], ";", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`s", "[", 
                    "IntegerSequences`Private`n", "]"}], "=", 
                    "IntegerSequences`Private`expression"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`n", ",", 
                    RowBox[{
                    RowBox[{
                    "Last", "[", 
                    "IntegerSequences`Private`initialconditionarguments", 
                    "]"}], "+", "1"}], ",", 
                    RowBox[{
                    RowBox[{
                    "Last", "[", 
                    "IntegerSequences`Private`initialconditionarguments", 
                    "]"}], "+", "IntegerSequences`Private`order"}]}], "}"}]}],
                     "]"}], ";", 
                    RowBox[{"SetAttributes", "[", 
                    RowBox[{
                    "IntegerSequences`Private`block", ",", "HoldAll"}], "]"}],
                     ";", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`s", "[", 
                    RowBox[{
                    RowBox[{"Pattern", "[", 
                    RowBox[{"#1", ",", "_Integer"}], "]"}], "/;", 
                    RowBox[{
                    "#1", "\[GreaterEqual]", 
                    "IntegerSequences`Private`min"}]}], "]"}], ":=", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`s", "[", 
                    "IntegerSequences`Private`n", "]"}], "=", "#2"}]}], ")"}],
                     "&"}], ")"}], "[", 
                    RowBox[{"IntegerSequences`Private`n", ",", 
                    RowBox[{"IntegerSequences`Private`block", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"$RecursionLimit", "=", "\[Infinity]"}], "}"}], 
                    ",", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`result", "=", 
                    "IntegerSequences`Private`expression"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`n", "\[GreaterEqual]", 
                    "IntegerSequences`Private`threshold"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"IntegerSequences`Private`s", "[", 
                    RowBox[{
                    "IntegerSequences`Private`n", "-", 
                    "IntegerSequences`Private`order"}], "]"}], ")"}], 
                    "=."}]}], "]"}], ";", 
                    "IntegerSequences`Private`result"}]}], "]"}]}], "]"}]}], 
                    "]"}]}]}], "]"}], ";", 
                    RowBox[{
                    RowBox[{
                    "DownValues", "[", "IntegerSequences`Private`s", "]"}], 
                    "=", 
                    RowBox[{
                    RowBox[{
                    "DownValues", "[", "IntegerSequences`Private`s", "]"}], "/.",
                     "\[VeryThinSpace]", 
                    RowBox[{
                    "IntegerSequences`Private`block", "\[Rule]", 
                    "Block"}]}]}], ";", "False"}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`s", "/;", 
                    RowBox[{"!", "IntegerSequences`Private`failed"}]}]}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"FromRecurrence", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`equationlist", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_Equal", "|", "True"}], ")"}], ".."}], "}"}], 
                    ",", "_List"}], "]"}]}], "/;", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    RowBox[{
                    "Flatten", "[", "IntegerSequences`Private`equationlist", 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_Equal", "|", "True"}], ")"}], ".."}], "}"}]}], 
                    "]"}]}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`s_", "[", 
                    "IntegerSequences`Private`m_", "]"}]}], "]"}], ":=", 
                    RowBox[{"FromRecurrence", "[", 
                    RowBox[{
                    RowBox[{
                    "Flatten", "[", "IntegerSequences`Private`equationlist", 
                    "]"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`s", "[", 
                    "IntegerSequences`Private`m", "]"}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "FromRecurrence", "]"}],
                     "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_"}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`FromRecurrence] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`FromRecurrence\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"FromRecurrence\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"eqns\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[List[StyleBox[\\\"s\\\", \\\"TI\\\"], \\\"[\\\", StyleBox[\\\"n\\\", \
\\\"TI\\\"], \\\"]\\\"]]]], \\\"]\\\"]]\\) makes \\!\\(\\*StyleBox[\\\"s\\\", \
\\\"TI\\\"]\\) into a function satisfying the recurrence equations \
\\!\\(\\*StyleBox[\\\"eqns\\\", \\\"TI\\\"]\\) of fixed order.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"FromRecurrence\", \"[\", RowBox[List[StyleBox[\"eqns\
\", \"TI\"], \",\", RowBox[List[StyleBox[\"s\", \"TI\"], \"[\", \
StyleBox[\"n\", \"TI\"], \"]\"]]]], \"]\"]]\) makes \!\(\*StyleBox[\"s\", \
\"TI\"]\) into a function satisfying the recurrence equations \!\(\*StyleBox[\
\"eqns\", \"TI\"]\) of fixed order.", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`FromRecurrence, {
      IntegerSequences`FromRecurrence[
         Pattern[IntegerSequences`Private`equation, 
          Blank[Equal]], 
         Pattern[IntegerSequences`Private`s, 
          Blank[]][
          Pattern[IntegerSequences`Private`m, 
           Blank[]]]] :> 
       IntegerSequences`FromRecurrence[{IntegerSequences`Private`equation}, 
         IntegerSequences`Private`s[IntegerSequences`Private`m]], 
       IntegerSequences`FromRecurrence[
         Pattern[IntegerSequences`Private`equations, 
          HoldPattern[And][
           BlankSequence[Equal]]], 
         Pattern[IntegerSequences`Private`s, 
          Blank[]][
          Pattern[IntegerSequences`Private`m, 
           Blank[]]]] :> IntegerSequences`FromRecurrence[
         Apply[List, IntegerSequences`Private`equations], 
         IntegerSequences`Private`s[IntegerSequences`Private`m]], Condition[
         IntegerSequences`FromRecurrence[
          Pattern[IntegerSequences`Private`equationlist, {
            Repeated[
             Alternatives[
              Blank[Equal], True]]}], 
          Pattern[IntegerSequences`Private`s, 
           Blank[Symbol]][
           Pattern[IntegerSequences`Private`m, 
            Blank[Symbol]]]], 
         And[
          IntegerSequences`Private`PlausibleVariableQ[
          IntegerSequences`Private`m], 
          Not[
           MemberQ[
            Attributes[IntegerSequences`Private`s], Protected]]]] :> 
       Module[{
         IntegerSequences`Private`equations, 
          IntegerSequences`Private`initialconditions, 
          IntegerSequences`Private`recurrence, 
          IntegerSequences`Private`initialconditionarguments, 
          IntegerSequences`Private`recurrencearguments, 
          IntegerSequences`Private`solution, IntegerSequences`Private`n, 
          IntegerSequences`Private`block, IntegerSequences`Private`failed}, 
         IntegerSequences`Private`failed = 
          Catch[IntegerSequences`Private`equations = Replace[
               DeleteCases[IntegerSequences`Private`equationlist, True], 
               Condition[
                 Pattern[IntegerSequences`Private`equal, 
                  Blank[]], Length[IntegerSequences`Private`equal] >= 3] :> 
               With[{IntegerSequences`Private`constants = Select[
                    Apply[List, IntegerSequences`Private`equal], 
                    FreeQ[#, IntegerSequences`Private`s]& ]}, 
                 If[Length[IntegerSequences`Private`constants] == 1, 
                  Apply[Sequence, 
                   Map[# == First[IntegerSequences`Private`constants]& , 
                    DeleteCases[
                    Apply[List, IntegerSequences`Private`equal], 
                    First[IntegerSequences`Private`constants]]]], Message[
                    MessageName[IntegerSequences`FromRecurrence, "init"]]; 
                  Throw[True]]], {1}]; 
            IntegerSequences`Private`initialconditions = 
             Cases[IntegerSequences`Private`equations, 
               Condition[
                Alternatives[IntegerSequences`Private`s[
                   Blank[Integer]] == 
                 Pattern[IntegerSequences`Private`constant, 
                   Blank[]], Pattern[IntegerSequences`Private`constant, 
                   Blank[]] == IntegerSequences`Private`s[
                   Blank[Integer]]], 
                FreeQ[
                IntegerSequences`Private`constant, 
                 IntegerSequences`Private`m]]]; 
            If[IntegerSequences`Private`initialconditions === {}, Message[
                MessageName[IntegerSequences`FromRecurrence, "init"]]; 
              Throw[True]]; IntegerSequences`Private`initialconditions = Union[
               Replace[
               IntegerSequences`Private`initialconditions, 
                Pattern[IntegerSequences`Private`constant, Except[
                    Blank[IntegerSequences`Private`s]] == 
                  Pattern[IntegerSequences`Private`term, 
                    Blank[IntegerSequences`Private`s]]] :> 
                IntegerSequences`Private`term == 
                 IntegerSequences`Private`constant, {1}]]; 
            IntegerSequences`Private`recurrence = 
             DeleteCases[IntegerSequences`Private`equations, 
               Apply[
               Alternatives, IntegerSequences`Private`initialconditions]]; 
            If[Length[IntegerSequences`Private`recurrence] != 1, Message[
                MessageName[IntegerSequences`FromRecurrence, "soln"]]; 
              Throw[True]]; 
            IntegerSequences`Private`recurrence = 
             First[IntegerSequences`Private`recurrence]; 
            IntegerSequences`Private`initialconditionarguments = 
             Map[Part[#, 1, 1]& , IntegerSequences`Private`initialconditions]; 
            IntegerSequences`Private`recurrencearguments = Union[
               Cases[
               IntegerSequences`Private`recurrence, IntegerSequences`Private`s[
                  Condition[
                   Pattern[IntegerSequences`Private`argument, 
                    Blank[]], 
                   And[
                    FreeQ[IntegerSequences`Private`argument, 
                    Blank[IntegerSequences`Private`s]], 
                    Not[
                    FreeQ[
                    IntegerSequences`Private`argument, 
                    IntegerSequences`Private`m]]]]] :> 
                IntegerSequences`Private`argument, Infinity]]; 
            IntegerSequences`Private`solution = 
             Solve[IntegerSequences`Private`recurrence, 
               IntegerSequences`Private`s[
                Last[IntegerSequences`Private`recurrencearguments]]]; 
            If[Length[IntegerSequences`Private`solution] != 1, Message[
                MessageName[IntegerSequences`FromRecurrence, "soln"]]; 
              Throw[True]]; 
            IntegerSequences`Private`solution = 
             First[IntegerSequences`Private`solution]; 
            With[{IntegerSequences`Private`order = 
               Last[IntegerSequences`Private`recurrencearguments] - First[
                IntegerSequences`Private`recurrencearguments], 
               IntegerSequences`Private`min = 
               First[IntegerSequences`Private`initialconditionarguments], 
               IntegerSequences`Private`threshold = 
               First[IntegerSequences`Private`initialconditionarguments] + 
                2 (Last[IntegerSequences`Private`recurrencearguments] - First[
                  IntegerSequences`Private`recurrencearguments]), 
               IntegerSequences`Private`expression = ReplaceAll[
                 Part[IntegerSequences`Private`solution, 1, 2], 
                 IntegerSequences`Private`m -> 
                 IntegerSequences`Private`n + IntegerSequences`Private`m - 
                  Last[IntegerSequences`Private`recurrencearguments]]}, If[
                Or[
                 Not[
                  IntegerQ[IntegerSequences`Private`order]], 
                 IntegerSequences`Private`initialconditionarguments =!= 
                 First[IntegerSequences`Private`initialconditionarguments] + 
                  Range[0, IntegerSequences`Private`order - 1]], Message[
                  MessageName[IntegerSequences`FromRecurrence, "init"]]; 
                Throw[True]]; 
              Apply[Set, IntegerSequences`Private`initialconditions, {1}]; 
              Table[IntegerSequences`Private`s[IntegerSequences`Private`n] = 
                IntegerSequences`Private`expression, {
                IntegerSequences`Private`n, 
                 Last[IntegerSequences`Private`initialconditionarguments] + 1,
                  Last[IntegerSequences`Private`initialconditionarguments] + 
                 IntegerSequences`Private`order}]; 
              SetAttributes[IntegerSequences`Private`block, HoldAll]; ((
               IntegerSequences`Private`s[
                 Condition[
                  Pattern[#, 
                   Blank[Integer]], # >= IntegerSequences`Private`min]] := (
                IntegerSequences`Private`s[
                 IntegerSequences`Private`n] = #2))& )[
               IntegerSequences`Private`n, 
                IntegerSequences`Private`block[{$RecursionLimit = Infinity}, 
                 
                 With[{IntegerSequences`Private`result = 
                   IntegerSequences`Private`expression}, 
                  If[IntegerSequences`Private`n >= 
                    IntegerSequences`Private`threshold, 
                    Unset[
                    IntegerSequences`Private`s[
                    IntegerSequences`Private`n - 
                    IntegerSequences`Private`order]]]; 
                  IntegerSequences`Private`result]]]]; 
            DownValues[IntegerSequences`Private`s] = ReplaceAll[
               DownValues[IntegerSequences`Private`s], 
               IntegerSequences`Private`block -> Block]; False]; 
         Condition[IntegerSequences`Private`s, 
           Not[IntegerSequences`Private`failed]]], 
       IntegerSequences`FromRecurrence[
         Condition[
          Pattern[IntegerSequences`Private`equationlist, 
           Except[{
             Repeated[
              Alternatives[
               Blank[Equal], True]]}, 
            Blank[List]]], 
          MatchQ[
           Flatten[IntegerSequences`Private`equationlist], {
            Repeated[
             Alternatives[
              Blank[Equal], True]]}]], 
         Pattern[IntegerSequences`Private`s, 
          Blank[]][
          Pattern[IntegerSequences`Private`m, 
           Blank[]]]] :> IntegerSequences`FromRecurrence[
         Flatten[IntegerSequences`Private`equationlist], 
         IntegerSequences`Private`s[IntegerSequences`Private`m]]}], 
    "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`FromRecurrence, {
      SyntaxInformation[IntegerSequences`FromRecurrence] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`FromRecurrence"], False]]], "Output",ExpressionUUID->\
"e297a289-3825-488e-9827-2175899abda5"]
}, Open  ]],

Cell[TextData[{
 "Define ",
 StyleBox["CentralTrinomialCoefficient", "Input"],
 " by its recurrence:"
}], "Text",ExpressionUUID->"1a00e8f3-b2b8-4775-a407-e29b8c82b98b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromRecurrence", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"n", " ", 
      RowBox[{"CentralTrinomialCoefficient", "[", "n", "]"}]}], "\[Equal]", 
     RowBox[{
      RowBox[{"3", " ", 
       RowBox[{"(", 
        RowBox[{"n", "-", "1"}], ")"}], " ", 
       RowBox[{"CentralTrinomialCoefficient", "[", 
        RowBox[{"n", "-", "2"}], "]"}]}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"2", " ", "n"}], "-", "1"}], ")"}], " ", 
       RowBox[{"CentralTrinomialCoefficient", "[", 
        RowBox[{"n", "-", "1"}], "]"}]}]}]}], "&&", 
    RowBox[{
     RowBox[{"CentralTrinomialCoefficient", "[", "0", "]"}], "\[Equal]", 
     "1"}], "&&", 
    RowBox[{
     RowBox[{"CentralTrinomialCoefficient", "[", "1", "]"}], "\[Equal]", 
     "1"}]}], ",", 
   RowBox[{"CentralTrinomialCoefficient", "[", "n", "]"}]}], "]"}]], "Input",E\
xpressionUUID->"4b5fbd3d-2e7d-4182-87ad-16637fd402e6"],

Cell[BoxData["CentralTrinomialCoefficient"], "Output",ExpressionUUID->"217bb9d9-9b59-4abe-a8d2-14c772313d40"]
}, Open  ]],

Cell["Now you can use it as a function:", "Text",ExpressionUUID->"eee36610-9935-4a86-99dc-490b14c5034b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CentralTrinomialCoefficient", "/@", 
  RowBox[{"Range", "[", 
   RowBox[{"0", ",", "10"}], "]"}]}]], "Input",ExpressionUUID->"65f84493-65f1-\
4e91-b494-e6b51ca11edd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "3", ",", "7", ",", "19", ",", "51", ",", "141", ",", 
   "393", ",", "1107", ",", "3139", ",", "8953"}], "}"}]], "Output",Expression\
UUID->"21eb715c-e23a-4704-ac5f-ee0f22bec9dd"]
}, Open  ]],

Cell[TextData[{
 "Each time ",
 StyleBox["CentralTrinomialCoefficient", "Input"],
 " is used to compute a new value, it caches the new value and removes from \
the cache values that are not needed to compute higher-index values:"
}], "Text",ExpressionUUID->"bd76f4fe-e012-4003-9d9a-909b9c3e5d08"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "CentralTrinomialCoefficient"}]], "Input",ExpressionUUID->"cebf1d30-a7c0-4556-bf47-ce0a62e821f6"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = True, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"Global`CentralTrinomialCoefficient\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"CentralTrinomialCoefficient", "[", "0", "]"}], ":=",
                     "1"}]},
                    {
                    RowBox[{
                    RowBox[{"CentralTrinomialCoefficient", "[", "1", "]"}], ":=",
                     "1"}]},
                    {
                    RowBox[{
                    RowBox[{"CentralTrinomialCoefficient", "[", "9", "]"}], 
                    "=", "3139"}]},
                    {
                    RowBox[{
                    RowBox[{"CentralTrinomialCoefficient", "[", "10", "]"}], 
                    "=", "8953"}]},
                    {
                    RowBox[{
                    RowBox[{"CentralTrinomialCoefficient", "[", 
                    RowBox[{"IntegerSequences`Private`n$163618_Integer", "/;", 
                    RowBox[{
                    "IntegerSequences`Private`n$163618", "\[GreaterEqual]", 
                    "0"}]}], "]"}], ":=", 
                    RowBox[{
                    RowBox[{
                    "CentralTrinomialCoefficient", "[", 
                    "IntegerSequences`Private`n$163618", "]"}], "=", 
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"$RecursionLimit", "=", "\[Infinity]"}], "}"}], 
                    ",", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`result$", "=", 
                    RowBox[{
                    FractionBox["1", "IntegerSequences`Private`n$163618"], 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "3"}], " ", 
                    RowBox[{"CentralTrinomialCoefficient", "[", 
                    RowBox[{
                    RowBox[{"-", "2"}], "+", 
                    "IntegerSequences`Private`n$163618"}], "]"}]}], "+", 
                    RowBox[{
                    "3", " ", "IntegerSequences`Private`n$163618", " ", 
                    RowBox[{"CentralTrinomialCoefficient", "[", 
                    RowBox[{
                    RowBox[{"-", "2"}], "+", 
                    "IntegerSequences`Private`n$163618"}], "]"}]}], "-", 
                    RowBox[{"CentralTrinomialCoefficient", "[", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    "IntegerSequences`Private`n$163618"}], "]"}], "+", 
                    RowBox[{
                    "2", " ", "IntegerSequences`Private`n$163618", " ", 
                    RowBox[{"CentralTrinomialCoefficient", "[", 
                    RowBox[{
                    RowBox[{"-", "1"}], "+", 
                    "IntegerSequences`Private`n$163618"}], "]"}]}]}], 
                    ")"}]}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`n$163618", "\[GreaterEqual]", 
                    "4"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"CentralTrinomialCoefficient", "[", 
                    RowBox[{"IntegerSequences`Private`n$163618", "-", "2"}], 
                    "]"}], ")"}], "=."}]}], "]"}], ";", 
                    "IntegerSequences`Private`result$"}]}], "]"}]}], "]"}]}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"Global`CentralTrinomialCoefficient\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"Global`CentralTrinomialCoefficient\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> "Global`CentralTrinomialCoefficient", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, $CellContext`CentralTrinomialCoefficient, \
{$CellContext`CentralTrinomialCoefficient[0] :> 
       1, $CellContext`CentralTrinomialCoefficient[1] :> 
       1, $CellContext`CentralTrinomialCoefficient[9] -> 
       3139, $CellContext`CentralTrinomialCoefficient[10] -> 
       8953, $CellContext`CentralTrinomialCoefficient[
         Condition[
          Pattern[IntegerSequences`Private`n$163618, 
           Blank[Integer]], IntegerSequences`Private`n$163618 >= 
          0]] :> ($CellContext`CentralTrinomialCoefficient[
         IntegerSequences`Private`n$163618] = 
        Block[{$RecursionLimit = Infinity}, 
          
          With[{IntegerSequences`Private`result$ = 
            IntegerSequences`Private`n$163618^(-1) ((-3) \
$CellContext`CentralTrinomialCoefficient[-2 + 
                 IntegerSequences`Private`n$163618] + 
              3 IntegerSequences`Private`n$163618 \
$CellContext`CentralTrinomialCoefficient[-2 + 
                 IntegerSequences`Private`n$163618] - \
$CellContext`CentralTrinomialCoefficient[-1 + 
               IntegerSequences`Private`n$163618] + 
              2 IntegerSequences`Private`n$163618 \
$CellContext`CentralTrinomialCoefficient[-1 + 
                 IntegerSequences`Private`n$163618])}, 
           If[IntegerSequences`Private`n$163618 >= 4, 
             Unset[
              $CellContext`CentralTrinomialCoefficient[
              IntegerSequences`Private`n$163618 - 2]]]; 
           IntegerSequences`Private`result$]])}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "Global`CentralTrinomialCoefficient"], False]]], "Output",ExpressionUUID->\
"38d2fef3-01ea-4ad2-9b17-7ff4663c415b"]
}, Open  ]],

Cell[TextData[{
 "Make sure to clear a symbol before attempting to redefine it; otherwise \
initial conditions in the input can evaluate to ",
 StyleBox["True", "Input"],
 " or ",
 StyleBox["False", "Input"],
 " and won\[CloseCurlyQuote]t be picked up:"
}], "Text",ExpressionUUID->"1fdd912f-10d3-4525-a4f8-a72820bb9e4e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromRecurrence", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"n", " ", 
      RowBox[{"CentralTrinomialCoefficient", "[", "n", "]"}]}], "\[Equal]", 
     RowBox[{
      RowBox[{"3", " ", 
       RowBox[{"(", 
        RowBox[{"n", "-", "1"}], ")"}], " ", 
       RowBox[{"CentralTrinomialCoefficient", "[", 
        RowBox[{"n", "-", "2"}], "]"}]}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"2", " ", "n"}], "-", "1"}], ")"}], " ", 
       RowBox[{"CentralTrinomialCoefficient", "[", 
        RowBox[{"n", "-", "1"}], "]"}]}]}]}], "&&", 
    RowBox[{
     RowBox[{"CentralTrinomialCoefficient", "[", "0", "]"}], "\[Equal]", 
     "1"}], "&&", 
    RowBox[{
     RowBox[{"CentralTrinomialCoefficient", "[", "1", "]"}], "\[Equal]", 
     "1"}]}], ",", 
   RowBox[{"CentralTrinomialCoefficient", "[", "n", "]"}]}], "]"}]], "Input",E\
xpressionUUID->"7dd667b9-f962-407b-9318-23a783610a45"],

Cell[BoxData[
 TemplateBox[{
  "FromRecurrence","init",
   "\"Recurrence supplied with bad initial conditions.\"",2,331,12,
   18387630869787481076,"Local","IntegerSequences`FromRecurrence"},
  "MessageTemplate2"]], "Message", \
"MSG",ExpressionUUID->"5fbaaa7c-71b2-4dc2-a5bf-403823e10eaf"],

Cell[BoxData[
 RowBox[{"FromRecurrence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"n", " ", 
      RowBox[{"CentralTrinomialCoefficient", "[", "n", "]"}]}], "\[Equal]", 
     RowBox[{
      RowBox[{"3", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "n"}], ")"}], " ", 
       RowBox[{"CentralTrinomialCoefficient", "[", 
        RowBox[{
         RowBox[{"-", "2"}], "+", "n"}], "]"}]}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         RowBox[{"2", " ", "n"}]}], ")"}], " ", 
       RowBox[{"CentralTrinomialCoefficient", "[", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "n"}], "]"}]}]}]}], "}"}], ",", 
   RowBox[{"CentralTrinomialCoefficient", "[", "n", "]"}]}], "]"}]], "Output",\
ExpressionUUID->"94403cef-b88e-4358-888a-723737f28547"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Clear", "[", "CentralTrinomialCoefficient", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"FromRecurrence", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"n", " ", 
      RowBox[{"CentralTrinomialCoefficient", "[", "n", "]"}]}], "\[Equal]", 
     RowBox[{
      RowBox[{"3", " ", 
       RowBox[{"(", 
        RowBox[{"n", "-", "1"}], ")"}], " ", 
       RowBox[{"CentralTrinomialCoefficient", "[", 
        RowBox[{"n", "-", "2"}], "]"}]}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"2", " ", "n"}], "-", "1"}], ")"}], " ", 
       RowBox[{"CentralTrinomialCoefficient", "[", 
        RowBox[{"n", "-", "1"}], "]"}]}]}]}], "&&", 
    RowBox[{
     RowBox[{"CentralTrinomialCoefficient", "[", "0", "]"}], "\[Equal]", 
     "1"}], "&&", 
    RowBox[{
     RowBox[{"CentralTrinomialCoefficient", "[", "1", "]"}], "\[Equal]", 
     "1"}]}], ",", 
   RowBox[{"CentralTrinomialCoefficient", "[", "n", "]"}]}], "]"}]}], "Input",\
ExpressionUUID->"6c4a9d8d-a869-45be-ae9a-63e67951594f"],

Cell[BoxData["CentralTrinomialCoefficient"], "Output",ExpressionUUID->"eb7e335a-079d-4c40-ae87-80d6a2545e76"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", "CentralTrinomialCoefficient", "]"}]], "Input",Expressi\
onUUID->"f56aac46-779d-4d60-9e96-0e34b3c7ec4b"],

Cell["Somos 4 sequence:", "Text",ExpressionUUID->"ba3f843f-e239-41bb-8694-62b0dfa50076"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FromRecurrence", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Somos", "[", "n", "]"}], "\[Equal]", 
     FractionBox[
      RowBox[{
       RowBox[{
        RowBox[{"Somos", "[", 
         RowBox[{"n", "-", "1"}], "]"}], " ", 
        RowBox[{"Somos", "[", 
         RowBox[{"n", "-", "3"}], "]"}]}], "+", 
       SuperscriptBox[
        RowBox[{"Somos", "[", 
         RowBox[{"n", "-", "2"}], "]"}], "2"]}], 
      RowBox[{"Somos", "[", 
       RowBox[{"n", "-", "4"}], "]"}]]}], "&&", 
    RowBox[{
     RowBox[{"Somos", "[", "0", "]"}], "\[Equal]", 
     RowBox[{"Somos", "[", "1", "]"}], "\[Equal]", 
     RowBox[{"Somos", "[", "2", "]"}], "\[Equal]", 
     RowBox[{"Somos", "[", "3", "]"}], "\[Equal]", "1"}]}], ",", 
   RowBox[{"Somos", "[", "n", "]"}]}], "]"}]], "Input",ExpressionUUID->\
"4ccae874-d8bb-4fa7-812e-2466e67257fd"],

Cell[BoxData["Somos"], "Output",ExpressionUUID->"6b953154-0303-4caa-ae91-8822361ac6cd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Somos", "/@", 
  RowBox[{"Range", "[", 
   RowBox[{"0", ",", "20"}], "]"}]}]], "Input",ExpressionUUID->"e166722d-eb06-\
4694-b724-b5b5fa87bf23"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "1", ",", "1", ",", "2", ",", "3", ",", "7", ",", "23", 
   ",", "59", ",", "314", ",", "1529", ",", "8209", ",", "83313", ",", 
   "620297", ",", "7869898", ",", "126742987", ",", "1687054711", ",", 
   "47301104551", ",", "1123424582771", ",", "32606721084786", ",", 
   "1662315215971057"}], "}"}]], "Output",ExpressionUUID->"dc66000a-a44a-4a97-\
ac2a-0ebedc641c3d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", "Somos", "]"}]], "Input",ExpressionUUID->"38284a91-a101-4fa2-8fc6-68a003591b97"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["GeneratingFunctionRelations", "Input"]], \
"Subsubsection",ExpressionUUID->"f07624cb-b94b-405b-83b7-e06b38a1bff4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "GeneratingFunctionRelations"}]], "Input",ExpressionUUID->"bfa68e06-1bd9-4450-b34a-82e7872167d9"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"\
GeneratingFunctionRelations\\\", \\\"[\\\", \
RowBox[List[RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"eqn\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"eqn\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"]]], \
\\\"}\\\"]], \\\",\\\", RowBox[List[StyleBox[\\\"s\\\", \\\"TI\\\"], \
\\\"[\\\", RowBox[List[SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"n\\\", \
\\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", \
StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", \
SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], StyleBox[\\\"k\\\", \
\\\"TI\\\"]]]], \\\"]\\\"]], \\\",\\\", RowBox[List[StyleBox[\\\"f\\\", \
\\\"TI\\\"], \\\"[\\\", RowBox[List[SubscriptBox[StyleBox[\\\"x\\\", \\\"TI\\\
\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"x\
\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\
\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"x\\\", \
\\\"TI\\\"], StyleBox[\\\"k\\\", \\\"TI\\\"]]]], \\\"]\\\"]]]], \
\\\"]\\\"]]\\) gives equations satisfied by the multivariate generating \
function \\!\\(\\*RowBox[List[StyleBox[\\\"f\\\", \\\"TI\\\"], \\\"[\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"x\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"x\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"x\\\", \\\"TI\\\"], \
StyleBox[\\\"k\\\", \\\"TI\\\"]]]], \\\"]\\\"]]\\) of the sequence \
\\!\\(\\*RowBox[List[StyleBox[\\\"s\\\", \\\"TI\\\"], \\\"[\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], \
StyleBox[\\\"k\\\", \\\"TI\\\"]]]], \\\"]\\\"]]\\) satisfying a linear system \
of partial recurrence equations.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"GeneratingFunctionRelations", "[", 
                    RowBox[{
                    "IntegerSequences`Private`eqn_Equal", ",", 
                    "IntegerSequences`Private`expr_", ",", 
                    "IntegerSequences`Private`genfun_"}], "]"}], ":=", 
                    RowBox[{"GeneratingFunctionRelations", "[", 
                    RowBox[{
                    RowBox[{"{", "IntegerSequences`Private`eqn", "}"}], ",", 
                    "IntegerSequences`Private`expr", ",", 
                    "IntegerSequences`Private`genfun"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"GeneratingFunctionRelations", "[", 
                    RowBox[{
                    "IntegerSequences`Private`eqns_And", ",", 
                    "IntegerSequences`Private`expr_", ",", 
                    "IntegerSequences`Private`genfun_"}], "]"}], ":=", 
                    RowBox[{"GeneratingFunctionRelations", "[", 
                    RowBox[{
                    RowBox[{"List", "@@", "IntegerSequences`Private`eqns"}], 
                    ",", "IntegerSequences`Private`expr", ",", 
                    "IntegerSequences`Private`genfun"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"GeneratingFunctionRelations", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`eqns", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"HoldPattern", "[", "Equal", "]"}], "[", 
                    RowBox[{"_", ",", "_"}], "]"}], ".."}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"IntegerSequences`Private`a", ":", 
                    RowBox[{"Except", "[", "List", "]"}]}], ")"}], "[", 
                    "IntegerSequences`Private`v__", "]"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"IntegerSequences`Private`f", ":", 
                    RowBox[{"Except", "[", "List", "]"}]}], ")"}], "[", 
                    "IntegerSequences`Private`x__", "]"}]}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "IntegerSequences`Private`v", "}"}], "]"}], 
                    "\[Equal]", 
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "IntegerSequences`Private`x", "}"}], 
                    "]"}]}]}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`vars", "=", 
                    RowBox[{"{", "IntegerSequences`Private`v", "}"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`formalvars", "=", 
                    RowBox[{"{", "IntegerSequences`Private`x", "}"}]}], ",", 
                    "IntegerSequences`Private`MySum", ",", 
                    RowBox[{"IntegerSequences`Private`monomiallists", "=", 
                    RowBox[{"MonomialList", "/@", 
                    RowBox[{"Apply", "[", 
                    RowBox[{
                    "Subtract", ",", "IntegerSequences`Private`eqns", ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}]}], ",", 
                    "IntegerSequences`Private`linearsystemq", ",", 
                    "IntegerSequences`Private`lowindices", ",", 
                    "IntegerSequences`Private`highindices", ",", 
                    "IntegerSequences`Private`expr", ",", 
                    "IntegerSequences`Private`shiftrules", ",", 
                    "IntegerSequences`Private`shiftedlowindices"}], "}"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`linearsystemq", "=", 
                    RowBox[{"And", "@@", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`c_", "|", 
                    RowBox[{"IntegerSequences`Private`c_.", " ", 
                    RowBox[{"IntegerSequences`Private`a", "@@", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"_Integer", "|", 
                    RowBox[{"#1", "+", 
                    RowBox[{"Optional", "[", "_Integer", "]"}]}]}], "&"}], 
                    ")"}], "/@", "IntegerSequences`Private`vars"}]}]}]}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"IntegerSequences`Private`c", ",", 
                    RowBox[{"IntegerSequences`Private`a", "|", 
                    RowBox[{
                    "Alternatives", "@@", 
                    "IntegerSequences`Private`vars"}]}]}], "]"}]}]}], "]"}], 
                    "&"}], ",", "IntegerSequences`Private`monomiallists", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "]"}]}]}], ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`monomiallist", ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`lowindices", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Max", "[", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"IntegerSequences`Private`monomiallist", ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`a", "[", 
                    RowBox[{"___", ",", 
                    RowBox[{"#1", "+", "IntegerSequences`Private`shift_."}], 
                    ",", "___"}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"-", "IntegerSequences`Private`shift"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "\[Infinity]"}], "}"}]}], "]"}], "]"}], 
                    "&"}], ")"}], "/@", "IntegerSequences`Private`vars"}]}], 
                    ";", 
                    RowBox[{"IntegerSequences`Private`highindices", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{"IntegerSequences`Private`lowindices", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"-", "\[Infinity]"}], "\[Rule]", "0"}], ",", 
                    RowBox[{"_", "\[Rule]", "\[Infinity]"}]}], "}"}], ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`lowindices", "=", 
                    RowBox[{
                    "IntegerSequences`Private`lowindices", "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{"-", "\[Infinity]"}], "\[Rule]", "0"}]}]}], ";", 
                    RowBox[{
                    RowBox[{"Collect", "[", 
                    RowBox[{
                    RowBox[{"Numerator", "[", 
                    RowBox[{"IntegerSequences`Private`FragileTogether", "[", 
                    RowBox[{"Total", "[", 
                    RowBox[{"KeyValueMap", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`label", ",", 
                    "IntegerSequences`Private`coeff"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`expr", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{"IntegerSequences`Private`label", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", "IntegerSequences`Private`l_", "}"}], 
                    "\[RuleDelayed]", "IntegerSequences`Private`l"}], ",", 
                    RowBox[{"_", "\[Rule]", "1"}]}], "}"}]}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`shiftrules", "=", 
                    RowBox[{"Select", "[", 
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{"IntegerSequences`Private`vars", "\[Rule]", 
                    RowBox[{"IntegerSequences`Private`vars", "-", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"List", "@@", "IntegerSequences`Private`expr"}], 
                    "-", "IntegerSequences`Private`vars"}], ",", 
                    RowBox[{
                    RowBox[{"Except", "[", "_Integer", "]"}], "\[Rule]", 
                    "Null"}], ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"#1", ",", "Null"}], "]"}], "&"}]}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`shiftedlowindices", "=", 
                    RowBox[{
                    "IntegerSequences`Private`lowindices", "+", 
                    "IntegerSequences`Private`vars", "-", 
                    RowBox[{"(", 
                    RowBox[{
                    "IntegerSequences`Private`vars", "/.", "\[VeryThinSpace]",
                     "IntegerSequences`Private`shiftrules"}], ")"}]}]}], ";", 
                    RowBox[{"IntegerSequences`Private`coeff", " ", 
                    RowBox[{"Times", "@@", 
                    SuperscriptBox["IntegerSequences`Private`formalvars", 
                    RowBox[{"-", 
                    "IntegerSequences`Private`shiftedlowindices"}]]}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`MySum", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Times", "@@", 
                    
                    SuperscriptBox["IntegerSequences`Private`formalvars", 
                    "IntegerSequences`Private`vars"]}], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    "IntegerSequences`Private`expr", "/.", "\[VeryThinSpace]",
                     "IntegerSequences`Private`shiftrules"}], ")"}]}], ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`vars", ",", 
                    "IntegerSequences`Private`shiftedlowindices", ",", 
                    "IntegerSequences`Private`highindices"}], "}"}], 
                    "]"}]}]}], "]"}], "//.", "\[VeryThinSpace]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`MySum", "[", 
                    RowBox[{
                    "IntegerSequences`Private`arg_", ",", 
                    "IntegerSequences`Private`i___", ",", 
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`s_", ",", 
                    RowBox[{"IntegerSequences`Private`l_", "?", "Positive"}], 
                    ",", "\[Infinity]"}], "}"}], ",", 
                    "IntegerSequences`Private`j___"}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`MySum", "[", 
                    RowBox[{
                    "IntegerSequences`Private`arg", ",", 
                    "IntegerSequences`Private`i", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`s", ",", "0", ",", 
                    "\[Infinity]"}], "}"}], ",", 
                    "IntegerSequences`Private`j"}], "]"}], "-", 
                    RowBox[{"IntegerSequences`Private`MySum", "[", 
                    RowBox[{
                    "IntegerSequences`Private`arg", ",", 
                    "IntegerSequences`Private`i", ",", 
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`s", ",", "0", ",", 
                    RowBox[{"IntegerSequences`Private`l", "-", "1"}]}], "}"}],
                     ",", "IntegerSequences`Private`j"}], "]"}]}]}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`MySum", "[", 
                    RowBox[{
                    "IntegerSequences`Private`arg_", ",", 
                    "IntegerSequences`Private`i___", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`s_", ",", 
                    "IntegerSequences`Private`l_", ",", 
                    "IntegerSequences`Private`u_Integer"}], "}"}], ",", 
                    "IntegerSequences`Private`j___"}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{
                    UnderoverscriptBox["\[Sum]", 
                    RowBox[{
                    "IntegerSequences`Private`s", "=", 
                    "IntegerSequences`Private`l"}], 
                    "IntegerSequences`Private`u"], 
                    RowBox[{"IntegerSequences`Private`MySum", "[", 
                    RowBox[{
                    "IntegerSequences`Private`arg", ",", 
                    "IntegerSequences`Private`i", ",", 
                    "IntegerSequences`Private`j"}], "]"}]}]}]}], "}"}]}], "//.",
                     "\[VeryThinSpace]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`MySum", "[", 
                    "IntegerSequences`Private`arg_", "]"}], "\[RuleDelayed]", 
                    "IntegerSequences`Private`arg"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`MySum", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`c_", " ", 
                    "IntegerSequences`Private`arg_."}], ",", 
                    "IntegerSequences`Private`i__"}], "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"IntegerSequences`Private`c", ",", 
                    RowBox[{"Alternatives", "@@", 
                    RowBox[{"First", "/@", 
                    RowBox[{"{", "IntegerSequences`Private`i", "}"}]}]}]}], 
                    "]"}]}], "\[RuleDelayed]", 
                    RowBox[{"IntegerSequences`Private`c", " ", 
                    RowBox[{"IntegerSequences`Private`MySum", "[", 
                    RowBox[{
                    "IntegerSequences`Private`arg", ",", 
                    "IntegerSequences`Private`i"}], "]"}]}]}]}], "}"}]}], "/.",
                     "\[VeryThinSpace]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`MySum", "[", 
                    RowBox[{
                    "IntegerSequences`Private`arg_", ",", 
                    "IntegerSequences`Private`i__"}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`sumvars", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{"IntegerSequences`Private`vars", ",", 
                    RowBox[{
                    RowBox[{"Except", "[", 
                    RowBox[{"Alternatives", "@@", 
                    RowBox[{"First", "/@", 
                    RowBox[{"{", "IntegerSequences`Private`i", "}"}]}]}], 
                    "]"}], "\[Rule]", "0"}], ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}], "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"IntegerSequences`Private`arg", ",", 
                    RowBox[{
                    RowBox[{"Times", "@@", 
                    
                    SuperscriptBox["IntegerSequences`Private`formalvars", 
                    "IntegerSequences`Private`sumvars"]}], " ", 
                    RowBox[{
                    "IntegerSequences`Private`a", "@@", 
                    "IntegerSequences`Private`sumvars"}]}]}], "]"}], ",", 
                    RowBox[{"IntegerSequences`Private`f", "@@", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`formalvars", ",", 
                    "IntegerSequences`Private`sumvars"}], "}"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"_", ",", "0"}], "}"}], "\[Rule]", "0"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`y_", ",", "_"}], "}"}], 
                    "\[RuleDelayed]", "IntegerSequences`Private`y"}]}], "}"}],
                     ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`MySum", "[", 
                    RowBox[{
                    "IntegerSequences`Private`arg", ",", 
                    "IntegerSequences`Private`i"}], "]"}]}], "]"}]}], "]"}]}],
                     "}"}]}], "/.", "\[VeryThinSpace]", 
                    RowBox[{
                    "IntegerSequences`Private`MySum", "\[Rule]", "Sum"}]}], 
                    ")"}]}]}]}], "]"}], ",", 
                    RowBox[{"GroupBy", "[", 
                    RowBox[{"IntegerSequences`Private`monomiallist", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"IntegerSequences`Private`a", "[", "__", "]"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "\[Infinity]"}], "}"}]}], "]"}], "&"}], 
                    ")"}], "\[Rule]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#1", "/.", "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`a", "[", "__", "]"}], 
                    "\[Rule]", "1"}]}], "&"}], ")"}]}], ",", "Total"}], 
                    "]"}]}], "]"}], "]"}], "]"}], "]"}], ",", 
                    "_IntegerSequences`Private`f"}], "]"}], "\[Equal]", 
                    "0"}]}]}], "]"}], "/@", 
                    "IntegerSequences`Private`monomiallists"}], "/;", 
                    "IntegerSequences`Private`linearsystemq"}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "GeneratingFunctionRelations", 
                    "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_", ",", "_"}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`GeneratingFunctionRelations] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Blank[], 
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`GeneratingFunctionRelations\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"\
GeneratingFunctionRelations\\\", \\\"[\\\", \
RowBox[List[RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"eqn\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"eqn\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"]]], \
\\\"}\\\"]], \\\",\\\", RowBox[List[StyleBox[\\\"s\\\", \\\"TI\\\"], \
\\\"[\\\", RowBox[List[SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"n\\\", \
\\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", \
StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", \
SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], StyleBox[\\\"k\\\", \
\\\"TI\\\"]]]], \\\"]\\\"]], \\\",\\\", RowBox[List[StyleBox[\\\"f\\\", \
\\\"TI\\\"], \\\"[\\\", RowBox[List[SubscriptBox[StyleBox[\\\"x\\\", \\\"TI\\\
\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"x\
\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\
\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"x\\\", \
\\\"TI\\\"], StyleBox[\\\"k\\\", \\\"TI\\\"]]]], \\\"]\\\"]]]], \
\\\"]\\\"]]\\) gives equations satisfied by the multivariate generating \
function \\!\\(\\*RowBox[List[StyleBox[\\\"f\\\", \\\"TI\\\"], \\\"[\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"x\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"x\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"x\\\", \\\"TI\\\"], \
StyleBox[\\\"k\\\", \\\"TI\\\"]]]], \\\"]\\\"]]\\) of the sequence \
\\!\\(\\*RowBox[List[StyleBox[\\\"s\\\", \\\"TI\\\"], \\\"[\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], \
StyleBox[\\\"k\\\", \\\"TI\\\"]]]], \\\"]\\\"]]\\) satisfying a linear system \
of partial recurrence equations.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"GeneratingFunctionRelations\", \"[\", \
RowBox[List[RowBox[List[\"{\", RowBox[List[SubscriptBox[StyleBox[\"eqn\", \
\"TI\"], StyleBox[\"1\", \"TR\"]], \",\", SubscriptBox[StyleBox[\"eqn\", \"TI\
\"], StyleBox[\"2\", \"TR\"]], \",\", StyleBox[\"\\[Ellipsis]\", \"TR\"]]], \
\"}\"]], \",\", RowBox[List[StyleBox[\"s\", \"TI\"], \"[\", \
RowBox[List[SubscriptBox[StyleBox[\"n\", \"TI\"], StyleBox[\"1\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"n\", \"TI\"], StyleBox[\"2\", \"TR\"]], \",\", \
StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", SubscriptBox[StyleBox[\"n\", \
\"TI\"], StyleBox[\"k\", \"TI\"]]]], \"]\"]], \",\", RowBox[List[StyleBox[\"f\
\", \"TI\"], \"[\", RowBox[List[SubscriptBox[StyleBox[\"x\", \"TI\"], \
StyleBox[\"1\", \"TR\"]], \",\", SubscriptBox[StyleBox[\"x\", \"TI\"], \
StyleBox[\"2\", \"TR\"]], \",\", StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", \
SubscriptBox[StyleBox[\"x\", \"TI\"], StyleBox[\"k\", \"TI\"]]]], \"]\"]]]], \
\"]\"]]\) gives equations satisfied by the multivariate generating function \
\!\(\*RowBox[List[StyleBox[\"f\", \"TI\"], \"[\", \
RowBox[List[SubscriptBox[StyleBox[\"x\", \"TI\"], StyleBox[\"1\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"x\", \"TI\"], StyleBox[\"2\", \"TR\"]], \",\", \
StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", SubscriptBox[StyleBox[\"x\", \
\"TI\"], StyleBox[\"k\", \"TI\"]]]], \"]\"]]\) of the sequence \
\!\(\*RowBox[List[StyleBox[\"s\", \"TI\"], \"[\", \
RowBox[List[SubscriptBox[StyleBox[\"n\", \"TI\"], StyleBox[\"1\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"n\", \"TI\"], StyleBox[\"2\", \"TR\"]], \",\", \
StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", SubscriptBox[StyleBox[\"n\", \
\"TI\"], StyleBox[\"k\", \"TI\"]]]], \"]\"]]\) satisfying a linear system of \
partial recurrence equations.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`GeneratingFunctionRelations, {
      IntegerSequences`GeneratingFunctionRelations[
         Pattern[IntegerSequences`Private`eqn, 
          Blank[Equal]], 
         Pattern[IntegerSequences`Private`expr, 
          Blank[]], 
         Pattern[IntegerSequences`Private`genfun, 
          Blank[]]] :> 
       IntegerSequences`GeneratingFunctionRelations[{
         IntegerSequences`Private`eqn}, IntegerSequences`Private`expr, 
         IntegerSequences`Private`genfun], 
       IntegerSequences`GeneratingFunctionRelations[
         Pattern[IntegerSequences`Private`eqns, 
          Blank[And]], 
         Pattern[IntegerSequences`Private`expr, 
          Blank[]], 
         Pattern[IntegerSequences`Private`genfun, 
          Blank[]]] :> IntegerSequences`GeneratingFunctionRelations[
         Apply[List, IntegerSequences`Private`eqns], 
         IntegerSequences`Private`expr, IntegerSequences`Private`genfun], 
       Condition[
         IntegerSequences`GeneratingFunctionRelations[
          Pattern[IntegerSequences`Private`eqns, {
            Repeated[
             HoldPattern[Equal][
              Blank[], 
              Blank[]]]}], 
          Pattern[IntegerSequences`Private`a, 
           Except[List]][
           Pattern[IntegerSequences`Private`v, 
            BlankSequence[]]], 
          Pattern[IntegerSequences`Private`f, 
           Except[List]][
           Pattern[IntegerSequences`Private`x, 
            BlankSequence[]]]], Length[{IntegerSequences`Private`v}] == 
         Length[{IntegerSequences`Private`x}]] :> 
       Module[{IntegerSequences`Private`vars = {IntegerSequences`Private`v}, 
          IntegerSequences`Private`formalvars = {IntegerSequences`Private`x}, 
          IntegerSequences`Private`MySum, 
          IntegerSequences`Private`monomiallists = Map[MonomialList, 
            Apply[Subtract, IntegerSequences`Private`eqns, {1}]], 
          IntegerSequences`Private`linearsystemq, 
          IntegerSequences`Private`lowindices, 
          IntegerSequences`Private`highindices, IntegerSequences`Private`expr,
           IntegerSequences`Private`shiftrules, 
          IntegerSequences`Private`shiftedlowindices}, 
         IntegerSequences`Private`linearsystemq = Apply[And, 
            Flatten[
             Map[MatchQ[#, 
               Condition[
                Alternatives[
                 Pattern[IntegerSequences`Private`c, 
                  Blank[]], Optional[
                   Pattern[IntegerSequences`Private`c, 
                    Blank[]]] Apply[IntegerSequences`Private`a, 
                   Map[Alternatives[
                    Blank[Integer], # + Optional[
                    Blank[Integer]]]& , IntegerSequences`Private`vars]]], 
                FreeQ[IntegerSequences`Private`c, 
                 Alternatives[IntegerSequences`Private`a, 
                  Apply[Alternatives, IntegerSequences`Private`vars]]]]]& , 
              IntegerSequences`Private`monomiallists, {2}]]]; Condition[
           Map[
            Function[
            IntegerSequences`Private`monomiallist, 
             IntegerSequences`Private`lowindices = Map[Max[
                 Cases[
                 IntegerSequences`Private`monomiallist, 
                  IntegerSequences`Private`a[
                    BlankNullSequence[], # + Optional[
                    Pattern[IntegerSequences`Private`shift, 
                    Blank[]]], 
                    BlankNullSequence[]] :> -IntegerSequences`Private`shift, {
                  0, Infinity}]]& , IntegerSequences`Private`vars]; 
             IntegerSequences`Private`highindices = 
              Replace[IntegerSequences`Private`lowindices, {-Infinity -> 0, 
                 Blank[] -> Infinity}, {1}]; 
             IntegerSequences`Private`lowindices = 
              ReplaceAll[IntegerSequences`Private`lowindices, -Infinity -> 0]; 
             Collect[
                Numerator[
                 IntegerSequences`Private`FragileTogether[
                  Total[
                   KeyValueMap[
                    
                    Function[{
                    IntegerSequences`Private`label, 
                    IntegerSequences`Private`coeff}, 
                    IntegerSequences`Private`expr = 
                    Replace[IntegerSequences`Private`label, {{
                    Pattern[IntegerSequences`Private`l, 
                    Blank[]]} :> IntegerSequences`Private`l, Blank[] -> 1}]; 
                    IntegerSequences`Private`shiftrules = Select[
                    Thread[
                    IntegerSequences`Private`vars -> 
                    IntegerSequences`Private`vars - Replace[
                    Apply[List, IntegerSequences`Private`expr] - 
                    IntegerSequences`Private`vars, Except[
                    Blank[Integer]] -> Null, {1}]], FreeQ[#, Null]& ]; 
                    IntegerSequences`Private`shiftedlowindices = 
                    IntegerSequences`Private`lowindices + 
                    IntegerSequences`Private`vars - ReplaceAll[
                    IntegerSequences`Private`vars, 
                    IntegerSequences`Private`shiftrules]; 
                    IntegerSequences`Private`coeff 
                    Apply[Times, 
                    IntegerSequences`Private`formalvars^(-
                    IntegerSequences`Private`shiftedlowindices)] ReplaceAll[
                    ReplaceAll[
                    ReplaceRepeated[
                    ReplaceRepeated[
                    IntegerSequences`Private`MySum[
                    Apply[Times, IntegerSequences`Private`formalvars^
                    IntegerSequences`Private`vars] 
                    ReplaceAll[
                    IntegerSequences`Private`expr, 
                    IntegerSequences`Private`shiftrules], 
                    Apply[Sequence, 
                    
                    Transpose[{
                    IntegerSequences`Private`vars, 
                    IntegerSequences`Private`shiftedlowindices, 
                    IntegerSequences`Private`highindices}]]], {
                    IntegerSequences`Private`MySum[
                    Pattern[IntegerSequences`Private`arg, 
                    Blank[]], 
                    Pattern[IntegerSequences`Private`i, 
                    BlankNullSequence[]], {
                    Pattern[IntegerSequences`Private`s, 
                    Blank[]], 
                    PatternTest[
                    Pattern[IntegerSequences`Private`l, 
                    Blank[]], Positive], Infinity}, 
                    Pattern[IntegerSequences`Private`j, 
                    BlankNullSequence[]]] :> 
                    IntegerSequences`Private`MySum[
                    IntegerSequences`Private`arg, 
                    IntegerSequences`Private`i, {
                    IntegerSequences`Private`s, 0, Infinity}, 
                    IntegerSequences`Private`j] - 
                    IntegerSequences`Private`MySum[
                    IntegerSequences`Private`arg, 
                    IntegerSequences`Private`i, {
                    IntegerSequences`Private`s, 0, IntegerSequences`Private`l - 
                    1}, IntegerSequences`Private`j], 
                    IntegerSequences`Private`MySum[
                    Pattern[IntegerSequences`Private`arg, 
                    Blank[]], 
                    Pattern[IntegerSequences`Private`i, 
                    BlankNullSequence[]], {
                    Pattern[IntegerSequences`Private`s, 
                    Blank[]], 
                    Pattern[IntegerSequences`Private`l, 
                    Blank[]], 
                    Pattern[IntegerSequences`Private`u, 
                    Blank[Integer]]}, 
                    Pattern[IntegerSequences`Private`j, 
                    BlankNullSequence[]]] :> Sum[
                    IntegerSequences`Private`MySum[
                    IntegerSequences`Private`arg, IntegerSequences`Private`i, 
                    IntegerSequences`Private`j], {
                    IntegerSequences`Private`s, IntegerSequences`Private`l, 
                    IntegerSequences`Private`u}]}], {
                    IntegerSequences`Private`MySum[
                    Pattern[IntegerSequences`Private`arg, 
                    Blank[]]] :> IntegerSequences`Private`arg, Condition[
                    IntegerSequences`Private`MySum[
                    Pattern[IntegerSequences`Private`c, 
                    Blank[]] Optional[
                    Pattern[IntegerSequences`Private`arg, 
                    Blank[]]], 
                    Pattern[IntegerSequences`Private`i, 
                    BlankSequence[]]], 
                    FreeQ[IntegerSequences`Private`c, 
                    Apply[Alternatives, 
                    Map[First, {IntegerSequences`Private`i}]]]] :> 
                    IntegerSequences`Private`c 
                    IntegerSequences`Private`MySum[
                    IntegerSequences`Private`arg, 
                    IntegerSequences`Private`i]}], {
                    IntegerSequences`Private`MySum[
                    Pattern[IntegerSequences`Private`arg, 
                    Blank[]], 
                    Pattern[IntegerSequences`Private`i, 
                    BlankSequence[]]] :> 
                    With[{IntegerSequences`Private`sumvars = 
                    Replace[IntegerSequences`Private`vars, Except[
                    Apply[Alternatives, 
                    Map[First, {IntegerSequences`Private`i}]]] -> 0, {1}]}, 
                    If[
                    MatchQ[
                    IntegerSequences`Private`arg, 
                    Apply[Times, IntegerSequences`Private`formalvars^
                    IntegerSequences`Private`sumvars] 
                    Apply[IntegerSequences`Private`a, 
                    IntegerSequences`Private`sumvars]], 
                    Apply[IntegerSequences`Private`f, 
                    Replace[
                    
                    Transpose[{IntegerSequences`Private`formalvars, 
                    IntegerSequences`Private`sumvars}], {{
                    Blank[], 0} -> 0, {
                    Pattern[IntegerSequences`Private`y, 
                    Blank[]], 
                    Blank[]} :> IntegerSequences`Private`y}, {1}]], 
                    IntegerSequences`Private`MySum[
                    IntegerSequences`Private`arg, 
                    IntegerSequences`Private`i]]]}], 
                    IntegerSequences`Private`MySum -> Sum]], 
                    GroupBy[IntegerSequences`Private`monomiallist, (Cases[#, 
                    IntegerSequences`Private`a[
                    BlankSequence[]], {0, Infinity}]& ) -> (
                    ReplaceAll[#, IntegerSequences`Private`a[
                    BlankSequence[]] -> 1]& ), Total]]]]], 
                Blank[IntegerSequences`Private`f]] == 0], 
            IntegerSequences`Private`monomiallists], 
           IntegerSequences`Private`linearsystemq]]}], "SubValues" -> None, 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`GeneratingFunctionRelations, {
      SyntaxInformation[IntegerSequences`GeneratingFunctionRelations] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           Blank[], 
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`GeneratingFunctionRelations"], False]]], "Output",Expres\
sionUUID->"b58ccb20-58c3-4b3c-81b9-af8f31a61ec1"]
}, Open  ]],

Cell["\<\
Find an equation satisfied by the generating function for the Fibonacci \
sequence:\
\>", "Text",ExpressionUUID->"54ef3c83-1dfe-4963-8d07-6bdc659f5558"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GeneratingFunctionRelations", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"u", "[", 
     RowBox[{"n", "+", "2"}], "]"}], "\[Equal]", 
    RowBox[{
     RowBox[{"u", "[", 
      RowBox[{"n", "+", "1"}], "]"}], "+", 
     RowBox[{"u", "[", "n", "]"}]}]}], ",", 
   RowBox[{"u", "[", "n", "]"}], ",", 
   RowBox[{"f", "[", "x", "]"}]}], "]"}]], "Input",ExpressionUUID->"69431cf6-\
a3b7-4937-a380-72a643ca6712"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", 
       SuperscriptBox["x", "2"], "-", 
       SuperscriptBox["x", "3"]}], ")"}], " ", 
     RowBox[{"f", "[", "x", "]"}]}], "-", 
    RowBox[{"x", " ", 
     RowBox[{"u", "[", "0", "]"}]}], "+", 
    RowBox[{
     SuperscriptBox["x", "2"], " ", 
     RowBox[{"u", "[", "0", "]"}]}], "-", 
    RowBox[{
     SuperscriptBox["x", "2"], " ", 
     RowBox[{"u", "[", "1", "]"}]}]}], "\[Equal]", "0"}], "}"}]], "Output",Exp\
ressionUUID->"3077a139-ac67-48b2-a0cc-93b3acd50ff3"]
}, Open  ]],

Cell["Here is the generating function itself:", "Text",ExpressionUUID->"53b74fef-0121-4090-bd23-c53bddfa9aec"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Solve", "[", 
   RowBox[{"%", ",", 
    RowBox[{"f", "[", "x", "]"}]}], "]"}], "/.", "\[VeryThinSpace]", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{
     RowBox[{"u", "[", "0", "]"}], "\[Rule]", "0"}], ",", 
    RowBox[{
     RowBox[{"u", "[", "1", "]"}], "\[Rule]", "1"}]}], "}"}]}]], "Input",Expre\
ssionUUID->"ea0214a7-fc96-4fde-8de8-2306c6e65348"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
    RowBox[{"-", 
     FractionBox["x", 
      RowBox[{
       RowBox[{"-", "1"}], "+", "x", "+", 
       SuperscriptBox["x", "2"]}]]}]}], "}"}], "}"}]], "Output",ExpressionUUID\
->"cc95b0bb-2a7d-444f-a974-8a7ef6e050ef"]
}, Open  ]],

Cell["Compute the first few terms of the series:", "Text",ExpressionUUID->"2109778b-72a9-433c-90a9-d5b088085308"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Series", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"f", "[", "x", "]"}], "/.", "\[VeryThinSpace]", "%"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "10"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"fa7ba940-c564-4cf2-b669-0f031642d586"],

Cell[BoxData[
 RowBox[{"{", 
  InterpretationBox[
   RowBox[{"x", "+", 
    SuperscriptBox["x", "2"], "+", 
    RowBox[{"2", " ", 
     SuperscriptBox["x", "3"]}], "+", 
    RowBox[{"3", " ", 
     SuperscriptBox["x", "4"]}], "+", 
    RowBox[{"5", " ", 
     SuperscriptBox["x", "5"]}], "+", 
    RowBox[{"8", " ", 
     SuperscriptBox["x", "6"]}], "+", 
    RowBox[{"13", " ", 
     SuperscriptBox["x", "7"]}], "+", 
    RowBox[{"21", " ", 
     SuperscriptBox["x", "8"]}], "+", 
    RowBox[{"34", " ", 
     SuperscriptBox["x", "9"]}], "+", 
    RowBox[{"55", " ", 
     SuperscriptBox["x", "10"]}], "+", 
    InterpretationBox[
     SuperscriptBox[
      RowBox[{"O", "[", "x", "]"}], "11"],
     SeriesData[$CellContext`x, 0, {}, 1, 11, 1],
     Editable->False]}],
   SeriesData[$CellContext`x, 0, {1, 1, 2, 3, 5, 8, 13, 21, 34, 55}, 1, 11, 1],
   Editable->False], "}"}]], "Output",ExpressionUUID->"7a0e30d7-b9a5-4585-\
a0b3-cde3f885c145"]
}, Open  ]],

Cell[TextData[{
 StyleBox["RSolve", "Input"],
 " can't solve systems of a certain complexity, but ",
 StyleBox["GeneratingFunctionEquations", "Input"],
 " can give equations satisfied by the generating function:"
}], "Text",ExpressionUUID->"907cfdad-7979-4c98-8d91-3d4ee3ad346a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"c", "[", 
      RowBox[{"0", ",", "0"}], "]"}], "\[Equal]", "1"}], "&&", 
    RowBox[{
     RowBox[{"c", "[", 
      RowBox[{"p", ",", "0"}], "]"}], "\[Equal]", 
     RowBox[{"2", " ", "n", " ", 
      RowBox[{"c", "[", 
       RowBox[{
        RowBox[{"p", "-", "1"}], ",", "1"}], "]"}]}]}], "&&", 
    RowBox[{
     RowBox[{"c", "[", 
      RowBox[{"p", ",", "l"}], "]"}], "\[Equal]", 
     RowBox[{
      RowBox[{"c", "[", 
       RowBox[{
        RowBox[{"p", "-", "1"}], ",", 
        RowBox[{"l", "-", "1"}]}], "]"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"2", " ", "n"}], "-", "1"}], ")"}], " ", 
       RowBox[{"c", "[", 
        RowBox[{
         RowBox[{"p", "-", "1"}], ",", 
         RowBox[{"l", "+", "1"}]}], "]"}]}]}]}]}], ",", 
   RowBox[{"c", "[", 
    RowBox[{"p", ",", "l"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"p", ",", "l"}], "}"}]}], "]"}]], "Input",ExpressionUUID->\
"085ed703-5680-4dd0-806a-0e9e8b6f5345"],

Cell[BoxData[
 RowBox[{"RSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"c", "[", 
      RowBox[{"0", ",", "0"}], "]"}], "\[Equal]", "1"}], "&&", 
    RowBox[{
     RowBox[{"c", "[", 
      RowBox[{"p", ",", "0"}], "]"}], "\[Equal]", 
     RowBox[{"2", " ", "n", " ", 
      RowBox[{"c", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "1"}], "+", "p"}], ",", "1"}], "]"}]}]}], "&&", 
    RowBox[{
     RowBox[{"c", "[", 
      RowBox[{"p", ",", "l"}], "]"}], "\[Equal]", 
     RowBox[{
      RowBox[{"c", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"-", "1"}], "+", "p"}], ",", 
        RowBox[{
         RowBox[{"-", "1"}], "+", "l"}]}], "]"}], "+", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "1"}], "+", 
         RowBox[{"2", " ", "n"}]}], ")"}], " ", 
       RowBox[{"c", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "1"}], "+", "p"}], ",", 
         RowBox[{"1", "+", "l"}]}], "]"}]}]}]}]}], ",", 
   RowBox[{"c", "[", 
    RowBox[{"p", ",", "l"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"p", ",", "l"}], "}"}]}], "]"}]], "Output",ExpressionUUID->\
"6916c56b-8bdf-4e09-9cbd-4e556616fe48"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Column", "[", 
  RowBox[{"GeneratingFunctionRelations", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"c", "[", 
       RowBox[{"0", ",", "0"}], "]"}], "\[Equal]", "1"}], "&&", 
     RowBox[{
      RowBox[{"c", "[", 
       RowBox[{"p", ",", "0"}], "]"}], "\[Equal]", 
      RowBox[{"2", " ", "n", " ", 
       RowBox[{"c", "[", 
        RowBox[{
         RowBox[{"p", "-", "1"}], ",", "1"}], "]"}]}]}], "&&", 
     RowBox[{
      RowBox[{"c", "[", 
       RowBox[{"p", ",", "l"}], "]"}], "\[Equal]", 
      RowBox[{
       RowBox[{"c", "[", 
        RowBox[{
         RowBox[{"p", "-", "1"}], ",", 
         RowBox[{"l", "-", "1"}]}], "]"}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"2", " ", "n"}], "-", "1"}], ")"}], " ", 
        RowBox[{"c", "[", 
         RowBox[{
          RowBox[{"p", "-", "1"}], ",", 
          RowBox[{"l", "+", "1"}]}], "]"}]}]}]}]}], ",", 
    RowBox[{"c", "[", 
     RowBox[{"p", ",", "l"}], "]"}], ",", 
    RowBox[{"f", "[", 
     RowBox[{"x", ",", "y"}], "]"}]}], "]"}], "]"}]], "Input",ExpressionUUID->\
"796c9fdd-a205-434c-8785-c49b36607674"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{
      RowBox[{
       RowBox[{"-", "1"}], "+", 
       RowBox[{"c", "[", 
        RowBox[{"0", ",", "0"}], "]"}]}], "\[Equal]", "0"}]},
    {
     RowBox[{
      RowBox[{
       RowBox[{"-", 
        RowBox[{"c", "[", 
         RowBox[{"0", ",", "0"}], "]"}]}], "+", 
       RowBox[{"f", "[", 
        RowBox[{"x", ",", "0"}], "]"}], "-", 
       RowBox[{"2", " ", "n", " ", "x", " ", 
        RowBox[{
         UnderoverscriptBox["\[Sum]", 
          RowBox[{"p", "=", "0"}], "\[Infinity]"], 
         RowBox[{
          SuperscriptBox["x", "p"], " ", 
          RowBox[{"c", "[", 
           RowBox[{"p", ",", "1"}], "]"}]}]}]}]}], "\[Equal]", "0"}]},
    {
     RowBox[{
      RowBox[{
       RowBox[{
        SuperscriptBox["y", "2"], " ", 
        RowBox[{"c", "[", 
         RowBox[{"0", ",", "0"}], "]"}]}], "-", 
       RowBox[{
        SuperscriptBox["y", "2"], " ", 
        RowBox[{"f", "[", 
         RowBox[{"0", ",", "y"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"-", "1"}], "+", 
             RowBox[{"2", " ", "n"}]}], ")"}], " ", "x", " ", "y"}], "-", 
          SuperscriptBox["y", "2"]}], ")"}], " ", 
        RowBox[{"f", "[", 
         RowBox[{"x", ",", "0"}], "]"}]}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{
           RowBox[{"(", 
            RowBox[{"1", "-", 
             RowBox[{"2", " ", "n"}]}], ")"}], " ", "x", " ", "y"}], "+", 
          SuperscriptBox["y", "2"], "-", 
          RowBox[{"x", " ", 
           SuperscriptBox["y", "3"]}]}], ")"}], " ", 
        RowBox[{"f", "[", 
         RowBox[{"x", ",", "y"}], "]"}]}], "-", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "-", 
          RowBox[{"2", " ", "n"}]}], ")"}], " ", "x", " ", 
        SuperscriptBox["y", "2"], " ", 
        RowBox[{
         UnderoverscriptBox["\[Sum]", 
          RowBox[{"p", "=", "0"}], "\[Infinity]"], 
         RowBox[{
          SuperscriptBox["x", "p"], " ", 
          RowBox[{"c", "[", 
           RowBox[{"p", ",", "1"}], "]"}]}]}]}]}], "\[Equal]", "0"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",ExpressionUUID->"58eb89fa-ff65-4606-a0bb-2360032f9282"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["IntegerPrepend", "Input"]], "Subsubsection",ExpressionUUID->"6cf76b60-7d4e-4507-825c-0c087686c24f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "IntegerPrepend"}]], "Input",ExpressionUUID->"a2481af7-af0b-4046-8e79-3ed9393b9766"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"IntegerPrepend\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"n\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"b\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"digitlist\\\", \
\\\"TI\\\"]]], \\\"]\\\"]]\\) gives the integer obtained by prepending \\!\\(\
\\*StyleBox[\\\"digitlist\\\", \\\"TI\\\"]\\) to the \
base\[Hyphen]\\!\\(\\*StyleBox[\\\"b\\\", \\\"TI\\\"]\\) digits of \
\\!\\(\\*StyleBox[\\\"n\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[List[\\\"IntegerPrepend\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"n\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"B\\\", \
\\\"TI\\\"], \\\",\\\", StyleBox[\\\"digitlist\\\", \\\"TI\\\"]]], \
\\\"]\\\"]]\\) prepends in the numeration system \\!\\(\\*StyleBox[\\\"B\\\", \
\\\"TI\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerPrepend", "[", 
                    RowBox[{"IntegerSequences`Private`n_Integer", ",", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystem_", "?", 
                    "IntegerSequences`Private`NumerationSystemQ"}], ",", 
                    "IntegerSequences`Private`prefix_List"}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{
                    "NonNegative", "[", "IntegerSequences`Private`n", "]"}], "||", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"IntegerSequences`Private`numerationsystem", ",", 
                    RowBox[{"_Integer", "?", "Negative"}]}], "]"}]}]}], ":=", 
                    RowBox[{"FromDigitList", "[", 
                    RowBox[{
                    RowBox[{"Join", "[", 
                    RowBox[{"IntegerSequences`Private`prefix", ",", 
                    RowBox[{"DigitList", "[", 
                    RowBox[{
                    "IntegerSequences`Private`n", ",", 
                    "IntegerSequences`Private`numerationsystem"}], "]"}]}], 
                    "]"}], ",", "IntegerSequences`Private`numerationsystem"}],
                     "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"IntegerPrepend", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`n_", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystem_", "?", 
                    "IntegerSequences`Private`NumerationSystemQ"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ":=", 
                    "IntegerSequences`Private`n"}]},
                    {
                    RowBox[{
                    RowBox[{"IntegerPrepend", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`n_", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}], ",", 
                    RowBox[{"IntegerSequences`Private`base_Integer", "/;", 
                    RowBox[{
                    RowBox[{
                    "Abs", "[", "IntegerSequences`Private`base", "]"}], 
                    "\[GreaterEqual]", "2"}]}], ",", 
                    "IntegerSequences`Private`prefix_List"}], "]"}], ":=", 
                    RowBox[{
                    RowBox[{
                    SuperscriptBox["IntegerSequences`Private`base", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`prefix", "]"}]], 
                    " ", "IntegerSequences`Private`n"}], "+", 
                    RowBox[{"FromDigitList", "[", 
                    RowBox[{
                    "IntegerSequences`Private`prefix", ",", 
                    "IntegerSequences`Private`base"}], "]"}]}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "IntegerPrepend", "]"}],
                     "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_", ",", "_"}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`IntegerPrepend] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Blank[], 
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`IntegerPrepend\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"IntegerPrepend\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"n\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"b\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"digitlist\\\", \
\\\"TI\\\"]]], \\\"]\\\"]]\\) gives the integer obtained by prepending \\!\\(\
\\*StyleBox[\\\"digitlist\\\", \\\"TI\\\"]\\) to the \
base\[Hyphen]\\!\\(\\*StyleBox[\\\"b\\\", \\\"TI\\\"]\\) digits of \
\\!\\(\\*StyleBox[\\\"n\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[List[\\\"IntegerPrepend\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"n\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"B\\\", \
\\\"TI\\\"], \\\",\\\", StyleBox[\\\"digitlist\\\", \\\"TI\\\"]]], \
\\\"]\\\"]]\\) prepends in the numeration system \\!\\(\\*StyleBox[\\\"B\\\", \
\\\"TI\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"IntegerPrepend\", \"[\", RowBox[List[StyleBox[\"n\", \
\"TI\"], \",\", StyleBox[\"b\", \"TI\"], \",\", StyleBox[\"digitlist\", \
\"TI\"]]], \"]\"]]\) gives the integer obtained by prepending \!\(\*StyleBox[\
\"digitlist\", \"TI\"]\) to the base\[Hyphen]\!\(\*StyleBox[\"b\", \"TI\"]\) \
digits of \!\(\*StyleBox[\"n\", \"TI\"]\).\n\
\!\(\*RowBox[List[\"IntegerPrepend\", \"[\", RowBox[List[StyleBox[\"n\", \"TI\
\"], \",\", StyleBox[\"B\", \"TI\"], \",\", StyleBox[\"digitlist\", \
\"TI\"]]], \"]\"]]\) prepends in the numeration system \!\(\*StyleBox[\"B\", \
\"TI\"]\).", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None,
     "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`IntegerPrepend, {Condition[
         IntegerSequences`IntegerPrepend[
          Pattern[IntegerSequences`Private`n, 
           Blank[Integer]], 
          PatternTest[
           Pattern[IntegerSequences`Private`numerationsystem, 
            Blank[]], IntegerSequences`Private`NumerationSystemQ], 
          Pattern[IntegerSequences`Private`prefix, 
           Blank[List]]], 
         Or[
          NonNegative[IntegerSequences`Private`n], 
          MatchQ[IntegerSequences`Private`numerationsystem, 
           PatternTest[
            Blank[Integer], Negative]]]] :> IntegerSequences`FromDigitList[
         Join[IntegerSequences`Private`prefix, 
          IntegerSequences`DigitList[
          IntegerSequences`Private`n, 
           IntegerSequences`Private`numerationsystem]], 
         IntegerSequences`Private`numerationsystem], 
       IntegerSequences`IntegerPrepend[
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[]], IntegerSequences`Private`PlausibleVariableQ], 
         PatternTest[
          Pattern[IntegerSequences`Private`numerationsystem, 
           Blank[]], IntegerSequences`Private`NumerationSystemQ], {}] :> 
       IntegerSequences`Private`n, IntegerSequences`IntegerPrepend[
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[]], IntegerSequences`Private`PlausibleVariableQ], 
         Condition[
          Pattern[IntegerSequences`Private`base, 
           Blank[Integer]], Abs[IntegerSequences`Private`base] >= 2], 
         Pattern[IntegerSequences`Private`prefix, 
          Blank[List]]] :> 
       IntegerSequences`Private`base^Length[IntegerSequences`Private`prefix] 
         IntegerSequences`Private`n + 
        IntegerSequences`FromDigitList[
         IntegerSequences`Private`prefix, IntegerSequences`Private`base]}], 
    "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`IntegerPrepend, {
      SyntaxInformation[IntegerSequences`IntegerPrepend] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           Blank[], 
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`IntegerPrepend"], False]]], "Output",ExpressionUUID->\
"93950f8d-7b89-422d-ac66-c503c6550fad"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IntegerPrepend", "[", 
  RowBox[{"27", ",", "10", ",", 
   RowBox[{"{", "0", "}"}]}], "]"}]], "Input",ExpressionUUID->"1064ed61-8af9-\
4df5-9131-e493726866e8"],

Cell[BoxData["270"], "Output",ExpressionUUID->"5baeb87f-3bb6-4b76-9df2-aace973c5381"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IntegerPrepend", "[", 
  RowBox[{"8", ",", "2", ",", 
   RowBox[{"{", "0", "}"}]}], "]"}]], "Input",ExpressionUUID->"37930d7a-1b32-\
4fe3-84e0-061f8905b121"],

Cell[BoxData["16"], "Output",ExpressionUUID->"5c129d1d-4942-430a-a428-a0bfe5e63037"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IntegerPrepend", "[", 
  RowBox[{"8", ",", "\"\<Fibonacci\>\"", ",", 
   RowBox[{"{", "0", "}"}]}], "]"}]], "Input",ExpressionUUID->"f78b0245-23c9-\
4869-98a9-f449c8fdd591"],

Cell[BoxData["13"], "Output",ExpressionUUID->"24e3dc9a-acde-4101-a169-3e9e5b0999d3"]
}, Open  ]],

Cell["Digits increase in significance:", "Text",ExpressionUUID->"576359d3-e485-4ec3-986d-34426871dae6"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"IntegerPrepend", "[", 
  RowBox[{"16", ",", "2", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0", ",", "1", ",", "1"}], "}"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"DigitList", "[", 
  RowBox[{"%", ",", "2"}], "]"}]}], "Input",ExpressionUUID->"fd2a30e1-e52c-\
4dec-b69f-af7ce0e0e1d8"],

Cell[BoxData["269"], "Output",ExpressionUUID->"f3f35746-db7b-4699-98a4-e3571afe2ada"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "0", ",", "1", ",", "1", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "1"}], "}"}]], "Output",ExpressionUUID->"eb8980d9-e3d1-4051-866e-\
154619f98ba6"]
}, Open  ]],

Cell["\<\
The representation obtained by prepending is not necessarily a canonical \
representation in the numeration system:\
\>", "Text",ExpressionUUID->"5c127c1b-8879-4b86-986e-63d2e3a21198"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"IntegerPrepend", "[", 
  RowBox[{"1", ",", "\"\<Fibonacci\>\"", ",", 
   RowBox[{"{", "1", "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"DigitList", "[", 
  RowBox[{"%", ",", "\"\<Fibonacci\>\""}], "]"}]}], "Input",ExpressionUUID->\
"270a5842-25eb-4324-883e-5dd7aaa00d70"],

Cell[BoxData["3"], "Output",ExpressionUUID->"e8b64f15-7e15-43e2-a9f4-f7117564a5f8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "0", ",", "1"}], "}"}]], "Output",ExpressionUUID->\
"ae371274-e1ba-4052-bf04-ae96a9e91d21"]
}, Open  ]],

Cell[TextData[{
 StyleBox["IntegerPrepend", "Input"],
 " evaluates for symbolic ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "e5500f9c-78f7-4671-91d0-9fa3becd1dc9"],
 " in integer bases:"
}], "Text",ExpressionUUID->"144eb358-3470-4f91-9255-5add39858da1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"IntegerPrepend", "[", 
  RowBox[{"n", ",", "2", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}]}], "]"}]], "Input",ExpressionUUID->\
"f779c663-6e3f-424d-95c9-44a303531a49"],

Cell[BoxData[
 RowBox[{"1", "+", 
  RowBox[{"4", " ", "n"}]}]], "Output",ExpressionUUID->"8f1e5937-a9b7-4942-a44a-2772d4adbba8"]
}, Open  ]],

Cell[TextData[{
 StyleBox["IntegerPrepend", "Input"],
 " can be used to generate arithmetic sequences:"
}], "Text",ExpressionUUID->"999d70c4-b420-4d02-9d64-8312628d2d3b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"IntegerPrepend", "[", 
    RowBox[{"n", ",", "2", ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "10"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"c4a3f430-d004-4d65-9c02-5002ae33dcfb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "5", ",", "9", ",", "13", ",", "17", ",", "21", ",", "25", ",", 
   "29", ",", "33", ",", "37", ",", "41"}], "}"}]], "Output",ExpressionUUID->\
"1b7c9f89-4943-434b-a82d-a1c4c775b901"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["JacobsthalNumber", "Input"]], "Subsubsection",ExpressionUUID->"be89f283-10f7-4f0f-86bc-710e503b482d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "JacobsthalNumber"}]], "Input",ExpressionUUID->"d7b51af3-e365-4444-922f-78cf4b06a360"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"JacobsthalNumber\\\", \
\\\"[\\\", StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the \
\\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\)th Jacobsthal number \
\\!\\(\\*SubscriptBox[StyleBox[\\\"J\\\", \\\"TI\\\"], StyleBox[\\\"n\\\", \\\
\"TI\\\"]]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"JacobsthalNumber", "[", 
                    RowBox[{"IntegerSequences`Private`x_", "?", "NumericQ"}], 
                    "]"}], ":=", 
                    RowBox[{
                    FractionBox["1", "3"], " ", 
                    RowBox[{"(", 
                    RowBox[{
                    SuperscriptBox["2", "IntegerSequences`Private`x"], "-", 
                    SuperscriptBox[
                    RowBox[{"(", 
                    RowBox[{"-", "1"}], ")"}], 
                    "IntegerSequences`Private`x"]}], ")"}]}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "JacobsthalNumber", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`JacobsthalNumber] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{
                    "Listable", ",", "NumericFunction", ",", "Protected"}], 
                    "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`JacobsthalNumber\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"JacobsthalNumber\\\", \
\\\"[\\\", StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the \
\\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\)th Jacobsthal number \
\\!\\(\\*SubscriptBox[StyleBox[\\\"J\\\", \\\"TI\\\"], StyleBox[\\\"n\\\", \\\
\"TI\\\"]]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"JacobsthalNumber\", \"[\", StyleBox[\"n\", \"TI\"], \
\"]\"]]\) gives the \!\(\*StyleBox[\"n\", \"TI\"]\)th Jacobsthal number \
\!\(\*SubscriptBox[StyleBox[\"J\", \"TI\"], StyleBox[\"n\", \"TI\"]]\).", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`JacobsthalNumber, {
      IntegerSequences`JacobsthalNumber[
         PatternTest[
          Pattern[IntegerSequences`Private`x, 
           Blank[]], NumericQ]] :> (2^IntegerSequences`Private`x - (-1)^
         IntegerSequences`Private`x)/3}], "SubValues" -> None, 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`JacobsthalNumber, {
      SyntaxInformation[IntegerSequences`JacobsthalNumber] -> {
        "ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Listable, NumericFunction, Protected}, "FullName" -> 
    "IntegerSequences`JacobsthalNumber"], False]]], "Output",ExpressionUUID->\
"e16f4c67-9807-490e-bdd3-88b28483e6a3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"JacobsthalNumber", "[", "n", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "20"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"4cf9c9ae-53cd-4330-ad88-412c97fecccb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "1", ",", "3", ",", "5", ",", "11", ",", "21", ",", 
   "43", ",", "85", ",", "171", ",", "341", ",", "683", ",", "1365", ",", 
   "2731", ",", "5461", ",", "10923", ",", "21845", ",", "43691", ",", 
   "87381", ",", "174763", ",", "349525"}], "}"}]], "Output",ExpressionUUID->\
"460e98cd-7f41-4d33-bd86-c76498ed0d34"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"JacobsthalNumber", "[", "100", "]"}]], "Input",ExpressionUUID->"318cde52-1319-4861-9678-64bf3d59bb57"],

Cell[BoxData["422550200076076467165567735125"], "Output",ExpressionUUID->"96cae000-353c-4983-bd91-4f6d64bc5161"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"JacobsthalNumber", "[", "1.5", "]"}]], "Input",ExpressionUUID->"89f152b1-b248-452a-b166-9e83f5ba7a97"],

Cell[BoxData[
 RowBox[{"0.9428090415820634`", "\[VeryThinSpace]", "+", 
  RowBox[{"0.3333333333333333`", " ", "\[ImaginaryI]"}]}]], "Output",Expressio\
nUUID->"57f855fd-6fa1-45ca-865d-55776a68f3c9"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 StyleBox["LaurentPolynomialCoefficientList", "Input"],
 StyleBox[" (a generalization of ", "Text",
  FontWeight->"Plain"],
 StyleBox["CoefficientList", "Input"],
 StyleBox[")", "Text",
  FontWeight->"Plain"]
}], "Subsubsection",ExpressionUUID->"e94a9243-7968-4fe2-a57a-28dc13e23871"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "LaurentPolynomialCoefficientList"}]], "Input",ExpressionUUID->"d561881a-ff2c-46ba-838b-3b0ce7c7a8a4"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"\
LaurentPolynomialCoefficientList\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"poly\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"var\\\
\", \\\"TI\\\"]]], \\\"]\\\"]]\\) gives a list of coefficients of powers of \
\\!\\(\\*StyleBox[\\\"var\\\", \\\"TI\\\"]\\) in the Laurent polynomial \
\\!\\(\\*StyleBox[\\\"poly\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[List[\\\"LaurentPolynomialCoefficientList\\\
\", \\\"[\\\", RowBox[List[StyleBox[\\\"poly\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"var\\\", \\\"TI\\\"], \\\",\\\", RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], \
StyleBox[\\\"min\\\", \\\"TI\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], StyleBox[\\\"max\\\", \
\\\"TI\\\"]]]], \\\"}\\\"]]]], \\\"]\\\"]]\\) gives a list of coefficients of \
powers of \\!\\(\\*StyleBox[\\\"var\\\", \\\"TI\\\"]\\) in \\!\\(\\*StyleBox[\
\\\"poly\\\", \\\"TI\\\"]\\), starting with \\!\\(\\*SubscriptBox[StyleBox[\\\
\"e\\\", \\\"TI\\\"], StyleBox[\\\"min\\\", \\\"TI\\\"]]\\) and ending with \
\\!\\(\\*SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], StyleBox[\\\"max\\\", \
\\\"TI\\\"]]\\).\\n\\!\\(\\*RowBox[List[\\\"LaurentPolynomialCoefficientList\\\
\", \\\"[\\\", RowBox[List[StyleBox[\\\"poly\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[SubscriptBox[StyleBox[\\\"var\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"var\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"]]], \
\\\"}\\\"]], \\\",\\\", RowBox[List[\\\"{\\\", \
RowBox[List[RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], \
RowBox[List[StyleBox[\\\"1\\\", \\\"TR\\\"], \\\",\\\", StyleBox[\\\"min\\\", \
\\\"TI\\\"]]]], \\\",\\\", SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], \
RowBox[List[StyleBox[\\\"1\\\", \\\"TR\\\"], \\\",\\\", StyleBox[\\\"max\\\", \
\\\"TI\\\"]]]]]], \\\"}\\\"]], \\\",\\\", RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], \
RowBox[List[StyleBox[\\\"2\\\", \\\"TR\\\"], \\\",\\\", StyleBox[\\\"min\\\", \
\\\"TI\\\"]]]], \\\",\\\", SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], \
RowBox[List[StyleBox[\\\"2\\\", \\\"TR\\\"], \\\",\\\", StyleBox[\\\"max\\\", \
\\\"TI\\\"]]]]]], \\\"}\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\
\"TR\\\"]]], \\\"}\\\"]]]], \\\"]\\\"]]\\) gives an array of the coefficients \
of the \\!\\(\\*SubscriptBox[StyleBox[\\\"var\\\", \\\"TI\\\"], \
StyleBox[\\\"i\\\", \\\"TI\\\"]]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"LaurentPolynomialCoefficientList", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`expression", ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`var", ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"LaurentPolynomialCoefficientList", "[", 
                    RowBox[{"IntegerSequences`Private`expression", ",", 
                    RowBox[{"{", "IntegerSequences`Private`var", "}"}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"LaurentPolynomialCoefficientList", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"IntegerSequences`Private`variables", ":", 
                    RowBox[{"{", "__", "}"}]}]}], "]"}], ":=", 
                    RowBox[{"Nest", "[", 
                    RowBox[{"List", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`variables", 
                    "]"}], "-", "1"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"LaurentPolynomialCoefficientList", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`expression", ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}], ",", 
                    "IntegerSequences`Private`vars_List"}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`exponentranges", "=", 
                    RowBox[{"Exponent", "[", 
                    RowBox[{
                    "IntegerSequences`Private`expression", ",", 
                    "IntegerSequences`Private`vars", ",", 
                    RowBox[{
                    RowBox[{"MinMax", "[", 
                    RowBox[{"{", "##1", "}"}], "]"}], "&"}]}], "]"}]}], "}"}],
                     ",", 
                    RowBox[{
                    RowBox[{"LaurentPolynomialCoefficientList", "[", 
                    RowBox[{
                    "IntegerSequences`Private`expression", ",", 
                    "IntegerSequences`Private`vars", ",", 
                    "IntegerSequences`Private`exponentranges"}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"IntegerSequences`Private`exponentranges", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "__Integer", "}"}], "..."}], "}"}]}], "]"}], 
                    "&&", 
                    RowBox[{"And", "@@", 
                    RowBox[{"Apply", "[", 
                    RowBox[{
                    "LessEqual", ",", 
                    "IntegerSequences`Private`exponentranges", ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}]}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"LaurentPolynomialCoefficientList", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`expression", ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`var", ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`minexponent_Integer", ",", 
                    "IntegerSequences`Private`maxexponent_Integer"}], "}"}], "/;", 
                    RowBox[{
                    "IntegerSequences`Private`minexponent", "\[LessEqual]", 
                    "IntegerSequences`Private`maxexponent"}]}]}], "]"}], ":=", 
                    RowBox[{"LaurentPolynomialCoefficientList", "[", 
                    RowBox[{"IntegerSequences`Private`expression", ",", 
                    RowBox[{"{", "IntegerSequences`Private`var", "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`minexponent", ",", 
                    "IntegerSequences`Private`maxexponent"}], "}"}], "}"}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"LaurentPolynomialCoefficientList", "[", 
                    RowBox[{"IntegerSequences`Private`expression_", ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ":=", 
                    "IntegerSequences`Private`expression"}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"LaurentPolynomialCoefficientList", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`expression", ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}], ",", 
                    "IntegerSequences`Private`vars_List", ",", 
                    RowBox[{"IntegerSequences`Private`exponentranges", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"_Integer", ",", "_Integer"}], "}"}], ".."}], 
                    "}"}]}]}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`vars", "]"}], 
                    "\[Equal]", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`exponentranges", 
                    "]"}]}], "&&", 
                    RowBox[{"And", "@@", 
                    RowBox[{"Apply", "[", 
                    RowBox[{
                    "LessEqual", ",", 
                    "IntegerSequences`Private`exponentranges", ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}]}]}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`mins", "=", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Min", "[", 
                    RowBox[{
                    RowBox[{"Exponent", "[", 
                    RowBox[{
                    "IntegerSequences`Private`expression", ",", "#1", ",", 
                    "Min"}], "]"}], ",", 
                    RowBox[{"First", "[", "#2", "]"}]}], "]"}], "&"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`vars", ",", 
                    "IntegerSequences`Private`exponentranges"}], "}"}]}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    RowBox[{"CoefficientList", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Times", "@@", 
                    SuperscriptBox["IntegerSequences`Private`vars", 
                    RowBox[{"-", "IntegerSequences`Private`mins"}]]}], " ", 
                    "IntegerSequences`Private`expression"}], ",", 
                    "IntegerSequences`Private`vars", ",", 
                    RowBox[{
                    RowBox[{
                    "Last", "/@", "IntegerSequences`Private`exponentranges"}],
                     "-", "IntegerSequences`Private`mins", "+", "1"}]}], 
                    "]"}], ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "First", "/@", 
                    "IntegerSequences`Private`exponentranges"}], "-", 
                    "IntegerSequences`Private`mins"}], ")"}]}]}], "]"}]}], 
                    "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", 
                    "LaurentPolynomialCoefficientList", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_", ",", "_."}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`LaurentPolynomialCoefficientList] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Blank[], 
                    Optional[
                    Blank[]]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`LaurentPolynomialCoefficientList\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"\
LaurentPolynomialCoefficientList\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"poly\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"var\\\
\", \\\"TI\\\"]]], \\\"]\\\"]]\\) gives a list of coefficients of powers of \
\\!\\(\\*StyleBox[\\\"var\\\", \\\"TI\\\"]\\) in the Laurent polynomial \
\\!\\(\\*StyleBox[\\\"poly\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[List[\\\"LaurentPolynomialCoefficientList\\\
\", \\\"[\\\", RowBox[List[StyleBox[\\\"poly\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"var\\\", \\\"TI\\\"], \\\",\\\", RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], \
StyleBox[\\\"min\\\", \\\"TI\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], StyleBox[\\\"max\\\", \
\\\"TI\\\"]]]], \\\"}\\\"]]]], \\\"]\\\"]]\\) gives a list of coefficients of \
powers of \\!\\(\\*StyleBox[\\\"var\\\", \\\"TI\\\"]\\) in \\!\\(\\*StyleBox[\
\\\"poly\\\", \\\"TI\\\"]\\), starting with \\!\\(\\*SubscriptBox[StyleBox[\\\
\"e\\\", \\\"TI\\\"], StyleBox[\\\"min\\\", \\\"TI\\\"]]\\) and ending with \
\\!\\(\\*SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], StyleBox[\\\"max\\\", \
\\\"TI\\\"]]\\).\\n\\!\\(\\*RowBox[List[\\\"LaurentPolynomialCoefficientList\\\
\", \\\"[\\\", RowBox[List[StyleBox[\\\"poly\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[SubscriptBox[StyleBox[\\\"var\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"var\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"]]], \
\\\"}\\\"]], \\\",\\\", RowBox[List[\\\"{\\\", \
RowBox[List[RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], \
RowBox[List[StyleBox[\\\"1\\\", \\\"TR\\\"], \\\",\\\", StyleBox[\\\"min\\\", \
\\\"TI\\\"]]]], \\\",\\\", SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], \
RowBox[List[StyleBox[\\\"1\\\", \\\"TR\\\"], \\\",\\\", StyleBox[\\\"max\\\", \
\\\"TI\\\"]]]]]], \\\"}\\\"]], \\\",\\\", RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], \
RowBox[List[StyleBox[\\\"2\\\", \\\"TR\\\"], \\\",\\\", StyleBox[\\\"min\\\", \
\\\"TI\\\"]]]], \\\",\\\", SubscriptBox[StyleBox[\\\"e\\\", \\\"TI\\\"], \
RowBox[List[StyleBox[\\\"2\\\", \\\"TR\\\"], \\\",\\\", StyleBox[\\\"max\\\", \
\\\"TI\\\"]]]]]], \\\"}\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\
\"TR\\\"]]], \\\"}\\\"]]]], \\\"]\\\"]]\\) gives an array of the coefficients \
of the \\!\\(\\*SubscriptBox[StyleBox[\\\"var\\\", \\\"TI\\\"], \
StyleBox[\\\"i\\\", \\\"TI\\\"]]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"LaurentPolynomialCoefficientList\", \"[\", \
RowBox[List[StyleBox[\"poly\", \"TI\"], \",\", StyleBox[\"var\", \"TI\"]]], \
\"]\"]]\) gives a list of coefficients of powers of \!\(\*StyleBox[\"var\", \
\"TI\"]\) in the Laurent polynomial \!\(\*StyleBox[\"poly\", \"TI\"]\).\n\!\(\
\*RowBox[List[\"LaurentPolynomialCoefficientList\", \"[\", \
RowBox[List[StyleBox[\"poly\", \"TI\"], \",\", StyleBox[\"var\", \"TI\"], \",\
\", RowBox[List[\"{\", RowBox[List[SubscriptBox[StyleBox[\"e\", \"TI\"], \
StyleBox[\"min\", \"TI\"]], \",\", SubscriptBox[StyleBox[\"e\", \"TI\"], \
StyleBox[\"max\", \"TI\"]]]], \"}\"]]]], \"]\"]]\) gives a list of \
coefficients of powers of \!\(\*StyleBox[\"var\", \"TI\"]\) in \
\!\(\*StyleBox[\"poly\", \"TI\"]\), starting with \
\!\(\*SubscriptBox[StyleBox[\"e\", \"TI\"], StyleBox[\"min\", \"TI\"]]\) and \
ending with \!\(\*SubscriptBox[StyleBox[\"e\", \"TI\"], StyleBox[\"max\", \
\"TI\"]]\).\n\!\(\*RowBox[List[\"LaurentPolynomialCoefficientList\", \"[\", \
RowBox[List[StyleBox[\"poly\", \"TI\"], \",\", RowBox[List[\"{\", \
RowBox[List[SubscriptBox[StyleBox[\"var\", \"TI\"], StyleBox[\"1\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"var\", \"TI\"], StyleBox[\"2\", \"TR\"]], \
\",\", StyleBox[\"\\[Ellipsis]\", \"TR\"]]], \"}\"]], \",\", \
RowBox[List[\"{\", RowBox[List[RowBox[List[\"{\", \
RowBox[List[SubscriptBox[StyleBox[\"e\", \"TI\"], RowBox[List[StyleBox[\"1\", \
\"TR\"], \",\", StyleBox[\"min\", \"TI\"]]]], \",\", \
SubscriptBox[StyleBox[\"e\", \"TI\"], RowBox[List[StyleBox[\"1\", \"TR\"], \
\",\", StyleBox[\"max\", \"TI\"]]]]]], \"}\"]], \",\", RowBox[List[\"{\", \
RowBox[List[SubscriptBox[StyleBox[\"e\", \"TI\"], RowBox[List[StyleBox[\"2\", \
\"TR\"], \",\", StyleBox[\"min\", \"TI\"]]]], \",\", \
SubscriptBox[StyleBox[\"e\", \"TI\"], RowBox[List[StyleBox[\"2\", \"TR\"], \
\",\", StyleBox[\"max\", \"TI\"]]]]]], \"}\"]], \",\", \
StyleBox[\"\\[Ellipsis]\", \"TR\"]]], \"}\"]]]], \"]\"]]\) gives an array of \
the coefficients of the \!\(\*SubscriptBox[StyleBox[\"var\", \"TI\"], \
StyleBox[\"i\", \"TI\"]]\).", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`LaurentPolynomialCoefficientList, {
      IntegerSequences`LaurentPolynomialCoefficientList[
         Pattern[IntegerSequences`Private`expression, 
          Except[
           Blank[List]]], 
         Pattern[IntegerSequences`Private`var, 
          Except[
           Blank[List]]]] :> 
       IntegerSequences`LaurentPolynomialCoefficientList[
        IntegerSequences`Private`expression, {IntegerSequences`Private`var}], 
       IntegerSequences`LaurentPolynomialCoefficientList[0, 
         Pattern[IntegerSequences`Private`variables, {
           BlankSequence[]}]] :> 
       Nest[List, {}, Length[IntegerSequences`Private`variables] - 1], 
       IntegerSequences`LaurentPolynomialCoefficientList[
         Pattern[IntegerSequences`Private`expression, 
          Except[
           Blank[List]]], 
         Pattern[IntegerSequences`Private`vars, 
          Blank[List]]] :> 
       With[{IntegerSequences`Private`exponentranges = 
          Exponent[
           IntegerSequences`Private`expression, IntegerSequences`Private`vars,
             MinMax[{
              SlotSequence[1]}]& ]}, 
         Condition[
          IntegerSequences`LaurentPolynomialCoefficientList[
          IntegerSequences`Private`expression, IntegerSequences`Private`vars, 
           IntegerSequences`Private`exponentranges], 
          And[
           MatchQ[IntegerSequences`Private`exponentranges, {
             RepeatedNull[{
               BlankSequence[Integer]}]}], 
           Apply[And, 
            Apply[
            LessEqual, IntegerSequences`Private`exponentranges, {1}]]]]], 
       IntegerSequences`LaurentPolynomialCoefficientList[
         Pattern[IntegerSequences`Private`expression, 
          Except[
           Blank[List]]], 
         Pattern[IntegerSequences`Private`var, 
          Except[
           Blank[List]]], 
         Condition[{
           Pattern[IntegerSequences`Private`minexponent, 
            Blank[Integer]], 
           Pattern[IntegerSequences`Private`maxexponent, 
            Blank[Integer]]}, IntegerSequences`Private`minexponent <= 
          IntegerSequences`Private`maxexponent]] :> 
       IntegerSequences`LaurentPolynomialCoefficientList[
        IntegerSequences`Private`expression, {
         IntegerSequences`Private`var}, {{
          IntegerSequences`Private`minexponent, 
           IntegerSequences`Private`maxexponent}}], 
       IntegerSequences`LaurentPolynomialCoefficientList[
         Pattern[IntegerSequences`Private`expression, 
          Blank[]], {}, {}] :> IntegerSequences`Private`expression, Condition[
         IntegerSequences`LaurentPolynomialCoefficientList[
          Pattern[IntegerSequences`Private`expression, 
           Except[
            Blank[List]]], 
          Pattern[IntegerSequences`Private`vars, 
           Blank[List]], 
          Pattern[IntegerSequences`Private`exponentranges, {
            Repeated[{
              Blank[Integer], 
              Blank[Integer]}]}]], 
         And[
         Length[IntegerSequences`Private`vars] == 
          Length[IntegerSequences`Private`exponentranges], 
          Apply[And, 
           Apply[LessEqual, IntegerSequences`Private`exponentranges, {1}]]]] :> 
       With[{IntegerSequences`Private`mins = MapThread[Min[
             Exponent[IntegerSequences`Private`expression, #, Min], 
             First[#2]]& , {
            IntegerSequences`Private`vars, 
             IntegerSequences`Private`exponentranges}]}, 
         Drop[
          CoefficientList[
          Apply[Times, 
             IntegerSequences`Private`vars^(-IntegerSequences`Private`mins)] 
           IntegerSequences`Private`expression, IntegerSequences`Private`vars,
            Map[Last, IntegerSequences`Private`exponentranges] - 
           IntegerSequences`Private`mins + 1], 
          Apply[
          Sequence, Map[First, IntegerSequences`Private`exponentranges] - 
           IntegerSequences`Private`mins]]]}], "SubValues" -> None, 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`LaurentPolynomialCoefficientList, {
      SyntaxInformation[
        IntegerSequences`LaurentPolynomialCoefficientList] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           Blank[], 
           Optional[
            Blank[]]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`LaurentPolynomialCoefficientList"], False]]], "Output",ExpressionUUID->"85e6df84-bc1a-4238-9634-3d1f981f5d01"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LaurentPolynomialCoefficientList", "[", 
  RowBox[{
   RowBox[{
    FractionBox["3", 
     SuperscriptBox["x", "2"]], "+", 
    FractionBox["1", "x"], "-", "2", "+", "x", "+", 
    SuperscriptBox["x", "2"]}], ",", "x"}], "]"}]], "Input",ExpressionUUID->\
"cf464cf3-9fd5-41c8-a790-ff4f49805c3e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "1", ",", 
   RowBox[{"-", "2"}], ",", "1", ",", "1"}], "}"}]], "Output",ExpressionUUID->\
"76ecd12a-80d0-4c6d-b76b-fb47eab8eab0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LaurentPolynomialCoefficientList", "[", 
  RowBox[{
   RowBox[{
    FractionBox["3", 
     SuperscriptBox["x", "2"]], "+", 
    FractionBox["1", "x"], "-", "2", "+", "x", "+", 
    SuperscriptBox["x", "2"]}], ",", "x", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"-", "1"}], ",", "5"}], "}"}]}], "]"}]], "Input",ExpressionUUID->\
"c8a906c1-48f4-4f0d-ae04-6e79c9446590"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   RowBox[{"-", "2"}], ",", "1", ",", "1", ",", "0", ",", "0", ",", "0"}], 
  "}"}]], "Output",ExpressionUUID->"928bca50-95a4-46b6-b241-3e2a2be47455"]
}, Open  ]],

Cell["A multivariate Laurent polynomial:", "Text",ExpressionUUID->"62bd3c37-5b56-418a-8d48-60f10c98ab42"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LaurentPolynomialCoefficientList", "[", 
  RowBox[{
   RowBox[{"1", "+", 
    FractionBox["1", "x"], "+", "x", "+", 
    FractionBox["1", 
     RowBox[{"x", " ", "y"}]], "+", "y", "+", 
    FractionBox["y", "x"]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]], "Input",ExpressionUUID->\
"4979ac5d-3488-42d5-ac7d-d2ee46083c62"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "0"}], "}"}]}], "}"}]], "Output",ExpressionUUI\
D->"22f63008-db33-4a84-9f76-e962a69f8ec8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LaurentPolynomialCoefficientList", "[", 
  RowBox[{
   RowBox[{"1", "+", 
    FractionBox["1", "x"], "+", "x", "+", 
    FractionBox["1", 
     RowBox[{"x", " ", "y"}]], "+", "y", "+", 
    FractionBox["y", "x"]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "2"}], ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"-", "2"}], ",", "2"}], "}"}]}], "}"}]}], "]"}]], "Input",Expre\
ssionUUID->"f61f272a-2f41-476d-b30d-42b6e57dfc1d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1", ",", "1", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "1", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "0", ",", "0", ",", "0"}], "}"}]}], 
  "}"}]], "Output",ExpressionUUID->"7f65025f-080b-47e5-bcc8-c7f47b3df3f7"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["MorphismAdjacencyMatrix", "Input"]], "Subsubsection",ExpressionUUID->"9b48e21f-6439-4560-9947-44742395f378"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MorphismAdjacencyMatrix"}]], "Input",ExpressionUUID->"7a07ab3e-6b19-4e2f-b6a7-54b3e245cdec"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"MorphismAdjacencyMatrix\\\"\
, \\\"[\\\", \\\"\\\\\\\"\\\\[Phi]\\\\\\\"\\\", \\\"]\\\"]]\\) gives the \
letter\[Dash]letter adjacency matrix of the morphism \
\\!\\(\\*\\\"\\\\\\\"\\\\[Phi]\\\\\\\"\\\"\\).\\n\\!\\(\\*RowBox[List[\\\"\
MorphismAdjacencyMatrix\\\", \\\"[\\\", RowBox[List[\\\"\\\\\\\"\\\\[Phi]\\\\\
\\\"\\\", \\\",\\\", StyleBox[\\\"alphabet\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) \
uses the letter order specified by \\!\\(\\*StyleBox[\\\"alphabet\\\", \\\"TI\
\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"MorphismAdjacencyMatrix", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`rules", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"_String", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringLength", "[", "#1", "]"}], "\[Equal]", 
                    "1"}], "&"}], ")"}]}], "\[Rule]", "_String"}], ")"}], 
                    ".."}], "}"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`alphabetorder", ":", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"__String", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringLength", "[", "#1", "]"}], "\[Equal]", 
                    "1"}], "&"}], ")"}]}], "}"}], "|", "Automatic"}], ":", 
                    "Automatic"}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`alphabet", ",", 
                    "IntegerSequences`Private`alphabetpositionindex", ",", 
                    "IntegerSequences`Private`sparsearrayrules", ",", 
                    "IntegerSequences`Private`failed"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`failed", "=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"DuplicateFreeQ", "[", 
                    RowBox[{"First", "/@", "IntegerSequences`Private`rules"}],
                     "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"MorphismAdjacencyMatrix", "::", "left"}], 
                    "MessageName"], ",", "IntegerSequences`Private`rules"}], 
                    "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ";", 
                    RowBox[{"IntegerSequences`Private`alphabet", "=", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "ListQ", "[", "IntegerSequences`Private`alphabetorder", 
                    "]"}], ",", "IntegerSequences`Private`alphabetorder", ",", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"First", "/@", "IntegerSequences`Private`rules"}],
                     ",", 
                    RowBox[{"Join", "@@", 
                    RowBox[{"Characters", "/@", 
                    RowBox[{
                    "Last", "/@", "IntegerSequences`Private`rules"}]}]}]}], 
                    "]"}], "]"}]}], "]"}]}], ";", 
                    RowBox[{
                    "IntegerSequences`Private`alphabetpositionindex", "=", 
                    RowBox[{"First", "/@", 
                    RowBox[{
                    "PositionIndex", "[", "IntegerSequences`Private`alphabet",
                     "]"}]}]}], ";", 
                    RowBox[{"IntegerSequences`Private`sparsearrayrules", "=", 
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`rule", ",", 
                    "IntegerSequences`Private`position"}], "}"}], ",", 
                    RowBox[{"KeyValueMap", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`letter", ",", 
                    "IntegerSequences`Private`count"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "First", "[", "IntegerSequences`Private`position", "]"}], 
                    ",", 
                    RowBox[{"Lookup", "[", 
                    RowBox[{
                    "IntegerSequences`Private`alphabetpositionindex", ",", 
                    "IntegerSequences`Private`letter", ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"MorphismAdjacencyMatrix", "::", "alph"}], 
                    "MessageName"], ",", "IntegerSequences`Private`letter", 
                    ",", "IntegerSequences`Private`alphabet"}], "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}]}], "}"}], 
                    "\[Rule]", "IntegerSequences`Private`count"}]}], "]"}], 
                    ",", 
                    RowBox[{"CharacterCounts", "[", 
                    RowBox[{
                    "Last", "[", "IntegerSequences`Private`rule", "]"}], 
                    "]"}]}], "]"}]}], "]"}], ",", 
                    RowBox[{"Join", "[", 
                    RowBox[{"IntegerSequences`Private`rules", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#1", "\[Rule]", "#1"}], "&"}], ")"}], "/@", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{"IntegerSequences`Private`alphabet", ",", 
                    RowBox[{"Alternatives", "@@", 
                    RowBox[{
                    "First", "/@", "IntegerSequences`Private`rules"}]}]}], 
                    "]"}]}]}], "]"}]}], "]"}]}], ";", "False"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"SparseArray", "[", 
                    RowBox[{
                    RowBox[{
                    "Join", "@@", 
                    "IntegerSequences`Private`sparsearrayrules"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`alphabet", "]"}],
                     ",", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`alphabet", 
                    "]"}]}], "}"}]}], "]"}], "/;", 
                    RowBox[{"!", "IntegerSequences`Private`failed"}]}]}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"MorphismAdjacencyMatrix", "[", 
                    RowBox[{
                    RowBox[{"SubstitutionSystem", "[", 
                    RowBox[{"IntegerSequences`Private`rules", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"_String", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringLength", "[", "#1", "]"}], "\[Equal]", 
                    "1"}], "&"}], ")"}]}], "\[Rule]", "_String"}], ")"}], 
                    ".."}], "}"}]}], "]"}], ",", 
                    RowBox[{"IntegerSequences`Private`alphabetorder", ":", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"__String", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringLength", "[", "#1", "]"}], "\[Equal]", 
                    "1"}], "&"}], ")"}]}], "}"}], "|", "Automatic"}], ":", 
                    "Automatic"}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`matrix", "=", 
                    RowBox[{"MorphismAdjacencyMatrix", "[", 
                    RowBox[{
                    "IntegerSequences`Private`rules", ",", 
                    "IntegerSequences`Private`alphabetorder"}], "]"}]}], 
                    "}"}], ",", 
                    RowBox[{"IntegerSequences`Private`matrix", "/;", 
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`matrix", ",", 
                    "_MorphismAdjacencyMatrix"}], "]"}]}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"MorphismAdjacencyMatrix", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`rules", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Except", "[", "_List", "]"}], "\[Rule]", 
                    "_List"}], ")"}], ".."}], "}"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`alphabetorder", ":", 
                    RowBox[{"_List", "|", "Automatic"}], ":", "Automatic"}]}],
                     "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`alphabet", ",", 
                    "IntegerSequences`Private`alphabetpositionindex", ",", 
                    "IntegerSequences`Private`sparsearrayrules", ",", 
                    "IntegerSequences`Private`failed"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`failed", "=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"DuplicateFreeQ", "[", 
                    RowBox[{"First", "/@", "IntegerSequences`Private`rules"}],
                     "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"MorphismAdjacencyMatrix", "::", "left"}], 
                    "MessageName"], ",", "IntegerSequences`Private`rules"}], 
                    "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ";", 
                    RowBox[{"IntegerSequences`Private`alphabet", "=", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    "ListQ", "[", "IntegerSequences`Private`alphabetorder", 
                    "]"}], ",", "IntegerSequences`Private`alphabetorder", ",", 
                    RowBox[{"DeleteDuplicates", "[", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"First", "/@", "IntegerSequences`Private`rules"}],
                     ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{"Last", "/@", "IntegerSequences`Private`rules"}], 
                    "]"}]}], "]"}], "]"}]}], "]"}]}], ";", 
                    RowBox[{
                    "IntegerSequences`Private`alphabetpositionindex", "=", 
                    RowBox[{"First", "/@", 
                    RowBox[{
                    "PositionIndex", "[", "IntegerSequences`Private`alphabet",
                     "]"}]}]}], ";", 
                    RowBox[{"IntegerSequences`Private`sparsearrayrules", "=", 
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`rule", ",", 
                    "IntegerSequences`Private`position"}], "}"}], ",", 
                    RowBox[{"KeyValueMap", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`letter", ",", 
                    "IntegerSequences`Private`count"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "First", "[", "IntegerSequences`Private`position", "]"}], 
                    ",", 
                    RowBox[{"Lookup", "[", 
                    RowBox[{
                    "IntegerSequences`Private`alphabetpositionindex", ",", 
                    "IntegerSequences`Private`letter", ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"MorphismAdjacencyMatrix", "::", "alph"}], 
                    "MessageName"], ",", "IntegerSequences`Private`letter", 
                    ",", "IntegerSequences`Private`alphabet"}], "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}]}], "}"}], 
                    "\[Rule]", "IntegerSequences`Private`count"}]}], "]"}], 
                    ",", 
                    RowBox[{"Counts", "[", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    "Last", "[", "IntegerSequences`Private`rule", "]"}], 
                    "]"}], "]"}]}], "]"}]}], "]"}], ",", 
                    RowBox[{"Join", "[", 
                    RowBox[{"IntegerSequences`Private`rules", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#1", "\[Rule]", 
                    RowBox[{"{", "#1", "}"}]}], "&"}], ")"}], "/@", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{"IntegerSequences`Private`alphabet", ",", 
                    RowBox[{"Alternatives", "@@", 
                    RowBox[{
                    "First", "/@", "IntegerSequences`Private`rules"}]}]}], 
                    "]"}]}]}], "]"}]}], "]"}]}], ";", "False"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"SparseArray", "[", 
                    RowBox[{
                    RowBox[{
                    "Join", "@@", 
                    "IntegerSequences`Private`sparsearrayrules"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`alphabet", "]"}],
                     ",", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`alphabet", 
                    "]"}]}], "}"}]}], "]"}], "/;", 
                    RowBox[{"!", "IntegerSequences`Private`failed"}]}]}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"MorphismAdjacencyMatrix", "[", 
                    RowBox[{
                    RowBox[{"SubstitutionSystem", "[", 
                    RowBox[{"IntegerSequences`Private`rules", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Except", "[", "_List", "]"}], "\[Rule]", 
                    "_List"}], ")"}], ".."}], "}"}]}], "]"}], ",", 
                    RowBox[{"IntegerSequences`Private`alphabetorder", ":", 
                    RowBox[{"_List", "|", "Automatic"}], ":", "Automatic"}]}],
                     "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`matrix", "=", 
                    RowBox[{"MorphismAdjacencyMatrix", "[", 
                    RowBox[{
                    "IntegerSequences`Private`rules", ",", 
                    "IntegerSequences`Private`alphabetorder"}], "]"}]}], 
                    "}"}], ",", 
                    RowBox[{"IntegerSequences`Private`matrix", "/;", 
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`matrix", ",", 
                    "_MorphismAdjacencyMatrix"}], "]"}]}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "MorphismAdjacencyMatrix", 
                    "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_."}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`MorphismAdjacencyMatrix] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Optional[
                    Blank[]]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`MorphismAdjacencyMatrix\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"MorphismAdjacencyMatrix\\\"\
, \\\"[\\\", \\\"\\\\\\\"\\\\[Phi]\\\\\\\"\\\", \\\"]\\\"]]\\) gives the \
letter\[Dash]letter adjacency matrix of the morphism \
\\!\\(\\*\\\"\\\\\\\"\\\\[Phi]\\\\\\\"\\\"\\).\\n\\!\\(\\*RowBox[List[\\\"\
MorphismAdjacencyMatrix\\\", \\\"[\\\", RowBox[List[\\\"\\\\\\\"\\\\[Phi]\\\\\
\\\"\\\", \\\",\\\", StyleBox[\\\"alphabet\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) \
uses the letter order specified by \\!\\(\\*StyleBox[\\\"alphabet\\\", \\\"TI\
\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"MorphismAdjacencyMatrix\", \"[\", \
\"\\\"\\[Phi]\\\"\", \"]\"]]\) gives the letter\[Dash]letter adjacency matrix \
of the morphism \!\(\*\"\\\"\\[Phi]\\\"\"\).\n\
\!\(\*RowBox[List[\"MorphismAdjacencyMatrix\", \"[\", \
RowBox[List[\"\\\"\\[Phi]\\\"\", \",\", StyleBox[\"alphabet\", \"TI\"]]], \"]\
\"]]\) uses the letter order specified by \!\(\*StyleBox[\"alphabet\", \
\"TI\"]\).", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None,
     "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`MorphismAdjacencyMatrix, {
      IntegerSequences`MorphismAdjacencyMatrix[
         Pattern[IntegerSequences`Private`rules, {
           Repeated[PatternTest[
              Blank[String], StringLength[#] == 1& ] -> Blank[String]]}], 
         Optional[
          Pattern[IntegerSequences`Private`alphabetorder, 
           Alternatives[{
             PatternTest[
              BlankSequence[String], StringLength[#] == 1& ]}, Automatic]], 
          Automatic]] :> 
       Module[{IntegerSequences`Private`alphabet, 
          IntegerSequences`Private`alphabetpositionindex, 
          IntegerSequences`Private`sparsearrayrules, 
          IntegerSequences`Private`failed}, 
         IntegerSequences`Private`failed = Catch[If[
              Not[
               DuplicateFreeQ[
                Map[First, IntegerSequences`Private`rules]]], Message[
                MessageName[IntegerSequences`MorphismAdjacencyMatrix, "left"],
                 IntegerSequences`Private`rules]; Throw[True]]; 
            IntegerSequences`Private`alphabet = If[
               ListQ[IntegerSequences`Private`alphabetorder], 
               IntegerSequences`Private`alphabetorder, 
               DeleteDuplicates[
                Join[
                 Map[First, IntegerSequences`Private`rules], 
                 Apply[Join, 
                  Map[Characters, 
                   Map[Last, IntegerSequences`Private`rules]]]]]]; 
            IntegerSequences`Private`alphabetpositionindex = Map[First, 
               PositionIndex[IntegerSequences`Private`alphabet]]; 
            IntegerSequences`Private`sparsearrayrules = MapIndexed[
               
               Function[{
                IntegerSequences`Private`rule, 
                 IntegerSequences`Private`position}, 
                KeyValueMap[
                 
                 Function[{
                  IntegerSequences`Private`letter, 
                   IntegerSequences`Private`count}, {
                    First[IntegerSequences`Private`position], 
                    Lookup[
                    IntegerSequences`Private`alphabetpositionindex, 
                    IntegerSequences`Private`letter, Message[
                    MessageName[
                    IntegerSequences`MorphismAdjacencyMatrix, "alph"], 
                    IntegerSequences`Private`letter, 
                    IntegerSequences`Private`alphabet]; Throw[True]]} -> 
                  IntegerSequences`Private`count], 
                 CharacterCounts[
                  Last[IntegerSequences`Private`rule]]]], 
               Join[IntegerSequences`Private`rules, 
                Map[# -> #& , 
                 DeleteCases[IntegerSequences`Private`alphabet, 
                  Apply[Alternatives, 
                   Map[First, IntegerSequences`Private`rules]]]]]]; False]; 
         Condition[
           SparseArray[
            Apply[Join, IntegerSequences`Private`sparsearrayrules], {
             Length[IntegerSequences`Private`alphabet], 
             Length[IntegerSequences`Private`alphabet]}], 
           Not[IntegerSequences`Private`failed]]], 
       IntegerSequences`MorphismAdjacencyMatrix[
         SubstitutionSystem[
          Pattern[IntegerSequences`Private`rules, {
            Repeated[PatternTest[
               Blank[String], StringLength[#] == 1& ] -> Blank[String]]}]], 
         Optional[
          Pattern[IntegerSequences`Private`alphabetorder, 
           Alternatives[{
             PatternTest[
              BlankSequence[String], StringLength[#] == 1& ]}, Automatic]], 
          Automatic]] :> 
       With[{IntegerSequences`Private`matrix = 
          IntegerSequences`MorphismAdjacencyMatrix[
           IntegerSequences`Private`rules, 
            IntegerSequences`Private`alphabetorder]}, 
         Condition[IntegerSequences`Private`matrix, 
          Not[
           MatchQ[IntegerSequences`Private`matrix, 
            Blank[IntegerSequences`MorphismAdjacencyMatrix]]]]], 
       IntegerSequences`MorphismAdjacencyMatrix[
         Pattern[IntegerSequences`Private`rules, {
           Repeated[Except[
              Blank[List]] -> Blank[List]]}], 
         Optional[
          Pattern[IntegerSequences`Private`alphabetorder, 
           Alternatives[
            Blank[List], Automatic]], Automatic]] :> 
       Module[{IntegerSequences`Private`alphabet, 
          IntegerSequences`Private`alphabetpositionindex, 
          IntegerSequences`Private`sparsearrayrules, 
          IntegerSequences`Private`failed}, 
         IntegerSequences`Private`failed = Catch[If[
              Not[
               DuplicateFreeQ[
                Map[First, IntegerSequences`Private`rules]]], Message[
                MessageName[IntegerSequences`MorphismAdjacencyMatrix, "left"],
                 IntegerSequences`Private`rules]; Throw[True]]; 
            IntegerSequences`Private`alphabet = If[
               ListQ[IntegerSequences`Private`alphabetorder], 
               IntegerSequences`Private`alphabetorder, 
               DeleteDuplicates[
                Join[
                 Map[First, IntegerSequences`Private`rules], 
                 Flatten[
                  Map[Last, IntegerSequences`Private`rules]]]]]; 
            IntegerSequences`Private`alphabetpositionindex = Map[First, 
               PositionIndex[IntegerSequences`Private`alphabet]]; 
            IntegerSequences`Private`sparsearrayrules = MapIndexed[
               
               Function[{
                IntegerSequences`Private`rule, 
                 IntegerSequences`Private`position}, 
                KeyValueMap[
                 
                 Function[{
                  IntegerSequences`Private`letter, 
                   IntegerSequences`Private`count}, {
                    First[IntegerSequences`Private`position], 
                    Lookup[
                    IntegerSequences`Private`alphabetpositionindex, 
                    IntegerSequences`Private`letter, Message[
                    MessageName[
                    IntegerSequences`MorphismAdjacencyMatrix, "alph"], 
                    IntegerSequences`Private`letter, 
                    IntegerSequences`Private`alphabet]; Throw[True]]} -> 
                  IntegerSequences`Private`count], 
                 Counts[
                  Flatten[
                   Last[IntegerSequences`Private`rule]]]]], 
               Join[IntegerSequences`Private`rules, 
                Map[# -> {#}& , 
                 DeleteCases[IntegerSequences`Private`alphabet, 
                  Apply[Alternatives, 
                   Map[First, IntegerSequences`Private`rules]]]]]]; False]; 
         Condition[
           SparseArray[
            Apply[Join, IntegerSequences`Private`sparsearrayrules], {
             Length[IntegerSequences`Private`alphabet], 
             Length[IntegerSequences`Private`alphabet]}], 
           Not[IntegerSequences`Private`failed]]], 
       IntegerSequences`MorphismAdjacencyMatrix[
         SubstitutionSystem[
          Pattern[IntegerSequences`Private`rules, {
            Repeated[Except[
               Blank[List]] -> Blank[List]]}]], 
         Optional[
          Pattern[IntegerSequences`Private`alphabetorder, 
           Alternatives[
            Blank[List], Automatic]], Automatic]] :> 
       With[{IntegerSequences`Private`matrix = 
          IntegerSequences`MorphismAdjacencyMatrix[
           IntegerSequences`Private`rules, 
            IntegerSequences`Private`alphabetorder]}, 
         Condition[IntegerSequences`Private`matrix, 
          Not[
           MatchQ[IntegerSequences`Private`matrix, 
            Blank[IntegerSequences`MorphismAdjacencyMatrix]]]]]}], 
    "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`MorphismAdjacencyMatrix, {
      SyntaxInformation[IntegerSequences`MorphismAdjacencyMatrix] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           Optional[
            Blank[]]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`MorphismAdjacencyMatrix"], False]]], "Output",Expression\
UUID->"0ead1ef3-0525-49d9-b873-35f41bde958e"]
}, Open  ]],

Cell["\<\
The adjacency matrix counts occurrences of each letter in the image of each \
letter.\
\>", "Text",ExpressionUUID->"5e4db500-780c-48fc-a9c8-db4207f967d3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"m", "=", 
  RowBox[{"MorphismAdjacencyMatrix", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<ab\>\""}], ",", 
     RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<cc\>\""}], ",", 
     RowBox[{"\"\<c\>\"", "\[Rule]", "\"\<ab\>\""}]}], "}"}], 
   "]"}]}]], "Input",ExpressionUUID->"bbc4ab6f-e387-48be-b64c-e13a693d0580"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["SparseArray",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{{0.282325, 0.661868, 0.973082}, {0.282325, 0.661868, 
              0.973082}, {0.235431, 0.32765, 0.833291}}, {{0.235431, 0.32765, 
              0.833291}, {0.235431, 0.32765, 0.833291}, {0.772061, 0.92462, 
              0.998703}}, {{0.282325, 0.661868, 0.973082}, {0.282325, 
              0.661868, 0.973082}, {0.235431, 0.32765, 0.833291}}}, {{0, 0}, {
              3, 3}}, {0, 1}], AspectRatio -> 1, Axes -> False, Frame -> 
             False, FrameLabel -> {None, None}, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["5", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             RasterBox[{{{0.282325, 0.661868, 0.973082}, {0.282325, 0.661868, 
              0.973082}, {0.235431, 0.32765, 0.833291}}, {{0.235431, 0.32765, 
              0.833291}, {0.235431, 0.32765, 0.833291}, {0.772061, 0.92462, 
              0.998703}}, {{0.282325, 0.661868, 0.973082}, {0.282325, 
              0.661868, 0.973082}, {0.235431, 0.32765, 0.833291}}}, {{0, 0}, {
              3, 3}}, {0, 1}], AspectRatio -> 1, Axes -> False, Frame -> 
             False, FrameLabel -> {None, None}, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], 
             Method -> {
              "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
               Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["5", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0.5555555555555556`", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"\"", "SummaryItem"]}]}, {
               TagBox[
                TagBox[
                 GridBox[{{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "1", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "1", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "3"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "2", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"3", ",", "2"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "1", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"3", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "1", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  SparseArray[
  Automatic, {3, 3}, 0, {
   1, {{0, 2, 3, 5}, {{2}, {1}, {3}, {2}, {1}}}, {1, 1, 2, 1, 1}}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",ExpressionUUID->"d5d3fb75-e448-4a11-88e6-\
949a257b0bd6"]
}, Open  ]],

Cell[TextData[{
 "Use ",
 StyleBox["Normal", "Input"],
 " to convert a sparse array to a list of lists:"
}], "Text",ExpressionUUID->"50c94659-2097-4dac-94d3-eda1236243f8"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Normal", "[", "m", "]"}], "\[IndentingNewLine]", 
 RowBox[{"%", "//", "MatrixForm"}]}], "Input",ExpressionUUID->"41a9adbc-19ab-\
46f2-a602-f00ef547ed70"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "0", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "0"}], "}"}]}], "}"}]], "Output",ExpressionUUI\
D->"fd08ca6c-b35e-4497-ba20-e40afb9e26ad"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "1", "0"},
     {"0", "0", "2"},
     {"1", "1", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",ExpressionUUID->"061eb6ce-d401-46bc-\
95d5-3435dfdaa817"]
}, Open  ]],

Cell["\<\
The transpose of the adjacency matrix is sometimes called the \
\[OpenCurlyDoubleQuote]incidence matrix\[CloseCurlyDoubleQuote] in the \
literature.\
\>", "Text",ExpressionUUID->"9769a820-d680-4c7b-bb22-e37b64955625"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Transpose", "[", "m", "]"}], "//", "MatrixForm"}]], "Input",Express\
ionUUID->"eca936de-f05c-42ff-8b90-f307ce44cf6f"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "0", "1"},
     {"1", "0", "1"},
     {"0", "2", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[
   SparseArray[
    Automatic, {3, 3}, 0, {
     1, {{0, 2, 4, 5}, {{1}, {3}, {1}, {3}, {2}}}, {1, 1, 1, 1, 
      2}}]]]]], "Output",ExpressionUUID->"e88800f3-9266-45ef-8d21-\
16479300e138"]
}, Open  ]],

Cell[TextData[{
 "If the letter frequencies in a fixed point of a morphism exist, then they \
are given by the entries of an eigenvector of the transpose of its adjacency \
matrix.  In particular, they are the entries of the eigenvector corresponding \
to the dominant eigenvalue, normalized so that the entries sum to ",
 Cell[BoxData[
  FormBox["1", TraditionalForm]],ExpressionUUID->
  "fa20a388-4f17-4392-80af-5f09a6f8e021"],
 ":"
}], "Text",ExpressionUUID->"5ef99266-a624-4416-ac8d-ae1bfe126dd8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Normalize", "[", 
  RowBox[{
   RowBox[{"First", "[", 
    RowBox[{"Eigenvectors", "[", 
     RowBox[{
      RowBox[{"Transpose", "[", "m", "]"}], ",", "1"}], "]"}], "]"}], ",", 
   "Total"}], "]"}]], "Input",ExpressionUUID->"e501b8c7-3a25-47d7-81d3-\
92379c58d2a3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["1", "3"], ",", 
   FractionBox["1", "3"], ",", 
   FractionBox["1", "3"]}], "}"}]], "Output",ExpressionUUID->"109110db-2810-\
4a7e-ae4e-520ae56ba408"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"CharacterCounts", "[", 
  RowBox[{"SubstitutionSystem", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<ab\>\""}], ",", 
      RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<cc\>\""}], ",", 
      RowBox[{"\"\<c\>\"", "\[Rule]", "\"\<ab\>\""}]}], "}"}], ",", 
    "\"\<a\>\"", ",", 
    RowBox[{"{", 
     RowBox[{"{", "20", "}"}], "}"}]}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"N", "[", 
  FractionBox["%", 
   RowBox[{"Total", "[", "%", "]"}]], "]"}]}], "Input",ExpressionUUID->\
"94d9f6cb-256a-42d0-b737-55601436ba60"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"c\"\>", "\[Rule]", "349526"}], ",", 
   RowBox[{"\<\"b\"\>", "\[Rule]", "349525"}], ",", 
   RowBox[{"\<\"a\"\>", "\[Rule]", "349525"}]}], 
  "\[RightAssociation]"}]], "Output",ExpressionUUID->"45df96be-ffca-4002-a7d8-\
1454aa23dc0c"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"c\"\>", "\[Rule]", "0.33333396911621094`"}], ",", 
   RowBox[{"\<\"b\"\>", "\[Rule]", "0.33333301544189453`"}], ",", 
   RowBox[{"\<\"a\"\>", "\[Rule]", "0.33333301544189453`"}]}], 
  "\[RightAssociation]"}]], "Output",ExpressionUUID->"1fa0604f-161f-47f2-89cd-\
dbd64eb1dd76"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", "m", "]"}]], "Input",ExpressionUUID->"3198201b-40d3-4e2a-9796-f5a81fc6cdc3"],

Cell["Specify a different alphabet order:", "Text",ExpressionUUID->"d5a6784a-f87b-44df-ac34-d1c1875bc00b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"MorphismAdjacencyMatrix", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<ab\>\""}], ",", 
      RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<cc\>\""}], ",", 
      RowBox[{"\"\<c\>\"", "\[Rule]", "\"\<ab\>\""}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<c\>\"", ",", "\"\<a\>\"", ",", "\"\<b\>\""}], "}"}]}], 
   "]"}], "//", "MatrixForm"}]], "Input",ExpressionUUID->"0cc85ba6-146f-4bb1-\
bf3a-800d5606eb0b"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"0", "1", "1"},
     {"2", "0", "0"},
     {"0", "1", "1"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[
   SparseArray[
    Automatic, {3, 3}, 0, {
     1, {{0, 2, 3, 5}, {{3}, {2}, {1}, {3}, {2}}}, {1, 1, 2, 1, 
      1}}]]]]], "Output",ExpressionUUID->"7dd3307c-7efb-438d-87f8-\
f01652b148b5"]
}, Open  ]],

Cell[TextData[{
 StyleBox["MorphismAdjacencyMatrix", "Input"],
 " works on morphisms represented by lists:"
}], "Text",ExpressionUUID->"9417b6eb-5ef5-43a5-bc98-20a5c7c00883"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"MorphismAdjacencyMatrix", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"0", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}]}], ",", 
     RowBox[{"1", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"2", ",", "2"}], "}"}]}], ",", 
     RowBox[{"2", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}]}]}], "}"}], "]"}], "//", 
  "MatrixForm"}]], "Input",ExpressionUUID->"42310979-cd93-4f2d-bc8e-\
e98383d17230"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "1", "0"},
     {"0", "0", "2"},
     {"1", "1", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[
   SparseArray[
    Automatic, {3, 3}, 0, {
     1, {{0, 2, 3, 5}, {{1}, {2}, {3}, {1}, {2}}}, {1, 1, 2, 1, 
      1}}]]]]], "Output",ExpressionUUID->"b48a97a7-4f28-46b7-9c21-\
3d792a0b77a1"]
}, Open  ]],

Cell[TextData[{
 StyleBox["MorphismAdjacencyMatrix", "Input"],
 " also works on higher-dimensional morphisms:"
}], "Text",ExpressionUUID->"50d593c9-54ed-4a31-91e0-4cff7ebc6f84"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"MorphismAdjacencyMatrix", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"0", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2", ",", "1"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"1", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "2"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"2", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}]}], "}"}]}]}], "}"}], "]"}], "//", 
  "MatrixForm"}]], "Input",ExpressionUUID->"fa153f17-9935-4315-8580-\
c94d1512f864"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "2", "1"},
     {"1", "0", "3"},
     {"1", "3", "0"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[
   SparseArray[
    Automatic, {3, 3}, 0, {
     1, {{0, 3, 5, 7}, {{1}, {2}, {3}, {3}, {1}, {1}, {2}}}, {1, 2, 1, 3, 1, 
      1, 3}}]]]]], "Output",ExpressionUUID->"da40e021-fcf0-409a-b971-\
be9c292ffebc"]
}, Open  ]],

Cell[TextData[{
 "This morphism does not specify an image for the letter ",
 Cell[BoxData[
  FormBox["c", TraditionalForm]],ExpressionUUID->
  "3d0272cc-0696-4c66-8092-5108c958076e"],
 ":"
}], "Text",ExpressionUUID->"469ac06e-50a3-43eb-87f2-8fec10f4a6e6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"MorphismAdjacencyMatrix", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"a", ",", "b", ",", "b"}], "}"}]}], ",", 
     RowBox[{"b", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"a", ",", "b", ",", "c"}], "}"}]}]}], "}"}], "]"}], "//", 
  "MatrixForm"}]], "Input",ExpressionUUID->"0c000267-d189-4fff-9ec5-\
e3d48b9aa0a4"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "2", "0"},
     {"1", "1", "1"},
     {"0", "0", "1"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[
   SparseArray[
    Automatic, {3, 3}, 0, {
     1, {{0, 2, 5, 6}, {{1}, {2}, {1}, {2}, {3}, {3}}}, {1, 2, 1, 1, 1, 
      1}}]]]]], "Output",ExpressionUUID->"dff4fb47-0c03-49fd-b849-\
67b1d182a04a"]
}, Open  ]],

Cell[TextData[{
 "Therefore ",
 Cell[BoxData[
  FormBox["c", TraditionalForm]],ExpressionUUID->
  "ff716cef-b4d9-41fc-a0c1-a6a8246f9a05"],
 " is not replaced by the morphism and is its own image."
}], "Text",ExpressionUUID->"f751e4e1-23d2-4de5-ad80-9725971b5c87"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["MorphismPower", "Input"]], "Subsubsection",ExpressionUUID->"26931785-5df9-420e-b30d-30186e437c7e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MorphismPower"}]], "Input",ExpressionUUID->"0d46bc55-728d-4b20-8e51-328b34020884"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"MorphismPower\\\", \\\"[\\\
\", RowBox[List[\\\"\\\\\\\"\\\\[Phi]\\\\\\\"\\\", \\\",\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) gives the \
\\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\)th power of the morphism \\!\\(\\*\
\\\"\\\\\\\"\\\\[Phi]\\\\\\\"\\\"\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"MorphismPower", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`rules", ":", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"_String", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringLength", "[", "#1", "]"}], "\[Equal]", 
                    "1"}], "&"}], ")"}]}], "\[Rule]", "_String"}], ")"}], 
                    ".."}], "}"}], "|", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Except", "[", "_List", "]"}], "\[Rule]", 
                    "_List"}], ")"}], ".."}], "}"}]}]}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`n_Integer", "?", 
                    "NonNegative"}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`failed", "=", 
                    RowBox[{"!", 
                    RowBox[{"DuplicateFreeQ", "[", 
                    RowBox[{"First", "/@", "IntegerSequences`Private`rules"}],
                     "]"}]}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{"IntegerSequences`Private`failed", ",", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"MorphismPower", "::", "left"}], "MessageName"], 
                    ",", "IntegerSequences`Private`rules"}], "]"}]}], "]"}], 
                    ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"First", "[", "#1", "]"}], "\[Rule]", 
                    RowBox[{"SubstitutionSystem", "[", 
                    RowBox[{"IntegerSequences`Private`rules", ",", 
                    RowBox[{"First", "[", "#1", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"{", "IntegerSequences`Private`n", "}"}], "}"}]}],
                     "]"}]}], "&"}], ")"}], "/@", 
                    "IntegerSequences`Private`rules"}], "/;", 
                    RowBox[{"!", "IntegerSequences`Private`failed"}]}]}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"MorphismPower", "[", 
                    RowBox[{
                    RowBox[{"SubstitutionSystem", "[", 
                    RowBox[{"IntegerSequences`Private`rules", ":", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"_String", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"StringLength", "[", "#1", "]"}], "\[Equal]", 
                    "1"}], "&"}], ")"}]}], "\[Rule]", "_String"}], ")"}], 
                    ".."}], "}"}], "|", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Except", "[", "_List", "]"}], "\[Rule]", 
                    "_List"}], ")"}], ".."}], "}"}]}]}], "]"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`n_Integer", "?", 
                    "NonNegative"}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`morphism", "=", 
                    RowBox[{"MorphismPower", "[", 
                    RowBox[{
                    "IntegerSequences`Private`rules", ",", 
                    "IntegerSequences`Private`n"}], "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "SubstitutionSystem", "[", 
                    "IntegerSequences`Private`morphism", "]"}], "/;", 
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`morphism", ",", 
                    "_MorphismPower"}], "]"}]}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "MorphismPower", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_"}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`MorphismPower] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`MorphismPower\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"MorphismPower\\\", \\\"[\\\
\", RowBox[List[\\\"\\\\\\\"\\\\[Phi]\\\\\\\"\\\", \\\",\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) gives the \
\\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\)th power of the morphism \\!\\(\\*\
\\\"\\\\\\\"\\\\[Phi]\\\\\\\"\\\"\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"MorphismPower\", \"[\", \
RowBox[List[\"\\\"\\[Phi]\\\"\", \",\", StyleBox[\"n\", \"TI\"]]], \"]\"]]\) \
gives the \!\(\*StyleBox[\"n\", \"TI\"]\)th power of the morphism \
\!\(\*\"\\\"\\[Phi]\\\"\"\).", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`MorphismPower, {
      IntegerSequences`MorphismPower[
         Pattern[IntegerSequences`Private`rules, 
          Alternatives[{
            Repeated[PatternTest[
               Blank[String], StringLength[#] == 1& ] -> Blank[String]]}, {
            Repeated[Except[
               Blank[List]] -> Blank[List]]}]], 
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[Integer]], NonNegative]] :> 
       With[{IntegerSequences`Private`failed = Not[
            DuplicateFreeQ[
             Map[First, IntegerSequences`Private`rules]]]}, 
         If[IntegerSequences`Private`failed, 
           Message[
            MessageName[IntegerSequences`MorphismPower, "left"], 
            IntegerSequences`Private`rules]]; Condition[
           Map[First[#] -> SubstitutionSystem[IntegerSequences`Private`rules, 
              First[#], {{IntegerSequences`Private`n}}]& , 
            IntegerSequences`Private`rules], 
           Not[IntegerSequences`Private`failed]]], 
       IntegerSequences`MorphismPower[
         SubstitutionSystem[
          Pattern[IntegerSequences`Private`rules, 
           Alternatives[{
             Repeated[PatternTest[
                Blank[String], StringLength[#] == 1& ] -> Blank[String]]}, {
             Repeated[Except[
                Blank[List]] -> Blank[List]]}]]], 
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[Integer]], NonNegative]] :> 
       With[{IntegerSequences`Private`morphism = 
          IntegerSequences`MorphismPower[
           IntegerSequences`Private`rules, IntegerSequences`Private`n]}, 
         Condition[
          SubstitutionSystem[IntegerSequences`Private`morphism], 
          Not[
           MatchQ[IntegerSequences`Private`morphism, 
            Blank[IntegerSequences`MorphismPower]]]]]}], "SubValues" -> None, 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`MorphismPower, {
      SyntaxInformation[IntegerSequences`MorphismPower] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`MorphismPower"], False]]], "Output",ExpressionUUID->\
"eb857219-fe00-4ee5-9b7b-c7c21872a2d9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MorphismPower", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<ab\>\""}], ",", 
     RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<cd\>\""}], ",", 
     RowBox[{"\"\<c\>\"", "\[Rule]", "\"\<ac\>\""}], ",", 
     RowBox[{"\"\<d\>\"", "\[Rule]", "\"\<da\>\""}]}], "}"}], ",", "3"}], 
  "]"}]], "Input",ExpressionUUID->"4fea25f5-8091-42a9-b002-b0b29adbe629"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"a\"\>", "\[Rule]", "\<\"abcdacda\"\>"}], ",", 
   RowBox[{"\<\"b\"\>", "\[Rule]", "\<\"abacdaab\"\>"}], ",", 
   RowBox[{"\<\"c\"\>", "\[Rule]", "\<\"abcdabac\"\>"}], ",", 
   RowBox[{"\<\"d\"\>", "\[Rule]", "\<\"daababcd\"\>"}]}], "}"}]], "Output",Ex\
pressionUUID->"32777d7d-5701-4bae-b813-007320f28d66"]
}, Open  ]],

Cell[TextData[{
 StyleBox["MorphismPower", "Input"],
 " works on morphisms represented by lists:"
}], "Text",ExpressionUUID->"5d8561d9-9c05-415b-b495-4a4cc0600b38"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MorphismPower", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"0", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}]}], ",", 
     RowBox[{"1", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"2", ",", "2"}], "}"}]}], ",", 
     RowBox[{"2", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}]}]}], "}"}], ",", "3"}], "]"}]], "Input",\
ExpressionUUID->"25159341-cdf2-4856-91e4-e816340afe2c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"0", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "1", ",", "2", ",", "2", ",", "0", ",", "1", ",", "0", ",", 
      "1"}], "}"}]}], ",", 
   RowBox[{"1", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "1", ",", "2", ",", "2", ",", "0", ",", "1", ",", "2", ",", 
      "2"}], "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "0", ",", "1", ",", "2", ",", "2", ",", "0", ",", "1", ",", "0", ",", 
      "1"}], "}"}]}]}], "}"}]], "Output",ExpressionUUID->"57273d69-9574-42d5-\
a56c-99607ded0162"]
}, Open  ]],

Cell[TextData[{
 StyleBox["MorphismPower", "Input"],
 " also works on higher-dimensional morphisms:"
}], "Text",ExpressionUUID->"e8d245de-0a1e-49dd-84f5-210d13c5db80"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MorphismPower", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"0", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"2", ",", "1"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"1", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"2", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "2"}], "}"}]}], "}"}]}], ",", 
     RowBox[{"2", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}]}], "}"}]}]}], "}"}], ",", "2"}], 
  "]"}]], "Input",ExpressionUUID->"dbebb16d-2133-40ef-89fc-6115416c7dbb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"0", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "2", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "0", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "2", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1", ",", "0", ",", "2"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"1", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "1", ",", "1"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"2", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "1", ",", "2", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "1", ",", "0", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"2", ",", "2", ",", "2", ",", "2"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "2", ",", "0", ",", "2"}], "}"}]}], "}"}]}]}], 
  "}"}]], "Output",ExpressionUUID->"c0f4d2f7-3707-42e4-8af5-4ffa24a60d70"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["MotzkinNumber", "Input"]], "Subsubsection",ExpressionUUID->"c399e241-5643-43b3-a8a3-49246ae7ab36"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "MotzkinNumber"}]], "Input",ExpressionUUID->"3b1d649d-29d3-4f04-882c-67aa94399f50"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"MotzkinNumber\\\", \\\"[\\\
\", StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the \
\\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\)th Motzkin number \
\\!\\(\\*SubscriptBox[StyleBox[\\\"M\\\", \\\"TI\\\"], StyleBox[\\\"n\\\", \\\
\"TI\\\"]]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"MotzkinNumber", "[", 
                    RowBox[{"-", "1"}], "]"}], "=", "1"}]},
                    {
                    RowBox[{
                    RowBox[{"MotzkinNumber", "[", 
                    RowBox[{
                    "IntegerSequences`Private`n_Integer", "?", 
                    "NonNegative"}], "]"}], ":=", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    RowBox[{
                    "DownValues", "[", "IntegerSequences`Private`MN", "]"}], 
                    ",", 
                    RowBox[{"_", "[", 
                    RowBox[{
                    RowBox[{"_", "[", 
                    RowBox[{
                    RowBox[{
                    "HoldPattern", "[", "IntegerSequences`Private`MN", "]"}], 
                    "[", 
                    RowBox[{"IntegerSequences`Private`n", "-", "2"}], "]"}], 
                    "]"}], ",", "_"}], "]"}]}], "]"}], "&&", 
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    RowBox[{
                    "DownValues", "[", "IntegerSequences`Private`MN", "]"}], 
                    ",", 
                    RowBox[{"_", "[", 
                    RowBox[{
                    RowBox[{"_", "[", 
                    RowBox[{
                    RowBox[{
                    "HoldPattern", "[", "IntegerSequences`Private`MN", "]"}], 
                    "[", 
                    RowBox[{"IntegerSequences`Private`n", "-", "1"}], "]"}], 
                    "]"}], ",", "_"}], "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`MN", "[", 
                    "IntegerSequences`Private`n", "]"}], ",", 
                    RowBox[{"Hypergeometric2F1", "[", 
                    RowBox[{
                    FractionBox[
                    RowBox[{"1", "-", "IntegerSequences`Private`n"}], "2"], 
                    ",", 
                    RowBox[{"-", 
                    FractionBox["IntegerSequences`Private`n", "2"]}], ",", 
                    "2", ",", "4"}], "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"MotzkinNumber", "[", 
                    RowBox[{"IntegerSequences`Private`x_", "?", "NumericQ"}], 
                    "]"}], ":=", 
                    FractionBox[
                    RowBox[{"GegenbauerC", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`x", "+", "2"}], ",", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{"IntegerSequences`Private`x", "+", "1"}], ")"}]}],
                     ",", 
                    RowBox[{"-", 
                    FractionBox["1", "2"]}]}], "]"}], 
                    RowBox[{"IntegerSequences`Private`x", "+", "1"}]]}]},
                    {
                    RowBox[{
                    RowBox[{"MotzkinNumber", "[", 
                    RowBox[{"IntegerSequences`Private`n_", ",", 
                    RowBox[{"Import", "\[Rule]", "True"}]}], "]"}], ":=", 
                    RowBox[{"Import", "[", 
                    RowBox[{"FileNameJoin", "[", 
                    RowBox[{"{", 
                    RowBox[{"$MotzkinNumberDirectory", ",", 
                    RowBox[{"\<\"M(\"\>", "<>", 
                    RowBox[{
                    "ToString", "[", "IntegerSequences`Private`n", "]"}], 
                    "<>", "\<\").m\"\>"}]}], "}"}], "]"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"MotzkinNumber", "[", 
                    RowBox[{"IntegerSequences`Private`n_", ",", 
                    RowBox[{"Import", "\[Rule]", "False"}]}], "]"}], ":=", 
                    RowBox[{
                    "MotzkinNumber", "[", "IntegerSequences`Private`n", 
                    "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "MotzkinNumber", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`MotzkinNumber] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    OptionsPattern[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"Import", "\[Rule]", "False"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{
                    "Listable", ",", "NumericFunction", ",", "Protected"}], 
                    "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`MotzkinNumber\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"MotzkinNumber\\\", \\\"[\\\
\", StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the \
\\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\)th Motzkin number \
\\!\\(\\*SubscriptBox[StyleBox[\\\"M\\\", \\\"TI\\\"], StyleBox[\\\"n\\\", \\\
\"TI\\\"]]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"MotzkinNumber\", \"[\", StyleBox[\"n\", \"TI\"], \"]\
\"]]\) gives the \!\(\*StyleBox[\"n\", \"TI\"]\)th Motzkin number \
\!\(\*SubscriptBox[StyleBox[\"M\", \"TI\"], StyleBox[\"n\", \"TI\"]]\).", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`MotzkinNumber, {
      IntegerSequences`MotzkinNumber[-1] -> 1, IntegerSequences`MotzkinNumber[
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[Integer]], NonNegative]] :> If[
         And[
          MemberQ[
           DownValues[IntegerSequences`Private`MN], 
           Blank[][
            Blank[][
             HoldPattern[IntegerSequences`Private`MN][
             IntegerSequences`Private`n - 2]], 
            Blank[]]], 
          MemberQ[
           DownValues[IntegerSequences`Private`MN], 
           Blank[][
            Blank[][
             HoldPattern[IntegerSequences`Private`MN][
             IntegerSequences`Private`n - 1]], 
            Blank[]]]], 
         IntegerSequences`Private`MN[IntegerSequences`Private`n], 
         Hypergeometric2F1[(1 - IntegerSequences`Private`n)/2, -
          IntegerSequences`Private`n/2, 2, 4]], IntegerSequences`MotzkinNumber[
         PatternTest[
          Pattern[IntegerSequences`Private`x, 
           Blank[]], NumericQ]] :> 
       GegenbauerC[
         IntegerSequences`Private`x + 
          2, -(IntegerSequences`Private`x + 1), (-1)/2]/(
        IntegerSequences`Private`x + 1), IntegerSequences`MotzkinNumber[
         Pattern[IntegerSequences`Private`n, 
          Blank[]], Import -> True] :> Import[
         FileNameJoin[{IntegerSequences`$MotzkinNumberDirectory, 
           StringJoin["M(", 
            ToString[IntegerSequences`Private`n], ").m"]}]], 
       IntegerSequences`MotzkinNumber[
         Pattern[IntegerSequences`Private`n, 
          Blank[]], Import -> False] :> 
       IntegerSequences`MotzkinNumber[IntegerSequences`Private`n]}], 
    "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`MotzkinNumber, {
      SyntaxInformation[IntegerSequences`MotzkinNumber] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           OptionsPattern[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {Import -> False}, 
    "Attributes" -> {Listable, NumericFunction, Protected}, "FullName" -> 
    "IntegerSequences`MotzkinNumber"], False]]], "Output",ExpressionUUID->\
"1b26bd76-60d9-4d33-818c-fa972a5634e3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"MotzkinNumber", "[", "n", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "20"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"2c65f3b6-7a1a-4eba-b6d2-b87e29f38ab4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "2", ",", "4", ",", "9", ",", "21", ",", "51", ",", 
   "127", ",", "323", ",", "835", ",", "2188", ",", "5798", ",", "15511", ",",
    "41835", ",", "113634", ",", "310572", ",", "853467", ",", "2356779", ",",
    "6536382", ",", "18199284", ",", "50852019"}], "}"}]], "Output",Expression\
UUID->"506f422b-4761-42ef-ae5a-1f1d8f9ed630"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MotzkinNumber", "[", "100", "]"}]], "Input",ExpressionUUID->"664a1f5e-1cc3-48b3-b681-95cc88e5533d"],

Cell[BoxData["737415571391164350797051905752637361193303669"], "Output",ExpressionUUID->"e405c65c-0195-41df-9ce3-dea88c04e163"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MotzkinNumber", "[", "1.5", "]"}]], "Input",ExpressionUUID->"d8defd22-f380-49f3-af1e-6ac4968f0f1a"],

Cell[BoxData["2.84136674442202`"], "Output",ExpressionUUID->"e62e9647-1f8c-46fa-9888-b4a586610eae"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["OEISWebLookup", "Input"]], "Subsubsection",ExpressionUUID->"cf4c0eae-1ca8-4dc6-ac64-0175d26ae6f4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "OEISWebLookup"}]], "Input",ExpressionUUID->"f3fcdacd-a9f9-4ede-90d3-f351442b2f61"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"OEISWebLookup\\\", \\\"[\\\
\", RowBox[List[\\\"{\\\", RowBox[List[SubscriptBox[StyleBox[\\\"s\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"s\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"]]], \
\\\"}\\\"]], \\\"]\\\"]]\\) looks up terms of a sequence in The \
On\[Hyphen]Line Encyclopedia of Integer Sequences web \
search.\\n\\!\\(\\*RowBox[List[\\\"OEISWebLookup\\\", \\\"[\\\", \
StyleBox[\\\"\\\\\\\"\\\\!\\\\(\\\\*StyleBox[\\\\\\\"anum\\\\\\\",\\\\\\\"TI\\\
\\\\\"]\\\\)\\\\\\\"\\\", ShowStringCharacters->True], \\\"]\\\"]]\\) looks \
up a sequence by its A\[Hyphen]number.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"OEISWebLookup", "[", 
                    RowBox[{"IntegerSequences`Private`terms", ":", 
                    RowBox[{"{", "__Integer", "}"}]}], "]"}], ":=", 
                    RowBox[{"SystemOpen", "[", 
                    RowBox[{"URLBuild", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"https://oeis.org\"\>", 
                    ",", "\<\"search\"\>"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"\<\"q\"\>", "\[Rule]", 
                    RowBox[{"StringTake", "[", 
                    RowBox[{
                    RowBox[{
                    "ToString", "[", "IntegerSequences`Private`terms", "]"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", 
                    RowBox[{"-", "2"}]}], "}"}]}], "]"}]}], "}"}]}], "]"}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"OEISWebLookup", "[", 
                    RowBox[{"IntegerSequences`Private`anumber_String", "/;", 
                    RowBox[{"StringMatchQ", "[", 
                    RowBox[{"IntegerSequences`Private`anumber", ",", 
                    RowBox[{"\<\"A\"\>", "~~", 
                    RowBox[{"Repeated", "[", 
                    RowBox[{"DigitCharacter", ",", 
                    RowBox[{"{", "6", "}"}]}], "]"}]}]}], "]"}]}], "]"}], ":=", 
                    RowBox[{"SystemOpen", "[", 
                    RowBox[{"URLBuild", "[", 
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"https://oeis.org\"\>", ",", 
                    "IntegerSequences`Private`anumber"}], "}"}], "]"}], 
                    "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "OEISWebLookup", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`OEISWebLookup] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`OEISWebLookup\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"OEISWebLookup\\\", \\\"[\\\
\", RowBox[List[\\\"{\\\", RowBox[List[SubscriptBox[StyleBox[\\\"s\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"s\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"]]], \
\\\"}\\\"]], \\\"]\\\"]]\\) looks up terms of a sequence in The \
On\[Hyphen]Line Encyclopedia of Integer Sequences web \
search.\\n\\!\\(\\*RowBox[List[\\\"OEISWebLookup\\\", \\\"[\\\", \
StyleBox[\\\"\\\\\\\"\\\\!\\\\(\\\\*StyleBox[\\\\\\\"anum\\\\\\\",\\\\\\\"TI\\\
\\\\\"]\\\\)\\\\\\\"\\\", ShowStringCharacters->True], \\\"]\\\"]]\\) looks \
up a sequence by its A\[Hyphen]number.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"OEISWebLookup\", \"[\", RowBox[List[\"{\", \
RowBox[List[SubscriptBox[StyleBox[\"s\", \"TI\"], StyleBox[\"1\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"s\", \"TI\"], StyleBox[\"2\", \"TR\"]], \",\", \
StyleBox[\"\\[Ellipsis]\", \"TR\"]]], \"}\"]], \"]\"]]\) looks up terms of a \
sequence in The On\[Hyphen]Line Encyclopedia of Integer Sequences web search.\
\n\!\(\*RowBox[List[\"OEISWebLookup\", \"[\", \
StyleBox[\"\\\"\\!\\(\\*StyleBox[\\\"anum\\\",\\\"TI\\\"]\\)\\\"\", \
ShowStringCharacters->True], \"]\"]]\) looks up a sequence by its \
A\[Hyphen]number.", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> 
    None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`OEISWebLookup, {
      IntegerSequences`OEISWebLookup[
         Pattern[IntegerSequences`Private`terms, {
           BlankSequence[Integer]}]] :> SystemOpen[
         URLBuild[{"https://oeis.org", "search"}, {"q" -> StringTake[
             ToString[IntegerSequences`Private`terms], {2, -2}]}]], 
       IntegerSequences`OEISWebLookup[
         Condition[
          Pattern[IntegerSequences`Private`anumber, 
           Blank[String]], 
          StringMatchQ[IntegerSequences`Private`anumber, 
           StringExpression["A", 
            Repeated[DigitCharacter, {6}]]]]] :> SystemOpen[
         URLBuild[{"https://oeis.org", IntegerSequences`Private`anumber}]]}], 
    "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`OEISWebLookup, {
      SyntaxInformation[IntegerSequences`OEISWebLookup] -> {
        "ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`OEISWebLookup"], False]]], "Output",ExpressionUUID->\
"81eb06b1-535c-4f45-aa30-425d805f8289"]
}, Open  ]],

Cell["Open a web browser to the search results page:", "Text",ExpressionUUID->"5837eb82-be95-4d27-9631-5c1ccaa61f3b"],

Cell[BoxData[
 RowBox[{"OEISWebLookup", "[", 
  RowBox[{"CatalanNumber", "[", 
   RowBox[{"Range", "[", 
    RowBox[{"0", ",", "10"}], "]"}], "]"}], "]"}]], "Input",ExpressionUUID->\
"c379fe2d-1b3d-499d-8fb7-5752a9b5a38c"],

Cell["Open the page for a sequence directly:", "Text",ExpressionUUID->"668b192a-cea7-4422-957b-47188ac7cf06"],

Cell[BoxData[
 RowBox[{"OEISWebLookup", "[", "\"\<A005259\>\"", "]"}]], "Input",ExpressionUU\
ID->"e58f811b-1f13-4370-8d96-181fe791a9e3"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["OrePolynomial", "Input"]], "Subsubsection",ExpressionUUID->"cf4c0eae-1ca8-4dc6-ac64-0175d26ae6f4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "OrePolynomial"}]], "Input",ExpressionUUID->"d488c47b-19cb-44bd-95db-18aa5aad3734"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"OrePolynomial\\\", \\\"[\\\
\", RowBox[List[StyleBox[\\\"poly\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"x\
\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"n\\\", \\\"TI\\\"]]], \
\\\"]\\\"]]\\) gives a multiple of \\!\\(\\*StyleBox[\\\"poly\\\", \
\\\"TI\\\"]\\) whose exponents are powers of \\!\\(\\*StyleBox[\\\"n\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[List[\\\"OrePolynomial\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"poly\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[SubscriptBox[StyleBox[\\\"x\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"x\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"x\\\", \\\"TI\\\"], StyleBox[\\\"k\\\", \
\\\"TI\\\"]], \\\",\\\", StyleBox[\\\"y\\\", \\\"TI\\\"]]], \\\"}\\\"]], \
\\\",\\\", StyleBox[\\\"n\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) gives a multiple \
of \\!\\(\\*StyleBox[\\\"poly\\\", \\\"TI\\\"]\\) whose exponents in \
\\!\\(\\*StyleBox[\\\"y\\\", \\\"TI\\\"]\\) are powers of \
\\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"OrePolynomial", "[", 
                    RowBox[{"IntegerSequences`Private`polynomial_", ",", 
                    RowBox[{"IntegerSequences`Private`variables_List", "/;", 
                    RowBox[{
                    "IntegerSequences`Private`variables", "\[NotEqual]", 
                    RowBox[{"{", "}"}]}]}], ",", 
                    RowBox[{"IntegerSequences`Private`p_Integer", "/;", 
                    RowBox[{
                    "IntegerSequences`Private`p", "\[GreaterEqual]", "2"}]}], 
                    ",", 
                    RowBox[{"IntegerSequences`Private`options", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{"PolynomialQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`polynomial", ",", 
                    "IntegerSequences`Private`variables"}], "]"}], "&&", 
                    RowBox[{"!", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"IntegerSequences`Private`polynomial", ",", 
                    RowBox[{
                    "Last", "[", "IntegerSequences`Private`variables", 
                    "]"}]}], "]"}]}], "&&", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    RowBox[{"OptionValue", "[", 
                    RowBox[{"OrePolynomial", ",", 
                    RowBox[{"{", "IntegerSequences`Private`options", "}"}], 
                    ",", "Modulus"}], "]"}], ",", 
                    RowBox[{"0", "|", 
                    RowBox[{"_", "?", "PrimeQ"}]}]}], "]"}], "||", 
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"OrePolynomial", "::", "modp"}], "MessageName"], 
                    ",", "Modulus", ",", 
                    RowBox[{"OptionValue", "[", 
                    RowBox[{"OrePolynomial", ",", 
                    RowBox[{"{", "IntegerSequences`Private`options", "}"}], 
                    ",", "Modulus"}], "]"}]}], "]"}]}], ")"}]}]}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`y", "=", 
                    RowBox[{
                    "Last", "[", "IntegerSequences`Private`variables", 
                    "]"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`modulus", "=", 
                    RowBox[{"OptionValue", "[", "Modulus", "]"}]}], ",", 
                    "IntegerSequences`Private`reducedpolynomial", ",", 
                    "IntegerSequences`Private`degree", ",", 
                    "IntegerSequences`Private`nullspace", ",", 
                    "IntegerSequences`Private`orepolynomial", ",", 
                    "IntegerSequences`Private`minexponent", ",", 
                    "IntegerSequences`Private`residuelist"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`reducedpolynomial", "=", 
                    RowBox[{"Expand", "[", 
                    RowBox[{"IntegerSequences`Private`polynomial", ",", 
                    RowBox[{
                    "Modulus", "\[Rule]", 
                    "IntegerSequences`Private`modulus"}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    RowBox[{"Log", "[", 
                    RowBox[{"IntegerSequences`Private`p", ",", 
                    RowBox[{"Exponent", "[", 
                    RowBox[{
                    "IntegerSequences`Private`reducedpolynomial", ",", 
                    "IntegerSequences`Private`y", ",", "List"}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"__Integer", "?", "NonNegative"}], "}"}]}], "]"}],
                     ",", 
                    RowBox[{
                    "IntegerSequences`Private`orepolynomial", "=", 
                    "IntegerSequences`Private`reducedpolynomial"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`degree", "=", 
                    RowBox[{"Exponent", "[", 
                    RowBox[{
                    "IntegerSequences`Private`reducedpolynomial", ",", 
                    "IntegerSequences`Private`y"}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`nullspace", "=", 
                    RowBox[{"NullSpace", "[", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"CoefficientList", "[", 
                    RowBox[{
                    "#1", ",", "IntegerSequences`Private`y", ",", 
                    "IntegerSequences`Private`degree"}], "]"}], "&"}], ")"}], 
                    "/@", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"PolynomialRemainder", "[", 
                    RowBox[{
                    SuperscriptBox["IntegerSequences`Private`y", 
                    
                    SuperscriptBox["IntegerSequences`Private`p", 
                    "IntegerSequences`Private`i"]], ",", 
                    "IntegerSequences`Private`reducedpolynomial", ",", 
                    "IntegerSequences`Private`y", ",", 
                    RowBox[{
                    "Modulus", "\[Rule]", 
                    "IntegerSequences`Private`modulus"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`i", ",", "0", ",", 
                    "IntegerSequences`Private`degree"}], "}"}]}], "]"}]}], 
                    "]"}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`orepolynomial", "=", 
                    RowBox[{
                    RowBox[{"Expand", "[", 
                    RowBox[{
                    RowBox[{"Cancel", "[", 
                    RowBox[{
                    RowBox[{"PolynomialLCM", "@@", 
                    RowBox[{"Denominator", "[", 
                    RowBox[{"Together", "[", 
                    RowBox[{
                    "Last", "[", "IntegerSequences`Private`nullspace", "]"}], 
                    "]"}], "]"}]}], " ", 
                    RowBox[{
                    "Last", "[", "IntegerSequences`Private`nullspace", 
                    "]"}]}], "]"}], ",", 
                    RowBox[{
                    "Modulus", "\[Rule]", 
                    "IntegerSequences`Private`modulus"}]}], "]"}], ".", 
                    SuperscriptBox["IntegerSequences`Private`y", 
                    SuperscriptBox["IntegerSequences`Private`p", 
                    RowBox[{"Range", "[", 
                    RowBox[{"0", ",", "IntegerSequences`Private`degree"}], 
                    "]"}]]]}]}]}]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`p", "\[Equal]", 
                    "IntegerSequences`Private`modulus"}], "&&", 
                    RowBox[{
                    "PrimeQ", "[", "IntegerSequences`Private`p", "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`minexponent", "=", 
                    RowBox[{"Exponent", "[", 
                    RowBox[{
                    "IntegerSequences`Private`orepolynomial", ",", 
                    "IntegerSequences`Private`y", ",", "Min", ",", 
                    RowBox[{
                    "Modulus", "\[Rule]", "IntegerSequences`Private`p"}]}], 
                    "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`residuelist", "=", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`variables", 
                    "]"}], "\[Equal]", "1"}], ",", 
                    RowBox[{"{", "}"}], ",", 
                    RowBox[{
                    RowBox[{"CoefficientRules", "[", 
                    RowBox[{
                    RowBox[{"Coefficient", "[", 
                    RowBox[{
                    "IntegerSequences`Private`orepolynomial", ",", 
                    "IntegerSequences`Private`y", ",", 
                    "IntegerSequences`Private`minexponent"}], "]"}], ",", 
                    RowBox[{
                    "Most", "[", "IntegerSequences`Private`variables", "]"}], 
                    ",", 
                    RowBox[{
                    "Modulus", "\[Rule]", "IntegerSequences`Private`p"}]}], 
                    "]"}], "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1"}], 
                    "\[RightDoubleBracket]"}]}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`orepolynomial", "=", 
                    RowBox[{"FromCoefficientRules", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"CoefficientRules", "[", 
                    RowBox[{
                    "IntegerSequences`Private`orepolynomial", ",", 
                    "IntegerSequences`Private`variables", ",", 
                    RowBox[{
                    "Modulus", "\[Rule]", "IntegerSequences`Private`p"}]}], 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`exponents_", "/;", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    RowBox[{"Mod", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "Most", "[", "IntegerSequences`Private`exponents", "]"}], 
                    "-", "IntegerSequences`Private`residuelist"}], ",", 
                    "IntegerSequences`Private`minexponent"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"(", "0", ")"}], "..."}], "}"}]}], "]"}]}], 
                    "\[Rule]", "IntegerSequences`Private`coefficient_"}], 
                    ")"}], "\[RuleDelayed]", 
                    RowBox[{
                    RowBox[{"Quotient", "[", 
                    RowBox[{
                    "IntegerSequences`Private`exponents", ",", 
                    "IntegerSequences`Private`minexponent"}], "]"}], 
                    "\[Rule]", "IntegerSequences`Private`coefficient"}]}]}], 
                    "]"}], ",", "IntegerSequences`Private`variables"}], 
                    "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`orepolynomial", "=", 
                    RowBox[{"Cancel", "[", 
                    RowBox[{
                    FractionBox["IntegerSequences`Private`orepolynomial", 
                    RowBox[{"PolynomialGCD", "[", 
                    RowBox[{
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Last", "/@", 
                    RowBox[{"CoefficientRules", "[", 
                    RowBox[{
                    "IntegerSequences`Private`orepolynomial", ",", 
                    "IntegerSequences`Private`y"}], "]"}]}]}], ",", 
                    RowBox[{
                    "Modulus", "\[Rule]", "IntegerSequences`Private`p"}]}], 
                    "]"}]], ",", 
                    RowBox[{
                    "Modulus", "\[Rule]", "IntegerSequences`Private`p"}]}], 
                    "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`orepolynomial", "=", 
                    RowBox[{"Collect", "[", 
                    RowBox[{
                    "IntegerSequences`Private`orepolynomial", ",", 
                    "IntegerSequences`Private`y"}], "]"}]}]}]}], "]"}], ";", 
                    "IntegerSequences`Private`orepolynomial"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"OrePolynomial", "[", 
                    RowBox[{"IntegerSequences`Private`polynomial_", ",", 
                    RowBox[{"IntegerSequences`Private`variable", ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}], ",", 
                    "IntegerSequences`Private`p_Integer", ",", 
                    RowBox[{"IntegerSequences`Private`options", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"OrePolynomial", "[", 
                    RowBox[{"IntegerSequences`Private`polynomial", ",", 
                    RowBox[{"{", "IntegerSequences`Private`variable", "}"}], 
                    ",", "IntegerSequences`Private`p", ",", 
                    "IntegerSequences`Private`options"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"OrePolynomial", "[", 
                    RowBox[{
                    "IntegerSequences`Private`polynomial_", ",", 
                    "IntegerSequences`Private`p_Integer", ",", 
                    "IntegerSequences`Private`variablespec_", ",", 
                    RowBox[{"IntegerSequences`Private`options", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"OrePolynomial", "::", "syntax"}], "MessageName"],
                     ",", "IntegerSequences`Private`polynomial", ",", 
                    "IntegerSequences`Private`variablespec", ",", 
                    "IntegerSequences`Private`p"}], "]"}], ";", 
                    RowBox[{"OrePolynomial", "[", 
                    RowBox[{
                    "IntegerSequences`Private`polynomial", ",", 
                    "IntegerSequences`Private`variablespec", ",", 
                    "IntegerSequences`Private`p", ",", 
                    "IntegerSequences`Private`options"}], "]"}]}], ")"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "OrePolynomial", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_", ",", "_", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`OrePolynomial] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Blank[], 
                    Blank[], 
                    OptionsPattern[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"Modulus", "\[Rule]", "0"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`OrePolynomial\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"OrePolynomial\\\", \\\"[\\\
\", RowBox[List[StyleBox[\\\"poly\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"x\
\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"n\\\", \\\"TI\\\"]]], \
\\\"]\\\"]]\\) gives a multiple of \\!\\(\\*StyleBox[\\\"poly\\\", \
\\\"TI\\\"]\\) whose exponents are powers of \\!\\(\\*StyleBox[\\\"n\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[List[\\\"OrePolynomial\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"poly\\\", \\\"TI\\\"], \\\",\\\", \
RowBox[List[\\\"{\\\", RowBox[List[SubscriptBox[StyleBox[\\\"x\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"x\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"x\\\", \\\"TI\\\"], StyleBox[\\\"k\\\", \
\\\"TI\\\"]], \\\",\\\", StyleBox[\\\"y\\\", \\\"TI\\\"]]], \\\"}\\\"]], \
\\\",\\\", StyleBox[\\\"n\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) gives a multiple \
of \\!\\(\\*StyleBox[\\\"poly\\\", \\\"TI\\\"]\\) whose exponents in \
\\!\\(\\*StyleBox[\\\"y\\\", \\\"TI\\\"]\\) are powers of \
\\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"OrePolynomial\", \"[\", \
RowBox[List[StyleBox[\"poly\", \"TI\"], \",\", StyleBox[\"x\", \"TI\"], \
\",\", StyleBox[\"n\", \"TI\"]]], \"]\"]]\) gives a multiple of \
\!\(\*StyleBox[\"poly\", \"TI\"]\) whose exponents are powers of \
\!\(\*StyleBox[\"n\", \"TI\"]\).\n\!\(\*RowBox[List[\"OrePolynomial\", \"[\", \
RowBox[List[StyleBox[\"poly\", \"TI\"], \",\", RowBox[List[\"{\", \
RowBox[List[SubscriptBox[StyleBox[\"x\", \"TI\"], StyleBox[\"1\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"x\", \"TI\"], StyleBox[\"2\", \"TR\"]], \",\", \
StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", SubscriptBox[StyleBox[\"x\", \
\"TI\"], StyleBox[\"k\", \"TI\"]], \",\", StyleBox[\"y\", \"TI\"]]], \"}\"]], \
\",\", StyleBox[\"n\", \"TI\"]]], \"]\"]]\) gives a multiple of \
\!\(\*StyleBox[\"poly\", \"TI\"]\) whose exponents in \!\(\*StyleBox[\"y\", \
\"TI\"]\) are powers of \!\(\*StyleBox[\"n\", \"TI\"]\).", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`OrePolynomial, {Condition[
         IntegerSequences`OrePolynomial[
          Pattern[IntegerSequences`Private`polynomial, 
           Blank[]], 
          Condition[
           Pattern[IntegerSequences`Private`variables, 
            Blank[List]], IntegerSequences`Private`variables != {}], 
          Condition[
           Pattern[IntegerSequences`Private`p, 
            Blank[Integer]], IntegerSequences`Private`p >= 2], 
          Pattern[IntegerSequences`Private`options, 
           OptionsPattern[]]], 
         And[
          PolynomialQ[
          IntegerSequences`Private`polynomial, 
           IntegerSequences`Private`variables], 
          Not[
           FreeQ[IntegerSequences`Private`polynomial, 
            Last[IntegerSequences`Private`variables]]], 
          Or[
           MatchQ[
            OptionValue[
            IntegerSequences`OrePolynomial, {
             IntegerSequences`Private`options}, Modulus], 
            Alternatives[0, 
             PatternTest[
              Blank[], PrimeQ]]], 
           Message[
            MessageName[IntegerSequences`OrePolynomial, "modp"], Modulus, 
            OptionValue[
            IntegerSequences`OrePolynomial, {
             IntegerSequences`Private`options}, Modulus]]]]] :> 
       Module[{IntegerSequences`Private`y = 
          Last[IntegerSequences`Private`variables], 
          IntegerSequences`Private`modulus = OptionValue[Modulus], 
          IntegerSequences`Private`reducedpolynomial, 
          IntegerSequences`Private`degree, IntegerSequences`Private`nullspace,
           IntegerSequences`Private`orepolynomial, 
          IntegerSequences`Private`minexponent, 
          IntegerSequences`Private`residuelist}, 
         IntegerSequences`Private`reducedpolynomial = 
          Expand[IntegerSequences`Private`polynomial, Modulus -> 
            IntegerSequences`Private`modulus]; If[
           MatchQ[
            Log[IntegerSequences`Private`p, 
             Exponent[
             IntegerSequences`Private`reducedpolynomial, 
              IntegerSequences`Private`y, List]], {
             PatternTest[
              BlankSequence[Integer], NonNegative]}], 
           IntegerSequences`Private`orepolynomial = 
           IntegerSequences`Private`reducedpolynomial, 
           IntegerSequences`Private`degree = 
            Exponent[
             IntegerSequences`Private`reducedpolynomial, 
              IntegerSequences`Private`y]; 
           IntegerSequences`Private`nullspace = NullSpace[
              Transpose[
               Map[
               CoefficientList[#, IntegerSequences`Private`y, 
                 IntegerSequences`Private`degree]& , 
                Table[
                 PolynomialRemainder[
                 IntegerSequences`Private`y^(IntegerSequences`Private`p^
                   IntegerSequences`Private`i), 
                  IntegerSequences`Private`reducedpolynomial, 
                  IntegerSequences`Private`y, Modulus -> 
                  IntegerSequences`Private`modulus], {
                 IntegerSequences`Private`i, 0, 
                  IntegerSequences`Private`degree}]]]]; 
           IntegerSequences`Private`orepolynomial = Dot[
              Expand[
               Cancel[Apply[PolynomialLCM, 
                  Denominator[
                   Together[
                    Last[IntegerSequences`Private`nullspace]]]] 
                Last[IntegerSequences`Private`nullspace]], Modulus -> 
               IntegerSequences`Private`modulus], 
              IntegerSequences`Private`y^(IntegerSequences`Private`p^
               Range[0, IntegerSequences`Private`degree])]]; If[
           And[IntegerSequences`Private`p == IntegerSequences`Private`modulus, 
            PrimeQ[IntegerSequences`Private`p]], 
           IntegerSequences`Private`minexponent = 
            Exponent[
             IntegerSequences`Private`orepolynomial, 
              IntegerSequences`Private`y, Min, Modulus -> 
              IntegerSequences`Private`p]; 
           IntegerSequences`Private`residuelist = 
            If[Length[IntegerSequences`Private`variables] == 1, {}, 
              Part[
               CoefficientRules[
                Coefficient[
                IntegerSequences`Private`orepolynomial, 
                 IntegerSequences`Private`y, 
                 IntegerSequences`Private`minexponent], 
                Most[IntegerSequences`Private`variables], Modulus -> 
                IntegerSequences`Private`p], -1, 1]]; 
           IntegerSequences`Private`orepolynomial = FromCoefficientRules[
              Cases[
               CoefficientRules[
               IntegerSequences`Private`orepolynomial, 
                IntegerSequences`Private`variables, Modulus -> 
                IntegerSequences`Private`p], (Condition[
                  Pattern[IntegerSequences`Private`exponents, 
                   Blank[]], 
                  MatchQ[
                   Mod[
                   Most[IntegerSequences`Private`exponents] - 
                    IntegerSequences`Private`residuelist, 
                    IntegerSequences`Private`minexponent], {
                    RepeatedNull[0]}]] -> 
                Pattern[IntegerSequences`Private`coefficient, 
                  Blank[]]) :> (
                Quotient[
                 IntegerSequences`Private`exponents, 
                  IntegerSequences`Private`minexponent] -> 
                IntegerSequences`Private`coefficient)], 
              IntegerSequences`Private`variables]; 
           IntegerSequences`Private`orepolynomial = 
            Cancel[IntegerSequences`Private`orepolynomial/PolynomialGCD[
               Apply[Sequence, 
                Map[Last, 
                 CoefficientRules[
                 IntegerSequences`Private`orepolynomial, 
                  IntegerSequences`Private`y]]], Modulus -> 
               IntegerSequences`Private`p], Modulus -> 
              IntegerSequences`Private`p]; 
           IntegerSequences`Private`orepolynomial = 
            Collect[IntegerSequences`Private`orepolynomial, 
              IntegerSequences`Private`y]]; 
         IntegerSequences`Private`orepolynomial], 
       IntegerSequences`OrePolynomial[
         Pattern[IntegerSequences`Private`polynomial, 
          Blank[]], 
         Pattern[IntegerSequences`Private`variable, 
          Except[
           Blank[List]]], 
         Pattern[IntegerSequences`Private`p, 
          Blank[Integer]], 
         Pattern[IntegerSequences`Private`options, 
          OptionsPattern[]]] :> 
       IntegerSequences`OrePolynomial[
        IntegerSequences`Private`polynomial, {
         IntegerSequences`Private`variable}, IntegerSequences`Private`p, 
         IntegerSequences`Private`options], IntegerSequences`OrePolynomial[
         Pattern[IntegerSequences`Private`polynomial, 
          Blank[]], 
         Pattern[IntegerSequences`Private`p, 
          Blank[Integer]], 
         Pattern[IntegerSequences`Private`variablespec, 
          Blank[]], 
         Pattern[IntegerSequences`Private`options, 
          OptionsPattern[]]] :> (Message[
          MessageName[IntegerSequences`OrePolynomial, "syntax"], 
          IntegerSequences`Private`polynomial, 
          IntegerSequences`Private`variablespec, IntegerSequences`Private`p]; 
        IntegerSequences`OrePolynomial[
         IntegerSequences`Private`polynomial, 
          IntegerSequences`Private`variablespec, IntegerSequences`Private`p, 
          IntegerSequences`Private`options])}], "SubValues" -> None, 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`OrePolynomial, {
      SyntaxInformation[IntegerSequences`OrePolynomial] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           Blank[], 
           Blank[], 
           OptionsPattern[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {Modulus -> 0}, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`OrePolynomial"], False]]], "Output",ExpressionUUID->\
"553b5461-9f19-4134-b22c-48c9ac0af671"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OrePolynomial", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"2", 
     SuperscriptBox["x", "2"]}], "-", 
    RowBox[{"3", "x"}], "+", "10"}], ",", "x", ",", "2"}], "]"}]], "Input",Exp\
ressionUUID->"023c14e0-345e-4141-8957-c97b88b217c6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"30", " ", "x"}], "+", 
  RowBox[{"11", " ", 
   SuperscriptBox["x", "2"]}], "+", 
  RowBox[{"4", " ", 
   SuperscriptBox["x", "4"]}]}]], "Output",ExpressionUUID->"2604f6bc-6bd6-\
4155-a8e6-776d52695fbc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OrePolynomial", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["x", "2"], " ", 
     SuperscriptBox["y", "2"]}], "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "1"}], ")"}], " ", "y"}], "+", "1"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}], ",", "2"}], "]"}]], "Input",ExpressionUUID\
->"aa93d241-4958-4a96-9910-3c64872641b2"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1", "-", "x"}], ")"}], " ", "y"}], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "1"}], "+", 
     RowBox[{"2", " ", "x"}]}], ")"}], " ", 
   SuperscriptBox["y", "2"]}], "+", 
  RowBox[{
   SuperscriptBox["x", "4"], " ", 
   SuperscriptBox["y", "4"]}]}]], "Output",ExpressionUUID->"7eed6fc0-e3c4-\
4f91-aab8-eff57f374c7e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OrePolynomial", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["x", "2"], " ", 
     SuperscriptBox["y", "2"]}], "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "1"}], ")"}], " ", "y"}], "+", "1"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}], ",", "2", ",", 
   RowBox[{"Modulus", "\[Rule]", "2"}]}], "]"}]], "Input",ExpressionUUID->\
"67ba744f-40b5-4d6f-a87b-1860389d7f2d"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1", "+", "x"}], ")"}], " ", "y"}], "+", 
  SuperscriptBox["y", "2"], "+", 
  RowBox[{
   SuperscriptBox["x", "4"], " ", 
   SuperscriptBox["y", "4"]}]}]], "Output",ExpressionUUID->"0325f25a-9c47-\
4c2f-b0a7-b3bdcb40df92"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"OrePolynomial", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["x", "2"], " ", 
     SuperscriptBox["y", "2"]}], "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"x", "-", "1"}], ")"}], " ", "y"}], "+", "1"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}], ",", "5", ",", 
   RowBox[{"Modulus", "\[Rule]", "5"}]}], "]"}]], "Input",ExpressionUUID->\
"d31fb748-d8f3-4127-b865-a801a73692b8"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"4", "+", "x", "+", 
     SuperscriptBox["x", "2"], "+", 
     SuperscriptBox["x", "3"], "+", 
     RowBox[{"2", " ", 
      SuperscriptBox["x", "4"]}], "+", 
     RowBox[{"2", " ", 
      SuperscriptBox["x", "5"]}], "+", 
     SuperscriptBox["x", "6"], "+", 
     RowBox[{"3", " ", 
      SuperscriptBox["x", "7"]}], "+", 
     RowBox[{"2", " ", 
      SuperscriptBox["x", "8"]}], "+", 
     RowBox[{"4", " ", 
      SuperscriptBox["x", "9"]}], "+", 
     SuperscriptBox["x", "10"], "+", 
     SuperscriptBox["x", "11"], "+", 
     SuperscriptBox["x", "13"], "+", 
     RowBox[{"3", " ", 
      SuperscriptBox["x", "14"]}], "+", 
     RowBox[{"2", " ", 
      SuperscriptBox["x", "15"]}], "+", 
     SuperscriptBox["x", "16"]}], ")"}], " ", "y"}], "+", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1", "+", 
     SuperscriptBox["x", "5"], "+", 
     SuperscriptBox["x", "8"], "+", 
     RowBox[{"3", " ", 
      SuperscriptBox["x", "9"]}], "+", 
     SuperscriptBox["x", "10"], "+", 
     RowBox[{"4", " ", 
      SuperscriptBox["x", "12"]}], "+", 
     SuperscriptBox["x", "13"], "+", 
     RowBox[{"4", " ", 
      SuperscriptBox["x", "14"]}], "+", 
     RowBox[{"4", " ", 
      SuperscriptBox["x", "15"]}], "+", 
     SuperscriptBox["x", "16"], "+", 
     RowBox[{"2", " ", 
      SuperscriptBox["x", "17"]}], "+", 
     RowBox[{"4", " ", 
      SuperscriptBox["x", "18"]}], "+", 
     RowBox[{"4", " ", 
      SuperscriptBox["x", "19"]}]}], ")"}], " ", 
   SuperscriptBox["y", "5"]}], "+", 
  RowBox[{"4", " ", 
   SuperscriptBox["x", "40"], " ", 
   SuperscriptBox["y", "25"]}]}]], "Output",ExpressionUUID->"0ce7efee-c789-\
43ee-a649-6a0ea8332745"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Radical", "Input"]], "Subsubsection",ExpressionUUID->"d5f21202-6070-4856-83fc-5a556a916b5b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Radical"}]], "Input",ExpressionUUID->"0ad8c736-f7ac-4f54-82a3-92005896f628"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"Radical\\\", \\\"[\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the product of the \
prime divisors of \\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\).\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"Radical", "[", "0", "]"}], "=", "\[Infinity]"}]},
                    {
                    RowBox[{
                    RowBox[{
                    "Radical", "[", "IntegerSequences`Private`n_Integer", 
                    "]"}], ":=", 
                    RowBox[{"Times", "@@", 
                    RowBox[{"First", "/@", 
                    RowBox[{"FactorInteger", "[", 
                    RowBox[{"Abs", "[", "IntegerSequences`Private`n", "]"}], 
                    "]"}]}]}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "Radical", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`Radical] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{"Listable", ",", "Protected"}], "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`Radical\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"Radical\\\", \\\"[\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the product of the \
prime divisors of \\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\).\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"Radical\", \"[\", StyleBox[\"n\", \"TI\"], \"]\"]]\) \
gives the product of the prime divisors of \!\(\*StyleBox[\"n\", \"TI\"]\).", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`Radical, {
      IntegerSequences`Radical[0] -> DirectedInfinity[1], 
       IntegerSequences`Radical[
         Pattern[IntegerSequences`Private`n, 
          Blank[Integer]]] :> Apply[Times, 
         Map[First, 
          FactorInteger[
           Abs[IntegerSequences`Private`n]]]]}], "SubValues" -> None, 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`Radical, {
      SyntaxInformation[IntegerSequences`Radical] -> {"ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Listable, Protected}, "FullName" -> 
    "IntegerSequences`Radical"], False]]], "Output",ExpressionUUID->"79ee4136-\
19de-44e7-a095-b68f9d66574d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Radical", "[", "200", "]"}]], "Input",ExpressionUUID->"97d0ad66-909a-4dae-90b7-afc579f2e340"],

Cell[BoxData["10"], "Output",ExpressionUUID->"1bf678a0-02c9-42eb-99ee-5d744b871bbc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Radical", "[", 
  RowBox[{"Range", "[", "20", "]"}], "]"}]], "Input",ExpressionUUID->\
"69699e71-9a8a-4fd0-9b95-6887ed7210af"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "2", ",", "5", ",", "6", ",", "7", ",", "2", 
   ",", "3", ",", "10", ",", "11", ",", "6", ",", "13", ",", "14", ",", "15", 
   ",", "2", ",", "17", ",", "6", ",", "19", ",", "10"}], "}"}]], "Output",Exp\
ressionUUID->"2c6d11aa-f637-48c2-b2ec-0fa6cdf83dcc"]
}, Open  ]],

Cell["\<\
Computing the radical of a number requires computing its factorization, and \
for large numbers this can take time:\
\>", "Text",ExpressionUUID->"4e9b3f22-5307-4419-bfcf-a8831019ee83"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AbsoluteTiming", "[", 
  RowBox[{"Radical", "[", 
   RowBox[{
    SuperscriptBox["2", "229"], "-", "1"}], "]"}], "]"}]], "Input",ExpressionU\
UID->"e652ddd0-1712-429c-8ee6-6ff3ddac0f78"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "16.867315`", ",", 
   "862718293348820473429344482784628181556388621521298319395315527974911"}], 
  "}"}]], "Output",ExpressionUUID->"7dfad00f-a833-4e75-8aa3-d87974773dee"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["RegularSequence", "Input"]], "Subsubsection",ExpressionUUID->"80731580-7f25-445f-9ef1-2b7ecb7b5e8d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "RegularSequence"}]], "Input",ExpressionUUID->"a9972da9-9b21-4c0b-b454-b62f926d69cd"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[RowBox[List[\\\"\
RegularSequence\\\", \\\"[\\\", RowBox[List[StyleBox[\\\"u\\\", \\\"TI\\\"], \
\\\",\\\", RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"m\\\", \\\"TI\\\"], StyleBox[\\\"0\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"m\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"m\\\", \\\"TI\\\"], \
RowBox[List[StyleBox[\\\"k\\\", \\\"TI\\\"], \\\"-\\\", StyleBox[\\\"1\\\", \
\\\"TR\\\"]]]]]], \\\"}\\\"]], \\\",\\\", StyleBox[\\\"v\\\", \\\"TI\\\"], \\\
\",\\\", StyleBox[\\\"k\\\", \\\"TI\\\"]]], \\\"]\\\"]], \\\"[\\\", StyleBox[\
\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives \\!\\(\\*RowBox[List[StyleBox[\\\
\"u\\\", \\\"TI\\\"], \\\".\\\", SubscriptBox[StyleBox[\\\"m\\\", \
\\\"TI\\\"], SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], \
StyleBox[\\\"0\\\", \\\"TR\\\"]]], \\\".\\\", \
SubscriptBox[StyleBox[\\\"m\\\", \\\"TI\\\"], \
SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]]], \\\".\\\", StyleBox[\\\"\\\\[CenterEllipsis]\\\", \\\"TR\\\"], \
\\\".\\\", SubscriptBox[StyleBox[\\\"m\\\", \\\"TI\\\"], \
SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], StyleBox[\\\"l\\\", \
\\\"TI\\\"]]], \\\".\\\", StyleBox[\\\"v\\\", \\\"TI\\\"]]]\\), where \
\\!\\(\\*RowBox[List[StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"\\\\[Equal]\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], StyleBox[\\\"l\\\", \
\\\"TI\\\"]], \\\" \\\", StyleBox[\\\"\\\\[CenterEllipsis]\\\", \\\"TR\\\"], \
\\\" \\\", SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\" \\\", SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], \
StyleBox[\\\"0\\\", \\\"TR\\\"]]]]]]\\) in base \\!\\(\\*StyleBox[\\\"k\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[List[RowBox[List[\\\"RegularSequence\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"u\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"matrixarray\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"v\\\", \
\\\"TI\\\"], \\\",\\\", RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], \
StyleBox[\\\"d\\\", \\\"TI\\\"]]]], \\\"}\\\"]]]], \\\"]\\\"]], \\\"[\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], \
StyleBox[\\\"d\\\", \\\"TI\\\"]]]], \\\"]\\\"]]\\) gives the value of a \
\\!\\(\\*StyleBox[\\\"d\\\", \\\"TI\\\"]\\)\[Hyphen]dimensional \
(\\!\\(\\*RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\
\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\
\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\
\\\", \\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], \
StyleBox[\\\"d\\\", \\\"TI\\\"]]]]\\))\[Hyphen]regular \
sequence.\\n\\!\\(\\*RowBox[List[RowBox[List[\\\"RegularSequence\\\", \\\"[\\\
\", RowBox[List[StyleBox[\\\"u\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"matrixarray\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"v\\\", \
\\\"TI\\\"]]], \\\"]\\\"]], \\\"[\\\", StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\
\\\"]]\\) infers the base \\!\\(\\*StyleBox[\\\"k\\\", \\\"TI\\\"]\\) from \
\\!\\(\\*StyleBox[\\\"matrixarray\\\", \\\"TI\\\"]\\).\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" SubValue Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"SubValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "SubValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"IntegerSequences`Private`sequence", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`u_", ",", 
                    "IntegerSequences`Private`matrixarray_", ",", 
                    "IntegerSequences`Private`v_", ",", "___"}], "]"}], ")"}],
                     "?", "IntegerSequences`Private`RegularSequenceObjectQ"}]}\
], ")"}], "[", "IntegerSequences`Private`n__Integer", "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`numerationsystemlist", "=", 
                    RowBox[{
                    "IntegerSequences`Private`\
RegularSequenceNumerationSystemList", "[", 
                    "IntegerSequences`Private`sequence", "]"}]}], ",", 
                    "IntegerSequences`Private`digitlists", ",", 
                    RowBox[{
                    "IntegerSequences`Private`failed", "=", "False"}]}], 
                    "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "IntegerSequences`Private`n", "}"}], "]"}], 
                    "\[NotEqual]", 
                    RowBox[{
                    "Length", "[", 
                    "IntegerSequences`Private`numerationsystemlist", "]"}]}], 
                    ",", 
                    RowBox[{"IntegerSequences`Private`failed", "=", "True"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`digitlists", "=", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"DigitList", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "IntegerSequences`Private`n", "}"}], ",", 
                    "IntegerSequences`Private`numerationsystemlist"}], 
                    "}"}]}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MemberQ", "[", 
                    RowBox[{"IntegerSequences`Private`digitlists", ",", 
                    "_DigitList"}], "]"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`failed", "=", "True"}]}], 
                    "]"}]}]}], "]"}], ";", 
                    RowBox[{
                    RowBox[{"Dot", "@@", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", "IntegerSequences`Private`u", "}"}], ",", 
                    RowBox[{"Apply", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`matrixarray", 
                    "\[LeftDoubleBracket]", "##1", "\[RightDoubleBracket]"}], 
                    "&"}], ",", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{
                    RowBox[{
                    "PadRight", "[", "IntegerSequences`Private`digitlists", 
                    "]"}], "+", "1"}], "]"}], ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], ",", 
                    RowBox[{"{", "IntegerSequences`Private`v", "}"}]}], 
                    "]"}]}], "/;", 
                    RowBox[{"!", "IntegerSequences`Private`failed"}]}]}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`u_", ",", 
                    "IntegerSequences`Private`matrixlist_", ",", 
                    "IntegerSequences`Private`v_", ",", 
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`base_Integer", "/;", 
                    RowBox[{
                    "IntegerSequences`Private`base", "\[GreaterEqual]", 
                    "2"}]}], "}"}]}], "]"}], ")"}], "?", 
                    "IntegerSequences`Private`RegularSequenceObjectQ"}], "[", 
                    RowBox[{"IntegerSequences`Private`list", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"_Integer", "?", "NonNegative"}], ",", 
                    RowBox[{"__Integer", "?", "NonNegative"}]}], "}"}]}], 
                    "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`length", ",", 
                    "IntegerSequences`Private`zeromatrixpowers", ",", 
                    RowBox[{"IntegerSequences`Private`i", "=", 
                    RowBox[{"-", "1"}]}], ",", "IntegerSequences`Private`j"}],
                     "}"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`length", "=", 
                    RowBox[{"IntegerLength", "[", 
                    RowBox[{
                    RowBox[{
                    "Max", "[", "IntegerSequences`Private`list", "]"}], ",", 
                    "IntegerSequences`Private`base"}], "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`zeromatrixpowers", "=", 
                    RowBox[{"NestList", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#1", ".", 
                    RowBox[{
                    "First", "[", "IntegerSequences`Private`matrixlist", 
                    "]"}]}], "&"}], ",", 
                    RowBox[{"IdentityMatrix", "[", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    "First", "[", "IntegerSequences`Private`matrixlist", 
                    "]"}], "]"}], "]"}], ",", 
                    RowBox[{"IntegerSequences`Private`length", "-", "1"}]}], 
                    "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#1", ".", "IntegerSequences`Private`v"}], "&"}], 
                    ")"}], "/@", 
                    RowBox[{
                    RowBox[{"Nest", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`vectors", ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`i", "++"}], ";", 
                    RowBox[{"Join", "[", 
                    RowBox[{"IntegerSequences`Private`vectors", ",", 
                    RowBox[{"Flatten", "[", 
                    RowBox[{
                    RowBox[{"Outer", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#2", ".", "#1"}], "&"}], ",", 
                    RowBox[{
                    "Rest", "[", "IntegerSequences`Private`matrixlist", "]"}],
                     ",", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Dot", ",", 
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`vectors", ",", 
                    RowBox[{"Prepend", "[", 
                    RowBox[{
                    RowBox[{"Join", "@@", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`zeromatrixpowers", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{
                    "IntegerSequences`Private`i", "-", 
                    "IntegerSequences`Private`j"}], "\[RightDoubleBracket]"}],
                     ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"IntegerSequences`Private`base", "-", "1"}], 
                    ")"}], " ", 
                    
                    SuperscriptBox["IntegerSequences`Private`base", 
                    "IntegerSequences`Private`j"]}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`j", ",", "0", ",", 
                    RowBox[{"IntegerSequences`Private`i", "-", "1"}]}], 
                    "}"}]}], "]"}]}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`zeromatrixpowers", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"IntegerSequences`Private`i", "+", "1"}], 
                    "\[RightDoubleBracket]"}]}], "]"}]}], "}"}]}], "]"}], ",",
                     "1"}], "]"}], ",", "1"}], "]"}]}], "]"}]}]}], "]"}], ",", 
                    RowBox[{"{", "IntegerSequences`Private`u", "}"}], ",", 
                    "IntegerSequences`Private`length"}], "]"}], 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"IntegerSequences`Private`list", "+", "1"}], 
                    "\[RightDoubleBracket]"}]}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`sequence_RegularSequence", "?", 
                    "IntegerSequences`Private`RegularSequenceObjectQ"}], "[", 
                    "IntegerSequences`Private`list_List", "]"}], ":=", 
                    RowBox[{
                    "IntegerSequences`Private`sequence", "/@", 
                    "IntegerSequences`Private`list"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "RegularSequence", "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_", ",", "_", ",", "_."}], "}"}]}], 
                    "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`RegularSequence] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Blank[], 
                    Blank[], 
                    Optional[
                    Blank[]]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`RegularSequence\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[RowBox[List[\\\"\
RegularSequence\\\", \\\"[\\\", RowBox[List[StyleBox[\\\"u\\\", \\\"TI\\\"], \
\\\",\\\", RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"m\\\", \\\"TI\\\"], StyleBox[\\\"0\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"m\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"m\\\", \\\"TI\\\"], \
RowBox[List[StyleBox[\\\"k\\\", \\\"TI\\\"], \\\"-\\\", StyleBox[\\\"1\\\", \
\\\"TR\\\"]]]]]], \\\"}\\\"]], \\\",\\\", StyleBox[\\\"v\\\", \\\"TI\\\"], \\\
\",\\\", StyleBox[\\\"k\\\", \\\"TI\\\"]]], \\\"]\\\"]], \\\"[\\\", StyleBox[\
\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives \\!\\(\\*RowBox[List[StyleBox[\\\
\"u\\\", \\\"TI\\\"], \\\".\\\", SubscriptBox[StyleBox[\\\"m\\\", \
\\\"TI\\\"], SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], \
StyleBox[\\\"0\\\", \\\"TR\\\"]]], \\\".\\\", \
SubscriptBox[StyleBox[\\\"m\\\", \\\"TI\\\"], \
SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]]], \\\".\\\", StyleBox[\\\"\\\\[CenterEllipsis]\\\", \\\"TR\\\"], \
\\\".\\\", SubscriptBox[StyleBox[\\\"m\\\", \\\"TI\\\"], \
SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], StyleBox[\\\"l\\\", \
\\\"TI\\\"]]], \\\".\\\", StyleBox[\\\"v\\\", \\\"TI\\\"]]]\\), where \
\\!\\(\\*RowBox[List[StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"\\\\[Equal]\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], StyleBox[\\\"l\\\", \
\\\"TI\\\"]], \\\" \\\", StyleBox[\\\"\\\\[CenterEllipsis]\\\", \\\"TR\\\"], \
\\\" \\\", SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\" \\\", SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], \
StyleBox[\\\"0\\\", \\\"TR\\\"]]]]]]\\) in base \\!\\(\\*StyleBox[\\\"k\\\", \
\\\"TI\\\"]\\).\\n\\!\\(\\*RowBox[List[RowBox[List[\\\"RegularSequence\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"u\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"matrixarray\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"v\\\", \
\\\"TI\\\"], \\\",\\\", RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], \
StyleBox[\\\"d\\\", \\\"TI\\\"]]]], \\\"}\\\"]]]], \\\"]\\\"]], \\\"[\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], \
StyleBox[\\\"d\\\", \\\"TI\\\"]]]], \\\"]\\\"]]\\) gives the value of a \
\\!\\(\\*StyleBox[\\\"d\\\", \\\"TI\\\"]\\)\[Hyphen]dimensional \
(\\!\\(\\*RowBox[List[SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], StyleBox[\
\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\
\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\
\\\", \\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"k\\\", \\\"TI\\\"], \
StyleBox[\\\"d\\\", \\\"TI\\\"]]]]\\))\[Hyphen]regular \
sequence.\\n\\!\\(\\*RowBox[List[RowBox[List[\\\"RegularSequence\\\", \\\"[\\\
\", RowBox[List[StyleBox[\\\"u\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"matrixarray\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"v\\\", \
\\\"TI\\\"]]], \\\"]\\\"]], \\\"[\\\", StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\
\\\"]]\\) infers the base \\!\\(\\*StyleBox[\\\"k\\\", \\\"TI\\\"]\\) from \
\\!\\(\\*StyleBox[\\\"matrixarray\\\", \\\"TI\\\"]\\).\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[RowBox[List[\"RegularSequence\", \"[\", \
RowBox[List[StyleBox[\"u\", \"TI\"], \",\", RowBox[List[\"{\", \
RowBox[List[SubscriptBox[StyleBox[\"m\", \"TI\"], StyleBox[\"0\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"m\", \"TI\"], StyleBox[\"1\", \"TR\"]], \",\", \
StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", SubscriptBox[StyleBox[\"m\", \
\"TI\"], RowBox[List[StyleBox[\"k\", \"TI\"], \"-\", StyleBox[\"1\", \
\"TR\"]]]]]], \"}\"]], \",\", StyleBox[\"v\", \"TI\"], \",\", StyleBox[\"k\", \
\"TI\"]]], \"]\"]], \"[\", StyleBox[\"n\", \"TI\"], \"]\"]]\) gives \
\!\(\*RowBox[List[StyleBox[\"u\", \"TI\"], \".\", \
SubscriptBox[StyleBox[\"m\", \"TI\"], SubscriptBox[StyleBox[\"n\", \"TI\"], \
StyleBox[\"0\", \"TR\"]]], \".\", SubscriptBox[StyleBox[\"m\", \"TI\"], \
SubscriptBox[StyleBox[\"n\", \"TI\"], StyleBox[\"1\", \"TR\"]]], \".\", \
StyleBox[\"\\[CenterEllipsis]\", \"TR\"], \".\", SubscriptBox[StyleBox[\"m\", \
\"TI\"], SubscriptBox[StyleBox[\"n\", \"TI\"], StyleBox[\"l\", \"TI\"]]], \".\
\", StyleBox[\"v\", \"TI\"]]]\), where \!\(\*RowBox[List[StyleBox[\"n\", \"TI\
\"], \"\\[Equal]\", RowBox[List[SubscriptBox[StyleBox[\"n\", \"TI\"], \
StyleBox[\"l\", \"TI\"]], \" \", StyleBox[\"\\[CenterEllipsis]\", \"TR\"], \" \
\", SubscriptBox[StyleBox[\"n\", \"TI\"], StyleBox[\"1\", \"TR\"]], \" \", \
SubscriptBox[StyleBox[\"n\", \"TI\"], StyleBox[\"0\", \"TR\"]]]]]]\) in base \
\!\(\*StyleBox[\"k\", \"TI\"]\).\n\
\!\(\*RowBox[List[RowBox[List[\"RegularSequence\", \"[\", \
RowBox[List[StyleBox[\"u\", \"TI\"], \",\", StyleBox[\"matrixarray\", \
\"TI\"], \",\", StyleBox[\"v\", \"TI\"], \",\", RowBox[List[\"{\", \
RowBox[List[SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"1\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"2\", \"TR\"]], \",\", \
StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", SubscriptBox[StyleBox[\"k\", \
\"TI\"], StyleBox[\"d\", \"TI\"]]]], \"}\"]]]], \"]\"]], \"[\", \
RowBox[List[SubscriptBox[StyleBox[\"n\", \"TI\"], StyleBox[\"1\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"n\", \"TI\"], StyleBox[\"2\", \"TR\"]], \",\", \
StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", SubscriptBox[StyleBox[\"n\", \
\"TI\"], StyleBox[\"d\", \"TI\"]]]], \"]\"]]\) gives the value of a \
\!\(\*StyleBox[\"d\", \"TI\"]\)\[Hyphen]dimensional \
(\!\(\*RowBox[List[SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"1\", \"TR\
\"]], \",\", SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"2\", \"TR\"]], \
\",\", StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", \
SubscriptBox[StyleBox[\"k\", \"TI\"], StyleBox[\"d\", \
\"TI\"]]]]\))\[Hyphen]regular sequence.\n\
\!\(\*RowBox[List[RowBox[List[\"RegularSequence\", \"[\", \
RowBox[List[StyleBox[\"u\", \"TI\"], \",\", StyleBox[\"matrixarray\", \
\"TI\"], \",\", StyleBox[\"v\", \"TI\"]]], \"]\"]], \"[\", StyleBox[\"n\", \
\"TI\"], \"]\"]]\) infers the base \!\(\*StyleBox[\"k\", \"TI\"]\) from \
\!\(\*StyleBox[\"matrixarray\", \"TI\"]\).", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> None, 
    "SubValues" -> 
    Information`InformationValueForm[
     SubValues, IntegerSequences`RegularSequence, {
      Pattern[IntegerSequences`Private`sequence, 
         PatternTest[
          IntegerSequences`RegularSequence[
           Pattern[IntegerSequences`Private`u, 
            Blank[]], 
           Pattern[IntegerSequences`Private`matrixarray, 
            Blank[]], 
           Pattern[IntegerSequences`Private`v, 
            Blank[]], 
           BlankNullSequence[]], 
          IntegerSequences`Private`RegularSequenceObjectQ]][
         Pattern[IntegerSequences`Private`n, 
          BlankSequence[Integer]]] :> 
       Module[{IntegerSequences`Private`numerationsystemlist = 
          IntegerSequences`Private`RegularSequenceNumerationSystemList[
           IntegerSequences`Private`sequence], 
          IntegerSequences`Private`digitlists, 
          IntegerSequences`Private`failed = False}, 
         If[Length[{IntegerSequences`Private`n}] != 
           Length[IntegerSequences`Private`numerationsystemlist], 
           IntegerSequences`Private`failed = True, 
           IntegerSequences`Private`digitlists = 
            MapThread[
             IntegerSequences`DigitList, {{IntegerSequences`Private`n}, 
               IntegerSequences`Private`numerationsystemlist}]; If[
             MemberQ[IntegerSequences`Private`digitlists, 
              Blank[IntegerSequences`DigitList]], 
             IntegerSequences`Private`failed = True]]; Condition[
           Apply[Dot, 
            Join[{IntegerSequences`Private`u}, 
             Apply[Part[IntegerSequences`Private`matrixarray, 
               SlotSequence[1]]& , 
              Transpose[PadRight[IntegerSequences`Private`digitlists] + 1], {
              1}], {IntegerSequences`Private`v}]], 
           Not[IntegerSequences`Private`failed]]], PatternTest[
         IntegerSequences`RegularSequence[
          Pattern[IntegerSequences`Private`u, 
           Blank[]], 
          Pattern[IntegerSequences`Private`matrixlist, 
           Blank[]], 
          Pattern[IntegerSequences`Private`v, 
           Blank[]], {
           Condition[
            Pattern[IntegerSequences`Private`base, 
             Blank[Integer]], IntegerSequences`Private`base >= 2]}], 
         IntegerSequences`Private`RegularSequenceObjectQ][
         Pattern[IntegerSequences`Private`list, {
           PatternTest[
            Blank[Integer], NonNegative], 
           PatternTest[
            BlankSequence[Integer], NonNegative]}]] :> 
       Module[{IntegerSequences`Private`length, 
          IntegerSequences`Private`zeromatrixpowers, 
          IntegerSequences`Private`i = -1, IntegerSequences`Private`j}, 
         IntegerSequences`Private`length = IntegerLength[
            Max[IntegerSequences`Private`list], 
            IntegerSequences`Private`base]; 
         IntegerSequences`Private`zeromatrixpowers = NestList[Dot[#, 
             First[IntegerSequences`Private`matrixlist]]& , 
            IdentityMatrix[
             Length[
              First[IntegerSequences`Private`matrixlist]]], 
            IntegerSequences`Private`length - 1]; 
         Map[Dot[#, IntegerSequences`Private`v]& , 
           Part[
            Nest[
             Function[
             IntegerSequences`Private`vectors, 
              Increment[IntegerSequences`Private`i]; 
              Join[IntegerSequences`Private`vectors, 
                Flatten[
                 Outer[Dot[#2, #]& , 
                  Rest[IntegerSequences`Private`matrixlist], 
                  MapThread[Dot, {IntegerSequences`Private`vectors, 
                    Prepend[
                    Apply[Join, 
                    Table[
                    ConstantArray[
                    Part[
                    IntegerSequences`Private`zeromatrixpowers, 
                    IntegerSequences`Private`i - 
                    IntegerSequences`Private`j], (
                    IntegerSequences`Private`base - 1) 
                    IntegerSequences`Private`base^
                    IntegerSequences`Private`j], {
                    IntegerSequences`Private`j, 0, IntegerSequences`Private`i - 
                    1}]], 
                    Part[
                    IntegerSequences`Private`zeromatrixpowers, 
                    IntegerSequences`Private`i + 1]]}], 1], 1]]], {
             IntegerSequences`Private`u}, IntegerSequences`Private`length], 
            IntegerSequences`Private`list + 1]]], PatternTest[
         Pattern[IntegerSequences`Private`sequence, 
          Blank[IntegerSequences`RegularSequence]], 
         IntegerSequences`Private`RegularSequenceObjectQ][
         Pattern[IntegerSequences`Private`list, 
          Blank[List]]] :> 
       Map[IntegerSequences`Private`sequence, 
         IntegerSequences`Private`list]}], "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`RegularSequence, {
      SyntaxInformation[IntegerSequences`RegularSequence] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           Blank[], 
           Blank[], 
           Optional[
            Blank[]]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`RegularSequence"], False]]], "Output",ExpressionUUID->\
"53baa8f8-db1f-4bb7-b584-cf8dac45ae49"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RegularSequence", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "2"}], "}"}]}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}]}], "]"}], "/@", 
  RowBox[{"Range", "[", 
   RowBox[{"0", ",", "31"}], "]"}]}]], "Input",ExpressionUUID->"c54137fa-02d4-\
4b46-b047-8198f0e45b4b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "1", ",", "2", ",", "1", ",", "2", ",", "2", ",", "3", 
   ",", "1", ",", "2", ",", "2", ",", "3", ",", "2", ",", "3", ",", "3", ",", 
   "4", ",", "1", ",", "2", ",", "2", ",", "3", ",", "2", ",", "3", ",", "3", 
   ",", "4", ",", "2", ",", "3", ",", "3", ",", "4", ",", "3", ",", "4", ",", 
   "4", ",", "5"}], "}"}]], "Output",ExpressionUUID->"350ab85d-47e5-4fc6-81b6-\
168433aa366b"]
}, Open  ]],

Cell[TextData[{
 "This two-dimensional regular sequence produces Pascal\[CloseCurlyQuote]s \
triangle modulo ",
 Cell[BoxData[
  FormBox["2", TraditionalForm]],ExpressionUUID->
  "cd7bfb48-c29b-4b74-b114-d740ef9cdde1"],
 ":"
}], "Text",ExpressionUUID->"fc045635-8f76-480a-a1a4-f89059572645"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ArrayPlot", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"RegularSequence", "[", 
      RowBox[{
       RowBox[{"{", "1", "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"{", "1", "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", "0", "}"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"{", "1", "}"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"{", "1", "}"}], "}"}]}], "}"}]}], "}"}], ",", 
       RowBox[{"{", "1", "}"}]}], "]"}], "[", 
     RowBox[{"n", ",", "m"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "0", ",", "63"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"m", ",", "0", ",", "63"}], "}"}]}], "]"}], "]"}]], "Input",Expre\
ssionUUID->"84e28ffb-6e8e-474e-b668-2d66fc4803b3"],

Cell[BoxData[
 GraphicsBox[RasterBox[CompressedData["
1:eJylldEJAzEMQ+1u0k06Q0foAt3/r7R3JRebSJF9IQgjLg9jhO+v9/N1M7PH
edufN49573rzflvo6O+Vhh5SV2/qf4zV+jzl2kYvpfrSS6m262uFenqtUM+l
XnuzjnFW/XBkP+RZ9sOV/ZBn2Q95lv2QZ9kPKvuLuW77i7lu+4u5bvu+7m3L
B71t+fD1DR/b3Mc298lHfk/5ZnnPfHw5H1/Ox/ud8w0q52PlfKycj/c75+P9
zvl4v3M+3u+cj/c75+P9zvm45nxcc76W98zX8p75Wt4zX8t75mt5z3wt75k/
q86fVefX5j74tbkPfr33g1/v/eB36PW5D37r9ybd/QNaOg9Q
   "], {{0, 0}, {64, 64}}, {0, 1}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic}]], "Output",ExpressionUUID->"5a8245d8-287f-466d-af6a-\
b0547d378a4f"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["RegularSequenceGeneratorTable", "Input"]], \
"Subsubsection",ExpressionUUID->"661954d6-9ec9-43c4-a3cb-bcae04d55bd5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "RegularSequenceGeneratorTable"}]], "Input",ExpressionUUID->"49466a3a-55f0-467b-ae1e-2690cde4c42c"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"\
RegularSequenceGeneratorTable\\\", \\\"[\\\", \
RowBox[List[RowBox[List[\\\"RegularSequence\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"u\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"matrixlist\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"v\\\", \
\\\"TI\\\"]]], \\\"]\\\"]], \\\",\\\", StyleBox[\\\"nmax\\\", \\\"TI\\\"]]], \
\\\"]\\\"]]\\) gives terms 0 through \\!\\(\\*StyleBox[\\\"nmax\\\", \\\"TI\\\
\"]\\) of the generator sequences for the given regular sequence \
representation.\\n\\!\\(\\*RowBox[List[\\\"RegularSequenceGeneratorTable\\\", \
\\\"[\\\", RowBox[List[RowBox[List[\\\"RegularSequence\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"u\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"matrixarray\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"v\\\", \
\\\"TI\\\"]]], \\\"]\\\"]], \\\",\\\", RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"nmax\\\", \\\"TI\\\"], StyleBox[\\\"1\\\
\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"nmax\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"nmax\\\", \\\"TI\\\"], \
StyleBox[\\\"d\\\", \\\"TI\\\"]]]], \\\"}\\\"]]]], \\\"]\\\"]]\\) gives the \
initial \\!\\(\\*RowBox[List[RowBox[List[\\\"(\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"nmax\\\", \\\"TI\\\"], StyleBox[\\\"1\\\
\", \\\"TR\\\"]], \\\"+\\\", StyleBox[\\\"1\\\", \\\"TR\\\"]]], \\\")\\\"]], \
\\\" \\\", \\\"\\\\\\\"\\\\[Times]\\\\\\\"\\\", \\\" \\\", \
RowBox[List[\\\"(\\\", RowBox[List[SubscriptBox[StyleBox[\\\"nmax\\\", \\\"TI\
\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\"+\\\", StyleBox[\\\"1\\\", \
\\\"TR\\\"]]], \\\")\\\"]], \\\" \\\", \\\"\\\\\\\"\\\\[Times]\\\\\\\"\\\", \
\\\" \\\", StyleBox[\\\"\\\\[CenterEllipsis]\\\", \\\"TR\\\"], \\\" \\\", \
\\\"\\\\\\\"\\\\[Times]\\\\\\\"\\\", \\\" \\\", RowBox[List[\\\"(\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"nmax\\\", \\\"TI\\\"], StyleBox[\\\"d\\\
\", \\\"TI\\\"]], \\\"+\\\", StyleBox[\\\"1\\\", \\\"TR\\\"]]], \\\")\\\"]]]]\
\\) array of each generator.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"RegularSequenceGeneratorTable", "[", 
                    RowBox[{
                    "IntegerSequences`Private`sequence_RegularSequence", ",", 
                    RowBox[{
                    "IntegerSequences`Private`nmax_Integer", "?", 
                    "NonNegative"}]}], "]"}], ":=", 
                    RowBox[{"RegularSequenceGeneratorTable", "[", 
                    RowBox[{"IntegerSequences`Private`sequence", ",", 
                    RowBox[{"{", "IntegerSequences`Private`nmax", "}"}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"RegularSequenceGeneratorTable", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`sequence", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    "_", ",", "IntegerSequences`Private`matrixarray_", ",", 
                    "IntegerSequences`Private`v_", ",", "___"}], "]"}], ")"}],
                     "?", "IntegerSequences`Private`RegularSequenceObjectQ"}]}\
], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`nmax__Integer", "?", 
                    "NonNegative"}], "}"}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`baselist", ",", 
                    "IntegerSequences`Private`dimension", ",", 
                    "IntegerSequences`Private`variables", ",", 
                    "IntegerSequences`Private`failed"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`failed", "=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`baselist", "=", 
                    RowBox[{
                    "IntegerSequences`Private`\
RegularSequenceNumerationSystemList", "[", 
                    "IntegerSequences`Private`sequence", "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`dimension", "=", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`baselist", 
                    "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "IntegerSequences`Private`nmax", "}"}], 
                    "]"}], "\[NotEqual]", 
                    "IntegerSequences`Private`dimension"}], "||", 
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"IntegerSequences`Private`baselist", ",", 
                    RowBox[{"{", 
                    RowBox[{"__Integer", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#1", "\[GreaterEqual]", "2"}], "&"}], ")"}]}], 
                    "}"}]}], "]"}]}]}], ",", 
                    RowBox[{"Throw", "[", "True", "]"}]}], "]"}], ";", 
                    RowBox[{"IntegerSequences`Private`variables", "=", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"Unique", "[", "]"}], ",", 
                    RowBox[{
                    "{", "IntegerSequences`Private`dimension", "}"}]}], 
                    "]"}]}], ";", "False"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"Dot", "@@", 
                    RowBox[{"Append", "[", 
                    RowBox[{
                    RowBox[{"Apply", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`matrixarray", 
                    "\[LeftDoubleBracket]", "##1", "\[RightDoubleBracket]"}], 
                    "&"}], ",", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{
                    RowBox[{"PadRight", "[", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"DigitList", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`variables", ",", 
                    "IntegerSequences`Private`baselist"}], "}"}]}], "]"}], 
                    "]"}], "+", "1"}], "]"}], ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], ",", 
                    "IntegerSequences`Private`v"}], "]"}]}], ",", 
                    RowBox[{"Evaluate", "[", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"Thread", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`variables", ",", "0", ",", 
                    RowBox[{"{", "IntegerSequences`Private`nmax", "}"}]}], 
                    "}"}], "]"}]}], "]"}]}], "]"}], ",", 
                    RowBox[{"RotateLeft", "[", 
                    RowBox[{"Range", "[", 
                    RowBox[{"IntegerSequences`Private`dimension", "+", "1"}], 
                    "]"}], "]"}]}], "]"}], "/;", 
                    RowBox[{"!", "IntegerSequences`Private`failed"}]}]}]}], 
                    "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "RegularSequenceGeneratorTable",
                     "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_"}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`RegularSequenceGeneratorTable] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`RegularSequenceGeneratorTable\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"\
RegularSequenceGeneratorTable\\\", \\\"[\\\", \
RowBox[List[RowBox[List[\\\"RegularSequence\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"u\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"matrixlist\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"v\\\", \
\\\"TI\\\"]]], \\\"]\\\"]], \\\",\\\", StyleBox[\\\"nmax\\\", \\\"TI\\\"]]], \
\\\"]\\\"]]\\) gives terms 0 through \\!\\(\\*StyleBox[\\\"nmax\\\", \\\"TI\\\
\"]\\) of the generator sequences for the given regular sequence \
representation.\\n\\!\\(\\*RowBox[List[\\\"RegularSequenceGeneratorTable\\\", \
\\\"[\\\", RowBox[List[RowBox[List[\\\"RegularSequence\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"u\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"matrixarray\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"v\\\", \
\\\"TI\\\"]]], \\\"]\\\"]], \\\",\\\", RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"nmax\\\", \\\"TI\\\"], StyleBox[\\\"1\\\
\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"nmax\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"nmax\\\", \\\"TI\\\"], \
StyleBox[\\\"d\\\", \\\"TI\\\"]]]], \\\"}\\\"]]]], \\\"]\\\"]]\\) gives the \
initial \\!\\(\\*RowBox[List[RowBox[List[\\\"(\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"nmax\\\", \\\"TI\\\"], StyleBox[\\\"1\\\
\", \\\"TR\\\"]], \\\"+\\\", StyleBox[\\\"1\\\", \\\"TR\\\"]]], \\\")\\\"]], \
\\\" \\\", \\\"\\\\\\\"\\\\[Times]\\\\\\\"\\\", \\\" \\\", \
RowBox[List[\\\"(\\\", RowBox[List[SubscriptBox[StyleBox[\\\"nmax\\\", \\\"TI\
\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\"+\\\", StyleBox[\\\"1\\\", \
\\\"TR\\\"]]], \\\")\\\"]], \\\" \\\", \\\"\\\\\\\"\\\\[Times]\\\\\\\"\\\", \
\\\" \\\", StyleBox[\\\"\\\\[CenterEllipsis]\\\", \\\"TR\\\"], \\\" \\\", \
\\\"\\\\\\\"\\\\[Times]\\\\\\\"\\\", \\\" \\\", RowBox[List[\\\"(\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"nmax\\\", \\\"TI\\\"], StyleBox[\\\"d\\\
\", \\\"TI\\\"]], \\\"+\\\", StyleBox[\\\"1\\\", \\\"TR\\\"]]], \\\")\\\"]]]]\
\\) array of each generator.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"RegularSequenceGeneratorTable\", \"[\", \
RowBox[List[RowBox[List[\"RegularSequence\", \"[\", \
RowBox[List[StyleBox[\"u\", \"TI\"], \",\", StyleBox[\"matrixlist\", \"TI\"], \
\",\", StyleBox[\"v\", \"TI\"]]], \"]\"]], \",\", StyleBox[\"nmax\", \
\"TI\"]]], \"]\"]]\) gives terms 0 through \!\(\*StyleBox[\"nmax\", \"TI\"]\) \
of the generator sequences for the given regular sequence representation.\n\!\
\(\*RowBox[List[\"RegularSequenceGeneratorTable\", \"[\", \
RowBox[List[RowBox[List[\"RegularSequence\", \"[\", \
RowBox[List[StyleBox[\"u\", \"TI\"], \",\", StyleBox[\"matrixarray\", \
\"TI\"], \",\", StyleBox[\"v\", \"TI\"]]], \"]\"]], \",\", RowBox[List[\"{\", \
RowBox[List[SubscriptBox[StyleBox[\"nmax\", \"TI\"], StyleBox[\"1\", \
\"TR\"]], \",\", SubscriptBox[StyleBox[\"nmax\", \"TI\"], StyleBox[\"2\", \
\"TR\"]], \",\", StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", \
SubscriptBox[StyleBox[\"nmax\", \"TI\"], StyleBox[\"d\", \"TI\"]]]], \
\"}\"]]]], \"]\"]]\) gives the initial \!\(\*RowBox[List[RowBox[List[\"(\", \
RowBox[List[SubscriptBox[StyleBox[\"nmax\", \"TI\"], StyleBox[\"1\", \
\"TR\"]], \"+\", StyleBox[\"1\", \"TR\"]]], \")\"]], \" \", \"\\\"\\[Times]\\\
\"\", \" \", RowBox[List[\"(\", RowBox[List[SubscriptBox[StyleBox[\"nmax\", \
\"TI\"], StyleBox[\"2\", \"TR\"]], \"+\", StyleBox[\"1\", \"TR\"]]], \")\"]], \
\" \", \"\\\"\\[Times]\\\"\", \" \", StyleBox[\"\\[CenterEllipsis]\", \
\"TR\"], \" \", \"\\\"\\[Times]\\\"\", \" \", RowBox[List[\"(\", \
RowBox[List[SubscriptBox[StyleBox[\"nmax\", \"TI\"], StyleBox[\"d\", \
\"TI\"]], \"+\", StyleBox[\"1\", \"TR\"]]], \")\"]]]]\) array of each \
generator.", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None,
     "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`RegularSequenceGeneratorTable, {
      IntegerSequences`RegularSequenceGeneratorTable[
         Pattern[IntegerSequences`Private`sequence, 
          Blank[IntegerSequences`RegularSequence]], 
         PatternTest[
          Pattern[IntegerSequences`Private`nmax, 
           Blank[Integer]], NonNegative]] :> 
       IntegerSequences`RegularSequenceGeneratorTable[
        IntegerSequences`Private`sequence, {IntegerSequences`Private`nmax}], 
       IntegerSequences`RegularSequenceGeneratorTable[
         Pattern[IntegerSequences`Private`sequence, 
          PatternTest[
           IntegerSequences`RegularSequence[
            Blank[], 
            Pattern[IntegerSequences`Private`matrixarray, 
             Blank[]], 
            Pattern[IntegerSequences`Private`v, 
             Blank[]], 
            BlankNullSequence[]], 
           IntegerSequences`Private`RegularSequenceObjectQ]], {
          PatternTest[
           Pattern[IntegerSequences`Private`nmax, 
            BlankSequence[Integer]], NonNegative]}] :> 
       Module[{IntegerSequences`Private`baselist, 
          IntegerSequences`Private`dimension, 
          IntegerSequences`Private`variables, 
          IntegerSequences`Private`failed}, 
         IntegerSequences`Private`failed = 
          Catch[IntegerSequences`Private`baselist = 
             IntegerSequences`Private`RegularSequenceNumerationSystemList[
              IntegerSequences`Private`sequence]; 
            IntegerSequences`Private`dimension = 
             Length[IntegerSequences`Private`baselist]; If[
              Or[
              Length[{IntegerSequences`Private`nmax}] != 
               IntegerSequences`Private`dimension, 
               Not[
                MatchQ[IntegerSequences`Private`baselist, {
                  PatternTest[
                   BlankSequence[Integer], # >= 2& ]}]]], 
              Throw[True]]; IntegerSequences`Private`variables = Table[
               Unique[], {IntegerSequences`Private`dimension}]; False]; 
         Condition[
           Transpose[
            Table[
             Apply[Dot, 
              Append[
               Apply[Part[IntegerSequences`Private`matrixarray, 
                 SlotSequence[1]]& , 
                Transpose[PadRight[
                   MapThread[
                   IntegerSequences`DigitList, {
                    IntegerSequences`Private`variables, 
                    IntegerSequences`Private`baselist}]] + 1], {1}], 
               IntegerSequences`Private`v]], 
             Evaluate[
              Apply[Sequence, 
               
               Thread[{
                IntegerSequences`Private`variables, 0, {
                 IntegerSequences`Private`nmax}}]]]], 
            RotateLeft[
             Range[IntegerSequences`Private`dimension + 1]]], 
           Not[IntegerSequences`Private`failed]]]}], "SubValues" -> None, 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`RegularSequenceGeneratorTable, {
      SyntaxInformation[IntegerSequences`RegularSequenceGeneratorTable] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`RegularSequenceGeneratorTable"], False]]], "Output",Expr\
essionUUID->"4050e733-cc6b-48f7-adea-0dfdfba30ff9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindRegularSequenceFunction", "[", 
  RowBox[{
   RowBox[{"DigitCount", "[", 
    RowBox[{
     RowBox[{"Range", "[", 
      RowBox[{"0", ",", "31"}], "]"}], ",", "2", ",", "1"}], "]"}], ",", 
   "2"}], "]"}]], "Input",ExpressionUUID->"a47819c3-7f45-462c-9617-\
511b47f9e73d"],

Cell[BoxData[
 RowBox[{"RegularSequence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "2"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", "2"}], "]"}]], "Output",ExpressionUUI\
D->"124c72a4-96a8-4f18-870e-32e6977d5957"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox["RegularSequenceGeneratorTable", "Input"], "[", 
  RowBox[{"%", ",", "31"}], "]"}]], "Input",ExpressionUUID->"44b79d99-d9d3-\
4af2-8f71-88315830fd53"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0", ",", "1", ",", "1", ",", "2", ",", "1", ",", "2", ",", "2", ",", "3",
      ",", "1", ",", "2", ",", "2", ",", "3", ",", "2", ",", "3", ",", "3", 
     ",", "4", ",", "1", ",", "2", ",", "2", ",", "3", ",", "2", ",", "3", 
     ",", "3", ",", "4", ",", "2", ",", "3", ",", "3", ",", "4", ",", "3", 
     ",", "4", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "2", ",", "3", ",", "2", ",", "3", ",", "3", ",", "4",
      ",", "2", ",", "3", ",", "3", ",", "4", ",", "3", ",", "4", ",", "4", 
     ",", "5", ",", "2", ",", "3", ",", "3", ",", "4", ",", "3", ",", "4", 
     ",", "4", ",", "5", ",", "3", ",", "4", ",", "4", ",", "5", ",", "4", 
     ",", "5", ",", "5", ",", "6"}], "}"}]}], "}"}]], "Output",ExpressionUUID->\
"8dc6b153-4da9-46a9-b449-9357921d1ce5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindRegularSequenceFunction", "[", 
  RowBox[{
   RowBox[{"Nest", "[", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"matrix", ",", 
       RowBox[{"ArrayFlatten", "[", 
        RowBox[{
         RowBox[{"matrix", "/.", "\[InvisibleSpace]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"1", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"1", ",", "0"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"1", ",", "1"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], "}"}]}], ",", 
            RowBox[{"0", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"0", ",", "1"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"1", ",", "1"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], "}"}]}]}], 
           "}"}]}], ",", "3"}], "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"{", "1", "}"}], "}"}], "}"}], ",", "5"}], "]"}], ",", "2"}], 
  "]"}]], "Input",ExpressionUUID->"15bad9d5-0cd4-429f-931d-dea56d70a72b"],

Cell[BoxData[
 RowBox[{"RegularSequence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], "}"}]}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "2"}], "}"}]}], "]"}]], "Output",ExpressionUUI\
D->"fd152e4c-e86d-4487-9fe9-ca9411b597f9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox["RegularSequenceGeneratorTable", "Input"], "[", 
  RowBox[{"%", ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"6", ",", "5", ",", "4"}], "}"}], "-", "1"}]}], "]"}]], "Input",E\
xpressionUUID->"bb2fe576-9d70-41aa-a853-0d508ed001f6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "1", ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}]}], "}"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "1", ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1", ",", "0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "0", ",", "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0", ",", "0", ",", "0"}], "}"}]}], "}"}]}], 
    "}"}]}], "}"}]], "Output",ExpressionUUID->"e8deb172-ab92-435e-8e69-\
1a654a6ad3b8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", "%", "]"}]], "Input",ExpressionUUID->"a8535322-0ae7-40c6-86a2-29824b2a0eb9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "6", ",", "5", ",", "4"}], "}"}]], "Output",ExpressionUUID\
->"44e53b6c-9409-4ba8-98b0-fd63cb2a90c8"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["RegularSequenceMatrixForm", "Input"]], "Subsubsection",ExpressionUUID->"ae2de193-f1da-40a5-9661-248daa68e789"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "RegularSequenceMatrixForm"}]], "Input",ExpressionUUID->"317363ee-3f7c-4176-bcd7-f278589d65b5"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"RegularSequenceMatrixForm\\\
\", \\\"[\\\", StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\"]\\\"]]\\) prints with \
regular sequences in \\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) in matrix \
form.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "RegularSequenceMatrixForm", "[", 
                    "IntegerSequences`Private`expr_", "]"}], ":=", 
                    RowBox[{
                    "IntegerSequences`Private`expr", "/.", "\[VeryThinSpace]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`sequence_", "?", 
                    "IntegerSequences`Private`RegularSequenceObjectQ"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"MapAt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{"MatrixForm", ",", "#1", ",", 
                    RowBox[{"{", 
                    RowBox[{"Length", "[", 
                    RowBox[{
                    "IntegerSequences`Private`\
RegularSequenceNumerationSystemList", "[", 
                    "IntegerSequences`Private`sequence", "]"}], "]"}], 
                    "}"}]}], "]"}], "&"}], ",", 
                    "IntegerSequences`Private`sequence", ",", "2"}], "]"}]}], 
                    ",", 
                    RowBox[{
                    RowBox[{"FindRegularSequenceFunction", "[", 
                    RowBox[{
                    "IntegerSequences`Private`array_", ",", 
                    "IntegerSequences`Private`numerationsystemlist_", ",", 
                    RowBox[{"IntegerSequences`Private`options", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"FindRegularSequenceFunction", "[", 
                    RowBox[{
                    RowBox[{
                    "Short", "[", "IntegerSequences`Private`array", "]"}], 
                    ",", "IntegerSequences`Private`numerationsystemlist", ",",
                     "IntegerSequences`Private`options"}], "]"}]}]}], 
                    "}"}]}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "RegularSequenceMatrixForm", 
                    "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`RegularSequenceMatrixForm] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`RegularSequenceMatrixForm\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"RegularSequenceMatrixForm\\\
\", \\\"[\\\", StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\"]\\\"]]\\) prints with \
regular sequences in \\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) in matrix \
form.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"RegularSequenceMatrixForm\", \"[\", \
StyleBox[\"expr\", \"TI\"], \"]\"]]\) prints with regular sequences in \
\!\(\*StyleBox[\"expr\", \"TI\"]\) in matrix form.", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`RegularSequenceMatrixForm, {
      IntegerSequences`RegularSequenceMatrixForm[
         Pattern[IntegerSequences`Private`expr, 
          Blank[]]] :> ReplaceAll[IntegerSequences`Private`expr, {PatternTest[
            Pattern[IntegerSequences`Private`sequence, 
             Blank[]], IntegerSequences`Private`RegularSequenceObjectQ] :> 
          MapAt[Map[MatrixForm, #, {
              Length[
               IntegerSequences`Private`RegularSequenceNumerationSystemList[
               IntegerSequences`Private`sequence]]}]& , 
            IntegerSequences`Private`sequence, 2], 
          IntegerSequences`FindRegularSequenceFunction[
            Pattern[IntegerSequences`Private`array, 
             Blank[]], 
            Pattern[IntegerSequences`Private`numerationsystemlist, 
             Blank[]], 
            Pattern[IntegerSequences`Private`options, 
             OptionsPattern[]]] :> 
          IntegerSequences`FindRegularSequenceFunction[
            Short[IntegerSequences`Private`array], 
            IntegerSequences`Private`numerationsystemlist, 
            IntegerSequences`Private`options]}]}], "SubValues" -> None, 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`RegularSequenceMatrixForm, {
      SyntaxInformation[IntegerSequences`RegularSequenceMatrixForm] -> {
        "ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`RegularSequenceMatrixForm"], False]]], "Output",Expressi\
onUUID->"626bb1e4-ee29-4b38-8490-b58829029e82"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindRegularSequenceFunction", "[", 
  RowBox[{
   RowBox[{"DigitCount", "[", 
    RowBox[{
     RowBox[{"Range", "[", 
      RowBox[{"0", ",", "31"}], "]"}], ",", "2", ",", "1"}], "]"}], ",", 
   "2"}], "]"}]], "Input",ExpressionUUID->"d4b3e55c-62dc-4419-ad21-\
d630270bfc03"],

Cell[BoxData[
 RowBox[{"RegularSequence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "2"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", "2"}], "]"}]], "Output",ExpressionUUI\
D->"7f7bc753-0915-436b-af9a-5478453a4de1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceMatrixForm", "[", "%", "]"}]], "Input",ExpressionUUID->"a2a50433-327c-4310-8c30-4ba4dd8c3043"],

Cell[BoxData[
 RowBox[{"RegularSequence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"1", "0"},
         {"0", "1"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]], ",", 
     TagBox[
      RowBox[{"(", "\[NoBreak]", GridBox[{
         {"0", "1"},
         {
          RowBox[{"-", "1"}], "2"}
        },
        GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
        GridBoxSpacings->{"Columns" -> {
            Offset[0.27999999999999997`], {
             Offset[0.7]}, 
            Offset[0.27999999999999997`]}, "Rows" -> {
            Offset[0.2], {
             Offset[0.4]}, 
            Offset[0.2]}}], "\[NoBreak]", ")"}],
      Function[BoxForm`e$, 
       MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", "2"}], "]"}]], "Output",ExpressionUUI\
D->"23bbd5e4-9c18-4c17-8ce2-e33471ed6505"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["RegularSequenceMatrixLength", "Input"]], \
"Subsubsection",ExpressionUUID->"b9ff8d9d-6815-41a9-8c12-cb1267a64b25"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "RegularSequenceMatrixLength"}]], "Input",ExpressionUUID->"167922a2-85b7-4e5a-b5b0-6223d31ab23e"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"\
RegularSequenceMatrixLength\\\", \\\"[\\\", RowBox[List[\\\"RegularSequence\\\
\", \\\"[\\\", RowBox[List[StyleBox[\\\"u\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"matrixarray\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"v\\\", \
\\\"TI\\\"]]], \\\"]\\\"]], \\\"]\\\"]]\\) gives the number of generator \
sequences for the given regular sequence representation.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"RegularSequenceMatrixLength", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`u_", ",", "_", ",", "__"}], 
                    "]"}], ")"}], "?", 
                    "IntegerSequences`Private`RegularSequenceObjectQ"}], 
                    "]"}], ":=", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`u", "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "RegularSequenceMatrixLength", 
                    "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`RegularSequenceMatrixLength] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`RegularSequenceMatrixLength\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"\
RegularSequenceMatrixLength\\\", \\\"[\\\", RowBox[List[\\\"RegularSequence\\\
\", \\\"[\\\", RowBox[List[StyleBox[\\\"u\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"matrixarray\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"v\\\", \
\\\"TI\\\"]]], \\\"]\\\"]], \\\"]\\\"]]\\) gives the number of generator \
sequences for the given regular sequence representation.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"RegularSequenceMatrixLength\", \"[\", \
RowBox[List[\"RegularSequence\", \"[\", RowBox[List[StyleBox[\"u\", \"TI\"], \
\",\", StyleBox[\"matrixarray\", \"TI\"], \",\", StyleBox[\"v\", \"TI\"]]], \
\"]\"]], \"]\"]]\) gives the number of generator sequences for the given \
regular sequence representation.", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`RegularSequenceMatrixLength, {
      IntegerSequences`RegularSequenceMatrixLength[
         PatternTest[
          IntegerSequences`RegularSequence[
           Pattern[IntegerSequences`Private`u, 
            Blank[]], 
           Blank[], 
           BlankSequence[]], 
          IntegerSequences`Private`RegularSequenceObjectQ]] :> 
       Length[IntegerSequences`Private`u]}], "SubValues" -> None, 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`RegularSequenceMatrixLength, {
      SyntaxInformation[IntegerSequences`RegularSequenceMatrixLength] -> {
        "ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`RegularSequenceMatrixLength"], False]]], "Output",Expres\
sionUUID->"ca2089bc-cde6-4596-a327-933437f4bb7e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindRegularSequenceFunction", "[", 
  RowBox[{
   RowBox[{"DigitCount", "[", 
    RowBox[{
     RowBox[{"Range", "[", 
      RowBox[{"0", ",", "31"}], "]"}], ",", "2", ",", "1"}], "]"}], ",", 
   "2"}], "]"}]], "Input",ExpressionUUID->"530e029f-ad6d-4043-affa-\
a240951c0724"],

Cell[BoxData[
 RowBox[{"RegularSequence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "2"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", "2"}], "]"}]], "Output",ExpressionUUI\
D->"55977277-9de3-4b6d-ab02-906431ff3702"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceMatrixLength", "[", "%", "]"}]], "Input",ExpressionUU\
ID->"c19d185d-88e3-4c2e-860b-6c63fc18b760"],

Cell[BoxData["2"], "Output",ExpressionUUID->"e0a6213a-ed41-421a-b4c1-0f9624d7e763"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["RegularSequenceRecurrence", "Input"]], "Subsubsection",ExpressionUUID->"a1767e5a-7657-4f34-bdf6-b3f9e53ad990"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "RegularSequenceRecurrence"}]], "Input",ExpressionUUID->"73ccf739-f82b-4003-b88b-993b68f93e06"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"RegularSequenceRecurrence\\\
\", \\\"[\\\", RowBox[List[RowBox[List[\\\"RegularSequence\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"u\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"matrixlist\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"v\\\", \
\\\"TI\\\"]]], \\\"]\\\"]], \\\",\\\", RowBox[List[StyleBox[\\\"s\\\", \\\"TI\
\\\"], \\\"[\\\", StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]]], \\\"]\\\"]]\
\\) gives the linear relations between subsequences of the generator \
sequences \\!\\(\\*RowBox[List[SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], \
StyleBox[\\\"i\\\", \\\"TI\\\"]], \\\"[\\\", StyleBox[\\\"n\\\", \\\"TI\\\"], \
\\\"]\\\"]]\\) for the given representation of a regular \
sequence.\\n\\!\\(\\*RowBox[List[\\\"RegularSequenceRecurrence\\\", \
\\\"[\\\", RowBox[List[RowBox[List[\\\"RegularSequence\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"u\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"matrixarray\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"v\\\", \
\\\"TI\\\"]]], \\\"]\\\"]], \\\",\\\", RowBox[List[StyleBox[\\\"s\\\", \\\"TI\
\\\"], \\\"[\\\", RowBox[List[SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"n\\\", \
\\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", \
StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", \
SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], StyleBox[\\\"d\\\", \
\\\"TI\\\"]]]], \\\"]\\\"]]]], \\\"]\\\"]]\\) gives relations for a \
\\!\\(\\*StyleBox[\\\"d\\\", \\\"TI\\\"]\\)\[Hyphen]dimensional regular \
sequence.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"RegularSequenceRecurrence", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`sequence", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    "_", ",", "IntegerSequences`Private`matrixarray_", ",", 
                    "IntegerSequences`Private`v_", ",", "___"}], "]"}], ")"}],
                     "?", 
                    "IntegerSequences`Private`RegularSequenceObjectQ"}]}], 
                    ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`a_", "[", 
                    RowBox[{
                    "IntegerSequences`Private`nsequence__", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}], "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"IntegerSequences`Private`a", ",", 
                    RowBox[{
                    "Alternatives", "[", "IntegerSequences`Private`nsequence",
                     "]"}]}], "]"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`baselist", ",", 
                    "IntegerSequences`Private`sequencedimension", ",", 
                    "IntegerSequences`Private`basis", ",", 
                    "IntegerSequences`Private`failed"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`failed", "=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`baselist", "=", 
                    RowBox[{
                    "IntegerSequences`Private`\
RegularSequenceNumerationSystemList", "[", 
                    "IntegerSequences`Private`sequence", "]"}]}], ";", 
                    RowBox[{"IntegerSequences`Private`sequencedimension", "=", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`baselist", 
                    "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", 
                    RowBox[{"{", "IntegerSequences`Private`nsequence", "}"}], 
                    "]"}], "\[NotEqual]", 
                    "IntegerSequences`Private`sequencedimension"}], "||", 
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"IntegerSequences`Private`baselist", ",", 
                    RowBox[{"{", 
                    RowBox[{"__Integer", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"#1", "\[GreaterEqual]", "2"}], "&"}], ")"}]}], 
                    "}"}]}], "]"}]}]}], ",", 
                    RowBox[{"Throw", "[", "True", "]"}]}], "]"}], ";", 
                    RowBox[{"IntegerSequences`Private`basis", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    SubscriptBox["IntegerSequences`Private`a", "#1"], "[", 
                    "IntegerSequences`Private`nsequence", "]"}], "&"}], ")"}],
                     "/@", 
                    RowBox[{"Range", "[", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`v", "]"}], 
                    "]"}]}]}], ";", "False"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`matrix", ",", 
                    "IntegerSequences`Private`indices"}], "}"}], ",", 
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "IntegerSequences`Private`basis", "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{"{", "IntegerSequences`Private`nsequence", "}"}], 
                    "\[Rule]", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`baselist", " ", 
                    RowBox[{"{", "IntegerSequences`Private`nsequence", 
                    "}"}]}], "+", "IntegerSequences`Private`indices", "-", 
                    "1"}]}], "]"}]}], ")"}], "\[Equal]", 
                    RowBox[{
                    "IntegerSequences`Private`matrix", ".", 
                    "IntegerSequences`Private`basis"}]}], "]"}]}], "]"}], ",",
                     "IntegerSequences`Private`matrixarray", ",", 
                    RowBox[{
                    "{", "IntegerSequences`Private`sequencedimension", 
                    "}"}]}], "]"}], ",", 
                    RowBox[{"Range", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`sequencedimension", "+", "1"}], 
                    ",", "1", ",", 
                    RowBox[{"-", "1"}]}], "]"}]}], "]"}], ",", 
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "IntegerSequences`Private`basis", "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{
                    "Alternatives", "[", "IntegerSequences`Private`nsequence",
                     "]"}], "\[Rule]", "0"}]}], ")"}], "\[Equal]", 
                    "IntegerSequences`Private`v"}], "]"}]}], "}"}], "]"}], "/;", 
                    RowBox[{"!", "IntegerSequences`Private`failed"}]}]}]}], 
                    "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "RegularSequenceRecurrence", 
                    "]"}], "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_"}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`RegularSequenceRecurrence] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`RegularSequenceRecurrence\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"RegularSequenceRecurrence\\\
\", \\\"[\\\", RowBox[List[RowBox[List[\\\"RegularSequence\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"u\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"matrixlist\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"v\\\", \
\\\"TI\\\"]]], \\\"]\\\"]], \\\",\\\", RowBox[List[StyleBox[\\\"s\\\", \\\"TI\
\\\"], \\\"[\\\", StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]]], \\\"]\\\"]]\
\\) gives the linear relations between subsequences of the generator \
sequences \\!\\(\\*RowBox[List[SubscriptBox[StyleBox[\\\"a\\\", \\\"TI\\\"], \
StyleBox[\\\"i\\\", \\\"TI\\\"]], \\\"[\\\", StyleBox[\\\"n\\\", \\\"TI\\\"], \
\\\"]\\\"]]\\) for the given representation of a regular \
sequence.\\n\\!\\(\\*RowBox[List[\\\"RegularSequenceRecurrence\\\", \
\\\"[\\\", RowBox[List[RowBox[List[\\\"RegularSequence\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"u\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"matrixarray\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"v\\\", \
\\\"TI\\\"]]], \\\"]\\\"]], \\\",\\\", RowBox[List[StyleBox[\\\"s\\\", \\\"TI\
\\\"], \\\"[\\\", RowBox[List[SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], \
StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"n\\\", \
\\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", \
StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \\\",\\\", \
SubscriptBox[StyleBox[\\\"n\\\", \\\"TI\\\"], StyleBox[\\\"d\\\", \
\\\"TI\\\"]]]], \\\"]\\\"]]]], \\\"]\\\"]]\\) gives relations for a \
\\!\\(\\*StyleBox[\\\"d\\\", \\\"TI\\\"]\\)\[Hyphen]dimensional regular \
sequence.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"RegularSequenceRecurrence\", \"[\", \
RowBox[List[RowBox[List[\"RegularSequence\", \"[\", \
RowBox[List[StyleBox[\"u\", \"TI\"], \",\", StyleBox[\"matrixlist\", \"TI\"], \
\",\", StyleBox[\"v\", \"TI\"]]], \"]\"]], \",\", RowBox[List[StyleBox[\"s\", \
\"TI\"], \"[\", StyleBox[\"n\", \"TI\"], \"]\"]]]], \"]\"]]\) gives the \
linear relations between subsequences of the generator sequences \
\!\(\*RowBox[List[SubscriptBox[StyleBox[\"a\", \"TI\"], StyleBox[\"i\", \
\"TI\"]], \"[\", StyleBox[\"n\", \"TI\"], \"]\"]]\) for the given \
representation of a regular sequence.\n\
\!\(\*RowBox[List[\"RegularSequenceRecurrence\", \"[\", \
RowBox[List[RowBox[List[\"RegularSequence\", \"[\", \
RowBox[List[StyleBox[\"u\", \"TI\"], \",\", StyleBox[\"matrixarray\", \
\"TI\"], \",\", StyleBox[\"v\", \"TI\"]]], \"]\"]], \",\", \
RowBox[List[StyleBox[\"s\", \"TI\"], \"[\", \
RowBox[List[SubscriptBox[StyleBox[\"n\", \"TI\"], StyleBox[\"1\", \"TR\"]], \
\",\", SubscriptBox[StyleBox[\"n\", \"TI\"], StyleBox[\"2\", \"TR\"]], \",\", \
StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", SubscriptBox[StyleBox[\"n\", \
\"TI\"], StyleBox[\"d\", \"TI\"]]]], \"]\"]]]], \"]\"]]\) gives relations for \
a \!\(\*StyleBox[\"d\", \"TI\"]\)\[Hyphen]dimensional regular sequence.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`RegularSequenceRecurrence, {
      IntegerSequences`RegularSequenceRecurrence[
         Pattern[IntegerSequences`Private`sequence, 
          PatternTest[
           IntegerSequences`RegularSequence[
            Blank[], 
            Pattern[IntegerSequences`Private`matrixarray, 
             Blank[]], 
            Pattern[IntegerSequences`Private`v, 
             Blank[]], 
            BlankNullSequence[]], 
           IntegerSequences`Private`RegularSequenceObjectQ]], 
         Condition[
          Pattern[IntegerSequences`Private`a, 
           Blank[]][
           PatternTest[
            Pattern[IntegerSequences`Private`nsequence, 
             BlankSequence[]], IntegerSequences`Private`PlausibleVariableQ]], 
          FreeQ[IntegerSequences`Private`a, 
           Alternatives[IntegerSequences`Private`nsequence]]]] :> 
       Module[{IntegerSequences`Private`baselist, 
          IntegerSequences`Private`sequencedimension, 
          IntegerSequences`Private`basis, IntegerSequences`Private`failed}, 
         IntegerSequences`Private`failed = 
          Catch[IntegerSequences`Private`baselist = 
             IntegerSequences`Private`RegularSequenceNumerationSystemList[
              IntegerSequences`Private`sequence]; 
            IntegerSequences`Private`sequencedimension = 
             Length[IntegerSequences`Private`baselist]; If[
              Or[
              Length[{IntegerSequences`Private`nsequence}] != 
               IntegerSequences`Private`sequencedimension, 
               Not[
                MatchQ[IntegerSequences`Private`baselist, {
                  PatternTest[
                   BlankSequence[Integer], # >= 2& ]}]]], 
              Throw[True]]; 
            IntegerSequences`Private`basis = 
             Map[Subscript[IntegerSequences`Private`a, #][
               IntegerSequences`Private`nsequence]& , 
               Range[
                Length[IntegerSequences`Private`v]]]; False]; Condition[
           Thread[{
             Transpose[
              MapIndexed[
               
               Function[{
                IntegerSequences`Private`matrix, 
                 IntegerSequences`Private`indices}, 
                Thread[ReplaceAll[IntegerSequences`Private`basis, 
                   
                   Thread[{IntegerSequences`Private`nsequence} -> 
                    IntegerSequences`Private`baselist {
                    IntegerSequences`Private`nsequence} + 
                    IntegerSequences`Private`indices - 1]] == 
                 Dot[IntegerSequences`Private`matrix, 
                   IntegerSequences`Private`basis]]], 
               IntegerSequences`Private`matrixarray, {
               IntegerSequences`Private`sequencedimension}], 
              Range[IntegerSequences`Private`sequencedimension + 1, 1, -1]], 
             Thread[
             ReplaceAll[
               IntegerSequences`Private`basis, 
                Alternatives[IntegerSequences`Private`nsequence] -> 0] == 
              IntegerSequences`Private`v]}], 
           Not[IntegerSequences`Private`failed]]]}], "SubValues" -> None, 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`RegularSequenceRecurrence, {
      SyntaxInformation[IntegerSequences`RegularSequenceRecurrence] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`RegularSequenceRecurrence"], False]]], "Output",Expressi\
onUUID->"6ff44786-b79e-4081-8427-2df294a9657a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindRegularSequenceFunction", "[", 
  RowBox[{
   RowBox[{"DigitCount", "[", 
    RowBox[{
     RowBox[{"Range", "[", 
      RowBox[{"0", ",", "31"}], "]"}], ",", "2", ",", "1"}], "]"}], ",", 
   "2"}], "]"}]], "Input",ExpressionUUID->"2bc47405-28d9-456f-b209-\
78f872ae3dec"],

Cell[BoxData[
 RowBox[{"RegularSequence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "0"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"0", ",", "1"}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "2"}], "}"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "1"}], "}"}], ",", "2"}], "]"}]], "Output",ExpressionUUI\
D->"714a5869-31a4-4da5-88e6-1613f2d9495c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceRecurrence", "[", 
  RowBox[{"%", ",", 
   RowBox[{"s", "[", "n", "]"}]}], "]"}]], "Input",ExpressionUUID->"8347ae95-\
86ad-4e04-9d0b-56432ffa9cdf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         SubscriptBox["s", "1"], "[", 
         RowBox[{"2", " ", "n"}], "]"}], "\[Equal]", 
        RowBox[{
         SubscriptBox["s", "1"], "[", "n", "]"}]}], ",", 
       RowBox[{
        RowBox[{
         SubscriptBox["s", "1"], "[", 
         RowBox[{"1", "+", 
          RowBox[{"2", " ", "n"}]}], "]"}], "\[Equal]", 
        RowBox[{
         SubscriptBox["s", "2"], "[", "n", "]"}]}]}], "}"}], ",", 
     RowBox[{
      RowBox[{
       SubscriptBox["s", "1"], "[", "0", "]"}], "\[Equal]", "0"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         SubscriptBox["s", "2"], "[", 
         RowBox[{"2", " ", "n"}], "]"}], "\[Equal]", 
        RowBox[{
         SubscriptBox["s", "2"], "[", "n", "]"}]}], ",", 
       RowBox[{
        RowBox[{
         SubscriptBox["s", "2"], "[", 
         RowBox[{"1", "+", 
          RowBox[{"2", " ", "n"}]}], "]"}], "\[Equal]", 
        RowBox[{
         RowBox[{"-", 
          RowBox[{
           SubscriptBox["s", "1"], "[", "n", "]"}]}], "+", 
         RowBox[{"2", " ", 
          RowBox[{
           SubscriptBox["s", "2"], "[", "n", "]"}]}]}]}]}], "}"}], ",", 
     RowBox[{
      RowBox[{
       SubscriptBox["s", "2"], "[", "0", "]"}], "\[Equal]", "1"}]}], "}"}]}], 
  "}"}]], "Output",ExpressionUUID->"efac85fa-8b21-4f2f-b235-eaf16406cfea"]
}, Open  ]],

Cell[TextData[{
 StyleBox["FindRegularSequenceRecurrence", "Input"],
 " gives the relations in terms of subsequences of the original rather than \
as generators of the ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]],ExpressionUUID->
  "889e5b35-67e0-4628-ae2e-f3029b2500ef"],
 "-kernel:"
}], "Text",ExpressionUUID->"c043a7d9-43f5-4f6d-be9a-0036c5428a4a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindRegularSequenceRecurrence", "[", 
  RowBox[{
   RowBox[{"DigitCount", "[", 
    RowBox[{
     RowBox[{"Range", "[", 
      RowBox[{"0", ",", "31"}], "]"}], ",", "2", ",", "1"}], "]"}], ",", "2", 
   ",", 
   RowBox[{"s", "[", "n", "]"}]}], "]"}]], "Input",ExpressionUUID->"1be3142d-\
e193-41fa-8986-888add1cbe9c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"s", "[", 
     RowBox[{"2", " ", "n"}], "]"}], "\[Equal]", 
    RowBox[{"s", "[", "n", "]"}]}], ",", 
   RowBox[{
    RowBox[{"s", "[", 
     RowBox[{"1", "+", 
      RowBox[{"4", " ", "n"}]}], "]"}], "\[Equal]", 
    RowBox[{"s", "[", 
     RowBox[{"1", "+", 
      RowBox[{"2", " ", "n"}]}], "]"}]}], ",", 
   RowBox[{
    RowBox[{"s", "[", 
     RowBox[{"3", "+", 
      RowBox[{"4", " ", "n"}]}], "]"}], "\[Equal]", 
    RowBox[{
     RowBox[{"-", 
      RowBox[{"s", "[", "n", "]"}]}], "+", 
     RowBox[{"2", " ", 
      RowBox[{"s", "[", 
       RowBox[{"1", "+", 
        RowBox[{"2", " ", "n"}]}], "]"}]}]}]}], ",", 
   RowBox[{
    RowBox[{"s", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
   RowBox[{
    RowBox[{"s", "[", "1", "]"}], "\[Equal]", "1"}]}], "}"}]], "Output",Expres\
sionUUID->"c0c3010c-4c6f-46b3-bd17-1a5a0224d640"]
}, Open  ]],

Cell[TextData[{
 "A ",
 Cell[BoxData[
  FormBox["3", TraditionalForm]],ExpressionUUID->
  "fd2e25ad-307a-4f0a-bf37-fdf131376a09"],
 "-dimensional sequence:"
}], "Text",ExpressionUUID->"b2b27b01-b6ed-4145-902a-a8d9d6b44232"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindRegularSequenceFunction", "[", 
  RowBox[{
   RowBox[{"Nest", "[", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"matrix", ",", 
       RowBox[{"ArrayFlatten", "[", 
        RowBox[{
         RowBox[{"matrix", "/.", "\[VeryThinSpace]", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"1", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"1", ",", "0"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"1", ",", "1"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], "}"}]}], ",", 
            RowBox[{"0", "\[Rule]", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"0", ",", "1"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"1", ",", "1"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], "}"}]}]}], 
           "}"}]}], ",", "3"}], "]"}]}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"{", 
       RowBox[{"{", "1", "}"}], "}"}], "}"}], ",", "5"}], "]"}], ",", "2"}], 
  "]"}]], "Input",ExpressionUUID->"90e68aff-e045-4371-98ce-4b7f4f528c15"],

Cell[BoxData[
 RowBox[{"RegularSequence", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], "}"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], "}"}], ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}]}], "}"}]}], "}"}]}], "}"}]}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "2"}], "}"}]}], "]"}]], "Output",ExpressionUUI\
D->"e5e00330-cda2-437d-81cc-611fb415be1e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceRecurrence", "[", 
  RowBox[{"%", ",", 
   RowBox[{"s", "[", 
    RowBox[{"l", ",", "m", ",", "n"}], "]"}]}], "]"}]], "Input",ExpressionUUID\
->"ac65f5fd-cd31-4a81-b533-a657e8861f7d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{
             SubscriptBox["s", "1"], "[", 
             RowBox[{
              RowBox[{"2", " ", "l"}], ",", 
              RowBox[{"2", " ", "m"}], ",", 
              RowBox[{"2", " ", "n"}]}], "]"}], "\[Equal]", 
            RowBox[{
             SubscriptBox["s", "1"], "[", 
             RowBox[{"l", ",", "m", ",", "n"}], "]"}]}], ",", 
           RowBox[{
            RowBox[{
             SubscriptBox["s", "1"], "[", 
             RowBox[{
              RowBox[{"1", "+", 
               RowBox[{"2", " ", "l"}]}], ",", 
              RowBox[{"2", " ", "m"}], ",", 
              RowBox[{"2", " ", "n"}]}], "]"}], "\[Equal]", 
            RowBox[{
             RowBox[{
              SubscriptBox["s", "1"], "[", 
              RowBox[{"l", ",", "m", ",", "n"}], "]"}], "+", 
             RowBox[{
              SubscriptBox["s", "2"], "[", 
              RowBox[{"l", ",", "m", ",", "n"}], "]"}]}]}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{
             SubscriptBox["s", "1"], "[", 
             RowBox[{
              RowBox[{"2", " ", "l"}], ",", 
              RowBox[{"1", "+", 
               RowBox[{"2", " ", "m"}]}], ",", 
              RowBox[{"2", " ", "n"}]}], "]"}], "\[Equal]", 
            RowBox[{
             RowBox[{
              SubscriptBox["s", "1"], "[", 
              RowBox[{"l", ",", "m", ",", "n"}], "]"}], "+", 
             RowBox[{
              SubscriptBox["s", "2"], "[", 
              RowBox[{"l", ",", "m", ",", "n"}], "]"}]}]}], ",", 
           RowBox[{
            RowBox[{
             SubscriptBox["s", "1"], "[", 
             RowBox[{
              RowBox[{"1", "+", 
               RowBox[{"2", " ", "l"}]}], ",", 
              RowBox[{"1", "+", 
               RowBox[{"2", " ", "m"}]}], ",", 
              RowBox[{"2", " ", "n"}]}], "]"}], "\[Equal]", 
            RowBox[{
             SubscriptBox["s", "2"], "[", 
             RowBox[{"l", ",", "m", ",", "n"}], "]"}]}]}], "}"}]}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{
             SubscriptBox["s", "1"], "[", 
             RowBox[{
              RowBox[{"2", " ", "l"}], ",", 
              RowBox[{"2", " ", "m"}], ",", 
              RowBox[{"1", "+", 
               RowBox[{"2", " ", "n"}]}]}], "]"}], "\[Equal]", 
            RowBox[{
             SubscriptBox["s", "2"], "[", 
             RowBox[{"l", ",", "m", ",", "n"}], "]"}]}], ",", 
           RowBox[{
            RowBox[{
             SubscriptBox["s", "1"], "[", 
             RowBox[{
              RowBox[{"1", "+", 
               RowBox[{"2", " ", "l"}]}], ",", 
              RowBox[{"2", " ", "m"}], ",", 
              RowBox[{"1", "+", 
               RowBox[{"2", " ", "n"}]}]}], "]"}], "\[Equal]", 
            RowBox[{
             RowBox[{
              SubscriptBox["s", "1"], "[", 
              RowBox[{"l", ",", "m", ",", "n"}], "]"}], "+", 
             RowBox[{
              SubscriptBox["s", "2"], "[", 
              RowBox[{"l", ",", "m", ",", "n"}], "]"}]}]}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{
             SubscriptBox["s", "1"], "[", 
             RowBox[{
              RowBox[{"2", " ", "l"}], ",", 
              RowBox[{"1", "+", 
               RowBox[{"2", " ", "m"}]}], ",", 
              RowBox[{"1", "+", 
               RowBox[{"2", " ", "n"}]}]}], "]"}], "\[Equal]", 
            RowBox[{
             RowBox[{
              SubscriptBox["s", "1"], "[", 
              RowBox[{"l", ",", "m", ",", "n"}], "]"}], "+", 
             RowBox[{
              SubscriptBox["s", "2"], "[", 
              RowBox[{"l", ",", "m", ",", "n"}], "]"}]}]}], ",", 
           RowBox[{
            RowBox[{
             SubscriptBox["s", "1"], "[", 
             RowBox[{
              RowBox[{"1", "+", 
               RowBox[{"2", " ", "l"}]}], ",", 
              RowBox[{"1", "+", 
               RowBox[{"2", " ", "m"}]}], ",", 
              RowBox[{"1", "+", 
               RowBox[{"2", " ", "n"}]}]}], "]"}], "\[Equal]", 
            RowBox[{
             SubscriptBox["s", "1"], "[", 
             RowBox[{"l", ",", "m", ",", "n"}], "]"}]}]}], "}"}]}], "}"}]}], 
      "}"}], ",", 
     RowBox[{
      RowBox[{
       SubscriptBox["s", "1"], "[", 
       RowBox[{"0", ",", "0", ",", "0"}], "]"}], "\[Equal]", "1"}]}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{
             SubscriptBox["s", "2"], "[", 
             RowBox[{
              RowBox[{"2", " ", "l"}], ",", 
              RowBox[{"2", " ", "m"}], ",", 
              RowBox[{"2", " ", "n"}]}], "]"}], "\[Equal]", 
            RowBox[{
             SubscriptBox["s", "2"], "[", 
             RowBox[{"l", ",", "m", ",", "n"}], "]"}]}], ",", 
           RowBox[{
            RowBox[{
             SubscriptBox["s", "2"], "[", 
             RowBox[{
              RowBox[{"1", "+", 
               RowBox[{"2", " ", "l"}]}], ",", 
              RowBox[{"2", " ", "m"}], ",", 
              RowBox[{"2", " ", "n"}]}], "]"}], "\[Equal]", "0"}]}], "}"}], 
         ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{
             SubscriptBox["s", "2"], "[", 
             RowBox[{
              RowBox[{"2", " ", "l"}], ",", 
              RowBox[{"1", "+", 
               RowBox[{"2", " ", "m"}]}], ",", 
              RowBox[{"2", " ", "n"}]}], "]"}], "\[Equal]", "0"}], ",", 
           RowBox[{
            RowBox[{
             SubscriptBox["s", "2"], "[", 
             RowBox[{
              RowBox[{"1", "+", 
               RowBox[{"2", " ", "l"}]}], ",", 
              RowBox[{"1", "+", 
               RowBox[{"2", " ", "m"}]}], ",", 
              RowBox[{"2", " ", "n"}]}], "]"}], "\[Equal]", 
            RowBox[{
             SubscriptBox["s", "1"], "[", 
             RowBox[{"l", ",", "m", ",", "n"}], "]"}]}]}], "}"}]}], "}"}], 
       ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{
             SubscriptBox["s", "2"], "[", 
             RowBox[{
              RowBox[{"2", " ", "l"}], ",", 
              RowBox[{"2", " ", "m"}], ",", 
              RowBox[{"1", "+", 
               RowBox[{"2", " ", "n"}]}]}], "]"}], "\[Equal]", 
            RowBox[{
             SubscriptBox["s", "1"], "[", 
             RowBox[{"l", ",", "m", ",", "n"}], "]"}]}], ",", 
           RowBox[{
            RowBox[{
             SubscriptBox["s", "2"], "[", 
             RowBox[{
              RowBox[{"1", "+", 
               RowBox[{"2", " ", "l"}]}], ",", 
              RowBox[{"2", " ", "m"}], ",", 
              RowBox[{"1", "+", 
               RowBox[{"2", " ", "n"}]}]}], "]"}], "\[Equal]", "0"}]}], "}"}],
          ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{
             SubscriptBox["s", "2"], "[", 
             RowBox[{
              RowBox[{"2", " ", "l"}], ",", 
              RowBox[{"1", "+", 
               RowBox[{"2", " ", "m"}]}], ",", 
              RowBox[{"1", "+", 
               RowBox[{"2", " ", "n"}]}]}], "]"}], "\[Equal]", "0"}], ",", 
           RowBox[{
            RowBox[{
             SubscriptBox["s", "2"], "[", 
             RowBox[{
              RowBox[{"1", "+", 
               RowBox[{"2", " ", "l"}]}], ",", 
              RowBox[{"1", "+", 
               RowBox[{"2", " ", "m"}]}], ",", 
              RowBox[{"1", "+", 
               RowBox[{"2", " ", "n"}]}]}], "]"}], "\[Equal]", 
            RowBox[{
             SubscriptBox["s", "2"], "[", 
             RowBox[{"l", ",", "m", ",", "n"}], "]"}]}]}], "}"}]}], "}"}]}], 
      "}"}], ",", 
     RowBox[{
      RowBox[{
       SubscriptBox["s", "2"], "[", 
       RowBox[{"0", ",", "0", ",", "0"}], "]"}], "\[Equal]", "0"}]}], "}"}]}],
   "}"}]], "Output",ExpressionUUID->"fa328649-4d0e-4a49-8bb9-5bbf58b4e59b"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["RegularSequenceReduce", "Input"]], "Subsubsection",ExpressionUUID->"353ccfa4-2916-41aa-91e4-dd0d65220132"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "RegularSequenceReduce"}]], "Input",ExpressionUUID->"3fd1d8cf-0ca2-4c23-8e55-0e577d1dab68"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"RegularSequenceReduce\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) attempts to reduce \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) to a single RegularSequence \
object as a function of \\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\).\\n\\!\\(\
\\*RowBox[List[\\\"RegularSequenceReduce\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"k\\\", \
\\\"TI\\\"]]], \\\"]\\\"]]\\) attempts to reduce \\!\\(\\*StyleBox[\\\"expr\\\
\", \\\"TI\\\"]\\) to a \\!\\(\\*StyleBox[\\\"k\\\", \
\\\"TI\\\"]\\)\[Hyphen]regular sequence.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    "BaumSweet", "[", "IntegerSequences`Private`n_", "]"}], 
                    ",", "IntegerSequences`Private`n_", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "/;", 
                    RowBox[{
                    "IntegerSequences`Private`PlausibleVariableQ", "[", 
                    "IntegerSequences`Private`n", "]"}]}], ":=", 
                    RowBox[{
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], ",", "2"}], "]"}], "[", 
                    "IntegerSequences`Private`n", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    "RudinShapiro", "[", "IntegerSequences`Private`n_", "]"}],
                     ",", "IntegerSequences`Private`n_", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "/;", 
                    RowBox[{
                    "IntegerSequences`Private`PlausibleVariableQ", "[", 
                    "IntegerSequences`Private`n", "]"}]}], ":=", 
                    RowBox[{
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], ",", "2"}], "]"}], "[", 
                    "IntegerSequences`Private`n", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    "ThueMorse", "[", "IntegerSequences`Private`n_", "]"}], 
                    ",", "IntegerSequences`Private`n_", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "/;", 
                    RowBox[{
                    "IntegerSequences`Private`PlausibleVariableQ", "[", 
                    "IntegerSequences`Private`n", "]"}]}], ":=", 
                    RowBox[{
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}], ",", "2"}], "]"}], "[", 
                    "IntegerSequences`Private`n", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    "SternBrocot", "[", "IntegerSequences`Private`n_", "]"}], 
                    ",", "IntegerSequences`Private`n_", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "/;", 
                    RowBox[{
                    "IntegerSequences`Private`PlausibleVariableQ", "[", 
                    "IntegerSequences`Private`n", "]"}]}], ":=", 
                    RowBox[{
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "2"}], "}"}]}], "}"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}], ",", "2"}], "]"}], "[", 
                    "IntegerSequences`Private`n", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    "BitLength", "[", "IntegerSequences`Private`n_", "]"}], 
                    ",", "IntegerSequences`Private`n_", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "/;", 
                    RowBox[{
                    "IntegerSequences`Private`PlausibleVariableQ", "[", 
                    "IntegerSequences`Private`n", "]"}]}], ":=", 
                    RowBox[{
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "2", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1", ",", "1"}], "}"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "0", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "0", ",", "2"}], "}"}]}], 
                    "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", "2"}], 
                    "]"}], "[", "IntegerSequences`Private`n", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    "BitShiftRight", "[", "IntegerSequences`Private`n_", 
                    "]"}], ",", "IntegerSequences`Private`n_", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "/;", 
                    RowBox[{
                    "IntegerSequences`Private`PlausibleVariableQ", "[", 
                    "IntegerSequences`Private`n", "]"}]}], ":=", 
                    RowBox[{
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "2", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "2", ",", "1"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"-", "2"}], ",", "3"}], "}"}]}], "}"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", "2"}], 
                    "]"}], "[", "IntegerSequences`Private`n", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{"DigitCount", "[", 
                    RowBox[{
                    "IntegerSequences`Private`n_", ",", 
                    "IntegerSequences`Private`base_", ",", "0"}], "]"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`n_", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`base_Integer", "/;", 
                    RowBox[{
                    "IntegerSequences`Private`base", "\[GreaterEqual]", 
                    "2"}]}], "}"}]}], "]"}], ":=", 
                    RowBox[{
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "2", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1", ",", "1"}], "}"}]}], "}"}], 
                    "}"}], ",", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "1"}], "}"}]}], "}"}], ",", 
                    RowBox[{"IntegerSequences`Private`base", "-", "1"}]}], 
                    "]"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1", ",", "0"}], "}"}], ",", 
                    "IntegerSequences`Private`base"}], "]"}], "[", 
                    "IntegerSequences`Private`n", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"DigitCount", "[", 
                    RowBox[{
                    "IntegerSequences`Private`n_", ",", 
                    "IntegerSequences`Private`base_", ",", 
                    "IntegerSequences`Private`d_Integer"}], "]"}], "/;", 
                    RowBox[{
                    "1", "\[LessEqual]", "IntegerSequences`Private`d", 
                    "\[LessEqual]", 
                    RowBox[{"IntegerSequences`Private`base", "-", "1"}]}]}], 
                    ",", 
                    RowBox[{
                    "IntegerSequences`Private`n_", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`base_Integer", "/;", 
                    RowBox[{
                    "IntegerSequences`Private`base", "\[GreaterEqual]", 
                    "2"}]}], "}"}]}], "]"}], ":=", 
                    RowBox[{
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], ",", 
                    RowBox[{"ReplacePart", "[", 
                    RowBox[{
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{
                    RowBox[{"IdentityMatrix", "[", "2", "]"}], ",", 
                    "IntegerSequences`Private`base"}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`d", "+", "1"}], 
                    "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "2"}], "}"}]}], "}"}]}]}], "]"}],
                     ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}], ",", 
                    "IntegerSequences`Private`base"}], "]"}], "[", 
                    "IntegerSequences`Private`n", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{"IntegerExponent", "[", 
                    RowBox[{
                    RowBox[{"1", "+", "IntegerSequences`Private`n_"}], ",", 
                    "IntegerSequences`Private`base_"}], "]"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`n_", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`base_Integer", "/;", 
                    RowBox[{
                    "IntegerSequences`Private`base", "\[GreaterEqual]", 
                    "2"}]}], "}"}]}], "]"}], ":=", 
                    RowBox[{
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], ",", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}], ",", 
                    RowBox[{"IntegerSequences`Private`base", "-", "1"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "2"}], "}"}]}], "}"}]}], "]"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}], ",", 
                    "IntegerSequences`Private`base"}], "]"}], "[", 
                    "IntegerSequences`Private`n", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerLength", "[", "IntegerSequences`Private`n_", 
                    "]"}], ",", "IntegerSequences`Private`n_", ",", 
                    RowBox[{"{", "10", "}"}]}], "]"}], "/;", 
                    RowBox[{
                    "IntegerSequences`Private`PlausibleVariableQ", "[", 
                    "IntegerSequences`Private`n", "]"}]}], ":=", 
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{"IntegerLength", "[", 
                    RowBox[{"IntegerSequences`Private`n", ",", "10"}], "]"}], 
                    ",", "IntegerSequences`Private`n", ",", 
                    RowBox[{"{", "10", "}"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{"IntegerLength", "[", 
                    RowBox[{
                    "IntegerSequences`Private`n_", ",", 
                    "IntegerSequences`Private`base_"}], "]"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`n_", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`base_Integer", "/;", 
                    RowBox[{
                    "IntegerSequences`Private`base", "\[GreaterEqual]", 
                    "2"}]}], "}"}]}], "]"}], ":=", 
                    RowBox[{
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "2", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "1", ",", "1"}], "}"}]}], "}"}], 
                    "}"}], ",", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "0", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "0", ",", "2"}], "}"}]}], "}"}], 
                    ",", 
                    RowBox[{"IntegerSequences`Private`base", "-", "1"}]}], 
                    "]"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
                    "IntegerSequences`Private`base"}], "]"}], "[", 
                    "IntegerSequences`Private`n", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    "BitNot", "[", "IntegerSequences`Private`n_", "]"}], ",", 
                    "IntegerSequences`Private`n_", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "/;", 
                    RowBox[{
                    "IntegerSequences`Private`PlausibleVariableQ", "[", 
                    "IntegerSequences`Private`n", "]"}]}], ":=", 
                    RowBox[{
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "2"}], ",", "3"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}]}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", 
                    RowBox[{"-", "1"}]}], "}"}], ",", "2"}], "]"}], "[", 
                    "IntegerSequences`Private`n", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    "BitShiftLeft", "[", "IntegerSequences`Private`n_", "]"}],
                     ",", "IntegerSequences`Private`n_", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "/;", 
                    RowBox[{
                    "IntegerSequences`Private`PlausibleVariableQ", "[", 
                    "IntegerSequences`Private`n", "]"}]}], ":=", 
                    RowBox[{
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "2"}], ",", "3"}], "}"}]}], "}"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "2"}], "}"}], ",", "2"}], "]"}], "[", 
                    "IntegerSequences`Private`n", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{"IntegerSequences`Private`expression_", ",", 
                    RowBox[{
                    "IntegerSequences`Private`n_", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`base_Integer", "/;", 
                    RowBox[{
                    "IntegerSequences`Private`base", "\[GreaterEqual]", 
                    "2"}]}], "}"}]}], "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`expression", ",", 
                    "IntegerSequences`Private`n"}], "]"}]}], ":=", 
                    RowBox[{
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"{", "1", "}"}], "}"}], ",", 
                    "IntegerSequences`Private`base"}], "]"}], ",", 
                    RowBox[{"{", "IntegerSequences`Private`expression", "}"}],
                     ",", "IntegerSequences`Private`base"}], "]"}], "[", 
                    "IntegerSequences`Private`n", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"IntegerSequences`Private`sequence", ":", 
                    RowBox[{"AutomaticSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`automaton_", ",", "___"}], 
                    "]"}]}], ")"}], "[", "IntegerSequences`Private`n_", "]"}],
                     ",", 
                    RowBox[{
                    "IntegerSequences`Private`n_", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystemlist", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    "__", "?", 
                    "IntegerSequences`Private`PositiveNumerationSystemQ"}], 
                    "}"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`statelist", "=", 
                    RowBox[{
                    "AutomatonStateList", "[", 
                    "IntegerSequences`Private`automaton", "]"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`edges", "=", 
                    RowBox[{
                    "First", "[", "IntegerSequences`Private`automaton", 
                    "]"}]}], ",", "IntegerSequences`Private`stateindex"}], 
                    "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    RowBox[{"UnitVector", "[", 
                    RowBox[{
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`statelist", 
                    "]"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`FirstPositionLevel1", "[", 
                    RowBox[{"IntegerSequences`Private`statelist", ",", 
                    RowBox[{
                    "IntegerSequences`Private`automaton", 
                    "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}]}], 
                    "]"}]}], "]"}], ",", 
                    RowBox[{"Outer", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{"IntegerSequences`Private`digitlist", ",", 
                    RowBox[{"SparseArray", "[", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{"FirstCase", "[", 
                    RowBox[{"IntegerSequences`Private`edges", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`statelist", 
                    "\[LeftDoubleBracket]", 
                    "IntegerSequences`Private`stateindex", 
                    "\[RightDoubleBracket]"}], "\[Rule]", 
                    "IntegerSequences`Private`state_"}], ",", 
                    RowBox[{"IntegerSequences`Private`label_", "/;", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`digitlist", ",", 
                    "IntegerSequences`Private`label"}], "]"}]}]}], "}"}], 
                    "\[RuleDelayed]", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`stateindex", ",", 
                    RowBox[{
                    "IntegerSequences`Private`FirstPositionLevel1", "[", 
                    RowBox[{
                    "IntegerSequences`Private`statelist", ",", 
                    "IntegerSequences`Private`state"}], "]"}]}], "}"}], 
                    "\[Rule]", "1"}]}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`stateindex", ",", "1", ",", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`statelist", 
                    "]"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`statelist", 
                    "]"}], ",", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`statelist", 
                    "]"}]}], "}"}]}], "]"}]}], "]"}], ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{
                    "IntegerSequences`Private`NumerationSystemDigitList", "/@",
                     "IntegerSequences`Private`numerationsystemlist"}]}]}], 
                    "]"}], ",", 
                    RowBox[{"Replace", "[", 
                    RowBox[{"IntegerSequences`Private`statelist", ",", 
                    RowBox[{
                    "AutomatonOutputRules", "[", 
                    "IntegerSequences`Private`automaton", "]"}], ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], ",", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystemlist", ",", 
                    RowBox[{
                    RowBox[{
                    "{", "IntegerSequences`Private`numerationsystem_", "}"}], 
                    "\[RuleDelayed]", 
                    "IntegerSequences`Private`numerationsystem"}]}], "]"}]}], 
                    "]"}], "[", "IntegerSequences`Private`n", "]"}], "/;", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`\
AutomaticSequenceNumerationSystemList", "[", 
                    "IntegerSequences`Private`sequence", "]"}], "===", 
                    "IntegerSequences`Private`numerationsystemlist"}]}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"IntegerSequences`Private`sequencea", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`ua_", ",", 
                    "IntegerSequences`Private`matricesa_", ",", 
                    "IntegerSequences`Private`va_", ",", "___"}], "]"}], 
                    ")"}], "?", 
                    "IntegerSequences`Private`RegularSequenceObjectQ"}]}], 
                    ")"}], "[", "IntegerSequences`Private`n_", "]"}], "+", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"IntegerSequences`Private`sequenceb", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`ub_", ",", 
                    "IntegerSequences`Private`matricesb_", ",", 
                    "IntegerSequences`Private`vb_", ",", "___"}], "]"}], 
                    ")"}], "?", 
                    "IntegerSequences`Private`RegularSequenceObjectQ"}]}], 
                    ")"}], "[", "IntegerSequences`Private`n_", "]"}]}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`n_", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystemlist", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    "__", "?", 
                    "IntegerSequences`Private`PositiveNumerationSystemQ"}], 
                    "}"}]}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`dimension", "=", 
                    RowBox[{
                    RowBox[{
                    "ArrayDepth", "[", "IntegerSequences`Private`matricesa", 
                    "]"}], "-", "2"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    RowBox[{"Join", "[", 
                    RowBox[{
                    "IntegerSequences`Private`ua", ",", 
                    "IntegerSequences`Private`ub"}], "]"}], ",", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`ma", ",", 
                    "IntegerSequences`Private`mb"}], "}"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`BlockDiagonalMatrix", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`ma", ",", 
                    "IntegerSequences`Private`mb"}], "}"}], "]"}]}], "]"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`matricesa", ",", 
                    "IntegerSequences`Private`matricesb"}], "}"}], ",", 
                    "IntegerSequences`Private`dimension"}], "]"}], ",", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    "IntegerSequences`Private`va", ",", 
                    "IntegerSequences`Private`vb"}], "]"}], ",", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystemlist", ",", 
                    RowBox[{
                    RowBox[{
                    "{", "IntegerSequences`Private`numerationsystem_", "}"}], 
                    "\[RuleDelayed]", 
                    "IntegerSequences`Private`numerationsystem"}]}], "]"}]}], 
                    "]"}], "[", "IntegerSequences`Private`n", "]"}], "/;", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`dimension", "\[Equal]", 
                    RowBox[{
                    RowBox[{
                    "ArrayDepth", "[", "IntegerSequences`Private`matricesb", 
                    "]"}], "-", "2"}]}], "&&", 
                    RowBox[{"IntegerSequences`Private`numerationsystemlist", "===", 
                    RowBox[{
                    "IntegerSequences`Private`\
RegularSequenceNumerationSystemList", "[", 
                    "IntegerSequences`Private`sequencea", "]"}], "===", 
                    RowBox[{
                    "IntegerSequences`Private`\
RegularSequenceNumerationSystemList", "[", 
                    "IntegerSequences`Private`sequenceb", "]"}]}]}]}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{"IntegerSequences`Private`plus_Plus", ",", 
                    RowBox[{
                    "IntegerSequences`Private`n_", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystemlist", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    "__", "?", 
                    "IntegerSequences`Private`PositiveNumerationSystemQ"}], 
                    "}"}]}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`regularsequences", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{"#1", ",", "IntegerSequences`Private`n", ",", 
                    "IntegerSequences`Private`numerationsystemlist"}], "]"}], 
                    "&"}], ")"}], "/@", 
                    RowBox[{
                    "List", "@@", "IntegerSequences`Private`plus"}]}]}], 
                    "}"}], ",", 
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    "Total", "[", "IntegerSequences`Private`regularsequences",
                     "]"}], ",", "IntegerSequences`Private`n", ",", 
                    "IntegerSequences`Private`numerationsystemlist"}], "]"}], 
                    "/;", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"IntegerSequences`Private`regularsequences", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "_RegularSequence", "[", "IntegerSequences`Private`n", 
                    "]"}], ".."}], "}"}]}], "]"}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`c_", " ", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`sequence_", "?", 
                    "IntegerSequences`Private`RegularSequenceObjectQ"}], "[", 
                    "IntegerSequences`Private`n_", "]"}]}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`c", ",", 
                    "IntegerSequences`Private`n"}], "]"}]}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`n_", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "__", "?", 
                    "IntegerSequences`Private`PositiveNumerationSystemQ"}], 
                    "}"}]}], "]"}], ":=", 
                    RowBox[{"MapAt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`c", " ", "#1"}], "&"}], 
                    ",", "IntegerSequences`Private`sequence", ",", "1"}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"IntegerSequences`Private`sequencea", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`ua_", ",", 
                    "IntegerSequences`Private`matricesa_", ",", 
                    "IntegerSequences`Private`va_", ",", "___"}], "]"}], 
                    ")"}], "?", 
                    "IntegerSequences`Private`RegularSequenceObjectQ"}]}], 
                    ")"}], "[", "IntegerSequences`Private`n_", "]"}], " ", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"IntegerSequences`Private`sequenceb", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    "IntegerSequences`Private`ub_", ",", 
                    "IntegerSequences`Private`matricesb_", ",", 
                    "IntegerSequences`Private`vb_", ",", "___"}], "]"}], 
                    ")"}], "?", 
                    "IntegerSequences`Private`RegularSequenceObjectQ"}]}], 
                    ")"}], "[", "IntegerSequences`Private`n_", "]"}]}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`n_", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystemlist", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    "__", "?", 
                    "IntegerSequences`Private`PositiveNumerationSystemQ"}], 
                    "}"}]}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`dimension", "=", 
                    RowBox[{
                    RowBox[{
                    "ArrayDepth", "[", "IntegerSequences`Private`matricesa", 
                    "]"}], "-", "2"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    RowBox[{"Join", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    "IntegerSequences`Private`ua", "\[TensorProduct]", 
                    "IntegerSequences`Private`ub"}], ")"}]}], ",", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    RowBox[{"ArrayFlatten", "@*", "TensorProduct"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`matricesa", ",", 
                    "IntegerSequences`Private`matricesb"}], "}"}], ",", 
                    "IntegerSequences`Private`dimension"}], "]"}], ",", 
                    RowBox[{"Join", "@@", 
                    RowBox[{"(", 
                    RowBox[{
                    "IntegerSequences`Private`va", "\[TensorProduct]", 
                    "IntegerSequences`Private`vb"}], ")"}]}], ",", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystemlist", ",", 
                    RowBox[{
                    RowBox[{
                    "{", "IntegerSequences`Private`numerationsystem_", "}"}], 
                    "\[RuleDelayed]", 
                    "IntegerSequences`Private`numerationsystem"}]}], "]"}]}], 
                    "]"}], "[", "IntegerSequences`Private`n", "]"}], "/;", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`dimension", "\[Equal]", 
                    RowBox[{
                    RowBox[{
                    "ArrayDepth", "[", "IntegerSequences`Private`matricesb", 
                    "]"}], "-", "2"}]}], "&&", 
                    RowBox[{"IntegerSequences`Private`numerationsystemlist", "===", 
                    RowBox[{
                    "IntegerSequences`Private`\
RegularSequenceNumerationSystemList", "[", 
                    "IntegerSequences`Private`sequencea", "]"}], "===", 
                    RowBox[{
                    "IntegerSequences`Private`\
RegularSequenceNumerationSystemList", "[", 
                    "IntegerSequences`Private`sequenceb", "]"}]}]}]}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{"IntegerSequences`Private`product_Times", ",", 
                    RowBox[{
                    "IntegerSequences`Private`n_", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystemlist", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    "__", "?", 
                    "IntegerSequences`Private`PositiveNumerationSystemQ"}], 
                    "}"}]}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`regularsequences", "=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{
                    "#1", ",", "IntegerSequences`Private`n", ",", 
                    "IntegerSequences`Private`numerationsystemlist"}], "]"}], 
                    "&"}], ")"}], "/@", 
                    RowBox[{
                    "List", "@@", "IntegerSequences`Private`product"}]}]}], 
                    "}"}], ",", 
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    "Times", "@@", 
                    "IntegerSequences`Private`regularsequences"}], ",", 
                    "IntegerSequences`Private`n", ",", 
                    "IntegerSequences`Private`numerationsystemlist"}], "]"}], 
                    "/;", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"IntegerSequences`Private`regularsequences", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "_RegularSequence", "[", "IntegerSequences`Private`n", 
                    "]"}], ".."}], "}"}]}], "]"}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`sequence_RegularSequence", "?", 
                    "IntegerSequences`Private`RegularSequenceObjectQ"}], "[", 
                    "IntegerSequences`Private`n_", "]"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`n_", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystemlist", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    "__", "?", 
                    "IntegerSequences`Private`PositiveNumerationSystemQ"}], 
                    "}"}]}]}], "]"}], ":=", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`sequence", "[", 
                    "IntegerSequences`Private`n", "]"}], "/;", 
                    RowBox[{"IntegerSequences`Private`numerationsystemlist", "===", 
                    RowBox[{
                    "IntegerSequences`Private`\
RegularSequenceNumerationSystemList", "[", 
                    "IntegerSequences`Private`sequence", "]"}]}]}]}]},
                    {
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`expression", ":", 
                    RowBox[{"_List", "|", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "Equal", "|", "Greater", "|", "GreaterEqual", "|", "Less",
                     "|", "LessEqual", "|", "Unequal", "|", "Inequality"}], 
                    ")"}], "[", "__", "]"}]}]}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`n_", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystemlist", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    "__", "?", 
                    "IntegerSequences`Private`PositiveNumerationSystemQ"}], 
                    "}"}]}]}], "]"}], ":=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{
                    "#1", ",", "IntegerSequences`Private`n", ",", 
                    "IntegerSequences`Private`numerationsystemlist"}], "]"}], 
                    "&"}], ")"}], "/@", 
                    "IntegerSequences`Private`expression"}]}]},
                    {
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{"IntegerSequences`Private`expression_", ",", 
                    RowBox[{
                    "IntegerSequences`Private`n_", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}], ",", 
                    RowBox[{"IntegerSequences`Private`numerationsystem", ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{
                    "IntegerSequences`Private`expression", ",", 
                    "IntegerSequences`Private`n", ",", 
                    RowBox[{
                    "{", "IntegerSequences`Private`numerationsystem", "}"}]}],
                     "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{"IntegerSequences`Private`list_List", ",", 
                    RowBox[{
                    "IntegerSequences`Private`n_", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}]}], "]"}], 
                    ":=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{"#1", ",", "IntegerSequences`Private`n"}], "]"}], 
                    "&"}], ")"}], "/@", "IntegerSequences`Private`list"}]}]},
                    {
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{"IntegerSequences`Private`expression_", ",", 
                    RowBox[{
                    "IntegerSequences`Private`n_", "?", 
                    "IntegerSequences`Private`PlausibleVariableQ"}]}], "]"}], 
                    ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystemlist", "=", 
                    RowBox[{
                    "IntegerSequences`Private`SequenceNumerationSystemList", 
                    "[", 
                    RowBox[{
                    "IntegerSequences`Private`expression", ",", 
                    "IntegerSequences`Private`n"}], "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"RegularSequenceReduce", "[", 
                    RowBox[{
                    "IntegerSequences`Private`expression", ",", 
                    "IntegerSequences`Private`n", ",", 
                    "IntegerSequences`Private`numerationsystemlist"}], "]"}], 
                    "/;", 
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`numerationsystemlist", ",", 
                    RowBox[{
                    "_IntegerSequences`Private`SequenceNumerationSystemList", 
                    "|", "Automatic"}]}], "]"}]}]}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "SyntaxInformation", "[", "RegularSequenceReduce", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_", ",", "_."}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[
                    IntegerSequences`RegularSequenceReduce] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Blank[], 
                    Optional[
                    Blank[]]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"IntegerSequences`RegularSequenceReduce\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"RegularSequenceReduce\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) attempts to reduce \
\\!\\(\\*StyleBox[\\\"expr\\\", \\\"TI\\\"]\\) to a single RegularSequence \
object as a function of \\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\).\\n\\!\\(\
\\*RowBox[List[\\\"RegularSequenceReduce\\\", \\\"[\\\", \
RowBox[List[StyleBox[\\\"expr\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"], \\\",\\\", StyleBox[\\\"k\\\", \
\\\"TI\\\"]]], \\\"]\\\"]]\\) attempts to reduce \\!\\(\\*StyleBox[\\\"expr\\\
\", \\\"TI\\\"]\\) to a \\!\\(\\*StyleBox[\\\"k\\\", \
\\\"TI\\\"]\\)\[Hyphen]regular sequence.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"RegularSequenceReduce\", \"[\", \
RowBox[List[StyleBox[\"expr\", \"TI\"], \",\", StyleBox[\"n\", \"TI\"]]], \"]\
\"]]\) attempts to reduce \!\(\*StyleBox[\"expr\", \"TI\"]\) to a single \
RegularSequence object as a function of \!\(\*StyleBox[\"n\", \"TI\"]\).\n\
\!\(\*RowBox[List[\"RegularSequenceReduce\", \"[\", \
RowBox[List[StyleBox[\"expr\", \"TI\"], \",\", StyleBox[\"n\", \"TI\"], \
\",\", StyleBox[\"k\", \"TI\"]]], \"]\"]]\) attempts to reduce \
\!\(\*StyleBox[\"expr\", \"TI\"]\) to a \!\(\*StyleBox[\"k\", \"TI\"]\)\
\[Hyphen]regular sequence.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`RegularSequenceReduce, {Condition[
         IntegerSequences`RegularSequenceReduce[
          IntegerSequences`BaumSweet[
           Pattern[IntegerSequences`Private`n, 
            Blank[]]], 
          Pattern[IntegerSequences`Private`n, 
           Blank[]], {2}], 
         IntegerSequences`Private`PlausibleVariableQ[
         IntegerSequences`Private`n]] :> 
       IntegerSequences`RegularSequence[{1, 0}, {{{0, 1}, {1, 0}}, {{1, 0}, {
         0, 0}}}, {1, 1}, 2][IntegerSequences`Private`n], Condition[
         IntegerSequences`RegularSequenceReduce[
          RudinShapiro[
           Pattern[IntegerSequences`Private`n, 
            Blank[]]], 
          Pattern[IntegerSequences`Private`n, 
           Blank[]], {2}], 
         IntegerSequences`Private`PlausibleVariableQ[
         IntegerSequences`Private`n]] :> 
       IntegerSequences`RegularSequence[{1, 0}, {{{1, 0}, {1, 0}}, {{0, 1}, {
         0, -1}}}, {1, 1}, 2][IntegerSequences`Private`n], Condition[
         IntegerSequences`RegularSequenceReduce[
          ThueMorse[
           Pattern[IntegerSequences`Private`n, 
            Blank[]]], 
          Pattern[IntegerSequences`Private`n, 
           Blank[]], {2}], 
         IntegerSequences`Private`PlausibleVariableQ[
         IntegerSequences`Private`n]] :> 
       IntegerSequences`RegularSequence[{1, 0}, {{{1, 0}, {0, 1}}, {{0, 1}, {
         1, 0}}}, {0, 1}, 2][IntegerSequences`Private`n], Condition[
         IntegerSequences`RegularSequenceReduce[
          IntegerSequences`SternBrocot[
           Pattern[IntegerSequences`Private`n, 
            Blank[]]], 
          Pattern[IntegerSequences`Private`n, 
           Blank[]], {2}], 
         IntegerSequences`Private`PlausibleVariableQ[
         IntegerSequences`Private`n]] :> 
       IntegerSequences`RegularSequence[{1, 0}, {{{1, 0}, {1, 1}}, {{0, 
         1}, {-1, 2}}}, {0, 1}, 2][IntegerSequences`Private`n], Condition[
         IntegerSequences`RegularSequenceReduce[
          BitLength[
           Pattern[IntegerSequences`Private`n, 
            Blank[]]], 
          Pattern[IntegerSequences`Private`n, 
           Blank[]], {2}], 
         IntegerSequences`Private`PlausibleVariableQ[
         IntegerSequences`Private`n]] :> 
       IntegerSequences`RegularSequence[{1, 0, 0}, {{{0, 1, 0}, {-1, 2, 
         0}, {-1, 1, 1}}, {{0, 0, 1}, {-1, 0, 2}, {-1, 0, 2}}}, {0, 0, 1}, 2][
        IntegerSequences`Private`n], Condition[
         IntegerSequences`RegularSequenceReduce[
          BitShiftRight[
           Pattern[IntegerSequences`Private`n, 
            Blank[]]], 
          Pattern[IntegerSequences`Private`n, 
           Blank[]], {2}], 
         IntegerSequences`Private`PlausibleVariableQ[
         IntegerSequences`Private`n]] :> 
       IntegerSequences`RegularSequence[{1, 0, 0}, {{{0, 1, 0}, {0, 2, 0}, {0,
          2, 1}}, {{0, 1, 0}, {0, 0, 1}, {0, -2, 3}}}, {0, 0, 1}, 2][
        IntegerSequences`Private`n], IntegerSequences`RegularSequenceReduce[
         DigitCount[
          Pattern[IntegerSequences`Private`n, 
           Blank[]], 
          Pattern[IntegerSequences`Private`base, 
           Blank[]], 0], 
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[]], IntegerSequences`Private`PlausibleVariableQ], {
          Condition[
           Pattern[IntegerSequences`Private`base, 
            Blank[Integer]], IntegerSequences`Private`base >= 2]}] :> 
       IntegerSequences`RegularSequence[{1, 0, 0}, 
         Join[{{{0, 1, 0}, {-1, 2, 0}, {-1, 1, 1}}}, 
          
          ConstantArray[{{0, 0, 1}, {0, 1, 0}, {0, 0, 1}}, 
           IntegerSequences`Private`base - 1]], {1, 1, 0}, 
         IntegerSequences`Private`base][IntegerSequences`Private`n], 
       IntegerSequences`RegularSequenceReduce[
         Condition[
          DigitCount[
           Pattern[IntegerSequences`Private`n, 
            Blank[]], 
           Pattern[IntegerSequences`Private`base, 
            Blank[]], 
           Pattern[IntegerSequences`Private`d, 
            Blank[Integer]]], 1 <= IntegerSequences`Private`d <= 
          IntegerSequences`Private`base - 1], 
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[]], IntegerSequences`Private`PlausibleVariableQ], {
          Condition[
           Pattern[IntegerSequences`Private`base, 
            Blank[Integer]], IntegerSequences`Private`base >= 2]}] :> 
       IntegerSequences`RegularSequence[{1, 0}, 
         ReplacePart[
          ConstantArray[
           IdentityMatrix[2], IntegerSequences`Private`base], 
          IntegerSequences`Private`d + 1 -> {{0, 1}, {-1, 2}}], {0, 1}, 
         IntegerSequences`Private`base][IntegerSequences`Private`n], 
       IntegerSequences`RegularSequenceReduce[
         IntegerExponent[1 + Pattern[IntegerSequences`Private`n, 
            Blank[]], 
          Pattern[IntegerSequences`Private`base, 
           Blank[]]], 
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[]], IntegerSequences`Private`PlausibleVariableQ], {
          Condition[
           Pattern[IntegerSequences`Private`base, 
            Blank[Integer]], IntegerSequences`Private`base >= 2]}] :> 
       IntegerSequences`RegularSequence[{1, 0}, 
         Join[
          
          ConstantArray[{{0, 0}, {-1, 1}}, IntegerSequences`Private`base - 
           1], {{0, 1}, {-1, 2}}], {0, 1}, IntegerSequences`Private`base][
        IntegerSequences`Private`n], Condition[
         IntegerSequences`RegularSequenceReduce[
          IntegerLength[
           Pattern[IntegerSequences`Private`n, 
            Blank[]]], 
          Pattern[IntegerSequences`Private`n, 
           Blank[]], {10}], 
         IntegerSequences`Private`PlausibleVariableQ[
         IntegerSequences`Private`n]] :> 
       IntegerSequences`RegularSequenceReduce[
         IntegerLength[IntegerSequences`Private`n, 10], 
         IntegerSequences`Private`n, {10}], 
       IntegerSequences`RegularSequenceReduce[
         IntegerLength[
          Pattern[IntegerSequences`Private`n, 
           Blank[]], 
          Pattern[IntegerSequences`Private`base, 
           Blank[]]], 
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[]], IntegerSequences`Private`PlausibleVariableQ], {
          Condition[
           Pattern[IntegerSequences`Private`base, 
            Blank[Integer]], IntegerSequences`Private`base >= 2]}] :> 
       IntegerSequences`RegularSequence[{1, 0, 0}, 
         Join[{{{0, 1, 0}, {-1, 2, 0}, {-1, 1, 1}}}, 
          
          ConstantArray[{{0, 0, 1}, {-1, 0, 2}, {-1, 0, 2}}, 
           IntegerSequences`Private`base - 1]], {0, 0, 1}, 
         IntegerSequences`Private`base][IntegerSequences`Private`n], Condition[
         IntegerSequences`RegularSequenceReduce[
          BitNot[
           Pattern[IntegerSequences`Private`n, 
            Blank[]]], 
          Pattern[IntegerSequences`Private`n, 
           Blank[]], {2}], 
         IntegerSequences`Private`PlausibleVariableQ[
         IntegerSequences`Private`n]] :> 
       IntegerSequences`RegularSequence[{1, 0}, {{{0, 1}, {-2, 3}}, {{2, 0}, {
         2, 1}}}, {-1, -1}, 2][IntegerSequences`Private`n], Condition[
         IntegerSequences`RegularSequenceReduce[
          BitShiftLeft[
           Pattern[IntegerSequences`Private`n, 
            Blank[]]], 
          Pattern[IntegerSequences`Private`n, 
           Blank[]], {2}], 
         IntegerSequences`Private`PlausibleVariableQ[
         IntegerSequences`Private`n]] :> 
       IntegerSequences`RegularSequence[{1, 0}, {{{2, 0}, {2, 1}}, {{0, 
         1}, {-2, 3}}}, {0, 2}, 2][IntegerSequences`Private`n], Condition[
         IntegerSequences`RegularSequenceReduce[
          Pattern[IntegerSequences`Private`expression, 
           Blank[]], 
          PatternTest[
           Pattern[IntegerSequences`Private`n, 
            Blank[]], IntegerSequences`Private`PlausibleVariableQ], {
           Condition[
            Pattern[IntegerSequences`Private`base, 
             Blank[Integer]], IntegerSequences`Private`base >= 2]}], 
         FreeQ[
         IntegerSequences`Private`expression, IntegerSequences`Private`n]] :> 
       IntegerSequences`RegularSequence[{1}, 
         ConstantArray[{{1}}, IntegerSequences`Private`base], {
         IntegerSequences`Private`expression}, IntegerSequences`Private`base][
        IntegerSequences`Private`n], IntegerSequences`RegularSequenceReduce[
         Pattern[IntegerSequences`Private`sequence, 
          IntegerSequences`AutomaticSequence[
           Pattern[IntegerSequences`Private`automaton, 
            Blank[]], 
           BlankNullSequence[]]][
          Pattern[IntegerSequences`Private`n, 
           Blank[]]], 
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[]], IntegerSequences`Private`PlausibleVariableQ], 
         Pattern[IntegerSequences`Private`numerationsystemlist, {
           PatternTest[
            BlankSequence[], 
            IntegerSequences`Private`PositiveNumerationSystemQ]}]] :> 
       Module[{IntegerSequences`Private`statelist = 
          IntegerSequences`AutomatonStateList[
           IntegerSequences`Private`automaton], 
          IntegerSequences`Private`edges = 
          First[IntegerSequences`Private`automaton], 
          IntegerSequences`Private`stateindex}, 
         Condition[
          IntegerSequences`RegularSequence[
           UnitVector[
            Length[IntegerSequences`Private`statelist], 
            IntegerSequences`Private`FirstPositionLevel1[
            IntegerSequences`Private`statelist, 
             Part[IntegerSequences`Private`automaton, 2]]], 
           Outer[
            Function[IntegerSequences`Private`digitlist, 
             SparseArray[
              Table[
               FirstCase[
               IntegerSequences`Private`edges, {
                 Part[IntegerSequences`Private`statelist, 
                    IntegerSequences`Private`stateindex] -> 
                  Pattern[IntegerSequences`Private`state, 
                    Blank[]], 
                  Condition[
                   Pattern[IntegerSequences`Private`label, 
                    Blank[]], 
                   MatchQ[
                   IntegerSequences`Private`digitlist, 
                    IntegerSequences`Private`label]]} :> ({
                  IntegerSequences`Private`stateindex, 
                   IntegerSequences`Private`FirstPositionLevel1[
                   IntegerSequences`Private`statelist, 
                    IntegerSequences`Private`state]} -> 1)], {
               IntegerSequences`Private`stateindex, 1, 
                Length[IntegerSequences`Private`statelist]}], {
               Length[IntegerSequences`Private`statelist], 
               Length[IntegerSequences`Private`statelist]}]], 
            Apply[Sequence, 
             Map[
             IntegerSequences`Private`NumerationSystemDigitList, 
              IntegerSequences`Private`numerationsystemlist]]], 
           Replace[IntegerSequences`Private`statelist, 
            IntegerSequences`AutomatonOutputRules[
            IntegerSequences`Private`automaton], {1}], 
           Replace[IntegerSequences`Private`numerationsystemlist, {
              Pattern[IntegerSequences`Private`numerationsystem, 
               Blank[]]} :> IntegerSequences`Private`numerationsystem]][
          IntegerSequences`Private`n], 
          IntegerSequences`Private`AutomaticSequenceNumerationSystemList[
           IntegerSequences`Private`sequence] === 
          IntegerSequences`Private`numerationsystemlist]], 
       IntegerSequences`RegularSequenceReduce[
        Pattern[IntegerSequences`Private`sequencea, 
           PatternTest[
            IntegerSequences`RegularSequence[
             Pattern[IntegerSequences`Private`ua, 
              Blank[]], 
             Pattern[IntegerSequences`Private`matricesa, 
              Blank[]], 
             Pattern[IntegerSequences`Private`va, 
              Blank[]], 
             BlankNullSequence[]], 
            IntegerSequences`Private`RegularSequenceObjectQ]][
           Pattern[IntegerSequences`Private`n, 
            Blank[]]] + Pattern[IntegerSequences`Private`sequenceb, 
           PatternTest[
            IntegerSequences`RegularSequence[
             Pattern[IntegerSequences`Private`ub, 
              Blank[]], 
             Pattern[IntegerSequences`Private`matricesb, 
              Blank[]], 
             Pattern[IntegerSequences`Private`vb, 
              Blank[]], 
             BlankNullSequence[]], 
            IntegerSequences`Private`RegularSequenceObjectQ]][
           Pattern[IntegerSequences`Private`n, 
            Blank[]]], 
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[]], IntegerSequences`Private`PlausibleVariableQ], 
         Pattern[IntegerSequences`Private`numerationsystemlist, {
           PatternTest[
            BlankSequence[], 
            IntegerSequences`Private`PositiveNumerationSystemQ]}]] :> 
       With[{IntegerSequences`Private`dimension = 
          ArrayDepth[IntegerSequences`Private`matricesa] - 2}, 
         Condition[
          IntegerSequences`RegularSequence[
           Join[IntegerSequences`Private`ua, IntegerSequences`Private`ub], 
           MapThread[
            
            Function[{
             IntegerSequences`Private`ma, IntegerSequences`Private`mb}, 
             
             IntegerSequences`Private`BlockDiagonalMatrix[{
              IntegerSequences`Private`ma, IntegerSequences`Private`mb}]], {
            IntegerSequences`Private`matricesa, 
             IntegerSequences`Private`matricesb}, 
            IntegerSequences`Private`dimension], 
           Join[IntegerSequences`Private`va, IntegerSequences`Private`vb], 
           Replace[IntegerSequences`Private`numerationsystemlist, {
              Pattern[IntegerSequences`Private`numerationsystem, 
               Blank[]]} :> IntegerSequences`Private`numerationsystem]][
          IntegerSequences`Private`n], 
          And[
          IntegerSequences`Private`dimension == 
           ArrayDepth[IntegerSequences`Private`matricesb] - 2, 
           IntegerSequences`Private`numerationsystemlist === 
           IntegerSequences`Private`RegularSequenceNumerationSystemList[
            IntegerSequences`Private`sequencea] === 
           IntegerSequences`Private`RegularSequenceNumerationSystemList[
            IntegerSequences`Private`sequenceb]]]], 
       IntegerSequences`RegularSequenceReduce[
         Pattern[IntegerSequences`Private`plus, 
          Blank[Plus]], 
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[]], IntegerSequences`Private`PlausibleVariableQ], 
         Pattern[IntegerSequences`Private`numerationsystemlist, {
           PatternTest[
            BlankSequence[], 
            IntegerSequences`Private`PositiveNumerationSystemQ]}]] :> 
       With[{IntegerSequences`Private`regularsequences = 
          Map[IntegerSequences`RegularSequenceReduce[#, 
             IntegerSequences`Private`n, 
             IntegerSequences`Private`numerationsystemlist]& , 
            Apply[List, IntegerSequences`Private`plus]]}, 
         Condition[
          IntegerSequences`RegularSequenceReduce[
           Total[IntegerSequences`Private`regularsequences], 
           IntegerSequences`Private`n, 
           IntegerSequences`Private`numerationsystemlist], 
          MatchQ[IntegerSequences`Private`regularsequences, {
            Repeated[
             Blank[IntegerSequences`RegularSequence][
             IntegerSequences`Private`n]]}]]], 
       IntegerSequences`RegularSequenceReduce[
         Condition[Pattern[IntegerSequences`Private`c, 
            Blank[]] PatternTest[
            Pattern[IntegerSequences`Private`sequence, 
             Blank[]], IntegerSequences`Private`RegularSequenceObjectQ][
            Pattern[IntegerSequences`Private`n, 
             Blank[]]], 
          FreeQ[IntegerSequences`Private`c, IntegerSequences`Private`n]], 
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[]], IntegerSequences`Private`PlausibleVariableQ], {
          PatternTest[
           BlankSequence[], 
           IntegerSequences`Private`PositiveNumerationSystemQ]}] :> 
       MapAt[IntegerSequences`Private`c #& , 
         IntegerSequences`Private`sequence, 1], 
       IntegerSequences`RegularSequenceReduce[
        Pattern[IntegerSequences`Private`sequencea, 
           PatternTest[
            IntegerSequences`RegularSequence[
             Pattern[IntegerSequences`Private`ua, 
              Blank[]], 
             Pattern[IntegerSequences`Private`matricesa, 
              Blank[]], 
             Pattern[IntegerSequences`Private`va, 
              Blank[]], 
             BlankNullSequence[]], 
            IntegerSequences`Private`RegularSequenceObjectQ]][
           Pattern[IntegerSequences`Private`n, 
            Blank[]]] Pattern[IntegerSequences`Private`sequenceb, 
           PatternTest[
            IntegerSequences`RegularSequence[
             Pattern[IntegerSequences`Private`ub, 
              Blank[]], 
             Pattern[IntegerSequences`Private`matricesb, 
              Blank[]], 
             Pattern[IntegerSequences`Private`vb, 
              Blank[]], 
             BlankNullSequence[]], 
            IntegerSequences`Private`RegularSequenceObjectQ]][
           Pattern[IntegerSequences`Private`n, 
            Blank[]]], 
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[]], IntegerSequences`Private`PlausibleVariableQ], 
         Pattern[IntegerSequences`Private`numerationsystemlist, {
           PatternTest[
            BlankSequence[], 
            IntegerSequences`Private`PositiveNumerationSystemQ]}]] :> 
       With[{IntegerSequences`Private`dimension = 
          ArrayDepth[IntegerSequences`Private`matricesa] - 2}, 
         Condition[
          IntegerSequences`RegularSequence[
           Apply[Join, 
            TensorProduct[
            IntegerSequences`Private`ua, IntegerSequences`Private`ub]], 
           MapThread[
            Composition[ArrayFlatten, TensorProduct], {
            IntegerSequences`Private`matricesa, 
             IntegerSequences`Private`matricesb}, 
            IntegerSequences`Private`dimension], 
           Apply[Join, 
            TensorProduct[
            IntegerSequences`Private`va, IntegerSequences`Private`vb]], 
           Replace[IntegerSequences`Private`numerationsystemlist, {
              Pattern[IntegerSequences`Private`numerationsystem, 
               Blank[]]} :> IntegerSequences`Private`numerationsystem]][
          IntegerSequences`Private`n], 
          And[
          IntegerSequences`Private`dimension == 
           ArrayDepth[IntegerSequences`Private`matricesb] - 2, 
           IntegerSequences`Private`numerationsystemlist === 
           IntegerSequences`Private`RegularSequenceNumerationSystemList[
            IntegerSequences`Private`sequencea] === 
           IntegerSequences`Private`RegularSequenceNumerationSystemList[
            IntegerSequences`Private`sequenceb]]]], 
       IntegerSequences`RegularSequenceReduce[
         Pattern[IntegerSequences`Private`product, 
          Blank[Times]], 
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[]], IntegerSequences`Private`PlausibleVariableQ], 
         Pattern[IntegerSequences`Private`numerationsystemlist, {
           PatternTest[
            BlankSequence[], 
            IntegerSequences`Private`PositiveNumerationSystemQ]}]] :> 
       With[{IntegerSequences`Private`regularsequences = 
          Map[IntegerSequences`RegularSequenceReduce[#, 
             IntegerSequences`Private`n, 
             IntegerSequences`Private`numerationsystemlist]& , 
            Apply[List, IntegerSequences`Private`product]]}, 
         Condition[
          IntegerSequences`RegularSequenceReduce[
           Apply[Times, IntegerSequences`Private`regularsequences], 
           IntegerSequences`Private`n, 
           IntegerSequences`Private`numerationsystemlist], 
          MatchQ[IntegerSequences`Private`regularsequences, {
            Repeated[
             Blank[IntegerSequences`RegularSequence][
             IntegerSequences`Private`n]]}]]], 
       IntegerSequences`RegularSequenceReduce[
         PatternTest[
          Pattern[IntegerSequences`Private`sequence, 
           Blank[IntegerSequences`RegularSequence]], 
          IntegerSequences`Private`RegularSequenceObjectQ][
          Pattern[IntegerSequences`Private`n, 
           Blank[]]], 
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[]], IntegerSequences`Private`PlausibleVariableQ], 
         Pattern[IntegerSequences`Private`numerationsystemlist, {
           PatternTest[
            BlankSequence[], 
            IntegerSequences`Private`PositiveNumerationSystemQ]}]] :> 
       Condition[
         IntegerSequences`Private`sequence[IntegerSequences`Private`n], 
         IntegerSequences`Private`numerationsystemlist === 
         IntegerSequences`Private`RegularSequenceNumerationSystemList[
          IntegerSequences`Private`sequence]], 
       IntegerSequences`RegularSequenceReduce[
         Pattern[IntegerSequences`Private`expression, 
          Alternatives[
           Blank[List], 
           Alternatives[
           Equal, Greater, GreaterEqual, Less, LessEqual, Unequal, Inequality][
            BlankSequence[]]]], 
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[]], IntegerSequences`Private`PlausibleVariableQ], 
         Pattern[IntegerSequences`Private`numerationsystemlist, {
           PatternTest[
            BlankSequence[], 
            IntegerSequences`Private`PositiveNumerationSystemQ]}]] :> 
       Map[IntegerSequences`RegularSequenceReduce[#, 
          IntegerSequences`Private`n, 
          IntegerSequences`Private`numerationsystemlist]& , 
         IntegerSequences`Private`expression], 
       IntegerSequences`RegularSequenceReduce[
         Pattern[IntegerSequences`Private`expression, 
          Blank[]], 
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[]], IntegerSequences`Private`PlausibleVariableQ], 
         Pattern[IntegerSequences`Private`numerationsystem, 
          Except[
           Blank[List]]]] :> 
       IntegerSequences`RegularSequenceReduce[
        IntegerSequences`Private`expression, IntegerSequences`Private`n, {
         IntegerSequences`Private`numerationsystem}], 
       IntegerSequences`RegularSequenceReduce[
         Pattern[IntegerSequences`Private`list, 
          Blank[List]], 
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[]], IntegerSequences`Private`PlausibleVariableQ]] :> 
       Map[IntegerSequences`RegularSequenceReduce[#, 
          IntegerSequences`Private`n]& , IntegerSequences`Private`list], 
       IntegerSequences`RegularSequenceReduce[
         Pattern[IntegerSequences`Private`expression, 
          Blank[]], 
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[]], IntegerSequences`Private`PlausibleVariableQ]] :> 
       With[{IntegerSequences`Private`numerationsystemlist = 
          IntegerSequences`Private`SequenceNumerationSystemList[
           IntegerSequences`Private`expression, IntegerSequences`Private`n]}, 
         Condition[
          IntegerSequences`RegularSequenceReduce[
          IntegerSequences`Private`expression, IntegerSequences`Private`n, 
           IntegerSequences`Private`numerationsystemlist], 
          Not[
           MatchQ[IntegerSequences`Private`numerationsystemlist, 
            Alternatives[
             Blank[IntegerSequences`Private`SequenceNumerationSystemList], 
             Automatic]]]]]}], "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`RegularSequenceReduce, {
      SyntaxInformation[IntegerSequences`RegularSequenceReduce] -> {
        "ArgumentsPattern" -> {
           Blank[], 
           Blank[], 
           Optional[
            Blank[]]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`RegularSequenceReduce"], False]]], "Output",ExpressionUU\
ID->"d829681f-a420-4571-8bc4-02e81b85a962"]
}, Open  ]],

Cell["Rewrite built-in functions as regular sequences:", "Text",ExpressionUUID->"6dd2771b-c5d4-4120-aacd-2812ecc5ccd1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceReduce", "[", 
  RowBox[{
   RowBox[{"ThueMorse", "[", "n", "]"}], ",", "n"}], "]"}]], "Input",Expressio\
nUUID->"60093d2f-e810-413d-be71-dc5aef56b4b2"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RegularSequence", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0"}], "}"}]}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], ",", "2"}], "]"}], "[", "n", 
  "]"}]], "Output",ExpressionUUID->"1a267ec9-499f-4a3a-90e1-855f72562d2a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceReduce", "[", 
  RowBox[{
   RowBox[{"RudinShapiro", "[", "n", "]"}], ",", "n"}], "]"}]], "Input",Expres\
sionUUID->"8f7facdb-e955-4a08-b4c6-3cb9fe5bc9e4"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RegularSequence", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", 
          RowBox[{"-", "1"}]}], "}"}]}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], ",", "2"}], "]"}], "[", "n", 
  "]"}]], "Output",ExpressionUUID->"653aca36-0eac-453f-bdd9-86f6cbfcfe1f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceReduce", "[", 
  RowBox[{
   RowBox[{"BitShiftRight", "[", "n", "]"}], ",", "n"}], "]"}]], "Input",Expre\
ssionUUID->"18428efc-2194-44e9-abb6-8abdfb2fc916"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RegularSequence", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "2", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "2", ",", "1"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", 
          RowBox[{"-", "2"}], ",", "3"}], "}"}]}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", "2"}], "]"}], "[", "n", 
  "]"}]], "Output",ExpressionUUID->"dcf08e0e-e6d0-461b-b5e1-ed81b064845a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceReduce", "[", 
  RowBox[{
   RowBox[{"IntegerLength", "[", "n", "]"}], ",", "n"}], "]"}]], "Input",Expre\
ssionUUID->"78f49bd1-6e99-48b4-a63c-2dec56644c74"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RegularSequence", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "2", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "1", ",", "1"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "0", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "0", ",", "2"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "0", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "0", ",", "2"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "0", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "0", ",", "2"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "0", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "0", ",", "2"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "0", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "0", ",", "2"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "0", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "0", ",", "2"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "0", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "0", ",", "2"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "0", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "0", ",", "2"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "0", ",", "2"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "0", ",", "2"}], "}"}]}], "}"}]}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0", ",", "1"}], "}"}], ",", "10"}], "]"}], "[", "n", 
  "]"}]], "Output",ExpressionUUID->"9d9bd6c4-edb5-464e-9e5d-94c90791cd2c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceReduce", "[", 
  RowBox[{
   RowBox[{"IntegerExponent", "[", 
    RowBox[{
     RowBox[{"n", "+", "1"}], ",", "5"}], "]"}], ",", "n"}], "]"}]], "Input",E\
xpressionUUID->"8b19df35-0d46-415c-975b-d2bac4482163"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RegularSequence", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"0", ",", "1"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "1"}], ",", "2"}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], ",", "5"}], "]"}], "[", "n", 
  "]"}]], "Output",ExpressionUUID->"f25a514b-b168-42bb-b97c-6bb86da440c4"]
}, Open  ]],

Cell["Sum and product of regular sequences:", "Text",ExpressionUUID->"c6e1d516-8c61-4321-a3f4-2f8696c57906"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RegularSequenceReduce", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"RegularSequence", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          TagBox[
           RowBox[{"(", "\[NoBreak]", GridBox[{
              {"1", "1"},
              {"0", 
               RowBox[{"-", "2"}]}
             },
             
             GridBoxAlignment->{
              "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
               "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], {
                  Offset[0.7]}, 
                 Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
               "Rows" -> {
                 Offset[0.2], {
                  Offset[0.4]}, 
                 Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
           Function[BoxForm`e$, 
            MatrixForm[BoxForm`e$]]], ",", 
          TagBox[
           RowBox[{"(", "\[NoBreak]", GridBox[{
              {"2", "0"},
              {
               RowBox[{"-", "1"}], 
               RowBox[{"-", "1"}]}
             },
             
             GridBoxAlignment->{
              "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
               "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], {
                  Offset[0.7]}, 
                 Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
               "Rows" -> {
                 Offset[0.2], {
                  Offset[0.4]}, 
                 Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
           Function[BoxForm`e$, 
            MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0"}], "}"}]}], "]"}], "[", "n", "]"}], "+", 
     RowBox[{
      RowBox[{"RegularSequence", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          TagBox[
           RowBox[{"(", "\[NoBreak]", GridBox[{
              {"0", "1"},
              {"2", 
               RowBox[{"-", "1"}]}
             },
             
             GridBoxAlignment->{
              "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
               "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], {
                  Offset[0.7]}, 
                 Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
               "Rows" -> {
                 Offset[0.2], {
                  Offset[0.4]}, 
                 Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
           Function[BoxForm`e$, 
            MatrixForm[BoxForm`e$]]], ",", 
          TagBox[
           RowBox[{"(", "\[NoBreak]", GridBox[{
              {"2", "0"},
              {"2", 
               RowBox[{"-", "1"}]}
             },
             
             GridBoxAlignment->{
              "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
               "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], {
                  Offset[0.7]}, 
                 Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
               "Rows" -> {
                 Offset[0.2], {
                  Offset[0.4]}, 
                 Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
           Function[BoxForm`e$, 
            MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}]}], "]"}], "[", "n", "]"}]}], ",", 
    "n"}], "]"}], "//", "RegularSequenceMatrixForm"}]], "Input",ExpressionUUID\
->"bba22f74-6fdb-4006-8b66-0ff030d57221"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RegularSequence", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", "0", ",", "1", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      TagBox[
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {"0", "1", "0", "0"},
          {"2", 
           RowBox[{"-", "1"}], "0", "0"},
          {"0", "0", "1", "1"},
          {"0", "0", "0", 
           RowBox[{"-", "2"}]}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], "\[NoBreak]", ")"}],
       Function[BoxForm`e$, 
        MatrixForm[BoxForm`e$]]], ",", 
      TagBox[
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {"2", "0", "0", "0"},
          {"2", 
           RowBox[{"-", "1"}], "0", "0"},
          {"0", "0", "2", "0"},
          {"0", "0", 
           RowBox[{"-", "1"}], 
           RowBox[{"-", "1"}]}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], "\[NoBreak]", ")"}],
       Function[BoxForm`e$, 
        MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1", ",", "1", ",", "0"}], "}"}], ",", "2"}], "]"}], 
  "[", "n", "]"}]], "Output",ExpressionUUID->"ee6cd53a-5f30-4833-a475-\
a7cb85332658"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RegularSequenceReduce", "[", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"RegularSequence", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          TagBox[
           RowBox[{"(", "\[NoBreak]", GridBox[{
              {"1", "1"},
              {"0", 
               RowBox[{"-", "2"}]}
             },
             
             GridBoxAlignment->{
              "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
               "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], {
                  Offset[0.7]}, 
                 Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
               "Rows" -> {
                 Offset[0.2], {
                  Offset[0.4]}, 
                 Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
           Function[BoxForm`e$, 
            MatrixForm[BoxForm`e$]]], ",", 
          TagBox[
           RowBox[{"(", "\[NoBreak]", GridBox[{
              {"2", "0"},
              {
               RowBox[{"-", "1"}], 
               RowBox[{"-", "1"}]}
             },
             
             GridBoxAlignment->{
              "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
               "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], {
                  Offset[0.7]}, 
                 Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
               "Rows" -> {
                 Offset[0.2], {
                  Offset[0.4]}, 
                 Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
           Function[BoxForm`e$, 
            MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0"}], "}"}]}], "]"}], "[", "n", "]"}], "*", 
     RowBox[{
      RowBox[{"RegularSequence", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          TagBox[
           RowBox[{"(", "\[NoBreak]", GridBox[{
              {"0", "1"},
              {"2", 
               RowBox[{"-", "1"}]}
             },
             
             GridBoxAlignment->{
              "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
               "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], {
                  Offset[0.7]}, 
                 Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
               "Rows" -> {
                 Offset[0.2], {
                  Offset[0.4]}, 
                 Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
           Function[BoxForm`e$, 
            MatrixForm[BoxForm`e$]]], ",", 
          TagBox[
           RowBox[{"(", "\[NoBreak]", GridBox[{
              {"2", "0"},
              {"2", 
               RowBox[{"-", "1"}]}
             },
             
             GridBoxAlignment->{
              "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, 
               "Rows" -> {{Baseline}}, "RowsIndexed" -> {}},
             GridBoxSpacings->{"Columns" -> {
                 Offset[0.27999999999999997`], {
                  Offset[0.7]}, 
                 Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, 
               "Rows" -> {
                 Offset[0.2], {
                  Offset[0.4]}, 
                 Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
           Function[BoxForm`e$, 
            MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}]}], "]"}], "[", "n", "]"}]}], ",", 
    "n"}], "]"}], "//", "RegularSequenceMatrixForm"}]], "Input",ExpressionUUID\
->"def5e9ac-645b-4e2f-ae32-7023df6b1629"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RegularSequence", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"-", "1"}], ",", "0", ",", "0", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      TagBox[
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {"0", "0", "1", "1"},
          {"0", "0", "0", 
           RowBox[{"-", "2"}]},
          {"2", "2", 
           RowBox[{"-", "1"}], 
           RowBox[{"-", "1"}]},
          {"0", 
           RowBox[{"-", "4"}], "0", "2"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], "\[NoBreak]", ")"}],
       Function[BoxForm`e$, 
        MatrixForm[BoxForm`e$]]], ",", 
      TagBox[
       RowBox[{"(", "\[NoBreak]", GridBox[{
          {"4", "0", "0", "0"},
          {
           RowBox[{"-", "2"}], 
           RowBox[{"-", "2"}], "0", "0"},
          {"4", "0", 
           RowBox[{"-", "2"}], "0"},
          {
           RowBox[{"-", "2"}], 
           RowBox[{"-", "2"}], "1", "1"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.7]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}], "\[NoBreak]", ")"}],
       Function[BoxForm`e$, 
        MatrixForm[BoxForm`e$]]]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "0", ",", "1", ",", "0"}], "}"}], ",", "2"}], "]"}], 
  "[", "n", "]"}]], "Output",ExpressionUUID->"a024cd72-d4f8-4bce-99a4-\
6df3f11034ec"]
}, Open  ]],

Cell[TextData[{
 "The Stern\[Dash]Brocot sequence is ",
 Cell[BoxData[
  FormBox["2", TraditionalForm]],ExpressionUUID->
  "b5ad253a-c96c-4c44-a47d-b4eb7ad1a1f0"],
 "-regular:"
}], "Text",ExpressionUUID->"bdf8a7ed-f4c5-4ae1-8124-f2ccd4951021"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceReduce", "[", 
  RowBox[{
   RowBox[{"SternBrocot", "[", "n", "]"}], ",", "n"}], "]"}]], "Input",Express\
ionUUID->"6437441e-8962-4bda-8da3-f7e4078d667f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RegularSequence", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "2"}], "}"}]}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], ",", "2"}], "]"}], "[", "n", 
  "]"}]], "Output",ExpressionUUID->"0312401b-b198-4c28-8363-2a6f857f5781"]
}, Open  ]],

Cell["Rewrite automatic sequences as regular sequences:", "Text",ExpressionUUID->"d1a74aeb-b633-4feb-8786-a157d5d92169"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceReduce", "[", 
  RowBox[{
   RowBox[{"BaumSweet", "[", "n", "]"}], ",", "n"}], "]"}]], "Input",Expressio\
nUUID->"414c6439-1dd5-4981-9c53-28f07f58d096"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RegularSequence", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "0"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"0", ",", "0"}], "}"}]}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "1"}], "}"}], ",", "2"}], "]"}], "[", "n", 
  "]"}]], "Output",ExpressionUUID->"675604fd-a6d9-41ff-bf30-d517adc6f2ca"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceReduce", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"AutomaticSequence", "[", 
     RowBox[{"Automaton", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "\[Rule]", "1"}], ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"1", "\[Rule]", "2"}], ",", "1"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"2", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"2", "\[Rule]", "1"}], ",", "1"}], "}"}]}], "}"}], ",", 
       "1", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"1", "\[Rule]", "0"}], ",", 
         RowBox[{"2", "\[Rule]", "1"}]}], "}"}]}], "]"}], "]"}], "[", "n", 
    "]"}], ",", "n"}], "]"}]], "Input",ExpressionUUID->"5c209e78-8978-4bb4-\
b794-7bc53af68c17"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RegularSequence", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      InterpretationBox[
       RowBox[{
        TagBox["SparseArray",
         "SummaryHead"], "[", 
        DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
         "Ready"}, 
         TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[
                  
                  RasterBox[{{{0.235431, 0.32765, 0.833291}, {0.772061, 
                   0.92462, 0.998703}}, {{0.772061, 0.92462, 0.998703}, {
                   0.235431, 0.32765, 0.833291}}}, {{0, 0}, {2, 2}}, {0, 1}], 
                  AspectRatio -> 1, Axes -> False, Frame -> False, 
                  FrameLabel -> {None, None}, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                  FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                  Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], 
                  Method -> {
                   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
                 GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[
                  
                  RasterBox[{{{0.235431, 0.32765, 0.833291}, {0.772061, 
                   0.92462, 0.998703}}, {{0.772061, 0.92462, 0.998703}, {
                   0.235431, 0.32765, 0.833291}}}, {{0, 0}, {2, 2}}, {0, 1}], 
                  AspectRatio -> 1, Axes -> False, Frame -> False, 
                  FrameLabel -> {None, None}, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                  FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                  Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], 
                  Method -> {
                   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
                 GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0.5`", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"\"", "SummaryItem"]}]}, {
                    TagBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "1", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "1", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], "SummaryItem"]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]},
          "SummaryPanel"],
         DynamicModuleValues:>{}], "]"}],
       SparseArray[Automatic, {2, 2}, 0, {1, {{0, 1, 2}, {{1}, {2}}}, {1, 1}}],
       Editable->False,
       SelectWithContents->True,
       Selectable->False], ",", 
      InterpretationBox[
       RowBox[{
        TagBox["SparseArray",
         "SummaryHead"], "[", 
        DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
         "Ready"}, 
         TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[
                  
                  RasterBox[{{{0.772061, 0.92462, 0.998703}, {0.235431, 
                   0.32765, 0.833291}}, {{0.235431, 0.32765, 0.833291}, {
                   0.772061, 0.92462, 0.998703}}}, {{0, 0}, {2, 2}}, {0, 1}], 
                  AspectRatio -> 1, Axes -> False, Frame -> False, 
                  FrameLabel -> {None, None}, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                  FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                  Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], 
                  Method -> {
                   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
                 GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[
                  
                  RasterBox[{{{0.772061, 0.92462, 0.998703}, {0.235431, 
                   0.32765, 0.833291}}, {{0.235431, 0.32765, 0.833291}, {
                   0.772061, 0.92462, 0.998703}}}, {{0, 0}, {2, 2}}, {0, 1}], 
                  AspectRatio -> 1, Axes -> False, Frame -> False, 
                  FrameLabel -> {None, None}, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                  FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                  Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], 
                  Method -> {
                   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
                 GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0.5`", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"\"", "SummaryItem"]}]}, {
                    TagBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "1", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "1", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], "SummaryItem"]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]},
          "SummaryPanel"],
         DynamicModuleValues:>{}], "]"}],
       SparseArray[Automatic, {2, 2}, 0, {1, {{0, 1, 2}, {{2}, {1}}}, {1, 1}}],
       Editable->False,
       SelectWithContents->True,
       Selectable->False]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], ",", "2"}], "]"}], "[", "n", 
  "]"}]], "Output",ExpressionUUID->"60dc7032-3d13-4da3-b22c-67f6f3d03da6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceReduce", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"AutomaticSequence", "[", 
     RowBox[{
      RowBox[{"Automaton", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"1", "\[Rule]", "1"}], ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"1", "\[Rule]", "2"}], ",", "1"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"2", "\[Rule]", "2"}], ",", "0"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"2", "\[Rule]", "1"}], ",", "1"}], "}"}]}], "}"}], ",", 
        "1", ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"1", "\[Rule]", "0"}], ",", 
          RowBox[{"2", "\[Rule]", "1"}]}], "}"}]}], "]"}], ",", "2"}], "]"}], 
    "[", "n", "]"}], ",", "n"}], "]"}]], "Input",ExpressionUUID->"3a46ecf3-\
2c47-4822-8788-46f99a225a27"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RegularSequence", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      InterpretationBox[
       RowBox[{
        TagBox["SparseArray",
         "SummaryHead"], "[", 
        DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
         "Ready"}, 
         TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[
                  
                  RasterBox[{{{0.235431, 0.32765, 0.833291}, {0.772061, 
                   0.92462, 0.998703}}, {{0.772061, 0.92462, 0.998703}, {
                   0.235431, 0.32765, 0.833291}}}, {{0, 0}, {2, 2}}, {0, 1}], 
                  AspectRatio -> 1, Axes -> False, Frame -> False, 
                  FrameLabel -> {None, None}, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                  FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                  Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], 
                  Method -> {
                   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
                 GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[
                  
                  RasterBox[{{{0.235431, 0.32765, 0.833291}, {0.772061, 
                   0.92462, 0.998703}}, {{0.772061, 0.92462, 0.998703}, {
                   0.235431, 0.32765, 0.833291}}}, {{0, 0}, {2, 2}}, {0, 1}], 
                  AspectRatio -> 1, Axes -> False, Frame -> False, 
                  FrameLabel -> {None, None}, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                  FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                  Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], 
                  Method -> {
                   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
                 GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0.5`", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"\"", "SummaryItem"]}]}, {
                    TagBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "1", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "1", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], "SummaryItem"]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]},
          "SummaryPanel"],
         DynamicModuleValues:>{}], "]"}],
       SparseArray[Automatic, {2, 2}, 0, {1, {{0, 1, 2}, {{1}, {2}}}, {1, 1}}],
       Editable->False,
       SelectWithContents->True,
       Selectable->False], ",", 
      InterpretationBox[
       RowBox[{
        TagBox["SparseArray",
         "SummaryHead"], "[", 
        DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
         "Ready"}, 
         TemplateBox[{PaneSelectorBox[{False -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[
                  
                  RasterBox[{{{0.772061, 0.92462, 0.998703}, {0.235431, 
                   0.32765, 0.833291}}, {{0.235431, 0.32765, 0.833291}, {
                   0.772061, 0.92462, 0.998703}}}, {{0, 0}, {2, 2}}, {0, 1}], 
                  AspectRatio -> 1, Axes -> False, Frame -> False, 
                  FrameLabel -> {None, None}, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                  FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                  Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], 
                  Method -> {
                   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
                 GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "SummaryItem"]}]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}], True -> GridBox[{{
                 PaneBox[
                  ButtonBox[
                   DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                   ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                   None, Evaluator -> Automatic, Method -> "Preemptive"], 
                  Alignment -> {Center, Center}, ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}]], 
                 GraphicsBox[
                  
                  RasterBox[{{{0.772061, 0.92462, 0.998703}, {0.235431, 
                   0.32765, 0.833291}}, {{0.235431, 0.32765, 0.833291}, {
                   0.772061, 0.92462, 0.998703}}}, {{0, 0}, {2, 2}}, {0, 1}], 
                  AspectRatio -> 1, Axes -> False, Frame -> False, 
                  FrameLabel -> {None, None}, FrameStyle -> Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                  FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
                  Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                  Dynamic[{
                    Automatic, 3.5 CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification]}], 
                  Method -> {
                   "AxisPadding" -> Scaled[0.02], "DefaultBoundaryStyle" -> 
                    Automatic, 
                    "DefaultGraphicsInteraction" -> {
                    "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                    "Effects" -> {
                    "Highlight" -> {"ratio" -> 2}, 
                    "HighlightPoint" -> {"ratio" -> 2}, 
                    "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
                    "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
                    Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
                 GridBox[{{
                    RowBox[{
                    TagBox[
                    "\"Specified elements: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["2", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["0.5`", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"\"", "SummaryItem"]}]}, {
                    TagBox[
                    TagBox[
                    GridBox[{{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "1", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "1", ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], "SummaryItem"]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {
                   "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                  BaseStyle -> {
                   ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
               GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               BaselinePosition -> {1, 1}]}, 
            Dynamic[Typeset`open$$], ImageSize -> Automatic]},
          "SummaryPanel"],
         DynamicModuleValues:>{}], "]"}],
       SparseArray[Automatic, {2, 2}, 0, {1, {{0, 1, 2}, {{2}, {1}}}, {1, 1}}],
       Editable->False,
       SelectWithContents->True,
       Selectable->False]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], ",", "2"}], "]"}], "[", "n", 
  "]"}]], "Output",ExpressionUUID->"3010d63d-6054-4281-8cd1-c2935dd4a62b"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["SequenceRiffle", "Input"]], "Subsubsection",ExpressionUUID->"38e51894-5214-41fc-bfe4-e9e9f3a12128"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SequenceRiffle"}]], "Input",ExpressionUUID->"20bedb7b-1867-432c-a472-258c3d5a0c6e"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"SequenceRiffle\\\", \
\\\"[\\\", RowBox[List[RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"f\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"f\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"f\\\", \\\"TI\\\"], \
StyleBox[\\\"m\\\", \\\"TI\\\"]]]], \\\"}\\\"]], \\\",\\\", \
StyleBox[\\\"x\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) forms a Piecewise \
expression in \\!\\(\\*StyleBox[\\\"x\\\", \\\"TI\\\"]\\) that represents the \
expressions \\!\\(\\*RowBox[List[SubscriptBox[StyleBox[\\\"f\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"f\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"f\\\", \\\"TI\\\"], StyleBox[\\\"m\\\", \
\\\"TI\\\"]]]]\\) on residue classes modulo \\!\\(\\*StyleBox[\\\"m\\\", \
\\\"TI\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SequenceRiffle", "[", 
                    RowBox[{
                    "IntegerSequences`Private`functions_List", ",", 
                    "IntegerSequences`Private`var_"}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"IntegerSequences`Private`modulus", "=", 
                    RowBox[{
                    "Length", "[", "IntegerSequences`Private`functions", 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"Piecewise", "[", 
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"#1", "/.", "\[VeryThinSpace]", 
                    RowBox[{"IntegerSequences`Private`var", "\[Rule]", 
                    FractionBox[
                    RowBox[{"IntegerSequences`Private`var", "+", 
                    RowBox[{"Mod", "[", 
                    RowBox[{
                    RowBox[{"1", "-", 
                    RowBox[{"First", "[", "#2", "]"}]}], ",", 
                    "IntegerSequences`Private`modulus"}], "]"}]}], 
                    "IntegerSequences`Private`modulus"]}]}], ",", 
                    RowBox[{
                    RowBox[{"Mod", "[", 
                    RowBox[{
                    "IntegerSequences`Private`var", ",", 
                    "IntegerSequences`Private`modulus"}], "]"}], "\[Equal]", 
                    RowBox[{
                    RowBox[{"First", "[", "#2", "]"}], "-", "1"}]}]}], "}"}], 
                    "&"}], ",", 
                    RowBox[{
                    "RotateRight", "[", "IntegerSequences`Private`functions", 
                    "]"}]}], "]"}], "]"}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "SequenceRiffle", "]"}],
                     "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "__", "}"}], ",", "_"}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`SequenceRiffle] = {
                    "ArgumentsPattern" -> {{
                    BlankSequence[]}, 
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`SequenceRiffle\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"SequenceRiffle\\\", \
\\\"[\\\", RowBox[List[RowBox[List[\\\"{\\\", \
RowBox[List[SubscriptBox[StyleBox[\\\"f\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \
\\\"TR\\\"]], \\\",\\\", SubscriptBox[StyleBox[\\\"f\\\", \\\"TI\\\"], \
StyleBox[\\\"2\\\", \\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \
\\\"TR\\\"], \\\",\\\", SubscriptBox[StyleBox[\\\"f\\\", \\\"TI\\\"], \
StyleBox[\\\"m\\\", \\\"TI\\\"]]]], \\\"}\\\"]], \\\",\\\", \
StyleBox[\\\"x\\\", \\\"TI\\\"]]], \\\"]\\\"]]\\) forms a Piecewise \
expression in \\!\\(\\*StyleBox[\\\"x\\\", \\\"TI\\\"]\\) that represents the \
expressions \\!\\(\\*RowBox[List[SubscriptBox[StyleBox[\\\"f\\\", \
\\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]], \\\",\\\", \
SubscriptBox[StyleBox[\\\"f\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"\\\\[Ellipsis]\\\", \\\"TR\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"f\\\", \\\"TI\\\"], StyleBox[\\\"m\\\", \
\\\"TI\\\"]]]]\\) on residue classes modulo \\!\\(\\*StyleBox[\\\"m\\\", \
\\\"TI\\\"]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"SequenceRiffle\", \"[\", RowBox[List[RowBox[List[\"{\
\", RowBox[List[SubscriptBox[StyleBox[\"f\", \"TI\"], StyleBox[\"1\", \
\"TR\"]], \",\", SubscriptBox[StyleBox[\"f\", \"TI\"], StyleBox[\"2\", \
\"TR\"]], \",\", StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", \
SubscriptBox[StyleBox[\"f\", \"TI\"], StyleBox[\"m\", \"TI\"]]]], \"}\"]], \
\",\", StyleBox[\"x\", \"TI\"]]], \"]\"]]\) forms a Piecewise expression in \
\!\(\*StyleBox[\"x\", \"TI\"]\) that represents the expressions \
\!\(\*RowBox[List[SubscriptBox[StyleBox[\"f\", \"TI\"], StyleBox[\"1\", \
\"TR\"]], \",\", SubscriptBox[StyleBox[\"f\", \"TI\"], StyleBox[\"2\", \
\"TR\"]], \",\", StyleBox[\"\\[Ellipsis]\", \"TR\"], \",\", \
SubscriptBox[StyleBox[\"f\", \"TI\"], StyleBox[\"m\", \"TI\"]]]]\) on residue \
classes modulo \!\(\*StyleBox[\"m\", \"TI\"]\).", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`SequenceRiffle, {
      IntegerSequences`SequenceRiffle[
         Pattern[IntegerSequences`Private`functions, 
          Blank[List]], 
         Pattern[IntegerSequences`Private`var, 
          Blank[]]] :> 
       With[{IntegerSequences`Private`modulus = 
          Length[IntegerSequences`Private`functions]}, 
         Piecewise[
          MapIndexed[{
            
            ReplaceAll[#, 
             IntegerSequences`Private`var -> (IntegerSequences`Private`var + 
               Mod[1 - First[#2], IntegerSequences`Private`modulus])/
              IntegerSequences`Private`modulus], 
            Mod[IntegerSequences`Private`var, 
              IntegerSequences`Private`modulus] == First[#2] - 1}& , 
           RotateRight[IntegerSequences`Private`functions]]]]}], "SubValues" -> 
    None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`SequenceRiffle, {
      SyntaxInformation[IntegerSequences`SequenceRiffle] -> {
        "ArgumentsPattern" -> {{
            BlankSequence[]}, 
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`SequenceRiffle"], False]]], "Output",ExpressionUUID->\
"d3a62d23-132c-4ec0-b786-c6c4e5a653b2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"s", "=", 
  RowBox[{"SequenceRiffle", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n", ",", 
      SuperscriptBox["n", "2"], ",", 
      SuperscriptBox["n", "3"]}], "}"}], ",", "n"}], "]"}]}]], "Input",Express\
ionUUID->"99017012-0341-4a48-ab18-5066a43357af"],

Cell[BoxData[
 TagBox[GridBox[{
    {"\[Piecewise]", GridBox[{
       {
        FractionBox[
         SuperscriptBox["n", "3"], "27"], 
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{"n", ",", "3"}], "]"}], "\[Equal]", "0"}]},
       {
        FractionBox[
         RowBox[{"2", "+", "n"}], "3"], 
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{"n", ",", "3"}], "]"}], "\[Equal]", "1"}]},
       {
        RowBox[{
         FractionBox["1", "9"], " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{"1", "+", "n"}], ")"}], "2"]}], 
        RowBox[{
         RowBox[{"Mod", "[", 
          RowBox[{"n", ",", "3"}], "]"}], "\[Equal]", "2"}]},
       {"0", 
        TagBox["True",
         "PiecewiseDefault",
         AutoDelete->True]}
      },
      AllowedDimensions->{2, Automatic},
      Editable->True,
      GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
      GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
      GridBoxSpacings->{"Columns" -> {
          Offset[0.27999999999999997`], {
           Offset[0.84]}, 
          Offset[0.27999999999999997`]}, "Rows" -> {
          Offset[0.2], {
           Offset[0.4]}, 
          Offset[0.2]}},
      Selectable->True]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[0.35]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  "Piecewise",
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True,
  Selectable->False,
  StripWrapperBoxes->True]], "Output",ExpressionUUID->"4a8b6503-6889-4b17-\
8dc3-51fc26994f06"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{"s", ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "30"}], "}"}]}], "]"}]], "Input",ExpressionUUID->\
"0cbccedf-9697-4607-8111-b228608954a7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "1", ",", "2", ",", "4", ",", "8", ",", "3", ",", "9", 
   ",", "27", ",", "4", ",", "16", ",", "64", ",", "5", ",", "25", ",", "125",
    ",", "6", ",", "36", ",", "216", ",", "7", ",", "49", ",", "343", ",", 
   "8", ",", "64", ",", "512", ",", "9", ",", "81", ",", "729", ",", "10", 
   ",", "100", ",", "1000"}], "}"}]], "Output",ExpressionUUID->"bf447098-710b-\
499a-bca8-719fcff6022a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "[", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"n", ",", 
      SuperscriptBox["n", "2"], ",", 
      SuperscriptBox["n", "3"]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "10"}], "}"}]}], "]"}], "]"}]], "Input",ExpressionUUID->\
"8af9164d-dff0-4f1e-ac80-de8fa04ede61"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "1", ",", "2", ",", "4", ",", "8", ",", "3", ",", "9", 
   ",", "27", ",", "4", ",", "16", ",", "64", ",", "5", ",", "25", ",", "125",
    ",", "6", ",", "36", ",", "216", ",", "7", ",", "49", ",", "343", ",", 
   "8", ",", "64", ",", "512", ",", "9", ",", "81", ",", "729", ",", "10", 
   ",", "100", ",", "1000"}], "}"}]], "Output",ExpressionUUID->"e0462d67-4639-\
49a0-aa28-e885adac367a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Transpose", "[", 
  RowBox[{"Partition", "[", 
   RowBox[{"%", ",", "3"}], "]"}], "]"}]], "Input",ExpressionUUID->"02cd65ab-\
4212-43f9-87f1-c995c8559e10"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8",
      ",", "9", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "4", ",", "9", ",", "16", ",", "25", ",", "36", ",", "49", ",", 
     "64", ",", "81", ",", "100"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "8", ",", "27", ",", "64", ",", "125", ",", "216", ",", "343", 
     ",", "512", ",", "729", ",", "1000"}], "}"}]}], "}"}]], "Output",Expressi\
onUUID->"3018db80-9976-4ffe-9e3d-4f96b7784150"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Clear", "[", "s", "]"}]], "Input",ExpressionUUID->"b2243762-a020-4f34-b5a7-0d7f831df86b"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["SeriesRoot", "Input"]], "Subsubsection",ExpressionUUID->"116ecaa3-4a22-4415-b6d2-4ba08c6ac9fd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SeriesRoot"}]], "Input",ExpressionUUID->"650d6130-0457-4942-b23f-c382c4bd28c5"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"SeriesRoot\\\", \\\"[\\\", \
RowBox[List[\\\"{\\\", RowBox[List[StyleBox[\\\"f\\\", \\\"TI\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"y\\\", \\\"TI\\\"], StyleBox[\\\"0\\\", \
\\\"TR\\\"]]]], \\\"}\\\"]], \\\"]\\\"]]\\) represents the power series \
solution \\!\\(\\*StyleBox[\\\"y\\\", \\\"TI\\\"]\\) of the polynomial \
equation \\!\\(\\*RowBox[List[RowBox[List[StyleBox[\\\"f\\\", \\\"TI\\\"], \\\
\"[\\\", StyleBox[\\\"y\\\", \\\"TI\\\"], \\\"]\\\"]], \\\"\\\\[Equal]\\\", \
StyleBox[\\\"0\\\", \\\"TR\\\"]]]\\) approximated by \
\\!\\(\\*SubscriptBox[StyleBox[\\\"y\\\", \\\"TI\\\"], StyleBox[\\\"0\\\", \\\
\"TR\\\"]]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "SeriesRoot", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`SeriesRoot] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    OptionsPattern[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"Modulus", "\[Rule]", "0"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`SeriesRoot\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"SeriesRoot\\\", \\\"[\\\", \
RowBox[List[\\\"{\\\", RowBox[List[StyleBox[\\\"f\\\", \\\"TI\\\"], \
\\\",\\\", SubscriptBox[StyleBox[\\\"y\\\", \\\"TI\\\"], StyleBox[\\\"0\\\", \
\\\"TR\\\"]]]], \\\"}\\\"]], \\\"]\\\"]]\\) represents the power series \
solution \\!\\(\\*StyleBox[\\\"y\\\", \\\"TI\\\"]\\) of the polynomial \
equation \\!\\(\\*RowBox[List[RowBox[List[StyleBox[\\\"f\\\", \\\"TI\\\"], \\\
\"[\\\", StyleBox[\\\"y\\\", \\\"TI\\\"], \\\"]\\\"]], \\\"\\\\[Equal]\\\", \
StyleBox[\\\"0\\\", \\\"TR\\\"]]]\\) approximated by \
\\!\\(\\*SubscriptBox[StyleBox[\\\"y\\\", \\\"TI\\\"], StyleBox[\\\"0\\\", \\\
\"TR\\\"]]\\).\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"SeriesRoot\", \"[\", RowBox[List[\"{\", \
RowBox[List[StyleBox[\"f\", \"TI\"], \",\", SubscriptBox[StyleBox[\"y\", \"TI\
\"], StyleBox[\"0\", \"TR\"]]]], \"}\"]], \"]\"]]\) represents the power \
series solution \!\(\*StyleBox[\"y\", \"TI\"]\) of the polynomial equation \!\
\(\*RowBox[List[RowBox[List[StyleBox[\"f\", \"TI\"], \"[\", StyleBox[\"y\", \
\"TI\"], \"]\"]], \"\\[Equal]\", StyleBox[\"0\", \"TR\"]]]\) approximated by \
\!\(\*SubscriptBox[StyleBox[\"y\", \"TI\"], StyleBox[\"0\", \"TR\"]]\).", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> None, "SubValues" -> None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`SeriesRoot, {
      SyntaxInformation[IntegerSequences`SeriesRoot] -> {"ArgumentsPattern" -> {
           Blank[], 
           OptionsPattern[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {Modulus -> 0}, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`SeriesRoot"], False]]], "Output",ExpressionUUID->\
"59752180-7692-4523-aa0c-2cec724449e5"]
}, Open  ]],

Cell[TextData[{
 StyleBox["SeriesRoot", "Input"],
 " objects define algebraic sequences:"
}], "Text",ExpressionUUID->"18cbc121-392d-4af0-b6fe-e23a0452e9b7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"AlgebraicSequence", "[", 
   RowBox[{"SeriesRoot", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"\[FormalY]", ",", 
        RowBox[{
         RowBox[{"\[FormalX]", " ", 
          SuperscriptBox["\[FormalY]", "2"]}], "-", "\[FormalY]", "+", 
         "1"}]}], "]"}], ",", 
      RowBox[{"1", "+", "\[FormalX]", "+", 
       RowBox[{"2", " ", 
        SuperscriptBox["\[FormalX]", "2"]}], "+", 
       SuperscriptBox[
        RowBox[{"O", "[", "\[FormalX]", "]"}], "3"]}]}], "}"}], "]"}], "]"}], 
  "[", "10", "]"}]], "Input",ExpressionUUID->"1e61c93e-847c-4f23-89b3-\
1a2140d2d138"],

Cell[BoxData["16796"], "Output",ExpressionUUID->"6864ab47-94fe-4a34-acdb-8310c610bd9c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"AlgebraicSequence", "[", 
     RowBox[{"SeriesRoot", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Function", "[", 
         RowBox[{"\[FormalY]", ",", 
          RowBox[{
           RowBox[{"\[FormalX]", " ", 
            SuperscriptBox["\[FormalY]", "2"]}], "-", "\[FormalY]", "+", 
           "1"}]}], "]"}], ",", 
        RowBox[{"1", "+", "\[FormalX]", "+", 
         RowBox[{"2", " ", 
          SuperscriptBox["\[FormalX]", "2"]}], "+", 
         SuperscriptBox[
          RowBox[{"O", "[", "\[FormalX]", "]"}], "3"]}]}], "}"}], "]"}], 
     "]"}], "[", "n", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "10"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"5e759348-7515-47cb-9884-629d2722ec49"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "2", ",", "5", ",", "14", ",", "42", ",", "132", ",", 
   "429", ",", "1430", ",", "4862", ",", "16796"}], "}"}]], "Output",Expressio\
nUUID->"d05557e1-d2f7-4157-9fd3-a928d2be6ce3"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["SeriesSolve", "Input"]], "Subsubsection",ExpressionUUID->"ce239e91-3c3e-45c4-88a1-bbaba71ab3f4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SeriesSolve"}]], "Input",ExpressionUUID->"70296fcc-921a-421b-ba08-45877d359b0c"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"SeriesSolve\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"eqn\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"f[x]\\\", \\\"TI\\\"], \\\",\\\", RowBox[List[\\\"{\\\", \
RowBox[List[StyleBox[\\\"x\\\", \\\"TI\\\"], \\\",\\\", \
SubscriptBox[StyleBox[\\\"x\\\", \\\"TI\\\"], StyleBox[\\\"0\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"n\\\", \\\"TI\\\"]]], \\\"}\\\"]]]], \\\
\"]\\\"]]\\) attemps to solve \\!\\(\\*StyleBox[\\\"eqn\\\", \\\"TI\\\"]\\) \
for power series \\!\\(\\*RowBox[List[StyleBox[\\\"f\\\", \\\"TI\\\"], \
\\\"[\\\", StyleBox[\\\"x\\\", \\\"TI\\\"], \\\"]\\\"]]\\) about the point \
\\!\\(\\*RowBox[List[StyleBox[\\\"x\\\", \\\"TI\\\"], \\\"=\\\", \
SubscriptBox[StyleBox[\\\"x\\\", \\\"TI\\\"], StyleBox[\\\"0\\\", \
\\\"TR\\\"]]]]\\) to order \\!\\(\\*SuperscriptBox[RowBox[List[\\\"(\\\", \
RowBox[List[StyleBox[\\\"x\\\", \\\"TI\\\"], \\\"-\\\", \
SubscriptBox[StyleBox[\\\"x\\\", \\\"TI\\\"], StyleBox[\\\"0\\\", \
\\\"TR\\\"]]]], \\\")\\\"]], StyleBox[\\\"n\\\", \\\"TI\\\"]]\\).\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SeriesSolve", "[", 
                    RowBox[{"True", ",", 
                    RowBox[{"_", "[", "IntegerSequences`Private`x_", "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`x_", ",", 
                    "IntegerSequences`Private`x0_", ",", "_Integer"}], "}"}], 
                    "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`x0", ",", 
                    "IntegerSequences`Private`x"}], "]"}]}], ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
                    RowBox[{"{", 
                    RowBox[{"{", "}"}], "}"}]}]},
                    {
                    RowBox[{
                    RowBox[{"SeriesSolve", "[", 
                    RowBox[{"False", ",", 
                    RowBox[{"_", "[", "IntegerSequences`Private`x_", "]"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`x_", ",", 
                    "IntegerSequences`Private`x0_", ",", "_Integer"}], "}"}], 
                    "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`x0", ",", 
                    "IntegerSequences`Private`x"}], "]"}]}], ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
                    RowBox[{"{", "}"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"SeriesSolve", "[", 
                    RowBox[{"IntegerSequences`Private`equation_Equal", ",", 
                    RowBox[{
                    "IntegerSequences`Private`f_", "[", 
                    "IntegerSequences`Private`x_", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`x_", ",", 
                    "IntegerSequences`Private`x0_", ",", "_Integer"}], "}"}], 
                    ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`equation", ",", 
                    "IntegerSequences`Private`f"}], "]"}], "&&", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`x0", ",", 
                    "IntegerSequences`Private`x"}], "]"}]}]}], ":=", 
                    RowBox[{"{", "}"}]}]},
                    {
                    RowBox[{
                    RowBox[{"SeriesSolve", "[", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`lhs_", "\[Equal]", 
                    "IntegerSequences`Private`rhs_"}], ",", 
                    RowBox[{
                    "IntegerSequences`Private`f_", "[", 
                    "IntegerSequences`Private`x_", "]"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`x_", ",", 
                    "IntegerSequences`Private`x0_", ",", 
                    "IntegerSequences`Private`seriesaccuracyminus1_Integer"}],
                     "}"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`x0", ",", 
                    "IntegerSequences`Private`x"}], "]"}]}], ",", 
                    RowBox[{"IntegerSequences`Private`options", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`polynomial", ",", 
                    "IntegerSequences`Private`modulus", ",", 
                    "IntegerSequences`Private`coefficientrules", ",", 
                    "IntegerSequences`Private`y", ",", 
                    "IntegerSequences`Private`failed"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`failed", "=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    RowBox[{"OptionValue", "[", "MaxDenominator", "]"}], ",", 
                    RowBox[{
                    RowBox[{"_Integer", "?", "Positive"}], "|", 
                    "\[Infinity]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"SeriesSolve", "::", "maxd"}], "MessageName"], 
                    ",", 
                    RowBox[{"OptionValue", "[", "MaxDenominator", "]"}]}], 
                    "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ";", 
                    RowBox[{"IntegerSequences`Private`modulus", "=", 
                    RowBox[{"OptionValue", "[", "Modulus", "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"IntegerSequences`Private`modulus", ",", 
                    RowBox[{"_Integer", "?", "NonNegative"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"SeriesSolve", "::", "rmod"}], "MessageName"], 
                    ",", "IntegerSequences`Private`modulus"}], "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ";", 
                    RowBox[{"IntegerSequences`Private`polynomial", "=", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`lhs", "-", 
                    "IntegerSequences`Private`rhs"}], "/.", 
                    "\[VeryThinSpace]", 
                    RowBox[{
                    RowBox[{
                    "IntegerSequences`Private`f", "[", 
                    "IntegerSequences`Private`x", "]"}], "\[Rule]", 
                    "IntegerSequences`Private`y"}]}]}], ";", 
                    RowBox[{"Quiet", "[", 
                    RowBox[{
                    RowBox[{"Check", "[", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`coefficientrules", "=", 
                    RowBox[{"CoefficientRules", "[", 
                    RowBox[{
                    "IntegerSequences`Private`polynomial", ",", 
                    "IntegerSequences`Private`y", ",", 
                    RowBox[{
                    "Modulus", "\[Rule]", 
                    "IntegerSequences`Private`modulus"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"SeriesSolve", "::", "nmod"}], "MessageName"], 
                    ",", 
                    RowBox[{
                    "IntegerSequences`Private`lhs", "\[Equal]", 
                    "IntegerSequences`Private`rhs"}], ",", 
                    "IntegerSequences`Private`modulus"}], "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}], ",", 
                    StyleBox[
                    RowBox[{"CoefficientRules", "::", "nmod"}], 
                    "MessageName"]}], "]"}], ",", 
                    StyleBox[
                    RowBox[{"CoefficientRules", "::", "nmod"}], 
                    "MessageName"]}], "]"}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"!", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{
                    "IntegerSequences`Private`coefficientrules", ",", 
                    "IntegerSequences`Private`y"}], "]"}]}], "||", 
                    RowBox[{"!", 
                    RowBox[{"AllTrue", "[", 
                    RowBox[{"IntegerSequences`Private`coefficientrules", ",", 
                    RowBox[{
                    RowBox[{"PolynomialQ", "[", 
                    RowBox[{
                    RowBox[{"Last", "[", "#1", "]"}], ",", 
                    "IntegerSequences`Private`x"}], "]"}], "&"}]}], "]"}]}]}],
                     ",", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"SeriesSolve", "::", "poly"}], "MessageName"], 
                    ",", 
                    RowBox[{
                    "IntegerSequences`Private`lhs", "\[Equal]", 
                    "IntegerSequences`Private`rhs"}], ",", 
                    "IntegerSequences`Private`x", ",", 
                    RowBox[{
                    "IntegerSequences`Private`f", "[", 
                    "IntegerSequences`Private`x", "]"}]}], "]"}], ";", 
                    RowBox[{"Throw", "[", "True", "]"}]}]}], "]"}], ";", 
                    "False"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"IntegerSequences`Private`f", "[", 
                    "IntegerSequences`Private`x", "]"}], "\[Rule]", "#1"}], 
                    "}"}], "&"}], ")"}], "/@", 
                    RowBox[{
                    "IntegerSequences`Private`SeriesRootSeriesList", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`y", ",", 
                    "IntegerSequences`Private`polynomial"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", 
                    RowBox[{"-", "\[Infinity]"}]}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "IntegerSequences`Private`x", ",", 
                    "IntegerSequences`Private`x0", ",", 
                    "IntegerSequences`Private`seriesaccuracyminus1"}], "}"}], 
                    ",", "IntegerSequences`Private`options"}], "]"}]}], "/;", 
                    RowBox[{"!", "IntegerSequences`Private`failed"}]}]}]}], 
                    "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "SeriesSolve", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "_", ",", "_", ",", 
                    RowBox[{"OptionsPattern", "[", "]"}]}], "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`SeriesSolve] = {
                    "ArgumentsPattern" -> {
                    Blank[], 
                    Blank[], 
                    Blank[], 
                    OptionsPattern[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"MaxDenominator", "\[Rule]", "\[Infinity]"}], ",", 
                    RowBox[{"Method", "\[Rule]", "Automatic"}], ",", 
                    RowBox[{"Modulus", "\[Rule]", "0"}]}], "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "Protected", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`SeriesSolve\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"SeriesSolve\\\", \
\\\"[\\\", RowBox[List[StyleBox[\\\"eqn\\\", \\\"TI\\\"], \\\",\\\", \
StyleBox[\\\"f[x]\\\", \\\"TI\\\"], \\\",\\\", RowBox[List[\\\"{\\\", \
RowBox[List[StyleBox[\\\"x\\\", \\\"TI\\\"], \\\",\\\", \
SubscriptBox[StyleBox[\\\"x\\\", \\\"TI\\\"], StyleBox[\\\"0\\\", \
\\\"TR\\\"]], \\\",\\\", StyleBox[\\\"n\\\", \\\"TI\\\"]]], \\\"}\\\"]]]], \\\
\"]\\\"]]\\) attemps to solve \\!\\(\\*StyleBox[\\\"eqn\\\", \\\"TI\\\"]\\) \
for power series \\!\\(\\*RowBox[List[StyleBox[\\\"f\\\", \\\"TI\\\"], \
\\\"[\\\", StyleBox[\\\"x\\\", \\\"TI\\\"], \\\"]\\\"]]\\) about the point \
\\!\\(\\*RowBox[List[StyleBox[\\\"x\\\", \\\"TI\\\"], \\\"=\\\", \
SubscriptBox[StyleBox[\\\"x\\\", \\\"TI\\\"], StyleBox[\\\"0\\\", \
\\\"TR\\\"]]]]\\) to order \\!\\(\\*SuperscriptBox[RowBox[List[\\\"(\\\", \
RowBox[List[StyleBox[\\\"x\\\", \\\"TI\\\"], \\\"-\\\", \
SubscriptBox[StyleBox[\\\"x\\\", \\\"TI\\\"], StyleBox[\\\"0\\\", \
\\\"TR\\\"]]]], \\\")\\\"]], StyleBox[\\\"n\\\", \\\"TI\\\"]]\\).\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"SeriesSolve\", \"[\", RowBox[List[StyleBox[\"eqn\", \
\"TI\"], \",\", StyleBox[\"f[x]\", \"TI\"], \",\", RowBox[List[\"{\", \
RowBox[List[StyleBox[\"x\", \"TI\"], \",\", SubscriptBox[StyleBox[\"x\", \"TI\
\"], StyleBox[\"0\", \"TR\"]], \",\", StyleBox[\"n\", \"TI\"]]], \"}\"]]]], \
\"]\"]]\) attemps to solve \!\(\*StyleBox[\"eqn\", \"TI\"]\) for power series \
\!\(\*RowBox[List[StyleBox[\"f\", \"TI\"], \"[\", StyleBox[\"x\", \"TI\"], \
\"]\"]]\) about the point \!\(\*RowBox[List[StyleBox[\"x\", \"TI\"], \"=\", \
SubscriptBox[StyleBox[\"x\", \"TI\"], StyleBox[\"0\", \"TR\"]]]]\) to order \
\!\(\*SuperscriptBox[RowBox[List[\"(\", RowBox[List[StyleBox[\"x\", \"TI\"], \
\"-\", SubscriptBox[StyleBox[\"x\", \"TI\"], StyleBox[\"0\", \"TR\"]]]], \
\")\"]], StyleBox[\"n\", \"TI\"]]\).", "Documentation" -> None, "OwnValues" -> 
    None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`SeriesSolve, {
      IntegerSequences`SeriesSolve[True, 
         Blank[][
          Pattern[IntegerSequences`Private`x, 
           Blank[]]], 
         Condition[{
           Pattern[IntegerSequences`Private`x, 
            Blank[]], 
           Pattern[IntegerSequences`Private`x0, 
            Blank[]], 
           Blank[Integer]}, 
          FreeQ[IntegerSequences`Private`x0, IntegerSequences`Private`x]], 
         OptionsPattern[]] :> {{}}, IntegerSequences`SeriesSolve[False, 
         Blank[][
          Pattern[IntegerSequences`Private`x, 
           Blank[]]], 
         Condition[{
           Pattern[IntegerSequences`Private`x, 
            Blank[]], 
           Pattern[IntegerSequences`Private`x0, 
            Blank[]], 
           Blank[Integer]}, 
          FreeQ[IntegerSequences`Private`x0, IntegerSequences`Private`x]], 
         OptionsPattern[]] :> {}, Condition[
         IntegerSequences`SeriesSolve[
          Pattern[IntegerSequences`Private`equation, 
           Blank[Equal]], 
          Pattern[IntegerSequences`Private`f, 
           Blank[]][
           Pattern[IntegerSequences`Private`x, 
            Blank[]]], {
           Pattern[IntegerSequences`Private`x, 
            Blank[]], 
           Pattern[IntegerSequences`Private`x0, 
            Blank[]], 
           Blank[Integer]}, 
          OptionsPattern[]], 
         And[
          FreeQ[
          IntegerSequences`Private`equation, IntegerSequences`Private`f], 
          FreeQ[
          IntegerSequences`Private`x0, IntegerSequences`Private`x]]] :> {}, 
       IntegerSequences`SeriesSolve[Pattern[IntegerSequences`Private`lhs, 
           Blank[]] == Pattern[IntegerSequences`Private`rhs, 
           Blank[]], 
         Pattern[IntegerSequences`Private`f, 
          Blank[]][
          Pattern[IntegerSequences`Private`x, 
           Blank[]]], 
         Condition[{
           Pattern[IntegerSequences`Private`x, 
            Blank[]], 
           Pattern[IntegerSequences`Private`x0, 
            Blank[]], 
           Pattern[IntegerSequences`Private`seriesaccuracyminus1, 
            Blank[Integer]]}, 
          FreeQ[IntegerSequences`Private`x0, IntegerSequences`Private`x]], 
         Pattern[IntegerSequences`Private`options, 
          OptionsPattern[]]] :> 
       Module[{IntegerSequences`Private`polynomial, 
          IntegerSequences`Private`modulus, 
          IntegerSequences`Private`coefficientrules, 
          IntegerSequences`Private`y, IntegerSequences`Private`failed}, 
         IntegerSequences`Private`failed = Catch[If[
              Not[
               MatchQ[
                OptionValue[IntegerSequences`MaxDenominator], 
                Alternatives[
                 PatternTest[
                  Blank[Integer], Positive], Infinity]]], Message[
                MessageName[IntegerSequences`SeriesSolve, "maxd"], 
                OptionValue[IntegerSequences`MaxDenominator]]; Throw[True]]; 
            IntegerSequences`Private`modulus = OptionValue[Modulus]; If[
              Not[
               MatchQ[IntegerSequences`Private`modulus, 
                PatternTest[
                 Blank[Integer], NonNegative]]], Message[
                MessageName[IntegerSequences`SeriesSolve, "rmod"], 
                IntegerSequences`Private`modulus]; Throw[True]]; 
            IntegerSequences`Private`polynomial = 
             ReplaceAll[
              IntegerSequences`Private`lhs - IntegerSequences`Private`rhs, 
               IntegerSequences`Private`f[IntegerSequences`Private`x] -> 
               IntegerSequences`Private`y]; Quiet[
              Check[
              IntegerSequences`Private`coefficientrules = 
               CoefficientRules[
                IntegerSequences`Private`polynomial, 
                 IntegerSequences`Private`y, Modulus -> 
                 IntegerSequences`Private`modulus], Message[
                 MessageName[IntegerSequences`SeriesSolve, "nmod"], 
                 IntegerSequences`Private`lhs == IntegerSequences`Private`rhs,
                  IntegerSequences`Private`modulus]; Throw[True], 
               MessageName[CoefficientRules, "nmod"]], 
              MessageName[CoefficientRules, "nmod"]]; If[
              Or[
               Not[
                FreeQ[
                IntegerSequences`Private`coefficientrules, 
                 IntegerSequences`Private`y]], 
               Not[
                AllTrue[IntegerSequences`Private`coefficientrules, PolynomialQ[
                  Last[#], IntegerSequences`Private`x]& ]]], Message[
                MessageName[IntegerSequences`SeriesSolve, "poly"], 
                IntegerSequences`Private`lhs == IntegerSequences`Private`rhs, 
                IntegerSequences`Private`x, 
                IntegerSequences`Private`f[IntegerSequences`Private`x]]; 
              Throw[True]]; False]; Condition[
           
           Map[{IntegerSequences`Private`f[
              IntegerSequences`Private`x] -> #}& , 
            
            IntegerSequences`Private`SeriesRootSeriesList[{{
              IntegerSequences`Private`y, 
               IntegerSequences`Private`polynomial}, {0, -Infinity}}, {
             IntegerSequences`Private`x, IntegerSequences`Private`x0, 
              IntegerSequences`Private`seriesaccuracyminus1}, 
             IntegerSequences`Private`options]], 
           Not[IntegerSequences`Private`failed]]]}], "SubValues" -> None, 
    "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`SeriesSolve, {
      SyntaxInformation[IntegerSequences`SeriesSolve] -> {"ArgumentsPattern" -> {
           Blank[], 
           Blank[], 
           Blank[], 
           OptionsPattern[]}}}], "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {
     IntegerSequences`MaxDenominator -> DirectedInfinity[1], Method -> 
      Automatic, Modulus -> 0}, "Attributes" -> {Protected}, "FullName" -> 
    "IntegerSequences`SeriesSolve"], False]]], "Output",ExpressionUUID->\
"4aec5da3-f811-4972-b3af-322fb43be7c4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SeriesSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "-", "x"}], ")"}], 
     RowBox[{"f", "[", "x", "]"}]}], "\[Equal]", "1"}], ",", 
   RowBox[{"f", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "2", ",", "10"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"1e9003cd-008f-4e1f-9bd3-89b06e9ff166"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
    InterpretationBox[
     RowBox[{
      RowBox[{"-", "1"}], "+", 
      RowBox[{"(", 
       RowBox[{"x", "-", "2"}], ")"}], "-", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"x", "-", "2"}], ")"}], "2"], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"x", "-", "2"}], ")"}], "3"], "-", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"x", "-", "2"}], ")"}], "4"], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"x", "-", "2"}], ")"}], "5"], "-", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"x", "-", "2"}], ")"}], "6"], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"x", "-", "2"}], ")"}], "7"], "-", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"x", "-", "2"}], ")"}], "8"], "+", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"x", "-", "2"}], ")"}], "9"], "-", 
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"x", "-", "2"}], ")"}], "10"], "+", 
      InterpretationBox[
       SuperscriptBox[
        RowBox[{"O", "[", 
         RowBox[{"x", "-", "2"}], "]"}], "11"],
       SeriesData[$CellContext`x, 2, {}, 0, 11, 1],
       Editable->False]}],
     SeriesData[$CellContext`x, 2, {-1, 1, -1, 1, -1, 1, -1, 1, -1, 1, -1}, 0,
       11, 1],
     Editable->False]}], "}"}], "}"}]], "Output",ExpressionUUID->"58b4138e-\
061b-436d-aece-974dea40b74b"]
}, Open  ]],

Cell[TextData[{
 "An irreducible polynomial of degree ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "e2b1ec13-54a8-4885-afa5-57cfc65f4233"],
 " has ",
 Cell[BoxData[
  FormBox["d", TraditionalForm]],ExpressionUUID->
  "aa79f96e-99b3-4b22-8c22-18a260580ca4"],
 " distinct Puiseux series roots:"
}], "Text",ExpressionUUID->"4146148e-2f8c-49c3-96e0-8d616e9d2d13"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SeriesSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["x", "2"], "+", 
     RowBox[{"x", " ", 
      RowBox[{"f", "[", "x", "]"}]}], "+", 
     SuperscriptBox[
      RowBox[{"f", "[", "x", "]"}], "3"]}], "\[Equal]", "0"}], ",", 
   RowBox[{"f", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "5"}], "}"}]}], "]"}]], "Input",ExpressionUUID\
->"803674e0-32bb-4f18-80e4-54ac7c05c266"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
     InterpretationBox[
      RowBox[{
       RowBox[{"-", "x"}], "+", 
       SuperscriptBox["x", "2"], "-", 
       RowBox[{"3", " ", 
        SuperscriptBox["x", "3"]}], "+", 
       RowBox[{"12", " ", 
        SuperscriptBox["x", "4"]}], "-", 
       RowBox[{"55", " ", 
        SuperscriptBox["x", "5"]}], "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", "x", "]"}], "6"],
        SeriesData[$CellContext`x, 0, {}, 1, 6, 1],
        Editable->False]}],
      SeriesData[$CellContext`x, 0, {-1, 1, -3, 12, -55}, 1, 6, 1],
      Editable->False]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
     InterpretationBox[
      RowBox[{
       RowBox[{"-", 
        RowBox[{"\[ImaginaryI]", " ", 
         SqrtBox["x"]}]}], "+", 
       FractionBox["x", "2"], "-", 
       RowBox[{
        FractionBox["3", "8"], " ", "\[ImaginaryI]", " ", 
        SuperscriptBox["x", 
         RowBox[{"3", "/", "2"}]]}], "-", 
       FractionBox[
        SuperscriptBox["x", "2"], "2"], "+", 
       RowBox[{
        FractionBox["105", "128"], " ", "\[ImaginaryI]", " ", 
        SuperscriptBox["x", 
         RowBox[{"5", "/", "2"}]]}], "+", 
       FractionBox[
        RowBox[{"3", " ", 
         SuperscriptBox["x", "3"]}], "2"], "-", 
       FractionBox[
        RowBox[{"3003", " ", "\[ImaginaryI]", " ", 
         SuperscriptBox["x", 
          RowBox[{"7", "/", "2"}]]}], "1024"], "-", 
       RowBox[{"6", " ", 
        SuperscriptBox["x", "4"]}], "+", 
       FractionBox[
        RowBox[{"415701", " ", "\[ImaginaryI]", " ", 
         SuperscriptBox["x", 
          RowBox[{"9", "/", "2"}]]}], "32768"], "+", 
       FractionBox[
        RowBox[{"55", " ", 
         SuperscriptBox["x", "5"]}], "2"], "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", "x", "]"}], 
         RowBox[{"11", "/", "2"}]],
        SeriesData[$CellContext`x, 0, {}, 1, 11, 2],
        Editable->False]}],
      SeriesData[$CellContext`x, 0, {
        Complex[0, -1], 
        Rational[1, 2], 
        Complex[0, 
         Rational[-3, 8]], 
        Rational[-1, 2], 
        Complex[0, 
         Rational[105, 128]], 
        Rational[3, 2], 
        Complex[0, 
         Rational[-3003, 1024]], -6, 
        Complex[0, 
         Rational[415701, 32768]], 
        Rational[55, 2]}, 1, 11, 2],
      Editable->False]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
     InterpretationBox[
      RowBox[{
       RowBox[{"\[ImaginaryI]", " ", 
        SqrtBox["x"]}], "+", 
       FractionBox["x", "2"], "+", 
       RowBox[{
        FractionBox["3", "8"], " ", "\[ImaginaryI]", " ", 
        SuperscriptBox["x", 
         RowBox[{"3", "/", "2"}]]}], "-", 
       FractionBox[
        SuperscriptBox["x", "2"], "2"], "-", 
       RowBox[{
        FractionBox["105", "128"], " ", "\[ImaginaryI]", " ", 
        SuperscriptBox["x", 
         RowBox[{"5", "/", "2"}]]}], "+", 
       FractionBox[
        RowBox[{"3", " ", 
         SuperscriptBox["x", "3"]}], "2"], "+", 
       FractionBox[
        RowBox[{"3003", " ", "\[ImaginaryI]", " ", 
         SuperscriptBox["x", 
          RowBox[{"7", "/", "2"}]]}], "1024"], "-", 
       RowBox[{"6", " ", 
        SuperscriptBox["x", "4"]}], "-", 
       FractionBox[
        RowBox[{"415701", " ", "\[ImaginaryI]", " ", 
         SuperscriptBox["x", 
          RowBox[{"9", "/", "2"}]]}], "32768"], "+", 
       FractionBox[
        RowBox[{"55", " ", 
         SuperscriptBox["x", "5"]}], "2"], "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", "x", "]"}], 
         RowBox[{"11", "/", "2"}]],
        SeriesData[$CellContext`x, 0, {}, 1, 11, 2],
        Editable->False]}],
      SeriesData[$CellContext`x, 0, {
        Complex[0, 1], 
        Rational[1, 2], 
        Complex[0, 
         Rational[3, 8]], 
        Rational[-1, 2], 
        Complex[0, 
         Rational[-105, 128]], 
        Rational[3, 2], 
        Complex[0, 
         Rational[3003, 1024]], -6, 
        Complex[0, 
         Rational[-415701, 32768]], 
        Rational[55, 2]}, 1, 11, 2],
      Editable->False]}], "}"}]}], "}"}]], "Output",ExpressionUUID->"9cfc246c-\
f619-4685-9c10-7480cc0f9b84"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SeriesSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"f", "[", "x", "]"}], "\[Equal]", 
    RowBox[{"1", "+", 
     RowBox[{"x", " ", 
      RowBox[{"f", "[", "x", "]"}]}], "+", 
     RowBox[{
      SuperscriptBox["x", "2"], " ", 
      SuperscriptBox[
       RowBox[{"f", "[", "x", "]"}], "2"]}], "+", 
     RowBox[{
      SuperscriptBox["x", "3"], " ", 
      SuperscriptBox[
       RowBox[{"f", "[", "x", "]"}], "3"]}]}]}], ",", 
   RowBox[{"f", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "5"}], "}"}]}], "]"}]], "Input",ExpressionUUID\
->"f260ae56-5011-4eb5-a09b-bbdecf18b87d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
     InterpretationBox[
      RowBox[{"1", "+", "x", "+", 
       RowBox[{"2", " ", 
        SuperscriptBox["x", "2"]}], "+", 
       RowBox[{"5", " ", 
        SuperscriptBox["x", "3"]}], "+", 
       RowBox[{"13", " ", 
        SuperscriptBox["x", "4"]}], "+", 
       RowBox[{"36", " ", 
        SuperscriptBox["x", "5"]}], "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", "x", "]"}], "6"],
        SeriesData[$CellContext`x, 0, {}, 0, 6, 1],
        Editable->False]}],
      SeriesData[$CellContext`x, 0, {1, 1, 2, 5, 13, 36}, 0, 6, 1],
      Editable->False]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
     InterpretationBox[
      RowBox[{
       RowBox[{"-", 
        FractionBox["1", 
         SuperscriptBox["x", 
          RowBox[{"3", "/", "2"}]]]}], "-", 
       FractionBox["1", 
        RowBox[{"2", " ", "x"}]], "+", 
       FractionBox["3", 
        RowBox[{"8", " ", 
         SqrtBox["x"]}]], "-", 
       FractionBox["1", "2"], "+", 
       FractionBox[
        RowBox[{"41", " ", 
         SqrtBox["x"]}], "128"], "-", 
       FractionBox["x", "2"], "+", 
       FractionBox[
        RowBox[{"763", " ", 
         SuperscriptBox["x", 
          RowBox[{"3", "/", "2"}]]}], "1024"], "-", 
       SuperscriptBox["x", "2"], "+", 
       FractionBox[
        RowBox[{"51797", " ", 
         SuperscriptBox["x", 
          RowBox[{"5", "/", "2"}]]}], "32768"], "-", 
       FractionBox[
        RowBox[{"5", " ", 
         SuperscriptBox["x", "3"]}], "2"], "+", 
       FractionBox[
        RowBox[{"1037157", " ", 
         SuperscriptBox["x", 
          RowBox[{"7", "/", "2"}]]}], "262144"], "-", 
       FractionBox[
        RowBox[{"13", " ", 
         SuperscriptBox["x", "4"]}], "2"], "+", 
       FractionBox[
        RowBox[{"45162541", " ", 
         SuperscriptBox["x", 
          RowBox[{"9", "/", "2"}]]}], "4194304"], "-", 
       RowBox[{"18", " ", 
        SuperscriptBox["x", "5"]}], "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", "x", "]"}], 
         RowBox[{"11", "/", "2"}]],
        SeriesData[$CellContext`x, 0, {}, -3, 11, 2],
        Editable->False]}],
      SeriesData[$CellContext`x, 0, {-1, 
        Rational[-1, 2], 
        Rational[3, 8], 
        Rational[-1, 2], 
        Rational[41, 128], 
        Rational[-1, 2], 
        Rational[763, 1024], -1, 
        Rational[51797, 32768], 
        Rational[-5, 2], 
        Rational[1037157, 262144], 
        Rational[-13, 2], 
        Rational[45162541, 4194304], -18}, -3, 11, 2],
      Editable->False]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
     InterpretationBox[
      RowBox[{
       FractionBox["1", 
        SuperscriptBox["x", 
         RowBox[{"3", "/", "2"}]]], "-", 
       FractionBox["1", 
        RowBox[{"2", " ", "x"}]], "-", 
       FractionBox["3", 
        RowBox[{"8", " ", 
         SqrtBox["x"]}]], "-", 
       FractionBox["1", "2"], "-", 
       FractionBox[
        RowBox[{"41", " ", 
         SqrtBox["x"]}], "128"], "-", 
       FractionBox["x", "2"], "-", 
       FractionBox[
        RowBox[{"763", " ", 
         SuperscriptBox["x", 
          RowBox[{"3", "/", "2"}]]}], "1024"], "-", 
       SuperscriptBox["x", "2"], "-", 
       FractionBox[
        RowBox[{"51797", " ", 
         SuperscriptBox["x", 
          RowBox[{"5", "/", "2"}]]}], "32768"], "-", 
       FractionBox[
        RowBox[{"5", " ", 
         SuperscriptBox["x", "3"]}], "2"], "-", 
       FractionBox[
        RowBox[{"1037157", " ", 
         SuperscriptBox["x", 
          RowBox[{"7", "/", "2"}]]}], "262144"], "-", 
       FractionBox[
        RowBox[{"13", " ", 
         SuperscriptBox["x", "4"]}], "2"], "-", 
       FractionBox[
        RowBox[{"45162541", " ", 
         SuperscriptBox["x", 
          RowBox[{"9", "/", "2"}]]}], "4194304"], "-", 
       RowBox[{"18", " ", 
        SuperscriptBox["x", "5"]}], "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", "x", "]"}], 
         RowBox[{"11", "/", "2"}]],
        SeriesData[$CellContext`x, 0, {}, -3, 11, 2],
        Editable->False]}],
      SeriesData[$CellContext`x, 0, {1, 
        Rational[-1, 2], 
        Rational[-3, 8], 
        Rational[-1, 2], 
        Rational[-41, 128], 
        Rational[-1, 2], 
        Rational[-763, 1024], -1, 
        Rational[-51797, 32768], 
        Rational[-5, 2], 
        Rational[-1037157, 262144], 
        Rational[-13, 2], 
        Rational[-45162541, 4194304], -18}, -3, 11, 2],
      Editable->False]}], "}"}]}], "}"}]], "Output",ExpressionUUID->"8b3d047e-\
d649-46a3-a7e1-80def129ae71"]
}, Open  ]],

Cell[TextData[{
 StyleBox["SeriesSolve", "Input"],
 " takes a ",
 StyleBox["Modulus", "Input"],
 " option:"
}], "Text",ExpressionUUID->"0bd5d8e8-95d1-4031-b014-b5ed75470da6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SeriesSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["x", "2"], "+", 
     RowBox[{"x", " ", 
      RowBox[{"f", "[", "x", "]"}]}], "+", 
     SuperscriptBox[
      RowBox[{"f", "[", "x", "]"}], "2"], "+", 
     SuperscriptBox[
      RowBox[{"f", "[", "x", "]"}], "3"]}], "\[Equal]", "0"}], ",", 
   RowBox[{"f", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "10"}], "}"}], ",", 
   RowBox[{"Modulus", "\[Rule]", "7"}]}], "]"}]], "Input",ExpressionUUID->\
"3b4c3a2b-3637-49b8-9bea-9bb9a31b2ab8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
     InterpretationBox[
      RowBox[{
       RowBox[{"2", " ", "x"}], "+", 
       RowBox[{"4", " ", 
        SuperscriptBox["x", "2"]}], "+", 
       RowBox[{"4", " ", 
        SuperscriptBox["x", "3"]}], "+", 
       RowBox[{"4", " ", 
        SuperscriptBox["x", "4"]}], "+", 
       SuperscriptBox["x", "5"], "+", 
       RowBox[{"2", " ", 
        SuperscriptBox["x", "7"]}], "+", 
       SuperscriptBox["x", "8"], "+", 
       RowBox[{"5", " ", 
        SuperscriptBox["x", "9"]}], "+", 
       RowBox[{"3", " ", 
        SuperscriptBox["x", "10"]}], "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", "x", "]"}], "11"],
        SeriesData[$CellContext`x, 0, {}, 1, 11, 1],
        Editable->False]}],
      SeriesData[$CellContext`x, 0, {2, 4, 4, 4, 1, 0, 2, 1, 5, 3}, 1, 11, 1],
      Editable->False]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
     InterpretationBox[
      RowBox[{
       RowBox[{"4", " ", "x"}], "+", 
       RowBox[{"3", " ", 
        SuperscriptBox["x", "2"]}], "+", 
       RowBox[{"4", " ", 
        SuperscriptBox["x", "3"]}], "+", 
       RowBox[{"6", " ", 
        SuperscriptBox["x", "4"]}], "+", 
       RowBox[{"5", " ", 
        SuperscriptBox["x", "5"]}], "+", 
       RowBox[{"6", " ", 
        SuperscriptBox["x", "7"]}], "+", 
       RowBox[{"6", " ", 
        SuperscriptBox["x", "8"]}], "+", 
       RowBox[{"3", " ", 
        SuperscriptBox["x", "9"]}], "+", 
       RowBox[{"2", " ", 
        SuperscriptBox["x", "10"]}], "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", "x", "]"}], "11"],
        SeriesData[$CellContext`x, 0, {}, 1, 11, 1],
        Editable->False]}],
      SeriesData[$CellContext`x, 0, {4, 3, 4, 6, 5, 0, 6, 6, 3, 2}, 1, 11, 1],
      Editable->False]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
     InterpretationBox[
      RowBox[{"6", "+", "x", "+", 
       RowBox[{"6", " ", 
        SuperscriptBox["x", "3"]}], "+", 
       RowBox[{"4", " ", 
        SuperscriptBox["x", "4"]}], "+", 
       SuperscriptBox["x", "5"], "+", 
       RowBox[{"6", " ", 
        SuperscriptBox["x", "7"]}], "+", 
       RowBox[{"6", " ", 
        SuperscriptBox["x", "9"]}], "+", 
       RowBox[{"2", " ", 
        SuperscriptBox["x", "10"]}], "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", "x", "]"}], "11"],
        SeriesData[$CellContext`x, 0, {}, 0, 11, 1],
        Editable->False]}],
      SeriesData[$CellContext`x, 0, {6, 1, 0, 6, 4, 1, 0, 6, 0, 6, 2}, 0, 11, 
       1],
      Editable->False]}], "}"}]}], "}"}]], "Output",ExpressionUUID->"ce4519be-\
fdc8-4037-a38a-10273fbffcc8"]
}, Open  ]],

Cell[TextData[{
 StyleBox["SeriesSolve", "Input"],
 " may produce results for small orders when in fact no series solutions \
exist:"
}], "Text",ExpressionUUID->"291af936-3d5b-4d5b-aba2-879dcb9d74a9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SeriesSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"x", "-", "2"}], ")"}], 
      RowBox[{"f", "[", "x", "]"}]}], "+", "2"}], "\[Equal]", "0"}], ",", 
   RowBox[{"f", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "0"}], "}"}], ",", 
   RowBox[{"Modulus", "\[Rule]", "4"}]}], "]"}]], "Input",ExpressionUUID->\
"f1be5ea1-4bce-435b-b73b-b6866b402720"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
     InterpretationBox[
      RowBox[{"1", "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", "x", "]"}], "1"],
        SeriesData[$CellContext`x, 0, {}, 0, 1, 1],
        Editable->False]}],
      SeriesData[$CellContext`x, 0, {1}, 0, 1, 1],
      Editable->False]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
     InterpretationBox[
      RowBox[{"3", "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", "x", "]"}], "1"],
        SeriesData[$CellContext`x, 0, {}, 0, 1, 1],
        Editable->False]}],
      SeriesData[$CellContext`x, 0, {3}, 0, 1, 1],
      Editable->False]}], "}"}]}], "}"}]], "Output",ExpressionUUID->"1748219f-\
7d4b-4974-89c1-37b9a288540d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SeriesSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"x", "-", "2"}], ")"}], 
      RowBox[{"f", "[", "x", "]"}]}], "+", "2"}], "\[Equal]", "0"}], ",", 
   RowBox[{"f", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "10"}], "}"}], ",", 
   RowBox[{"Modulus", "\[Rule]", "4"}]}], "]"}]], "Input",ExpressionUUID->\
"630b07f1-49f0-4475-b4cf-a2d9906d314c"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",ExpressionUUID->"1e58f864-bdda-4fa4-b561-5728ac01b29a"]
}, Open  ]],

Cell["\<\
One of the solutions here is not a Puiseux series but a Hahn series:\
\>", "Text",ExpressionUUID->"bb144686-432b-4ecb-abdb-bf03d1ce7b3f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SeriesSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["x", "6"], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "+", 
        SuperscriptBox["x", "6"]}], ")"}], " ", 
      SuperscriptBox[
       RowBox[{"f", "[", "x", "]"}], "2"]}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "+", 
        SuperscriptBox["x", "4"], "+", 
        SuperscriptBox["x", "8"], "+", 
        SuperscriptBox["x", "12"]}], ")"}], " ", 
      SuperscriptBox[
       RowBox[{"f", "[", "x", "]"}], "7"]}]}], "\[Equal]", "0"}], ",", 
   RowBox[{"f", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "17"}], "}"}], ",", 
   RowBox[{"Modulus", "\[Rule]", "2"}]}], "]"}]], "Input",ExpressionUUID->\
"6b67fd1e-b460-4db7-8c91-bc4c36330201"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
     InterpretationBox[
      RowBox[{
       SuperscriptBox["x", "3"], "+", 
       SuperscriptBox["x", "6"], "+", 
       SuperscriptBox["x", "9"], "+", 
       SuperscriptBox["x", 
        RowBox[{"21", "/", "2"}]], "+", 
       SuperscriptBox["x", 
        RowBox[{"25", "/", "2"}]], "+", 
       SuperscriptBox["x", 
        RowBox[{"27", "/", "2"}]], "+", 
       SuperscriptBox["x", "14"], "+", 
       SuperscriptBox["x", 
        RowBox[{"57", "/", "4"}]], "+", 
       SuperscriptBox["x", 
        RowBox[{"29", "/", "2"}]], "+", 
       SuperscriptBox["x", "15"], "+", 
       SuperscriptBox["x", 
        RowBox[{"61", "/", "4"}]], "+", 
       SuperscriptBox["x", 
        RowBox[{"31", "/", "2"}]], "+", 
       SuperscriptBox["x", 
        RowBox[{"63", "/", "4"}]], "+", 
       SuperscriptBox["x", 
        RowBox[{"129", "/", "8"}]], "+", 
       SuperscriptBox["x", 
        RowBox[{"133", "/", "8"}]], "+", 
       SuperscriptBox["x", 
        RowBox[{"67", "/", "4"}]], "+", 
       SuperscriptBox["x", 
        RowBox[{"135", "/", "8"}]], "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", "x", "]"}], 
         RowBox[{"273", "/", "16"}]],
        SeriesData[$CellContext`x, 0, {}, 48, 273, 16],
        Editable->False]}],
      SeriesData[$CellContext`x, 0, {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 
       0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0,
        0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1}, 48, 
       273, 16],
      Editable->False]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
     InterpretationBox[
      RowBox[{"1", "+", 
       SuperscriptBox["x", "4"], "+", 
       SuperscriptBox["x", "14"], "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", "x", "]"}], "18"],
        SeriesData[$CellContext`x, 0, {}, 0, 18, 1],
        Editable->False]}],
      SeriesData[$CellContext`x, 0, {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        1}, 0, 18, 1],
      Editable->False]}], "}"}]}], "}"}]], "Output",ExpressionUUID->"52ecbb1e-\
29c7-435d-92c1-e05d392a2aa8"]
}, Open  ]],

Cell[TextData[{
 "Requesting more terms causes ",
 StyleBox["SeriesSolve", "Input"],
 " to enter an infinite loop, since there are infinitely many terms with \
exponent less than ",
 Cell[BoxData[
  FormBox["18", TraditionalForm]],ExpressionUUID->
  "33e64306-1771-4327-9d24-2c28374393f1"],
 ":"
}], "Text",ExpressionUUID->"5012c60e-1482-4563-b718-972189b3308b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TimeConstrained", "[", 
  RowBox[{
   RowBox[{"SeriesSolve", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       SuperscriptBox["x", "6"], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "+", 
          SuperscriptBox["x", "6"]}], ")"}], " ", 
        SuperscriptBox[
         RowBox[{"f", "[", "x", "]"}], "2"]}], "+", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{"1", "+", 
          SuperscriptBox["x", "4"], "+", 
          SuperscriptBox["x", "8"], "+", 
          SuperscriptBox["x", "12"]}], ")"}], " ", 
        SuperscriptBox[
         RowBox[{"f", "[", "x", "]"}], "7"]}]}], "\[Equal]", "0"}], ",", 
     RowBox[{"f", "[", "x", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", "0", ",", "18"}], "}"}], ",", 
     RowBox[{"Modulus", "\[Rule]", "2"}]}], "]"}], ",", "5"}], "]"}]], "Input",\
ExpressionUUID->"79045e21-a191-4846-9a83-2db7e0d8aa1d"],

Cell[BoxData["$Aborted"], "Output",ExpressionUUID->"89122552-9eb4-48a5-b419-2bb44171f810"]
}, Open  ]],

Cell[TextData[{
 "Specify a ",
 StyleBox["MaxDenominator", "Input"],
 " to restrict the exponents in solutions:"
}], "Text",ExpressionUUID->"0d53bda7-aff9-4e4d-816d-deb47eecc6b0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SeriesSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     SuperscriptBox["x", "6"], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "+", 
        SuperscriptBox["x", "6"]}], ")"}], " ", 
      SuperscriptBox[
       RowBox[{"f", "[", "x", "]"}], "2"]}], "+", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "+", 
        SuperscriptBox["x", "4"], "+", 
        SuperscriptBox["x", "8"], "+", 
        SuperscriptBox["x", "12"]}], ")"}], " ", 
      SuperscriptBox[
       RowBox[{"f", "[", "x", "]"}], "7"]}]}], "\[Equal]", "0"}], ",", 
   RowBox[{"f", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "18"}], "}"}], ",", 
   RowBox[{"MaxDenominator", "\[Rule]", "1"}], ",", 
   RowBox[{"Modulus", "\[Rule]", "2"}]}], "]"}]], "Input",ExpressionUUID->\
"90a59159-4d7c-4995-b047-8c2dee73917f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
    InterpretationBox[
     RowBox[{"1", "+", 
      SuperscriptBox["x", "4"], "+", 
      SuperscriptBox["x", "14"], "+", 
      SuperscriptBox["x", "18"], "+", 
      InterpretationBox[
       SuperscriptBox[
        RowBox[{"O", "[", "x", "]"}], "19"],
       SeriesData[$CellContext`x, 0, {}, 0, 19, 1],
       Editable->False]}],
     SeriesData[$CellContext`x, 0, {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
      1, 0, 0, 0, 1}, 0, 19, 1],
     Editable->False]}], "}"}], "}"}]], "Output",ExpressionUUID->"2abad8c9-\
45f5-4c3a-bebb-562450802842"]
}, Open  ]],

Cell[TextData[{
 StyleBox["SeriesSolve", "Input"],
 " does not repeat solutions according to their multiplicity:"
}], "Text",ExpressionUUID->"f59373f6-a7ed-4bf3-8e6f-397edef006aa"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SeriesSolve", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox[
     RowBox[{"f", "[", "x", "]"}], "3"], "\[Equal]", "0"}], ",", 
   RowBox[{"f", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "10"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"f6abacc7-a5d5-439b-ac2e-460d64bb2203"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
    InterpretationBox[
     SuperscriptBox[
      RowBox[{"O", "[", "x", "]"}], "11"],
     SeriesData[$CellContext`x, 0, {}, 11, 11, 1],
     Editable->False]}], "}"}], "}"}]], "Output",ExpressionUUID->"324594bc-\
b3d7-4b84-8090-aa369b33cc8e"]
}, Open  ]],

Cell[TextData[{
 StyleBox["SeriesSolve", "Input"],
 " issues messages when ",
 StyleBox["PossibleZeroQ", "Input"],
 " cannot determine whether numeric quantities are equal to zero:"
}], "Text",ExpressionUUID->"e0fa60cb-8170-460d-8002-08d9fe72a7b3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SeriesSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"f", "[", "x", "]"}], "\[Equal]", 
    RowBox[{"1", "+", 
     RowBox[{"x", " ", 
      RowBox[{"f", "[", "x", "]"}]}], "+", 
     RowBox[{
      SuperscriptBox["x", "2"], " ", 
      SuperscriptBox[
       RowBox[{"f", "[", "x", "]"}], "2"]}], "+", 
     RowBox[{
      SuperscriptBox["x", "3"], " ", 
      SuperscriptBox[
       RowBox[{"f", "[", "x", "]"}], "3"]}]}]}], ",", 
   RowBox[{"f", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "2", ",", "3"}], "}"}]}], "]"}]], "Input",ExpressionUUID\
->"e0cb42cd-dd13-4a3f-a93d-c2aee4d60ec9"],

Cell[BoxData[
 TemplateBox[{
  "SeriesSolve","ztest1",
   "\"Unable to decide whether numeric quantity \
\\!\\(\\*RowBox[{RowBox[{\\\"-\\\", RowBox[{\\\"Root\\\", \\\"[\\\", \
RowBox[{RowBox[{RowBox[{\\\"1\\\", \\\"+\\\", \\\"#1\\\", \\\"+\\\", RowBox[{\
\\\"4\\\", \\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"2\\\"]}], \\\"+\\\", \
RowBox[{\\\"8\\\", \\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"3\\\"]}]}], \
\\\"&\\\"}], \\\",\\\", \\\"1\\\", \\\",\\\", \\\"0\\\"}], \\\"]\\\"}]}], \
\\\"-\\\", RowBox[{\\\"4\\\", \\\" \\\", SuperscriptBox[RowBox[{\\\"Root\\\", \
\\\"[\\\", RowBox[{RowBox[{RowBox[{\\\"1\\\", \\\"+\\\", \\\"#1\\\", \
\\\"+\\\", RowBox[{\\\"4\\\", \\\" \\\", SuperscriptBox[RowBox[{\\\"Slot\\\", \
\\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\
\"}], \\\"]\\\"}], \\\"2\\\"]}], \\\"+\\\", RowBox[{\\\"8\\\", \\\" \\\", \
SuperscriptBox[RowBox[{\\\"Slot\\\", \\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\
\", \\\"1\\\", \\\"\[RightSkeleton]\\\"}], \\\"]\\\"}], \\\"3\\\"]}]}], \\\"&\
\\\"}], \\\",\\\", \\\"1\\\", \\\",\\\", \\\"0\\\"}], \\\"]\\\"}], \
\\\"2\\\"]}], \\\"-\\\", RowBox[{\\\"12\\\", \\\" \\\", \
SuperscriptBox[RowBox[{\\\"Root\\\", \\\"[\\\", RowBox[{RowBox[{RowBox[{\\\"1\
\\\", \\\"+\\\", \\\"#1\\\", \\\"+\\\", RowBox[{\\\"4\\\", \\\" \\\", \
SuperscriptBox[RowBox[{\\\"Slot\\\", \\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\
\", \\\"1\\\", \\\"\[RightSkeleton]\\\"}], \\\"]\\\"}], \\\"2\\\"]}], \\\"+\\\
\", RowBox[{\\\"8\\\", \\\" \\\", SuperscriptBox[RowBox[{\\\"Slot\\\", \
\\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\
\"}], \\\"]\\\"}], \\\"3\\\"]}]}], \\\"&\\\"}], \\\",\\\", \\\"1\\\", \\\",\\\
\", \\\"0\\\"}], \\\"]\\\"}], \\\"3\\\"]}], \\\"-\\\", RowBox[{\\\"Root\\\", \
\\\"[\\\", RowBox[{RowBox[{RowBox[{RowBox[{\\\"-\\\", \\\"89\\\"}], \
\\\"-\\\", RowBox[{\\\"11\\\", \\\" \\\", \\\"#1\\\"}], \\\"-\\\", RowBox[{\\\
\"1424\\\", \\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"2\\\"]}], \\\"+\\\", \
RowBox[{\\\"5696\\\", \\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"3\\\"]}]}], \
\\\"&\\\"}], \\\",\\\", \\\"1\\\", \\\",\\\", \\\"0\\\"}], \\\"]\\\"}], \\\"-\
\\\", RowBox[{\\\"8\\\", \\\" \\\", RowBox[{\\\"Root\\\", \\\"[\\\", \
RowBox[{RowBox[{RowBox[{\\\"1\\\", \\\"+\\\", \\\"#1\\\", \\\"+\\\", RowBox[{\
\\\"4\\\", \\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"2\\\"]}], \\\"+\\\", \
RowBox[{\\\"8\\\", \\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"3\\\"]}]}], \
\\\"&\\\"}], \\\",\\\", \\\"1\\\", \\\",\\\", \\\"0\\\"}], \\\"]\\\"}], \\\" \
\\\", RowBox[{\\\"Root\\\", \\\"[\\\", \
RowBox[{RowBox[{RowBox[{RowBox[{\\\"-\\\", \\\"89\\\"}], \\\"-\\\", \
RowBox[{\\\"11\\\", \\\" \\\", \\\"#1\\\"}], \\\"-\\\", RowBox[{\\\"1424\\\", \
\\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"2\\\"]}], \\\"+\\\", \
RowBox[{\\\"5696\\\", \\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"3\\\"]}]}], \
\\\"&\\\"}], \\\",\\\", \\\"1\\\", \\\",\\\", \\\"0\\\"}], \\\"]\\\"}]}], \
\\\"-\\\", RowBox[{\\\"24\\\", \\\" \\\", \
SuperscriptBox[RowBox[{\\\"Root\\\", \\\"[\\\", RowBox[{RowBox[{RowBox[{\\\"1\
\\\", \\\"+\\\", \\\"#1\\\", \\\"+\\\", RowBox[{\\\"4\\\", \\\" \\\", \
SuperscriptBox[RowBox[{\\\"Slot\\\", \\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\
\", \\\"1\\\", \\\"\[RightSkeleton]\\\"}], \\\"]\\\"}], \\\"2\\\"]}], \\\"+\\\
\", RowBox[{\\\"8\\\", \\\" \\\", SuperscriptBox[RowBox[{\\\"Slot\\\", \
\\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\
\"}], \\\"]\\\"}], \\\"3\\\"]}]}], \\\"&\\\"}], \\\",\\\", \\\"1\\\", \\\",\\\
\", \\\"0\\\"}], \\\"]\\\"}], \\\"2\\\"], \\\" \\\", RowBox[{\\\"Root\\\", \\\
\"[\\\", RowBox[{RowBox[{RowBox[{RowBox[{\\\"-\\\", \\\"89\\\"}], \\\"-\\\", \
RowBox[{\\\"11\\\", \\\" \\\", \\\"#1\\\"}], \\\"-\\\", RowBox[{\\\"1424\\\", \
\\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"2\\\"]}], \\\"+\\\", \
RowBox[{\\\"5696\\\", \\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"3\\\"]}]}], \
\\\"&\\\"}], \\\",\\\", \\\"1\\\", \\\",\\\", \\\"0\\\"}], \\\"]\\\"}]}]}]\\) \
is equal to zero. Assuming it is.\"",2,449,13,18387630869787481076,"Local",
   "IntegerSequences`SeriesSolve"},
  "MessageTemplate2"]], "Message", \
"MSG",ExpressionUUID->"b563e7d6-e237-49fb-9c32-39abd7341a80"],

Cell[BoxData[
 TemplateBox[{
  "SeriesSolve","ztest1",
   "\"Unable to decide whether numeric quantity \
\\!\\(\\*RowBox[{RowBox[{\\\"-\\\", RowBox[{\\\"Root\\\", \\\"[\\\", \
RowBox[{RowBox[{RowBox[{\\\"1\\\", \\\"+\\\", \\\"#1\\\", \\\"+\\\", RowBox[{\
\\\"4\\\", \\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"2\\\"]}], \\\"+\\\", \
RowBox[{\\\"8\\\", \\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"3\\\"]}]}], \
\\\"&\\\"}], \\\",\\\", \\\"2\\\", \\\",\\\", \\\"0\\\"}], \\\"]\\\"}]}], \
\\\"-\\\", RowBox[{\\\"4\\\", \\\" \\\", SuperscriptBox[RowBox[{\\\"Root\\\", \
\\\"[\\\", RowBox[{RowBox[{RowBox[{\\\"1\\\", \\\"+\\\", \\\"#1\\\", \
\\\"+\\\", RowBox[{\\\"4\\\", \\\" \\\", SuperscriptBox[RowBox[{\\\"Slot\\\", \
\\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\
\"}], \\\"]\\\"}], \\\"2\\\"]}], \\\"+\\\", RowBox[{\\\"8\\\", \\\" \\\", \
SuperscriptBox[RowBox[{\\\"Slot\\\", \\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\
\", \\\"1\\\", \\\"\[RightSkeleton]\\\"}], \\\"]\\\"}], \\\"3\\\"]}]}], \\\"&\
\\\"}], \\\",\\\", \\\"2\\\", \\\",\\\", \\\"0\\\"}], \\\"]\\\"}], \
\\\"2\\\"]}], \\\"-\\\", RowBox[{\\\"12\\\", \\\" \\\", \
SuperscriptBox[RowBox[{\\\"Root\\\", \\\"[\\\", RowBox[{RowBox[{RowBox[{\\\"1\
\\\", \\\"+\\\", \\\"#1\\\", \\\"+\\\", RowBox[{\\\"4\\\", \\\" \\\", \
SuperscriptBox[RowBox[{\\\"Slot\\\", \\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\
\", \\\"1\\\", \\\"\[RightSkeleton]\\\"}], \\\"]\\\"}], \\\"2\\\"]}], \\\"+\\\
\", RowBox[{\\\"8\\\", \\\" \\\", SuperscriptBox[RowBox[{\\\"Slot\\\", \
\\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\
\"}], \\\"]\\\"}], \\\"3\\\"]}]}], \\\"&\\\"}], \\\",\\\", \\\"2\\\", \\\",\\\
\", \\\"0\\\"}], \\\"]\\\"}], \\\"3\\\"]}], \\\"-\\\", RowBox[{\\\"Root\\\", \
\\\"[\\\", RowBox[{RowBox[{RowBox[{RowBox[{\\\"-\\\", \\\"89\\\"}], \
\\\"-\\\", RowBox[{\\\"11\\\", \\\" \\\", \\\"#1\\\"}], \\\"-\\\", RowBox[{\\\
\"1424\\\", \\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"2\\\"]}], \\\"+\\\", \
RowBox[{\\\"5696\\\", \\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"3\\\"]}]}], \
\\\"&\\\"}], \\\",\\\", \\\"3\\\", \\\",\\\", \\\"0\\\"}], \\\"]\\\"}], \\\"-\
\\\", RowBox[{\\\"8\\\", \\\" \\\", RowBox[{\\\"Root\\\", \\\"[\\\", \
RowBox[{RowBox[{RowBox[{\\\"1\\\", \\\"+\\\", \\\"#1\\\", \\\"+\\\", RowBox[{\
\\\"4\\\", \\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"2\\\"]}], \\\"+\\\", \
RowBox[{\\\"8\\\", \\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"3\\\"]}]}], \
\\\"&\\\"}], \\\",\\\", \\\"2\\\", \\\",\\\", \\\"0\\\"}], \\\"]\\\"}], \\\" \
\\\", RowBox[{\\\"Root\\\", \\\"[\\\", \
RowBox[{RowBox[{RowBox[{RowBox[{\\\"-\\\", \\\"89\\\"}], \\\"-\\\", \
RowBox[{\\\"11\\\", \\\" \\\", \\\"#1\\\"}], \\\"-\\\", RowBox[{\\\"1424\\\", \
\\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"2\\\"]}], \\\"+\\\", \
RowBox[{\\\"5696\\\", \\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"3\\\"]}]}], \
\\\"&\\\"}], \\\",\\\", \\\"3\\\", \\\",\\\", \\\"0\\\"}], \\\"]\\\"}]}], \
\\\"-\\\", RowBox[{\\\"24\\\", \\\" \\\", \
SuperscriptBox[RowBox[{\\\"Root\\\", \\\"[\\\", RowBox[{RowBox[{RowBox[{\\\"1\
\\\", \\\"+\\\", \\\"#1\\\", \\\"+\\\", RowBox[{\\\"4\\\", \\\" \\\", \
SuperscriptBox[RowBox[{\\\"Slot\\\", \\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\
\", \\\"1\\\", \\\"\[RightSkeleton]\\\"}], \\\"]\\\"}], \\\"2\\\"]}], \\\"+\\\
\", RowBox[{\\\"8\\\", \\\" \\\", SuperscriptBox[RowBox[{\\\"Slot\\\", \
\\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\
\"}], \\\"]\\\"}], \\\"3\\\"]}]}], \\\"&\\\"}], \\\",\\\", \\\"2\\\", \\\",\\\
\", \\\"0\\\"}], \\\"]\\\"}], \\\"2\\\"], \\\" \\\", RowBox[{\\\"Root\\\", \\\
\"[\\\", RowBox[{RowBox[{RowBox[{RowBox[{\\\"-\\\", \\\"89\\\"}], \\\"-\\\", \
RowBox[{\\\"11\\\", \\\" \\\", \\\"#1\\\"}], \\\"-\\\", RowBox[{\\\"1424\\\", \
\\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"2\\\"]}], \\\"+\\\", \
RowBox[{\\\"5696\\\", \\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"3\\\"]}]}], \
\\\"&\\\"}], \\\",\\\", \\\"3\\\", \\\",\\\", \\\"0\\\"}], \\\"]\\\"}]}]}]\\) \
is equal to zero. Assuming it is.\"",2,449,14,18387630869787481076,"Local",
   "IntegerSequences`SeriesSolve"},
  "MessageTemplate2"]], "Message", \
"MSG",ExpressionUUID->"7cb5d2c6-d7b2-4d17-a74b-c4bdf3dccf3e"],

Cell[BoxData[
 TemplateBox[{
  "SeriesSolve","ztest1",
   "\"Unable to decide whether numeric quantity \
\\!\\(\\*RowBox[{RowBox[{\\\"-\\\", RowBox[{\\\"Root\\\", \\\"[\\\", \
RowBox[{RowBox[{RowBox[{\\\"1\\\", \\\"+\\\", \\\"#1\\\", \\\"+\\\", RowBox[{\
\\\"4\\\", \\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"2\\\"]}], \\\"+\\\", \
RowBox[{\\\"8\\\", \\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"3\\\"]}]}], \
\\\"&\\\"}], \\\",\\\", \\\"3\\\", \\\",\\\", \\\"0\\\"}], \\\"]\\\"}]}], \
\\\"-\\\", RowBox[{\\\"4\\\", \\\" \\\", SuperscriptBox[RowBox[{\\\"Root\\\", \
\\\"[\\\", RowBox[{RowBox[{RowBox[{\\\"1\\\", \\\"+\\\", \\\"#1\\\", \
\\\"+\\\", RowBox[{\\\"4\\\", \\\" \\\", SuperscriptBox[RowBox[{\\\"Slot\\\", \
\\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\
\"}], \\\"]\\\"}], \\\"2\\\"]}], \\\"+\\\", RowBox[{\\\"8\\\", \\\" \\\", \
SuperscriptBox[RowBox[{\\\"Slot\\\", \\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\
\", \\\"1\\\", \\\"\[RightSkeleton]\\\"}], \\\"]\\\"}], \\\"3\\\"]}]}], \\\"&\
\\\"}], \\\",\\\", \\\"3\\\", \\\",\\\", \\\"0\\\"}], \\\"]\\\"}], \
\\\"2\\\"]}], \\\"-\\\", RowBox[{\\\"12\\\", \\\" \\\", \
SuperscriptBox[RowBox[{\\\"Root\\\", \\\"[\\\", RowBox[{RowBox[{RowBox[{\\\"1\
\\\", \\\"+\\\", \\\"#1\\\", \\\"+\\\", RowBox[{\\\"4\\\", \\\" \\\", \
SuperscriptBox[RowBox[{\\\"Slot\\\", \\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\
\", \\\"1\\\", \\\"\[RightSkeleton]\\\"}], \\\"]\\\"}], \\\"2\\\"]}], \\\"+\\\
\", RowBox[{\\\"8\\\", \\\" \\\", SuperscriptBox[RowBox[{\\\"Slot\\\", \
\\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\
\"}], \\\"]\\\"}], \\\"3\\\"]}]}], \\\"&\\\"}], \\\",\\\", \\\"3\\\", \\\",\\\
\", \\\"0\\\"}], \\\"]\\\"}], \\\"3\\\"]}], \\\"-\\\", RowBox[{\\\"Root\\\", \
\\\"[\\\", RowBox[{RowBox[{RowBox[{RowBox[{\\\"-\\\", \\\"89\\\"}], \
\\\"-\\\", RowBox[{\\\"11\\\", \\\" \\\", \\\"#1\\\"}], \\\"-\\\", RowBox[{\\\
\"1424\\\", \\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"2\\\"]}], \\\"+\\\", \
RowBox[{\\\"5696\\\", \\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"3\\\"]}]}], \
\\\"&\\\"}], \\\",\\\", \\\"2\\\", \\\",\\\", \\\"0\\\"}], \\\"]\\\"}], \\\"-\
\\\", RowBox[{\\\"8\\\", \\\" \\\", RowBox[{\\\"Root\\\", \\\"[\\\", \
RowBox[{RowBox[{RowBox[{\\\"1\\\", \\\"+\\\", \\\"#1\\\", \\\"+\\\", RowBox[{\
\\\"4\\\", \\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"2\\\"]}], \\\"+\\\", \
RowBox[{\\\"8\\\", \\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"3\\\"]}]}], \
\\\"&\\\"}], \\\",\\\", \\\"3\\\", \\\",\\\", \\\"0\\\"}], \\\"]\\\"}], \\\" \
\\\", RowBox[{\\\"Root\\\", \\\"[\\\", \
RowBox[{RowBox[{RowBox[{RowBox[{\\\"-\\\", \\\"89\\\"}], \\\"-\\\", \
RowBox[{\\\"11\\\", \\\" \\\", \\\"#1\\\"}], \\\"-\\\", RowBox[{\\\"1424\\\", \
\\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"2\\\"]}], \\\"+\\\", \
RowBox[{\\\"5696\\\", \\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"3\\\"]}]}], \
\\\"&\\\"}], \\\",\\\", \\\"2\\\", \\\",\\\", \\\"0\\\"}], \\\"]\\\"}]}], \
\\\"-\\\", RowBox[{\\\"24\\\", \\\" \\\", \
SuperscriptBox[RowBox[{\\\"Root\\\", \\\"[\\\", RowBox[{RowBox[{RowBox[{\\\"1\
\\\", \\\"+\\\", \\\"#1\\\", \\\"+\\\", RowBox[{\\\"4\\\", \\\" \\\", \
SuperscriptBox[RowBox[{\\\"Slot\\\", \\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\
\", \\\"1\\\", \\\"\[RightSkeleton]\\\"}], \\\"]\\\"}], \\\"2\\\"]}], \\\"+\\\
\", RowBox[{\\\"8\\\", \\\" \\\", SuperscriptBox[RowBox[{\\\"Slot\\\", \
\\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \\\"1\\\", \\\"\[RightSkeleton]\\\
\"}], \\\"]\\\"}], \\\"3\\\"]}]}], \\\"&\\\"}], \\\",\\\", \\\"3\\\", \\\",\\\
\", \\\"0\\\"}], \\\"]\\\"}], \\\"2\\\"], \\\" \\\", RowBox[{\\\"Root\\\", \\\
\"[\\\", RowBox[{RowBox[{RowBox[{RowBox[{\\\"-\\\", \\\"89\\\"}], \\\"-\\\", \
RowBox[{\\\"11\\\", \\\" \\\", \\\"#1\\\"}], \\\"-\\\", RowBox[{\\\"1424\\\", \
\\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"2\\\"]}], \\\"+\\\", \
RowBox[{\\\"5696\\\", \\\" \\\", SuperscriptBox[\\\"#1\\\", \\\"3\\\"]}]}], \
\\\"&\\\"}], \\\",\\\", \\\"2\\\", \\\",\\\", \\\"0\\\"}], \\\"]\\\"}]}]}]\\) \
is equal to zero. Assuming it is.\"",2,449,15,18387630869787481076,"Local",
   "IntegerSequences`SeriesSolve"},
  "MessageTemplate2"]], "Message", \
"MSG",ExpressionUUID->"eb82f956-dff5-481a-ba11-56abba53b8e5"],

Cell[BoxData[
 TemplateBox[{
  "General","stop",
   "\"Further output of \\!\\(\\*StyleBox[RowBox[{\\\"SeriesSolve\\\", \\\"::\
\\\", \\\"ztest1\\\"}], \\\"MessageName\\\"]\\) will be suppressed during \
this calculation.\"",2,449,16,18387630869787481076,"Local"},
  "MessageTemplate"]], "Message", \
"MSG",ExpressionUUID->"f3564bb1-2d38-4362-bc3c-85f0b24ea519"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
     InterpretationBox[
      RowBox[{
       InterpretationBox[
        TemplateBox[{"Root",TemplateBox[{"\"-0.622\"", 
            DynamicBox[
             FEPrivate`FrontEndResource[
             "FEExpressions", "NumericalApproximationElider"]]}, 
           "RowDefault"],TagBox[
           RowBox[{"Root", "[", 
             RowBox[{
               RowBox[{
                 RowBox[{"1", "+", "#1", "+", 
                   RowBox[{"4", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                   RowBox[{"8", " ", 
                    SuperscriptBox["#1", "3"]}]}], "&"}], ",", "1"}], "]"}], 
           Short[#, 7]& ],-0.6220755579747583},
         "NumericalApproximation"],
        Root[1 + # + 4 #^2 + 8 #^3& , 1, 0]], "+", 
       RowBox[{
        InterpretationBox[
         TemplateBox[{"Root",TemplateBox[{"\"0.370\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"],TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{
                    RowBox[{"-", "89"}], "-", 
                    RowBox[{"11", " ", "#1"}], "-", 
                    RowBox[{"1424", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    RowBox[{"5696", " ", 
                    SuperscriptBox["#1", "3"]}]}], "&"}], ",", "1"}], "]"}], 
            Short[#, 7]& ],0.36960406351748076`},
          "NumericalApproximation"],
         Root[-89 - 11 # - 1424 #^2 + 5696 #^3& , 1, 0]], " ", 
        RowBox[{"(", 
         RowBox[{"x", "-", "2"}], ")"}]}], "+", 
       RowBox[{
        InterpretationBox[
         TemplateBox[{"Root",TemplateBox[{"\"-0.213\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"],TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{"1446824", "-", 
                    RowBox[{"6623971", " ", "#1"}], "+", 
                    RowBox[{"90236032", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    RowBox[{"721888256", " ", 
                    SuperscriptBox["#1", "3"]}]}], "&"}], ",", "1"}], "]"}], 
            Short[#, 7]& ],-0.2125399983140945},
          "NumericalApproximation"],
         Root[1446824 - 6623971 # + 90236032 #^2 + 721888256 #^3& , 1, 0]], 
        " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"x", "-", "2"}], ")"}], "2"]}], "+", 
       RowBox[{
        InterpretationBox[
         TemplateBox[{"Root",TemplateBox[{"\"0.119\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"],TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{
                    RowBox[{"-", "763388677"}], "-", 
                    RowBox[{"12969507511", " ", "#1"}], "-", 
                    RowBox[{"178689902368", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    RowBox[{"2859038437888", " ", 
                    SuperscriptBox["#1", "3"]}]}], "&"}], ",", "1"}], "]"}], 
            Short[#, 7]& ],0.11929080242216725`},
          "NumericalApproximation"],
         Root[-763388677 - 12969507511 # - 178689902368 #^2 + 
          2859038437888 #^3& , 1, 0]], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"x", "-", "2"}], ")"}], "3"]}], "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", 
          RowBox[{"x", "-", "2"}], "]"}], "4"],
        SeriesData[$CellContext`x, 2, {}, 0, 4, 1],
        Editable->False]}],
      SeriesData[$CellContext`x, 2, {
        Root[1 + # + 4 #^2 + 8 #^3& , 1, 0], 
        Root[-89 - 11 # - 1424 #^2 + 5696 #^3& , 1, 0], 
        Root[1446824 - 6623971 # + 90236032 #^2 + 721888256 #^3& , 1, 0], 
        Root[-763388677 - 12969507511 # - 178689902368 #^2 + 
         2859038437888 #^3& , 1, 0]}, 0, 4, 1],
      Editable->False]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
     InterpretationBox[
      RowBox[{
       InterpretationBox[
        TemplateBox[{"Root",RowBox[{
            TemplateBox[{"\"0.0610\"", 
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEExpressions", "NumericalApproximationElider"]]}, 
             "RowDefault"], "-", 
            RowBox[{
              TemplateBox[{"\"0.444\"", 
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "NumericalApproximationElider"]]}, 
               "RowDefault"], " ", "\[ImaginaryI]"}]}],TagBox[
           RowBox[{"Root", "[", 
             RowBox[{
               RowBox[{
                 RowBox[{"1", "+", "#1", "+", 
                   RowBox[{"4", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                   RowBox[{"8", " ", 
                    SuperscriptBox["#1", "3"]}]}], "&"}], ",", "2"}], "]"}], 
           Short[#, 7]& ],Complex[0.06103777898737917, -0.444088516377665]},
         "NumericalApproximation"],
        Root[1 + # + 4 #^2 + 8 #^3& , 2, 0]], "+", 
       RowBox[{
        InterpretationBox[
         TemplateBox[{"Root",RowBox[{
             TemplateBox[{"\"-0.0598\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], "+", 
             RowBox[{
               TemplateBox[{"\"0.197\"", 
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEExpressions", "NumericalApproximationElider"]]}, 
                "RowDefault"], " ", "\[ImaginaryI]"}]}],TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{
                    RowBox[{"-", "89"}], "-", 
                    RowBox[{"11", " ", "#1"}], "-", 
                    RowBox[{"1424", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    RowBox[{"5696", " ", 
                    SuperscriptBox["#1", "3"]}]}], "&"}], ",", "3"}], "]"}], 
            Short[#, 7]& ],
           Complex[-0.05980203175874039, 0.19671981372375655`]},
          "NumericalApproximation"],
         Root[-89 - 11 # - 1424 #^2 + 5696 #^3& , 3, 0]], " ", 
        RowBox[{"(", 
         RowBox[{"x", "-", "2"}], ")"}]}], "+", 
       RowBox[{
        InterpretationBox[
         TemplateBox[{"Root",RowBox[{
             TemplateBox[{"\"0.0438\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], "-", 
             RowBox[{
               TemplateBox[{"\"0.0867\"", 
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEExpressions", "NumericalApproximationElider"]]}, 
                "RowDefault"], " ", "\[ImaginaryI]"}]}],TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{"1446824", "-", 
                    RowBox[{"6623971", " ", "#1"}], "+", 
                    RowBox[{"90236032", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    RowBox[{"721888256", " ", 
                    SuperscriptBox["#1", "3"]}]}], "&"}], ",", "2"}], "]"}], 
            Short[#, 7]& ],Complex[
           0.043769999157047254`, -0.08668358001702073]},
          "NumericalApproximation"],
         Root[1446824 - 6623971 # + 90236032 #^2 + 721888256 #^3& , 2, 0]], 
        " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"x", "-", "2"}], ")"}], "2"]}], "+", 
       RowBox[{
        InterpretationBox[
         TemplateBox[{"Root",RowBox[{
             TemplateBox[{"\"-0.0284\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], "+", 
             RowBox[{
               TemplateBox[{"\"0.0378\"", 
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEExpressions", "NumericalApproximationElider"]]}, 
                "RowDefault"], " ", "\[ImaginaryI]"}]}],TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{
                    RowBox[{"-", "763388677"}], "-", 
                    RowBox[{"12969507511", " ", "#1"}], "-", 
                    RowBox[{"178689902368", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    RowBox[{"2859038437888", " ", 
                    SuperscriptBox["#1", "3"]}]}], "&"}], ",", "3"}], "]"}], 
            Short[#, 7]& ],
           Complex[-0.028395401211083623`, 0.037841823255701484`]},
          "NumericalApproximation"],
         Root[-763388677 - 12969507511 # - 178689902368 #^2 + 
          2859038437888 #^3& , 3, 0]], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"x", "-", "2"}], ")"}], "3"]}], "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", 
          RowBox[{"x", "-", "2"}], "]"}], "4"],
        SeriesData[$CellContext`x, 2, {}, 0, 4, 1],
        Editable->False]}],
      SeriesData[$CellContext`x, 2, {
        Root[1 + # + 4 #^2 + 8 #^3& , 2, 0], 
        Root[-89 - 11 # - 1424 #^2 + 5696 #^3& , 3, 0], 
        Root[1446824 - 6623971 # + 90236032 #^2 + 721888256 #^3& , 2, 0], 
        Root[-763388677 - 12969507511 # - 178689902368 #^2 + 
         2859038437888 #^3& , 3, 0]}, 0, 4, 1],
      Editable->False]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
     InterpretationBox[
      RowBox[{
       InterpretationBox[
        TemplateBox[{"Root",RowBox[{
            TemplateBox[{"\"0.0610\"", 
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEExpressions", "NumericalApproximationElider"]]}, 
             "RowDefault"], "+", 
            RowBox[{
              TemplateBox[{"\"0.444\"", 
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "NumericalApproximationElider"]]}, 
               "RowDefault"], " ", "\[ImaginaryI]"}]}],TagBox[
           RowBox[{"Root", "[", 
             RowBox[{
               RowBox[{
                 RowBox[{"1", "+", "#1", "+", 
                   RowBox[{"4", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                   RowBox[{"8", " ", 
                    SuperscriptBox["#1", "3"]}]}], "&"}], ",", "3"}], "]"}], 
           Short[#, 7]& ],Complex[0.06103777898737917, 0.444088516377665]},
         "NumericalApproximation"],
        Root[1 + # + 4 #^2 + 8 #^3& , 3, 0]], "+", 
       RowBox[{
        InterpretationBox[
         TemplateBox[{"Root",RowBox[{
             TemplateBox[{"\"-0.0598\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], "-", 
             RowBox[{
               TemplateBox[{"\"0.197\"", 
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEExpressions", "NumericalApproximationElider"]]}, 
                "RowDefault"], " ", "\[ImaginaryI]"}]}],TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{
                    RowBox[{"-", "89"}], "-", 
                    RowBox[{"11", " ", "#1"}], "-", 
                    RowBox[{"1424", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    RowBox[{"5696", " ", 
                    SuperscriptBox["#1", "3"]}]}], "&"}], ",", "2"}], "]"}], 
            Short[#, 7]& ],
           Complex[-0.05980203175874039, -0.19671981372375655`]},
          "NumericalApproximation"],
         Root[-89 - 11 # - 1424 #^2 + 5696 #^3& , 2, 0]], " ", 
        RowBox[{"(", 
         RowBox[{"x", "-", "2"}], ")"}]}], "+", 
       RowBox[{
        InterpretationBox[
         TemplateBox[{"Root",RowBox[{
             TemplateBox[{"\"0.0438\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], "+", 
             RowBox[{
               TemplateBox[{"\"0.0867\"", 
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEExpressions", "NumericalApproximationElider"]]}, 
                "RowDefault"], " ", "\[ImaginaryI]"}]}],TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{"1446824", "-", 
                    RowBox[{"6623971", " ", "#1"}], "+", 
                    RowBox[{"90236032", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    RowBox[{"721888256", " ", 
                    SuperscriptBox["#1", "3"]}]}], "&"}], ",", "3"}], "]"}], 
            Short[#, 7]& ],Complex[
           0.043769999157047254`, 0.08668358001702073]},
          "NumericalApproximation"],
         Root[1446824 - 6623971 # + 90236032 #^2 + 721888256 #^3& , 3, 0]], 
        " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"x", "-", "2"}], ")"}], "2"]}], "+", 
       RowBox[{
        InterpretationBox[
         TemplateBox[{"Root",RowBox[{
             TemplateBox[{"\"-0.0284\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], "-", 
             RowBox[{
               TemplateBox[{"\"0.0378\"", 
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEExpressions", "NumericalApproximationElider"]]}, 
                "RowDefault"], " ", "\[ImaginaryI]"}]}],TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{
                    RowBox[{"-", "763388677"}], "-", 
                    RowBox[{"12969507511", " ", "#1"}], "-", 
                    RowBox[{"178689902368", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    RowBox[{"2859038437888", " ", 
                    SuperscriptBox["#1", "3"]}]}], "&"}], ",", "2"}], "]"}], 
            Short[#, 7]& ],
           Complex[-0.028395401211083623`, -0.037841823255701484`]},
          "NumericalApproximation"],
         Root[-763388677 - 12969507511 # - 178689902368 #^2 + 
          2859038437888 #^3& , 2, 0]], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"x", "-", "2"}], ")"}], "3"]}], "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", 
          RowBox[{"x", "-", "2"}], "]"}], "4"],
        SeriesData[$CellContext`x, 2, {}, 0, 4, 1],
        Editable->False]}],
      SeriesData[$CellContext`x, 2, {
        Root[1 + # + 4 #^2 + 8 #^3& , 3, 0], 
        Root[-89 - 11 # - 1424 #^2 + 5696 #^3& , 2, 0], 
        Root[1446824 - 6623971 # + 90236032 #^2 + 721888256 #^3& , 3, 0], 
        Root[-763388677 - 12969507511 # - 178689902368 #^2 + 
         2859038437888 #^3& , 2, 0]}, 0, 4, 1],
      Editable->False]}], "}"}]}], "}"}]], "Output",ExpressionUUID->"db548b7b-\
2402-4e81-8b8d-6a29abcce49d"]
}, Open  ]],

Cell[TextData[{
 "Specify ",
 StyleBox["Method->\"ExactAlgebraics\"", "Input"],
 " to use exact methods for explicit algebraic numbers:"
}], "Text",ExpressionUUID->"bab547a6-2636-4ca7-826d-b62c19d02160"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SeriesSolve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"f", "[", "x", "]"}], "\[Equal]", 
    RowBox[{"1", "+", 
     RowBox[{"x", " ", 
      RowBox[{"f", "[", "x", "]"}]}], "+", 
     RowBox[{
      SuperscriptBox["x", "2"], " ", 
      SuperscriptBox[
       RowBox[{"f", "[", "x", "]"}], "2"]}], "+", 
     RowBox[{
      SuperscriptBox["x", "3"], " ", 
      SuperscriptBox[
       RowBox[{"f", "[", "x", "]"}], "3"]}]}]}], ",", 
   RowBox[{"f", "[", "x", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"Method", "\[Rule]", "\"\<ExactAlgebraics\>\""}]}], "]"}]], "Input",\
ExpressionUUID->"1eff6307-a1d5-46a1-b57d-49918be81cba"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
     InterpretationBox[
      RowBox[{
       InterpretationBox[
        TemplateBox[{"Root",TemplateBox[{"\"-0.622\"", 
            DynamicBox[
             FEPrivate`FrontEndResource[
             "FEExpressions", "NumericalApproximationElider"]]}, 
           "RowDefault"],TagBox[
           RowBox[{"Root", "[", 
             RowBox[{
               RowBox[{
                 RowBox[{"1", "+", "#1", "+", 
                   RowBox[{"4", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                   RowBox[{"8", " ", 
                    SuperscriptBox["#1", "3"]}]}], "&"}], ",", "1"}], "]"}], 
           Short[#, 7]& ],-0.6220755579747583},
         "NumericalApproximation"],
        Root[1 + # + 4 #^2 + 8 #^3& , 1, 0]], "+", 
       RowBox[{
        InterpretationBox[
         TemplateBox[{"Root",TemplateBox[{"\"0.370\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"],TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{
                    RowBox[{"-", "89"}], "-", 
                    RowBox[{"11", " ", "#1"}], "-", 
                    RowBox[{"1424", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    RowBox[{"5696", " ", 
                    SuperscriptBox["#1", "3"]}]}], "&"}], ",", "1"}], "]"}], 
            Short[#, 7]& ],0.36960406351748076`},
          "NumericalApproximation"],
         Root[-89 - 11 # - 1424 #^2 + 5696 #^3& , 1, 0]], " ", 
        RowBox[{"(", 
         RowBox[{"x", "-", "2"}], ")"}]}], "+", 
       RowBox[{
        InterpretationBox[
         TemplateBox[{"Root",TemplateBox[{"\"-0.213\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"],TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{"1446824", "-", 
                    RowBox[{"6623971", " ", "#1"}], "+", 
                    RowBox[{"90236032", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    RowBox[{"721888256", " ", 
                    SuperscriptBox["#1", "3"]}]}], "&"}], ",", "1"}], "]"}], 
            Short[#, 7]& ],-0.2125399983140945},
          "NumericalApproximation"],
         Root[1446824 - 6623971 # + 90236032 #^2 + 721888256 #^3& , 1, 0]], 
        " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"x", "-", "2"}], ")"}], "2"]}], "+", 
       RowBox[{
        InterpretationBox[
         TemplateBox[{"Root",TemplateBox[{"\"0.119\"", 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FEExpressions", "NumericalApproximationElider"]]}, 
            "RowDefault"],TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{
                    RowBox[{"-", "763388677"}], "-", 
                    RowBox[{"12969507511", " ", "#1"}], "-", 
                    RowBox[{"178689902368", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    RowBox[{"2859038437888", " ", 
                    SuperscriptBox["#1", "3"]}]}], "&"}], ",", "1"}], "]"}], 
            Short[#, 7]& ],0.11929080242216725`},
          "NumericalApproximation"],
         Root[-763388677 - 12969507511 # - 178689902368 #^2 + 
          2859038437888 #^3& , 1, 0]], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"x", "-", "2"}], ")"}], "3"]}], "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", 
          RowBox[{"x", "-", "2"}], "]"}], "4"],
        SeriesData[$CellContext`x, 2, {}, 0, 4, 1],
        Editable->False]}],
      SeriesData[$CellContext`x, 2, {
        Root[1 + # + 4 #^2 + 8 #^3& , 1, 0], 
        Root[-89 - 11 # - 1424 #^2 + 5696 #^3& , 1, 0], 
        Root[1446824 - 6623971 # + 90236032 #^2 + 721888256 #^3& , 1, 0], 
        Root[-763388677 - 12969507511 # - 178689902368 #^2 + 
         2859038437888 #^3& , 1, 0]}, 0, 4, 1],
      Editable->False]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
     InterpretationBox[
      RowBox[{
       InterpretationBox[
        TemplateBox[{"Root",RowBox[{
            TemplateBox[{"\"0.0610\"", 
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEExpressions", "NumericalApproximationElider"]]}, 
             "RowDefault"], "-", 
            RowBox[{
              TemplateBox[{"\"0.444\"", 
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "NumericalApproximationElider"]]}, 
               "RowDefault"], " ", "\[ImaginaryI]"}]}],TagBox[
           RowBox[{"Root", "[", 
             RowBox[{
               RowBox[{
                 RowBox[{"1", "+", "#1", "+", 
                   RowBox[{"4", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                   RowBox[{"8", " ", 
                    SuperscriptBox["#1", "3"]}]}], "&"}], ",", "2"}], "]"}], 
           Short[#, 7]& ],Complex[0.06103777898737917, -0.444088516377665]},
         "NumericalApproximation"],
        Root[1 + # + 4 #^2 + 8 #^3& , 2, 0]], "+", 
       RowBox[{
        InterpretationBox[
         TemplateBox[{"Root",RowBox[{
             TemplateBox[{"\"-0.0598\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], "+", 
             RowBox[{
               TemplateBox[{"\"0.197\"", 
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEExpressions", "NumericalApproximationElider"]]}, 
                "RowDefault"], " ", "\[ImaginaryI]"}]}],TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{
                    RowBox[{"-", "89"}], "-", 
                    RowBox[{"11", " ", "#1"}], "-", 
                    RowBox[{"1424", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    RowBox[{"5696", " ", 
                    SuperscriptBox["#1", "3"]}]}], "&"}], ",", "3"}], "]"}], 
            Short[#, 7]& ],
           Complex[-0.05980203175874039, 0.19671981372375655`]},
          "NumericalApproximation"],
         Root[-89 - 11 # - 1424 #^2 + 5696 #^3& , 3, 0]], " ", 
        RowBox[{"(", 
         RowBox[{"x", "-", "2"}], ")"}]}], "+", 
       RowBox[{
        InterpretationBox[
         TemplateBox[{"Root",RowBox[{
             TemplateBox[{"\"0.0438\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], "-", 
             RowBox[{
               TemplateBox[{"\"0.0867\"", 
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEExpressions", "NumericalApproximationElider"]]}, 
                "RowDefault"], " ", "\[ImaginaryI]"}]}],TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{"1446824", "-", 
                    RowBox[{"6623971", " ", "#1"}], "+", 
                    RowBox[{"90236032", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    RowBox[{"721888256", " ", 
                    SuperscriptBox["#1", "3"]}]}], "&"}], ",", "2"}], "]"}], 
            Short[#, 7]& ],Complex[
           0.043769999157047254`, -0.08668358001702073]},
          "NumericalApproximation"],
         Root[1446824 - 6623971 # + 90236032 #^2 + 721888256 #^3& , 2, 0]], 
        " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"x", "-", "2"}], ")"}], "2"]}], "+", 
       RowBox[{
        InterpretationBox[
         TemplateBox[{"Root",RowBox[{
             TemplateBox[{"\"-0.0284\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], "+", 
             RowBox[{
               TemplateBox[{"\"0.0378\"", 
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEExpressions", "NumericalApproximationElider"]]}, 
                "RowDefault"], " ", "\[ImaginaryI]"}]}],TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{
                    RowBox[{"-", "763388677"}], "-", 
                    RowBox[{"12969507511", " ", "#1"}], "-", 
                    RowBox[{"178689902368", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    RowBox[{"2859038437888", " ", 
                    SuperscriptBox["#1", "3"]}]}], "&"}], ",", "3"}], "]"}], 
            Short[#, 7]& ],
           Complex[-0.028395401211083623`, 0.037841823255701484`]},
          "NumericalApproximation"],
         Root[-763388677 - 12969507511 # - 178689902368 #^2 + 
          2859038437888 #^3& , 3, 0]], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"x", "-", "2"}], ")"}], "3"]}], "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", 
          RowBox[{"x", "-", "2"}], "]"}], "4"],
        SeriesData[$CellContext`x, 2, {}, 0, 4, 1],
        Editable->False]}],
      SeriesData[$CellContext`x, 2, {
        Root[1 + # + 4 #^2 + 8 #^3& , 2, 0], 
        Root[-89 - 11 # - 1424 #^2 + 5696 #^3& , 3, 0], 
        Root[1446824 - 6623971 # + 90236032 #^2 + 721888256 #^3& , 2, 0], 
        Root[-763388677 - 12969507511 # - 178689902368 #^2 + 
         2859038437888 #^3& , 3, 0]}, 0, 4, 1],
      Editable->False]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "x", "]"}], "\[Rule]", 
     InterpretationBox[
      RowBox[{
       InterpretationBox[
        TemplateBox[{"Root",RowBox[{
            TemplateBox[{"\"0.0610\"", 
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEExpressions", "NumericalApproximationElider"]]}, 
             "RowDefault"], "+", 
            RowBox[{
              TemplateBox[{"\"0.444\"", 
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEExpressions", "NumericalApproximationElider"]]}, 
               "RowDefault"], " ", "\[ImaginaryI]"}]}],TagBox[
           RowBox[{"Root", "[", 
             RowBox[{
               RowBox[{
                 RowBox[{"1", "+", "#1", "+", 
                   RowBox[{"4", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                   RowBox[{"8", " ", 
                    SuperscriptBox["#1", "3"]}]}], "&"}], ",", "3"}], "]"}], 
           Short[#, 7]& ],Complex[0.06103777898737917, 0.444088516377665]},
         "NumericalApproximation"],
        Root[1 + # + 4 #^2 + 8 #^3& , 3, 0]], "+", 
       RowBox[{
        InterpretationBox[
         TemplateBox[{"Root",RowBox[{
             TemplateBox[{"\"-0.0598\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], "-", 
             RowBox[{
               TemplateBox[{"\"0.197\"", 
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEExpressions", "NumericalApproximationElider"]]}, 
                "RowDefault"], " ", "\[ImaginaryI]"}]}],TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{
                    RowBox[{"-", "89"}], "-", 
                    RowBox[{"11", " ", "#1"}], "-", 
                    RowBox[{"1424", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    RowBox[{"5696", " ", 
                    SuperscriptBox["#1", "3"]}]}], "&"}], ",", "2"}], "]"}], 
            Short[#, 7]& ],
           Complex[-0.05980203175874039, -0.19671981372375655`]},
          "NumericalApproximation"],
         Root[-89 - 11 # - 1424 #^2 + 5696 #^3& , 2, 0]], " ", 
        RowBox[{"(", 
         RowBox[{"x", "-", "2"}], ")"}]}], "+", 
       RowBox[{
        InterpretationBox[
         TemplateBox[{"Root",RowBox[{
             TemplateBox[{"\"0.0438\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], "+", 
             RowBox[{
               TemplateBox[{"\"0.0867\"", 
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEExpressions", "NumericalApproximationElider"]]}, 
                "RowDefault"], " ", "\[ImaginaryI]"}]}],TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{"1446824", "-", 
                    RowBox[{"6623971", " ", "#1"}], "+", 
                    RowBox[{"90236032", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    RowBox[{"721888256", " ", 
                    SuperscriptBox["#1", "3"]}]}], "&"}], ",", "3"}], "]"}], 
            Short[#, 7]& ],Complex[
           0.043769999157047254`, 0.08668358001702073]},
          "NumericalApproximation"],
         Root[1446824 - 6623971 # + 90236032 #^2 + 721888256 #^3& , 3, 0]], 
        " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"x", "-", "2"}], ")"}], "2"]}], "+", 
       RowBox[{
        InterpretationBox[
         TemplateBox[{"Root",RowBox[{
             TemplateBox[{"\"-0.0284\"", 
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEExpressions", "NumericalApproximationElider"]]}, 
              "RowDefault"], "-", 
             RowBox[{
               TemplateBox[{"\"0.0378\"", 
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEExpressions", "NumericalApproximationElider"]]}, 
                "RowDefault"], " ", "\[ImaginaryI]"}]}],TagBox[
            RowBox[{"Root", "[", 
              RowBox[{
                RowBox[{
                  RowBox[{
                    RowBox[{"-", "763388677"}], "-", 
                    RowBox[{"12969507511", " ", "#1"}], "-", 
                    RowBox[{"178689902368", " ", 
                    SuperscriptBox["#1", "2"]}], "+", 
                    RowBox[{"2859038437888", " ", 
                    SuperscriptBox["#1", "3"]}]}], "&"}], ",", "2"}], "]"}], 
            Short[#, 7]& ],
           Complex[-0.028395401211083623`, -0.037841823255701484`]},
          "NumericalApproximation"],
         Root[-763388677 - 12969507511 # - 178689902368 #^2 + 
          2859038437888 #^3& , 2, 0]], " ", 
        SuperscriptBox[
         RowBox[{"(", 
          RowBox[{"x", "-", "2"}], ")"}], "3"]}], "+", 
       InterpretationBox[
        SuperscriptBox[
         RowBox[{"O", "[", 
          RowBox[{"x", "-", "2"}], "]"}], "4"],
        SeriesData[$CellContext`x, 2, {}, 0, 4, 1],
        Editable->False]}],
      SeriesData[$CellContext`x, 2, {
        Root[1 + # + 4 #^2 + 8 #^3& , 3, 0], 
        Root[-89 - 11 # - 1424 #^2 + 5696 #^3& , 2, 0], 
        Root[1446824 - 6623971 # + 90236032 #^2 + 721888256 #^3& , 3, 0], 
        Root[-763388677 - 12969507511 # - 178689902368 #^2 + 
         2859038437888 #^3& , 2, 0]}, 0, 4, 1],
      Editable->False]}], "}"}]}], "}"}]], "Output",ExpressionUUID->"5e49ad64-\
1a70-450b-9c8a-f7a97265152a"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["SternBrocot", "Input"]], "Subsubsection",ExpressionUUID->"116ecaa3-4a22-4415-b6d2-4ba08c6ac9fd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "SternBrocot"}]], "Input",ExpressionUUID->"650d6130-0457-4942-b23f-c382c4bd28c5"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"SternBrocot\\\", \
\\\"[\\\", StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the \
\\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\)th term in the Stern\[Dash]Brocot \
sequence.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SternBrocot", "[", 
                    RowBox[{
                    "IntegerSequences`Private`n_Integer", "?", 
                    "NonNegative"}], "]"}], ":=", 
                    RowBox[{
                    RowBox[{"RegularSequence", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "1"}], ",", "2"}], "}"}]}], "}"}]}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}], ",", "2"}], "]"}], "[", 
                    "IntegerSequences`Private`n", "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "SternBrocot", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`SternBrocot] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{"Listable", ",", "Protected"}], "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`SternBrocot\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"SternBrocot\\\", \
\\\"[\\\", StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the \
\\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\)th term in the Stern\[Dash]Brocot \
sequence.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"SternBrocot\", \"[\", StyleBox[\"n\", \"TI\"], \
\"]\"]]\) gives the \!\(\*StyleBox[\"n\", \"TI\"]\)th term in the \
Stern\[Dash]Brocot sequence.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`SternBrocot, {IntegerSequences`SternBrocot[
         PatternTest[
          Pattern[IntegerSequences`Private`n, 
           Blank[Integer]], NonNegative]] :> 
       IntegerSequences`RegularSequence[{1, 0}, {{{1, 0}, {1, 1}}, {{0, 
         1}, {-1, 2}}}, {0, 1}, 2][IntegerSequences`Private`n]}], "SubValues" -> 
    None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`SternBrocot, {
      SyntaxInformation[IntegerSequences`SternBrocot] -> {"ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Listable, Protected}, "FullName" -> 
    "IntegerSequences`SternBrocot"], False]]], "Output",ExpressionUUID->\
"d92ba2b4-127e-4eb4-83ec-563f538e39f3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"SternBrocot", "[", "n", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "31"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"02c4769b-3fdc-4e24-a701-8240cc3887b5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "1", ",", "1", ",", "2", ",", "1", ",", "3", ",", "2", ",", "3", 
   ",", "1", ",", "4", ",", "3", ",", "5", ",", "2", ",", "5", ",", "3", ",", 
   "4", ",", "1", ",", "5", ",", "4", ",", "7", ",", "3", ",", "8", ",", "5", 
   ",", "7", ",", "2", ",", "7", ",", "5", ",", "8", ",", "3", ",", "7", ",", 
   "4", ",", "5"}], "}"}]], "Output",ExpressionUUID->"814c1270-daca-4b9a-917a-\
8ffe806bba21"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListPlot", "[", 
  RowBox[{"SternBrocot", "[", 
   RowBox[{"Range", "[", 
    RowBox[{"0", ",", "127"}], "]"}], "]"}], "]"}]], "Input",ExpressionUUID->\
"31ac014f-a05b-4548-92e8-be61e7d82b8e"],

Cell[BoxData[
 GraphicsBox[{{}, {
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.009166666666666668], 
     AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJxdlMlKRDEQRYMrly5cuHChDxERkXae7ep2nrWdZxFc+wv5tHySn6DiPUJu
g1yOSaVuVeVl9P2z99GXUso/f7/69/tqp/oX9f/7jQei3jdo60NRxw3b/hFb
byx+LOo847Z/wvJO2vlTtj5t8S07f8byz1r8nO2fl1LXgp2/KKXOJTtv2eJX
zP+qra9Z/Lqdv2H5Ny2+bf6jPi/D1N8Ra465U+9PXWmjdZjzt6SaW4bxsy3V
nDOM/x2Lh6l3V6q5Zxh/e1LdkwyTf9/8w/T/wNZh4g/tfJj8R+YPxv+xlPpg
6j+R0h+Y/KcWD9P/M/MP4+9cqvkGrPlnWPmK7U8Xdf6AuU+wvsMCy0/qSdWf
gOU/w/puC8w7cCnVdxqw/GZY33WBeVeuLD+s/mcY/zD5r6V6FwLWfDOsd6HA
vFM35h+mfzD+Yd69W8sPUz+sd67AjfSuridg3f9s6wUm/r4+P2Dyw/JXYPw/
SFVfwNQPqz8Fpn+PUvU3YPoPkx9mfk9SzTdg5g8rX4G5P8/mH6Z+GP8w+V+k
ut8Bc/9h8sON9NX8w/QPZn4w3+/bv99vZwibvA==
      "]]}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.009166666666666668],
       AbsoluteThickness[1.6]}, {}}, {
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.009166666666666668],
       AbsoluteThickness[1.6]}, {}}}, {{}, {}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0., 128.}, {0, 21.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",ExpressionUUID->"55a5776e-f901-\
4a76-b496-b56004439364"]
}, Open  ]],

Cell[TextData[{
 "Write ",
 StyleBox["SternBrocot", "Input"],
 " as a regular sequence:"
}], "Text",ExpressionUUID->"2cfaab34-25e2-4090-83d6-ca25be8eef6f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RegularSequenceReduce", "[", 
  RowBox[{
   RowBox[{"SternBrocot", "[", "n", "]"}], ",", "n"}], "]"}]], "Input",Express\
ionUUID->"5e26ea2d-9e79-4e37-9764-ecfffd4ae5a8"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RegularSequence", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "0"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"1", ",", "0"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{"1", ",", "1"}], "}"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"0", ",", "1"}], "}"}], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"-", "1"}], ",", "2"}], "}"}]}], "}"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], ",", "2"}], "]"}], "[", "n", 
  "]"}]], "Output",ExpressionUUID->"f15cdd46-cf36-44d0-ba05-57cfe1e54f43"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Column", "[", 
  RowBox[{"FindRegularSequenceRecurrence", "[", 
   RowBox[{
    RowBox[{"SternBrocot", "[", 
     RowBox[{"Range", "[", 
      RowBox[{"0", ",", 
       SuperscriptBox["2", "10"]}], "]"}], "]"}], ",", "2", ",", 
    RowBox[{"s", "[", "n", "]"}]}], "]"}], "]"}]], "Input",ExpressionUUID->\
"18e586a8-08a7-41a1-8f49-0275506c9071"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{"2", " ", "n"}], "]"}], "\[Equal]", 
      RowBox[{"s", "[", "n", "]"}]}]},
    {
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{"1", "+", 
        RowBox[{"4", " ", "n"}]}], "]"}], "\[Equal]", 
      RowBox[{
       RowBox[{"s", "[", "n", "]"}], "+", 
       RowBox[{"s", "[", 
        RowBox[{"1", "+", 
         RowBox[{"2", " ", "n"}]}], "]"}]}]}]},
    {
     RowBox[{
      RowBox[{"s", "[", 
       RowBox[{"3", "+", 
        RowBox[{"4", " ", "n"}]}], "]"}], "\[Equal]", 
      RowBox[{
       RowBox[{"-", 
        RowBox[{"s", "[", "n", "]"}]}], "+", 
       RowBox[{"2", " ", 
        RowBox[{"s", "[", 
         RowBox[{"1", "+", 
          RowBox[{"2", " ", "n"}]}], "]"}]}]}]}]},
    {
     RowBox[{
      RowBox[{"s", "[", "0", "]"}], "\[Equal]", "0"}]},
    {
     RowBox[{
      RowBox[{"s", "[", "1", "]"}], "\[Equal]", "1"}]}
   },
   DefaultBaseStyle->"Column",
   GridBoxAlignment->{"Columns" -> {{Left}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Column"]], "Output",ExpressionUUID->"e8b28b77-59ab-4032-b6da-1878da31c190"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Tribonacci", "Input"]], "Subsubsection",ExpressionUUID->"be6c3f44-0ea2-4783-a546-974a2588b37d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "Tribonacci"}]], "Input",ExpressionUUID->"b3c6c3db-8f23-4cb6-b3e3-9d76938d2955"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"Tribonacci\\\", \\\"[\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the \
\\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\)th Tribonacci number.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "Tribonacci", "[", "IntegerSequences`Private`n_Integer", 
                    "]"}], ":=", 
                    RowBox[{
                    "IntegerSequences`Private`TN", "[", 
                    "IntegerSequences`Private`n", "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" Default Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DefaultValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DefaultValues", "Tooltip"]& ], 
                   InterpretationBox[GridBox[{
                    {
                    RowBox[{
                    RowBox[{"SyntaxInformation", "[", "Tribonacci", "]"}], 
                    "=", 
                    RowBox[{"{", 
                    RowBox[{"\<\"ArgumentsPattern\"\>", "\[Rule]", 
                    RowBox[{"{", "_", "}"}]}], "}"}]}]}
                    },
                    BaselinePosition->{Baseline, {1, 1}},
                    
                    GridBoxAlignment->{
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
                    
                    ColumnForm[{
                    SyntaxInformation[IntegerSequences`Tribonacci] = {
                    "ArgumentsPattern" -> {
                    Blank[]}}}],
                    Editable->False]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{"Listable", ",", "Protected"}], "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"IntegerSequences`Tribonacci\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"\\!\\(\\*RowBox[List[\\\"Tribonacci\\\", \\\"[\\\", \
StyleBox[\\\"n\\\", \\\"TI\\\"], \\\"]\\\"]]\\) gives the \
\\!\\(\\*StyleBox[\\\"n\\\", \\\"TI\\\"]\\)th Tribonacci number.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {2., 8.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {2., 8.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "\!\(\*RowBox[List[\"Tribonacci\", \"[\", StyleBox[\"n\", \"TI\"], \
\"]\"]]\) gives the \!\(\*StyleBox[\"n\", \"TI\"]\)th Tribonacci number.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, IntegerSequences`Tribonacci, {IntegerSequences`Tribonacci[
         Pattern[IntegerSequences`Private`n, 
          Blank[Integer]]] :> 
       IntegerSequences`Private`TN[IntegerSequences`Private`n]}], "SubValues" -> 
    None, "DefaultValues" -> 
    Information`InformationValueForm[
     DefaultValues, IntegerSequences`Tribonacci, {
      SyntaxInformation[IntegerSequences`Tribonacci] -> {"ArgumentsPattern" -> {
           Blank[]}}}], "NValues" -> None, "FormatValues" -> None, "Options" -> 
    None, "Attributes" -> {Listable, Protected}, "FullName" -> 
    "IntegerSequences`Tribonacci"], False]]], "Output",ExpressionUUID->\
"10d687b4-fb2e-4347-a048-d598951c592b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Tribonacci", "[", "n", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "10"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"9e5a3fff-c8ad-4287-85de-9e6d6f9d39f6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "1", ",", "1", ",", "2", ",", "4", ",", "7", ",", "13", 
   ",", "24", ",", "44", ",", "81"}], "}"}]], "Output",ExpressionUUID->\
"297e6457-a2ef-4fbe-b309-a8cb74edc574"]
}, Open  ]],

Cell["\<\
The Fibonacci numbers are the lengths of certain words generated by this \
morphism on two letters:\
\>", "Text",ExpressionUUID->"bcf85333-ca8c-45b8-bca2-db8fd96a1ea3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"StringLength", "[", 
    RowBox[{"Nest", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"StringReplace", "[", 
        RowBox[{"#", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<ab\>\""}], ",", 
           RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<a\>\""}]}], "}"}]}], "]"}], 
       "&"}], ",", "\"\<a\>\"", ",", "n"}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "12"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"c3162f3c-d575-4c25-a1e0-97ae01f5d8c8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "5", ",", "8", ",", "13", ",", "21", ",", 
   "34", ",", "55", ",", "89", ",", "144", ",", "233", ",", "377"}], 
  "}"}]], "Output",ExpressionUUID->"413f77d3-6c06-489c-8261-b7d3ba295704"]
}, Open  ]],

Cell["\<\
The Tribonacci numbers are the lengths of the corresponding words for this \
morphism:\
\>", "Text",ExpressionUUID->"b4289a75-fcb7-46e2-978d-05993aa69104"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"StringLength", "[", 
    RowBox[{"Nest", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"StringReplace", "[", 
        RowBox[{"#", ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"\"\<a\>\"", "\[Rule]", "\"\<ab\>\""}], ",", 
           RowBox[{"\"\<b\>\"", "\[Rule]", "\"\<ac\>\""}], ",", 
           RowBox[{"\"\<c\>\"", "\[Rule]", "\"\<a\>\""}]}], "}"}]}], "]"}], 
       "&"}], ",", "\"\<a\>\"", ",", "n"}], "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "0", ",", "12"}], "}"}]}], "]"}]], "Input",ExpressionUUI\
D->"8571ccce-f704-4ae8-a135-fe4bd00d2641"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "4", ",", "7", ",", "13", ",", "24", ",", "44", ",", 
   "81", ",", "149", ",", "274", ",", "504", ",", "927", ",", "1705"}], 
  "}"}]], "Output",ExpressionUUID->"6eb02a92-d94e-4e62-817d-c103bb382aac"]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Open  ]]
},
AutoGeneratedPackage->None,
WindowSize->{1329, 723},
WindowMargins->{{14, Automatic}, {Automatic, 29}},
PrivateNotebookOptions->{"VersionedStylesheet"->{"Default.nb"[8.] -> False}},
ShowSelection->True,
CellLabelAutoDelete->True,
TrackCellChangeTimes->False,
Magnification->1.,
FrontEndVersion->"12.0 for Mac OS X x86 (64-bit) (April 8, 2019)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[567, 22, 93, 0, 98, "Title",ExpressionUUID->"6e08e12b-5725-4f06-8125-01c8575b1513"],
Cell[663, 24, 97, 0, 53, "Subtitle",ExpressionUUID->"a639fa54-e7bc-4cd8-a824-4a1fe52c05f3"],
Cell[763, 26, 271, 6, 53, "Subsubtitle",ExpressionUUID->"307b1658-74d7-4482-947e-ae70b3074aa4"],
Cell[CellGroupData[{
Cell[1059, 36, 86, 0, 67, "Section",ExpressionUUID->"b1392040-f036-43c1-b09e-b97a5657ec31"],
Cell[1148, 38, 382, 6, 58, "Text",ExpressionUUID->"de46d2c4-a7a8-45bd-bcbf-79a78bb42308"],
Cell[1533, 46, 477, 11, 35, "Text",ExpressionUUID->"3dfddd2f-2379-4736-ba5a-ce02854b8e9d"],
Cell[2013, 59, 115, 1, 52, "Code",ExpressionUUID->"b689aead-4524-41b5-9ffc-74217d72352c"],
Cell[CellGroupData[{
Cell[2153, 64, 100, 0, 54, "Subsection",ExpressionUUID->"7664176f-40f8-4637-b63c-3108012d74ac"],
Cell[2256, 66, 829, 23, 150, "Text",ExpressionUUID->"142106e5-1110-4b58-90b2-02ee56626a13"],
Cell[3088, 91, 677, 18, 35, "Text",ExpressionUUID->"09cf9d7d-6920-4d8d-adc6-e4308e0ca369"],
Cell[CellGroupData[{
Cell[3790, 113, 235, 6, 30, "Input",ExpressionUUID->"3d099fee-7e67-42ca-a768-6db2d5a70d74"],
Cell[4028, 121, 281, 6, 34, "Output",ExpressionUUID->"a5d918fd-5642-4e01-b03a-64bb13de5d3d"]
}, Open  ]],
Cell[4324, 130, 274, 6, 35, "Text",ExpressionUUID->"58baac3a-0ea3-4372-8386-2e6b777f32e9"],
Cell[CellGroupData[{
Cell[4623, 140, 242, 6, 30, "Input",ExpressionUUID->"791c5f06-20b0-4717-bf64-88fa1cae6f95"],
Cell[4868, 148, 235, 5, 34, "Output",ExpressionUUID->"98860e05-b2ca-4437-854f-964ee5152c79"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5140, 158, 128, 1, 30, "Input",ExpressionUUID->"8d94ea3b-0167-45cd-a006-70788101774c"],
Cell[5271, 161, 128, 2, 34, "Output",ExpressionUUID->"0b721ca4-21cf-42e3-b1fb-bbf57ac074b8"]
}, Open  ]],
Cell[5414, 166, 263, 6, 35, "Text",ExpressionUUID->"d78b9d74-5363-447b-835e-de018717b6f9"],
Cell[CellGroupData[{
Cell[5702, 176, 236, 6, 30, "Input",ExpressionUUID->"ad564eb9-0b64-4170-990c-7b5e9099ce41"],
Cell[5941, 184, 231, 5, 34, "Output",ExpressionUUID->"bb0832cc-06c5-46c2-98d7-5a6c38459a3e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6209, 194, 128, 1, 30, "Input",ExpressionUUID->"928fd85c-e077-4258-9a65-6c7be8b635b4"],
Cell[6340, 197, 140, 3, 34, "Output",ExpressionUUID->"c8c77e86-c8b9-46e7-ace1-59587f52ff8f"]
}, Open  ]],
Cell[6495, 203, 188, 3, 35, "Text",ExpressionUUID->"201e4605-4ac5-4b35-8f24-1bc560d5f942"],
Cell[CellGroupData[{
Cell[6708, 210, 237, 6, 30, "Input",ExpressionUUID->"c6d37d1f-f1f1-4a5d-81fc-1c2a7957a739"],
Cell[6948, 218, 281, 6, 34, "Output",ExpressionUUID->"16b3d958-5d67-4c32-a3a0-7608baa32c36"]
}, Open  ]],
Cell[7244, 227, 142, 2, 35, "Text",ExpressionUUID->"201e4605-4ac5-4b35-8f24-1bc560d5f942"],
Cell[CellGroupData[{
Cell[7411, 233, 239, 6, 30, "Input",ExpressionUUID->"a355a718-f2fa-4812-a03c-95ab1cff0746"],
Cell[7653, 241, 238, 5, 34, "Output",ExpressionUUID->"6334cce5-6e49-45eb-ba19-7c2a7533f7a4"]
}, Open  ]],
Cell[7906, 249, 327, 8, 35, "Text",ExpressionUUID->"ceafcd48-76c9-476f-8a94-72f054a06ef8"],
Cell[CellGroupData[{
Cell[8258, 261, 237, 6, 30, "Input",ExpressionUUID->"924d645c-0cba-468b-bf0c-36ca657aee18"],
Cell[8498, 269, 293, 6, 34, "Output",ExpressionUUID->"35f49593-fbda-4eec-b2e9-30f07e26ccff"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[8840, 281, 88, 0, 38, "Subsection",ExpressionUUID->"173dee0f-4c68-440a-b25f-158ca957a6f6"],
Cell[8931, 283, 434, 10, 58, "Text",ExpressionUUID->"e52a5d15-5991-4ccc-a028-2a3df33e82e7"],
Cell[9368, 295, 241, 6, 30, "Input",ExpressionUUID->"345beaf4-693c-4e13-bee5-e24065e2fc4a"],
Cell[9612, 303, 189, 4, 35, "Text",ExpressionUUID->"6d2bd72c-a420-44c6-bb39-c08493d356ef"],
Cell[9804, 309, 137, 2, 30, "Input",ExpressionUUID->"997aa027-e96c-4951-ae89-87cd491edb5a"]
}, Closed]],
Cell[CellGroupData[{
Cell[9978, 316, 101, 0, 38, "Subsection",ExpressionUUID->"8a790dda-b9b0-4885-9219-35c8ed97f66b"],
Cell[10082, 318, 142, 2, 35, "Text",ExpressionUUID->"fdc9f5e8-0b3a-416d-a788-84fa5471f0c1"],
Cell[CellGroupData[{
Cell[10249, 324, 117, 1, 30, "Input",ExpressionUUID->"cec1b136-3a33-460e-b035-40b177b5e3d9"],
Cell[10369, 327, 84, 0, 34, "Output",ExpressionUUID->"6577a2d6-a5fc-4dc8-bb9d-7b4dcc96eed4"]
}, Open  ]],
Cell[10468, 330, 329, 9, 35, "Text",ExpressionUUID->"31c27d20-d06c-4bdf-b4e2-808d8e36d8cc"],
Cell[10800, 341, 291, 7, 35, "Text",ExpressionUUID->"b455e242-ea98-4989-9910-c1bc6942f065"],
Cell[CellGroupData[{
Cell[11116, 352, 207, 5, 30, "Input",ExpressionUUID->"78c2b59d-fcd5-4475-9dfb-0654fd368bd6"],
Cell[11326, 359, 83, 0, 34, "Output",ExpressionUUID->"5f0d2361-e0a6-4a92-b4b3-ce2afa22b469"]
}, Open  ]],
Cell[11424, 362, 151, 3, 35, "Text",ExpressionUUID->"c89cd879-2caf-4e62-ab67-2b693ecf63b1"],
Cell[CellGroupData[{
Cell[11600, 369, 162, 4, 30, "Input",ExpressionUUID->"65309c35-c23d-41ff-9130-4799c3063e00"],
Cell[11765, 375, 160, 3, 34, "Output",ExpressionUUID->"a39c433b-06b0-47ad-a7b0-1e2481740570"]
}, Open  ]],
Cell[11940, 381, 160, 4, 35, "Text",ExpressionUUID->"97601a38-ee5d-46ae-afd1-88ec650548aa"],
Cell[CellGroupData[{
Cell[12125, 389, 244, 6, 30, "Input",ExpressionUUID->"712cdb6f-e4ec-47da-aa7e-427108664dc0"],
Cell[12372, 397, 84, 0, 34, "Output",ExpressionUUID->"fccc2c02-25df-44c9-a453-1b5a561a9975"]
}, Open  ]],
Cell[12471, 400, 170, 3, 35, "Text",ExpressionUUID->"a0e635ea-270b-4aea-a33d-49c52cde4b74"],
Cell[CellGroupData[{
Cell[12666, 407, 171, 4, 30, "Input",ExpressionUUID->"223e2908-a927-41fb-9219-a8dd6ae71621"],
Cell[12840, 413, 83, 0, 34, "Output",ExpressionUUID->"f8f73f4b-a2a9-4643-82ed-09715831b626"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[12972, 419, 112, 0, 38, "Subsection",ExpressionUUID->"0af05587-db62-4cf5-8d45-0184b0ba9f76"],
Cell[13087, 421, 228, 5, 35, "Text",ExpressionUUID->"8b65bda4-4aa1-4bec-80e2-2b822af54476"],
Cell[CellGroupData[{
Cell[13340, 430, 232, 5, 30, "Input",ExpressionUUID->"693ef3c6-3236-4243-be1d-a7d19ba8e491"],
Cell[13575, 437, 304, 9, 34, "Output",ExpressionUUID->"63061c12-8892-4a07-bd59-d68159e7045a"]
}, Open  ]],
Cell[13894, 449, 197, 3, 35, "Text",ExpressionUUID->"1d5014e1-2298-4cc5-b18b-fa0260b5b1d2"],
Cell[CellGroupData[{
Cell[14116, 456, 387, 11, 33, "Input",ExpressionUUID->"d62cbc2b-a767-4db9-8e56-fa54468bd8ec"],
Cell[14506, 469, 4536, 140, 97, "Output",ExpressionUUID->"00cb5218-6c13-4473-8dff-9f8b241140c5"]
}, Open  ]],
Cell[19057, 612, 536, 8, 81, "Text",ExpressionUUID->"ffe74731-b532-4e99-af14-60248d40bfcf"],
Cell[CellGroupData[{
Cell[19618, 624, 985, 31, 30, "Input",ExpressionUUID->"4320ab36-259f-40f0-9cc7-31ae8bd370a4"],
Cell[20606, 657, 2989, 93, 107, "Output",ExpressionUUID->"f68babe0-1858-4b2a-acd9-fc2ba4211b33"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[23644, 756, 106, 0, 38, "Subsection",ExpressionUUID->"c021540d-4405-4137-8993-93af1dbf275a"],
Cell[23753, 758, 458, 11, 58, "Text",ExpressionUUID->"69588d93-620a-488f-9441-6d898497d28b"],
Cell[24214, 771, 724, 20, 35, "Text",ExpressionUUID->"3c7971a6-c920-432c-b755-ba8dc5477fb5"],
Cell[CellGroupData[{
Cell[24963, 795, 496, 14, 30, "Input",ExpressionUUID->"1a05f1ea-e248-414f-91a0-acb8905d04ee"],
Cell[25462, 811, 299, 9, 34, "Output",ExpressionUUID->"c426d0ec-508d-41a8-ad7f-093b6040f7fe"]
}, Open  ]],
Cell[CellGroupData[{
Cell[25798, 825, 476, 15, 33, "Input",ExpressionUUID->"bfcef6ac-1c1c-43b8-93a2-d4ae8f352838"],
Cell[26277, 842, 366, 9, 34, "Output",ExpressionUUID->"8d671338-b263-46d4-bd00-32d6b98ce778"]
}, Open  ]],
Cell[26658, 854, 147, 2, 35, "Text",ExpressionUUID->"cabfeb9d-9634-45b4-9fcb-3ad801fc659b"],
Cell[26808, 858, 383, 8, 35, "Text",ExpressionUUID->"3e9dfc14-1859-4817-b639-49af4c1945a8"],
Cell[CellGroupData[{
Cell[27216, 870, 417, 12, 54, "Input",ExpressionUUID->"80cdd2bf-00cc-4ca4-98e3-8c4e026125b7"],
Cell[27636, 884, 1091, 33, 34, "Output",ExpressionUUID->"1ef2ca7c-0cbb-4785-bf73-7a389ebf2c82"]
}, Open  ]],
Cell[CellGroupData[{
Cell[28764, 922, 684, 19, 54, "Input",ExpressionUUID->"e889e3ad-8948-484d-ae92-1e6ec407c95d"],
Cell[29451, 943, 2106, 66, 125, "Output",ExpressionUUID->"1a7e955b-fac1-4a7a-980d-d78d62492061"]
}, Open  ]],
Cell[CellGroupData[{
Cell[31594, 1014, 1786, 56, 123, "Input",ExpressionUUID->"43deb060-7c89-4aaa-9cf8-6659eec2164f"],
Cell[33383, 1072, 751, 24, 34, "Output",ExpressionUUID->"0142a114-9ef5-460e-a29c-f62ad17aceea"]
}, Open  ]],
Cell[34149, 1099, 397, 10, 35, "Text",ExpressionUUID->"a826136b-f5e8-4710-a575-c3926bf6ecb3"]
}, Closed]],
Cell[CellGroupData[{
Cell[34583, 1114, 109, 0, 38, "Subsection",ExpressionUUID->"2a525973-f589-4f4e-a81a-293d4c83ba2b"],
Cell[34695, 1116, 804, 24, 35, "Text",ExpressionUUID->"06bce80a-4774-43a7-a386-6d898bd6605e"],
Cell[CellGroupData[{
Cell[35524, 1144, 619, 19, 30, "Input",ExpressionUUID->"a3618847-2978-47e7-9090-86ed1e524ac2"],
Cell[36146, 1165, 9460, 210, 125, "Output",ExpressionUUID->"80753c71-113d-4d9a-b701-fd32e6ecd490"]
}, Open  ]],
Cell[45621, 1378, 2419, 74, 74, "Input",ExpressionUUID->"c3ed8b1a-df74-4e86-bc81-3ea0a023f886"],
Cell[CellGroupData[{
Cell[48065, 1456, 122, 1, 30, "Input",ExpressionUUID->"13b2883f-ca37-4226-b5e6-397b9aa7e05b"],
Cell[48190, 1459, 25527, 554, 190, "Output",ExpressionUUID->"5b55204a-1754-4490-9dde-9b4ed629ecc7"]
}, Open  ]],
Cell[73732, 2016, 197, 3, 35, "Text",ExpressionUUID->"3d428347-9c7a-4661-8a4a-0bb360a47b26"],
Cell[CellGroupData[{
Cell[73954, 2023, 381, 11, 33, "Input",ExpressionUUID->"11907389-f56d-4165-982e-02c5bc008de4"],
Cell[74338, 2036, 620, 9, 34, "Output",ExpressionUUID->"031035bc-6bed-42e5-9545-d135aa6b7cb6"]
}, Open  ]],
Cell[74973, 2048, 97, 0, 35, "Text",ExpressionUUID->"bdc8e727-5f09-48da-b117-594296a70bff"],
Cell[CellGroupData[{
Cell[75095, 2052, 348, 10, 33, "Input",ExpressionUUID->"eab924ff-1657-4eb2-8ee3-57b7a6e3a438"],
Cell[75446, 2064, 1648, 23, 56, "Output",ExpressionUUID->"7cb24ea3-2f6c-458c-928e-3954d43caf9f"]
}, Open  ]],
Cell[77109, 2090, 113, 1, 30, "Input",ExpressionUUID->"dda682af-80d8-49a6-a463-96391d958fe7"],
Cell[77225, 2093, 214, 3, 35, "Text",ExpressionUUID->"610ecc20-7401-4ef4-894d-3e44d69c676f"],
Cell[CellGroupData[{
Cell[77464, 2100, 335, 8, 52, "Input",ExpressionUUID->"6c377b9d-3296-4161-b863-9305fcaf6bbf"],
Cell[77802, 2110, 687, 22, 34, "Output",ExpressionUUID->"854b11f0-1ac8-499b-a504-dae5ee8036c6"],
Cell[78492, 2134, 9961, 223, 125, "Output",ExpressionUUID->"746efd86-36e4-4119-9833-a3a2a32ee272"]
}, Open  ]],
Cell[88468, 2360, 169, 3, 35, "Text",ExpressionUUID->"020666f4-ae6e-4c10-98fc-15f2ac7330b6"],
Cell[CellGroupData[{
Cell[88662, 2367, 302, 7, 30, "Input",ExpressionUUID->"aabb9ec7-0818-4dab-a2a4-3be4414a0c48"],
Cell[88967, 2376, 686, 21, 34, "Output",ExpressionUUID->"b1cda223-1aa5-4f90-9850-707384bb77ee"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[89702, 2403, 94, 0, 38, "Subsection",ExpressionUUID->"bfae9a4f-e180-4936-b967-5ddf20d825ee"],
Cell[89799, 2405, 777, 20, 58, "Text",ExpressionUUID->"560cdb35-8afd-49c8-953c-8dd8326dc682"],
Cell[90579, 2427, 413, 11, 35, "Text",ExpressionUUID->"cfa99fd4-21b4-44bf-8a22-509a67476796"],
Cell[CellGroupData[{
Cell[91017, 2442, 331, 9, 30, "Input",ExpressionUUID->"f0ae5b81-93cc-4a3f-98a4-d8ae7975d944"],
Cell[91351, 2453, 449, 8, 34, "Output",ExpressionUUID->"fc24aaa7-a04c-4d91-aab8-e1c8a555dace"]
}, Open  ]],
Cell[91815, 2464, 251, 4, 35, "Text",ExpressionUUID->"48f0a5a6-98f4-4419-a0f3-ead02e2d90f7"],
Cell[CellGroupData[{
Cell[92091, 2472, 184, 4, 30, "Input",ExpressionUUID->"719be6bc-21de-473a-8408-7184c08e3270"],
Cell[92278, 2478, 650, 21, 34, "Output",ExpressionUUID->"4e9c8f80-0561-4977-8867-3215839117a7"]
}, Open  ]],
Cell[92943, 2502, 278, 7, 35, "Text",ExpressionUUID->"bb2020cf-36d4-4fea-88c2-1c2641969bd8"],
Cell[CellGroupData[{
Cell[93246, 2513, 168, 4, 30, "Input",ExpressionUUID->"07af2ef0-4824-4b8b-a95c-d49a325b4079"],
Cell[93417, 2519, 449, 8, 34, "Output",ExpressionUUID->"58d174e7-ddf0-43d3-9fd8-aba7aef7fe9b"]
}, Open  ]],
Cell[93881, 2530, 113, 1, 30, "Input",ExpressionUUID->"dad07e6b-6fe7-4f45-a5bc-2812b7eb3c9f"],
Cell[93997, 2533, 354, 7, 35, "Text",ExpressionUUID->"97d302ba-d3ab-46ae-8c22-00bb84068b3f"],
Cell[CellGroupData[{
Cell[94376, 2544, 271, 7, 30, "Input",ExpressionUUID->"175b9eab-33af-4b9a-9e2c-4f40f62c16e3"],
Cell[94650, 2553, 449, 8, 34, "Output",ExpressionUUID->"f82ddcde-546d-4af5-9f08-a3df86595235"]
}, Open  ]],
Cell[95114, 2564, 96, 0, 35, "Text",ExpressionUUID->"c3622659-5cf0-4ad2-9264-9c49e5f83587"],
Cell[CellGroupData[{
Cell[95235, 2568, 184, 4, 30, "Input",ExpressionUUID->"80f206d9-d63d-4ead-8160-0a043d3b2efa"],
Cell[95422, 2574, 675, 22, 34, "Output",ExpressionUUID->"0da63c39-915d-4aa7-b5ed-43dcc17da0ee"]
}, Open  ]],
Cell[CellGroupData[{
Cell[96134, 2601, 168, 4, 30, "Input",ExpressionUUID->"a974e4c4-dde7-42b4-b324-11eb5f1dbcef"],
Cell[96305, 2607, 449, 8, 34, "Output",ExpressionUUID->"93ffe241-edfa-4d80-9125-7d837c2c2a4e"]
}, Open  ]],
Cell[96769, 2618, 364, 7, 58, "Text",ExpressionUUID->"7cc2f24b-6070-4362-88b8-9541ee5c9da8"],
Cell[CellGroupData[{
Cell[97158, 2629, 400, 10, 30, "Input",ExpressionUUID->"495dcf2a-bb32-4c9f-8049-a61451e5c548"],
Cell[97561, 2641, 903, 29, 34, "Output",ExpressionUUID->"05451f87-0fbc-4188-b61b-e4d25a2cab43"]
}, Open  ]],
Cell[98479, 2673, 277, 5, 35, "Text",ExpressionUUID->"65d77450-c0dc-479e-954c-fcdd2c1865b9"],
Cell[CellGroupData[{
Cell[98781, 2682, 211, 5, 30, "Input",ExpressionUUID->"988de935-2ae2-4a33-b3ab-b45add136fd6"],
Cell[98995, 2689, 1504, 49, 34, "Output",ExpressionUUID->"2ce888e0-1a60-4db2-a346-a7aea17932ab"]
}, Open  ]],
Cell[100514, 2741, 113, 1, 30, "Input",ExpressionUUID->"85385e66-460d-4159-af04-cfbb58783db5"],
Cell[CellGroupData[{
Cell[100652, 2746, 107, 0, 45, "Subsubsection",ExpressionUUID->"e7a7c047-e0e7-487d-be17-c6be8487d6ef"],
Cell[100762, 2748, 277, 4, 35, "Text",ExpressionUUID->"8e2ffc9d-97cd-425d-8db2-506c58a59cb8"],
Cell[CellGroupData[{
Cell[101064, 2756, 235, 6, 30, "Input",ExpressionUUID->"469de554-5718-4965-8f37-a18d895fdd90"],
Cell[101302, 2764, 449, 8, 34, "Output",ExpressionUUID->"27a579c2-1f85-44dd-af3d-d3487c2605c6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[101788, 2777, 185, 4, 30, "Input",ExpressionUUID->"a46e22ee-6e54-4a46-a783-33a1d79760d5"],
Cell[101976, 2783, 650, 21, 34, "Output",ExpressionUUID->"88121df0-916d-4239-8fd3-2ace4edaec05"]
}, Open  ]],
Cell[CellGroupData[{
Cell[102663, 2809, 169, 4, 30, "Input",ExpressionUUID->"7fc8490f-f6fc-4e41-a166-a55634167e53"],
Cell[102835, 2815, 449, 8, 34, "Output",ExpressionUUID->"2e447bf9-f8a9-43ba-b8de-515b07197109"]
}, Open  ]],
Cell[103299, 2826, 312, 7, 35, "Text",ExpressionUUID->"1ba198a3-ae5f-4391-b81c-ca3dc9f261cd"],
Cell[CellGroupData[{
Cell[103636, 2837, 299, 7, 30, "Input",ExpressionUUID->"ee161629-5f80-4260-b5e5-6a0a68a116e1"],
Cell[103938, 2846, 686, 21, 34, "Output",ExpressionUUID->"3f6b2576-a6c8-4574-b257-7587eda054f1"]
}, Open  ]],
Cell[104639, 2870, 126, 0, 35, "Text",ExpressionUUID->"07e38d48-e980-4009-8435-00401efc85b4"],
Cell[CellGroupData[{
Cell[104790, 2874, 164, 3, 30, "Input",ExpressionUUID->"f769959a-ff8d-4b5d-9088-1a80e1b43791"],
Cell[104957, 2879, 542, 13, 34, "Output",ExpressionUUID->"8dd129b2-b91f-4394-b669-ca76075462d8"]
}, Open  ]],
Cell[105514, 2895, 114, 1, 30, "Input",ExpressionUUID->"839e2479-1d87-44ac-9264-d30aff7f41a2"]
}, Closed]],
Cell[CellGroupData[{
Cell[105665, 2901, 115, 0, 37, "Subsubsection",ExpressionUUID->"97cbd5f2-c377-49b2-9ef2-66f7dfd04290"],
Cell[CellGroupData[{
Cell[105805, 2905, 357, 8, 30, "Input",ExpressionUUID->"f6d4b747-86e6-4d6c-be0a-2422f5df6a6a"],
Cell[106165, 2915, 1653, 47, 83, "Output",ExpressionUUID->"30056251-a76c-4476-b1af-3956f2860004"]
}, Open  ]],
Cell[CellGroupData[{
Cell[107855, 2967, 321, 7, 30, "Input",ExpressionUUID->"13da3f70-405d-4566-86b9-97ad21835a7e"],
Cell[108179, 2976, 1396, 41, 49, "Output",ExpressionUUID->"13a7ff0e-8ad5-4098-a8a4-f5b13a7cf511"]
}, Open  ]],
Cell[CellGroupData[{
Cell[109612, 3022, 376, 10, 30, "Input",ExpressionUUID->"0090bf7d-ab75-4ceb-9340-fb97a668bafb"],
Cell[109991, 3034, 1514, 44, 65, "Output",ExpressionUUID->"1613983a-1e53-4166-9ef4-d601ebaa3d98"]
}, Open  ]],
Cell[CellGroupData[{
Cell[111542, 3083, 394, 10, 33, "Input",ExpressionUUID->"cda80266-c49d-45ed-b756-1c21eb3a0d46"],
Cell[111939, 3095, 1681, 45, 99, "Output",ExpressionUUID->"4b81d143-22ab-4004-aa3f-3538076bbd2a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[113657, 3145, 368, 9, 30, "Input",ExpressionUUID->"6c704f3c-a10d-4f39-9ad3-d9efef1d94ca"],
Cell[114028, 3156, 3005, 81, 99, "Output",ExpressionUUID->"59c4f3e4-abac-4653-82c0-f3e64d85ad16"]
}, Open  ]],
Cell[CellGroupData[{
Cell[117070, 3242, 625, 16, 33, "Input",ExpressionUUID->"cea6e230-373a-47ef-a4d1-345ddc959659"],
Cell[117698, 3260, 2224, 63, 141, "Output",ExpressionUUID->"0872d204-fc08-44c5-8d84-7ac37bfde982"]
}, Open  ]],
Cell[CellGroupData[{
Cell[119959, 3328, 555, 15, 33, "Input",ExpressionUUID->"3f5e7a63-f566-4080-95af-cef34187c77e"],
Cell[120517, 3345, 1575, 44, 83, "Output",ExpressionUUID->"ae227ff4-afeb-4956-92c5-9024ebe3c067"]
}, Open  ]],
Cell[122107, 3392, 299, 6, 35, "Text",ExpressionUUID->"7247f0f3-f007-4a3a-8681-fee4bfefa4e8"],
Cell[CellGroupData[{
Cell[122431, 3402, 572, 15, 47, "Input",ExpressionUUID->"6ac7903d-62e4-49d6-94da-85554ae8063c"],
Cell[123006, 3419, 1436, 41, 65, "Output",ExpressionUUID->"e664e226-3b86-4f1c-8c3b-2a5344108c1f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[124479, 3465, 572, 15, 47, "Input",ExpressionUUID->"4443b92c-c48f-436c-9517-8d7b27c11897"],
Cell[125054, 3482, 1576, 44, 83, "Output",ExpressionUUID->"b6968783-773a-461b-9745-d964b61c853e"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[126679, 3532, 114, 0, 37, "Subsubsection",ExpressionUUID->"3d0f5a72-f2a7-4246-bf1e-13ec13e19e45"],
Cell[126796, 3534, 145, 2, 35, "Text",ExpressionUUID->"414e669d-409a-4b45-a10a-48b15ea08ce6"],
Cell[126944, 3538, 416, 12, 35, "Text",ExpressionUUID->"c1ac2c60-a84f-4abe-ac97-a24e55f0e2b5"],
Cell[CellGroupData[{
Cell[127385, 3554, 670, 19, 33, "Input",ExpressionUUID->"5838e3c5-154b-4cc7-882e-36b80bc40a72"],
Cell[128058, 3575, 2485, 69, 34, "Output",ExpressionUUID->"8f68528a-072f-44ec-8bfd-d839f499a6de"]
}, Open  ]],
Cell[130558, 3647, 351, 9, 35, "Text",ExpressionUUID->"d5f6613a-d75c-4dab-a38b-19d639f6e500"],
Cell[CellGroupData[{
Cell[130934, 3660, 1233, 32, 52, "Input",ExpressionUUID->"fe8c1810-bf29-42d0-92c8-a6dfebbc948c"],
Cell[132170, 3694, 3753, 104, 49, "Output",ExpressionUUID->"e6ce1f57-acaa-415e-a32a-ce87b6e98d84"]
}, Open  ]]
}, Closed]]
}, Closed]]
}, Open  ]],
Cell[CellGroupData[{
Cell[135996, 3806, 89, 0, 67, "Section",ExpressionUUID->"8b3a5229-8d69-4a75-badb-ab6af8d32602"],
Cell[CellGroupData[{
Cell[136110, 3810, 126, 0, 37, "Subsubsection",ExpressionUUID->"53ae11ab-c73b-406e-b101-477f944e5ec0"],
Cell[CellGroupData[{
Cell[136261, 3814, 115, 1, 30, "Input",ExpressionUUID->"6e2b6be5-7d37-49c2-9db9-f81d1307b602"],
Cell[136379, 3817, 29575, 632, 119, "Output",ExpressionUUID->"42b73617-a04d-43c8-ab1c-57481438b47d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[165991, 4454, 464, 14, 33, "Input",ExpressionUUID->"7e5a3c45-aed3-4ff6-aa00-4d6444ca52ea"],
Cell[166458, 4470, 87, 0, 34, "Output",ExpressionUUID->"47013338-f483-45c1-a065-ee36d4dde586"]
}, Open  ]],
Cell[CellGroupData[{
Cell[166582, 4475, 603, 18, 33, "Input",ExpressionUUID->"6a929cc3-1e64-4efe-9a15-976393c616db"],
Cell[167188, 4495, 243, 5, 34, "Output",ExpressionUUID->"9f213b74-b766-4977-8c67-45fce4f0e816"]
}, Open  ]],
Cell[167446, 4503, 127, 0, 35, "Text",ExpressionUUID->"c90270bf-85eb-4dfd-9478-9fa738f8b1c6"],
Cell[CellGroupData[{
Cell[167598, 4507, 538, 16, 33, "Input",ExpressionUUID->"3fef69cd-27ec-4753-bc39-e1d08f06ebc9"],
Cell[168139, 4525, 2331, 67, 78, "Output",ExpressionUUID->"f0de9dc1-8044-46dc-bb5b-a98326f0a383"]
}, Open  ]],
Cell[170485, 4595, 143, 2, 35, "Text",ExpressionUUID->"32850550-3edd-4933-a0ae-641cee39c0eb"],
Cell[CellGroupData[{
Cell[170653, 4601, 342, 10, 33, "Input",ExpressionUUID->"1a0662df-ba7f-4582-82fe-cfaca34cf172"],
Cell[170998, 4613, 588, 10, 31, "Message",ExpressionUUID->"76072656-1fa8-4476-ac39-1e21fe5d3360"],
Cell[171589, 4625, 343, 10, 37, "Output",ExpressionUUID->"26ff2716-da3c-4b4a-a47b-eac7e7d7a719"]
}, Open  ]],
Cell[171947, 4638, 180, 4, 35, "Text",ExpressionUUID->"a14f81b6-9b81-476b-8c29-3cb05448d5b9"],
Cell[CellGroupData[{
Cell[172152, 4646, 803, 22, 33, "Input",ExpressionUUID->"6b9c7844-aa9d-4517-97b5-9c2d3caa9fdd"],
Cell[172958, 4670, 87, 0, 34, "Output",ExpressionUUID->"53a4d1a9-d849-462f-ae00-ac1324023163"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[173094, 4676, 120, 0, 29, "Subsubsection",ExpressionUUID->"cd1c501a-a053-4406-b490-db4d65387d82"],
Cell[CellGroupData[{
Cell[173239, 4680, 109, 1, 30, "Input",ExpressionUUID->"b433d976-e750-4f9e-9219-6e17d11f53bf"],
Cell[173351, 4683, 12674, 302, 95, "Output",ExpressionUUID->"b494c55a-7ff4-4051-b29d-a697b9cf8ea2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[186062, 4990, 237, 6, 30, "Input",ExpressionUUID->"ac162873-d8b6-456f-aea5-6afc9112bd7e"],
Cell[186302, 4998, 293, 6, 34, "Output",ExpressionUUID->"9e123763-edd7-4f01-81b3-0a5837704ec7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[186632, 5009, 121, 1, 30, "Input",ExpressionUUID->"b084a265-f3cc-42b5-ae7d-33e9b7b8ba0b"],
Cell[186756, 5012, 238, 3, 56, "Output",ExpressionUUID->"a6da1cbe-55de-413b-94ce-4fe51ca25f5e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[187031, 5020, 121, 1, 30, "Input",ExpressionUUID->"17ee6aee-9fd3-4461-af82-7058b6e54fc9"],
Cell[187155, 5023, 399, 8, 26, "Message",ExpressionUUID->"0b7b1cb9-1d3c-4315-89bd-d7b9adcabc6b"],
Cell[187557, 5033, 101, 0, 34, "Output",ExpressionUUID->"23216fd1-da50-4360-9b2a-750fb6981973"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[187707, 5039, 126, 0, 29, "Subsubsection",ExpressionUUID->"e5d179e4-a2df-4d34-8685-4615af48b0d4"],
Cell[CellGroupData[{
Cell[187858, 5043, 115, 1, 30, "Input",ExpressionUUID->"8694db60-37fa-4d27-ba7a-27fabe71f367"],
Cell[187976, 5046, 29266, 618, 143, "Output",ExpressionUUID->"994d1abf-8b3e-43c0-b3db-9e7182f4f0d0"]
}, Open  ]],
Cell[217257, 5667, 119, 0, 35, "Text",ExpressionUUID->"db52ffb6-f569-4b7a-9349-20049bcdf03f"],
Cell[CellGroupData[{
Cell[217401, 5671, 669, 20, 30, "Input",ExpressionUUID->"f0e155aa-daa3-42da-8c4b-5d4b513c4e0f"],
Cell[218073, 5693, 83, 0, 34, "Output",ExpressionUUID->"51133284-0e67-4090-8160-e77f07972d3c"]
}, Open  ]],
Cell[218171, 5696, 99, 0, 35, "Text",ExpressionUUID->"730cb0a7-c28f-44dc-a3df-20a1a18db3b3"],
Cell[CellGroupData[{
Cell[218295, 5700, 820, 24, 30, "Input",ExpressionUUID->"9c9e0624-eed0-4b65-ae94-2f5365790fff"],
Cell[219118, 5726, 449, 8, 34, "Output",ExpressionUUID->"284c73ff-154f-422e-b66b-ff52a3c924b9"]
}, Open  ]],
Cell[219582, 5737, 293, 7, 35, "Text",ExpressionUUID->"e936a246-349b-4277-bc85-1f5babafe9a2"],
Cell[CellGroupData[{
Cell[219900, 5748, 4766, 136, 115, "Input",ExpressionUUID->"571d3bc6-7ab5-476f-9a8a-81a51de25868"],
Cell[224669, 5886, 1074, 24, 376, "Output",ExpressionUUID->"8bbfd6ba-fe36-4f4d-aadc-a8bbbe659ba0"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[225792, 5916, 137, 1, 29, "Subsubsection",ExpressionUUID->"b6d872aa-f825-496a-bd8d-eb51019ca3af"],
Cell[CellGroupData[{
Cell[225954, 5921, 124, 1, 30, "Input",ExpressionUUID->"438506d0-f2d2-46e3-bf99-2c16438a2777"],
Cell[226081, 5924, 13130, 311, 95, "Output",ExpressionUUID->"1bbc9615-6835-4e90-bfad-6d390d7e70b0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[239248, 6240, 924, 27, 30, "Input",ExpressionUUID->"c622d42a-84ed-401d-afab-e28949ba7d62"],
Cell[240175, 6269, 687, 22, 34, "Output",ExpressionUUID->"aca974cc-06c5-4c65-9f66-724de56a22a2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[240899, 6296, 122, 1, 30, "Input",ExpressionUUID->"bb7c30af-60e6-49a6-b257-7be98441fbc9"],
Cell[241024, 6299, 9961, 223, 125, "Output",ExpressionUUID->"5fa3158e-94a4-4d95-86bc-b936edfe332d"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[251034, 6528, 132, 0, 29, "Subsubsection",ExpressionUUID->"1f644da0-a29e-489c-a44a-efb47f2cbd24"],
Cell[CellGroupData[{
Cell[251191, 6532, 121, 1, 30, "Input",ExpressionUUID->"e7a7ae1f-7889-47c3-8dbd-ee89b831e323"],
Cell[251315, 6535, 72101, 1502, 95, "Output",ExpressionUUID->"a2fa24c3-1a6f-41f2-a63b-a79c79190feb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[323453, 8042, 193, 4, 30, "Input",ExpressionUUID->"aa2251ce-5f75-4640-a637-c4f09d00206e"],
Cell[323649, 8048, 801, 24, 34, "Output",ExpressionUUID->"f6d73759-f954-4882-acef-f77490b1deed"]
}, Open  ]],
Cell[CellGroupData[{
Cell[324487, 8077, 196, 4, 30, "Input",ExpressionUUID->"751c371a-01e1-42b5-aa57-c8e2e492b73d"],
Cell[324686, 8083, 1349, 40, 34, "Output",ExpressionUUID->"adf09458-6b74-47c8-9abc-e63e7d89c7dc"]
}, Open  ]],
Cell[326050, 8126, 193, 3, 35, "Text",ExpressionUUID->"c97ae51f-1073-4366-9ace-5a67493bf8d3"],
Cell[CellGroupData[{
Cell[326268, 8133, 381, 9, 52, "Input",ExpressionUUID->"6eae7cfa-3d82-4ccc-b015-4b8b904a47ee"],
Cell[326652, 8144, 1410, 41, 56, "Output",ExpressionUUID->"167d908d-95bb-45c2-8850-d5da8ebddcaa"],
Cell[328065, 8187, 15226, 334, 84, "Output",ExpressionUUID->"cc38e18a-6b8f-40f0-af52-e7cbf76cf66d"]
}, Open  ]],
Cell[343306, 8524, 169, 4, 35, "Text",ExpressionUUID->"21fc87b6-bc41-4822-8a88-e3ee0cc1e05a"],
Cell[CellGroupData[{
Cell[343500, 8532, 308, 8, 30, "Input",ExpressionUUID->"24e23a3f-15e3-45b6-9771-32bca320c9ff"],
Cell[343811, 8542, 3171, 90, 77, "Output",ExpressionUUID->"65f3507d-59fe-4d55-b2eb-c054fe7b64af"]
}, Open  ]],
Cell[346997, 8635, 153, 2, 35, "Text",ExpressionUUID->"c47ba610-c342-422d-a093-fa3b0134f04d"],
Cell[CellGroupData[{
Cell[347175, 8641, 1081, 30, 54, "Input",ExpressionUUID->"109bf8a6-c3fb-4510-945d-814db424f78c"],
Cell[348259, 8673, 4191, 118, 98, "Output",ExpressionUUID->"b2e6749a-60d0-4106-8269-0182ff7fb4b7"],
Cell[352453, 8793, 45817, 1012, 316, "Output",ExpressionUUID->"a4d82d96-0b55-439c-be3d-91b6afd0209e"]
}, Open  ]],
Cell[398285, 9808, 194, 4, 35, "Text",ExpressionUUID->"95cd2213-69d3-49be-9cf3-787aeffd4fa5"],
Cell[398482, 9814, 124, 0, 35, "Text",ExpressionUUID->"3587ac26-a9e5-4abf-b843-d81483cccd14"],
Cell[CellGroupData[{
Cell[398631, 9818, 1354, 34, 73, "Input",ExpressionUUID->"6df3df67-73c9-443d-a6d3-9f6898b51832"],
Cell[399988, 9854, 139, 3, 34, "Output",ExpressionUUID->"bb08a8ac-44ba-4516-8cfb-b68594e8a245"],
Cell[400130, 9859, 139, 3, 34, "Output",ExpressionUUID->"274b3330-44b6-470f-a649-aee1cb5f2ef5"],
Cell[400272, 9864, 140, 3, 34, "Output",ExpressionUUID->"3e5dfa9f-bf2d-46f6-bd6f-eb53c338e453"]
}, Open  ]],
Cell[400427, 9870, 251, 4, 35, "Text",ExpressionUUID->"ff286353-5724-43d1-8dfd-dbcfe5e40d37"],
Cell[CellGroupData[{
Cell[400703, 9878, 1199, 30, 73, "Input",ExpressionUUID->"2972d480-42da-4e07-97ce-8092f676cd0e"],
Cell[401905, 9910, 84, 0, 34, "Output",ExpressionUUID->"616ada59-0591-4e7f-8a54-a507ea3c453e"],
Cell[401992, 9912, 84, 0, 34, "Output",ExpressionUUID->"380c5766-48b5-404e-a6f2-a6ebd5e69020"],
Cell[402079, 9914, 314, 6, 24, "Message",ExpressionUUID->"02fc6dfe-ba63-451d-8af9-8415bc886a9a"],
Cell[402396, 9922, 438, 10, 34, "Output",ExpressionUUID->"6357076a-cb43-480e-9b59-0c025ce82417"]
}, Open  ]],
Cell[402849, 9935, 181, 3, 58, "Text",ExpressionUUID->"c274f5de-125d-452f-b9bf-9810105c5463"],
Cell[CellGroupData[{
Cell[403055, 9942, 1024, 24, 94, "Input",ExpressionUUID->"2f027d07-8a6f-4c39-8d2b-822af88bdcca"],
Cell[404082, 9968, 140, 3, 34, "Output",ExpressionUUID->"55cfcdff-950c-47ee-a9f5-a1836d4c6713"],
Cell[404225, 9973, 140, 3, 34, "Output",ExpressionUUID->"ebab8dcf-af65-40cb-82e0-b28539dc8fd2"]
}, Open  ]],
Cell[404380, 9979, 429, 7, 58, "Text",ExpressionUUID->"b76c2e7e-b6a0-4042-adf4-e87a56c885a3"],
Cell[CellGroupData[{
Cell[404834, 9990, 889, 21, 52, "Input",ExpressionUUID->"8057ca8f-3ffb-4fdf-976b-60ca72f52e84"],
Cell[405726, 10013, 1551, 45, 56, "Output",ExpressionUUID->"1ef4c566-7f34-451e-8014-8c95e79516c2"],
Cell[407280, 10060, 2551, 73, 56, "Output",ExpressionUUID->"4e184c1c-e9ed-44a5-b89b-c90ebc0dbd00"]
}, Open  ]],
Cell[409846, 10136, 863, 18, 58, "Text",ExpressionUUID->"ae5a647e-bbdc-4c65-a0d5-c03c6c3ba100"],
Cell[410712, 10156, 195, 3, 35, "Text",ExpressionUUID->"d3a90c48-269c-4fed-81a9-757a3187cf11"],
Cell[CellGroupData[{
Cell[410932, 10163, 116, 1, 30, "Input",ExpressionUUID->"ed23ceff-74fb-42b7-b813-a7d25be323a2"],
Cell[411051, 10166, 9094, 226, 95, "Output",ExpressionUUID->"d7605bde-eabb-4699-a054-0f0871f32c5a"]
}, Open  ]],
Cell[420160, 10395, 172, 4, 35, "Text",ExpressionUUID->"92b9881b-90b0-462b-9053-178cfcc03707"],
Cell[CellGroupData[{
Cell[420357, 10403, 1092, 25, 115, "Input",ExpressionUUID->"f1e9e3d8-6315-4aea-8d29-8ca54110388d"],
Cell[421452, 10430, 139, 3, 34, "Output",ExpressionUUID->"2a139cc3-b546-4de7-ada1-0766326c098e"],
Cell[421594, 10435, 140, 3, 34, "Output",ExpressionUUID->"0e211b7e-4c22-4608-ac30-7fc08943abee"]
}, Open  ]],
Cell[421749, 10441, 151, 2, 35, "Text",ExpressionUUID->"c66a8fc0-469d-490a-aac4-80b17bd053bb"],
Cell[CellGroupData[{
Cell[421925, 10447, 112, 1, 30, "Input",ExpressionUUID->"306080b0-4d51-4456-9799-b6ab2e1fbce7"],
Cell[422040, 10450, 9102, 225, 95, "Output",ExpressionUUID->"33f96466-b997-4666-b24d-6d303f7aea7b"]
}, Open  ]],
Cell[431157, 10678, 470, 8, 58, "Text",ExpressionUUID->"097a5c9e-c0e7-404c-a171-78e994aecfab"],
Cell[CellGroupData[{
Cell[431652, 10690, 110, 1, 30, "Input",ExpressionUUID->"19b6891d-9fc3-4562-8fae-377ac44d2859"],
Cell[431765, 10693, 9068, 225, 95, "Output",ExpressionUUID->"aae72e82-d0dc-4125-8dd7-d3c41c6c2582"]
}, Open  ]],
Cell[440848, 10921, 308, 6, 58, "Text",ExpressionUUID->"217df5b5-5476-4843-ac1e-c7b7d899afae"],
Cell[CellGroupData[{
Cell[441181, 10931, 550, 13, 52, "Input",ExpressionUUID->"381cd91f-1a26-4ad0-86aa-81396da7346a"],
Cell[441734, 10946, 139, 3, 34, "Output",ExpressionUUID->"f13449f6-df39-4dca-81a0-c746344a092c"]
}, Open  ]],
Cell[441888, 10952, 375, 6, 81, "Text",ExpressionUUID->"42e0f6a3-cd21-45a5-b6a1-f9259985c7e4"],
Cell[CellGroupData[{
Cell[442288, 10962, 677, 16, 94, "Input",ExpressionUUID->"aaaef6ff-eafc-4d7d-8d85-94fb2585762b"],
Cell[442968, 10980, 139, 3, 34, "Output",ExpressionUUID->"85c39754-4d1a-4b8a-b80d-4cfc19e594ec"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[443156, 10989, 118, 0, 29, "Subsubsection",ExpressionUUID->"db68e3b4-80f0-477d-9620-5b15a9665b6f"],
Cell[CellGroupData[{
Cell[443299, 10993, 107, 1, 30, "Input",ExpressionUUID->"954666cf-2c52-4b65-ad4d-59898be4c4ad"],
Cell[443409, 10996, 22926, 476, 168, "Output",ExpressionUUID->"61508687-7c28-48a7-8ef3-6470c5b05c71"]
}, Open  ]],
Cell[466350, 11475, 152, 2, 35, "Text",ExpressionUUID->"7eb4b348-6394-4fde-8c17-510e9fc33218"],
Cell[466505, 11479, 768, 24, 30, "Input",ExpressionUUID->"fe6a6fd1-e29e-4452-9754-4eef49f21f9e"],
Cell[467276, 11505, 130, 0, 35, "Text",ExpressionUUID->"ba30a9e5-ef56-44f8-82fc-95ebdb9ae1c9"],
Cell[CellGroupData[{
Cell[467431, 11509, 122, 1, 30, "Input",ExpressionUUID->"435cb101-56e6-4fe5-98f0-749bdb1c4d01"],
Cell[467556, 11512, 10203, 224, 125, "Output",ExpressionUUID->"04555991-521a-4fa4-96f8-040a34c87e29"]
}, Open  ]],
Cell[477774, 11739, 106, 0, 35, "Text",ExpressionUUID->"872dfc67-8813-4b7d-a767-509bca1b431d"],
Cell[CellGroupData[{
Cell[477905, 11743, 199, 4, 30, "Input",ExpressionUUID->"02c2d435-c48e-4080-862d-778cf30803d9"],
Cell[478107, 11749, 83, 0, 34, "Output",ExpressionUUID->"da3ef088-ad71-457d-9319-122d261991ef"]
}, Open  ]],
Cell[CellGroupData[{
Cell[478227, 11754, 295, 8, 30, "Input",ExpressionUUID->"83b60ef5-3b02-47f4-ade6-56c14f32bbc5"],
Cell[478525, 11764, 449, 8, 34, "Output",ExpressionUUID->"b1af6f93-ff7e-4708-a547-898885ba9003"]
}, Open  ]],
Cell[478989, 11775, 113, 1, 30, "Input",ExpressionUUID->"3bce0b53-8c62-4a9d-9d55-a5147167402f"],
Cell[479105, 11778, 141, 2, 35, "Text",ExpressionUUID->"0b12e1f2-dd71-4ad9-871b-884bd86d6d7c"],
Cell[CellGroupData[{
Cell[479271, 11784, 843, 25, 30, "Input",ExpressionUUID->"bea3f294-cf91-4c23-ba50-67e7dcf942a3"],
Cell[480117, 11811, 94, 0, 34, "Output",ExpressionUUID->"76a0afc0-9354-442b-968d-3f75172834a7"]
}, Open  ]],
Cell[480226, 11814, 235, 6, 35, "Text",ExpressionUUID->"0026a1c7-40ec-475b-be03-fd06c5980bcb"],
Cell[CellGroupData[{
Cell[480486, 11824, 829, 25, 30, "Input",ExpressionUUID->"326841e8-8893-4183-b3ab-22c8e9fa5eb9"],
Cell[481318, 11851, 86, 0, 34, "Output",ExpressionUUID->"9cc50150-c1f3-4c72-ac2c-0df63614a09b"]
}, Open  ]],
Cell[481419, 11854, 188, 4, 35, "Text",ExpressionUUID->"3140ea45-0d9c-4892-be5f-e73735a03066"],
Cell[CellGroupData[{
Cell[481632, 11862, 694, 21, 30, "Input",ExpressionUUID->"8a7d2f96-c62c-4836-a75e-4d2dfe94e584"],
Cell[482329, 11885, 83, 0, 34, "Output",ExpressionUUID->"bd7128c2-225a-4ba1-9f99-3ea712fd0fc4"]
}, Open  ]],
Cell[482427, 11888, 176, 3, 35, "Text",ExpressionUUID->"7d048270-7295-4c08-804a-25885bc21998"],
Cell[CellGroupData[{
Cell[482628, 11895, 777, 23, 30, "Input",ExpressionUUID->"4438e26d-29b4-47bc-9ccf-e15373c25b75"],
Cell[483408, 11920, 98, 0, 34, "Output",ExpressionUUID->"1428fb37-5cb5-414d-9762-27348e5590f2"]
}, Open  ]],
Cell[483521, 11923, 109, 0, 35, "Text",ExpressionUUID->"b736c7c7-1c1e-4d17-93cd-47d544144805"],
Cell[CellGroupData[{
Cell[483655, 11927, 563, 18, 30, "Input",ExpressionUUID->"7a215647-89d9-4d46-bde6-406a8488b97c"],
Cell[484221, 11947, 83, 0, 34, "Output",ExpressionUUID->"6465df6b-f8cf-4b7d-bc2a-4776a98aee62"]
}, Open  ]],
Cell[484319, 11950, 278, 7, 35, "Text",ExpressionUUID->"6fd9a1c9-ba62-40ee-8d8d-3fb37c95d256"],
Cell[CellGroupData[{
Cell[484622, 11961, 482, 16, 32, "Input",ExpressionUUID->"e009f890-3001-499b-99c9-025a9e170870"],
Cell[485107, 11979, 89, 0, 34, "Output",ExpressionUUID->"13bb9bd9-f20c-4ffd-bcbb-e5a17943d7f9"]
}, Open  ]],
Cell[485211, 11982, 244, 5, 35, "Text",ExpressionUUID->"52da306c-a523-4200-857c-580562766492"],
Cell[CellGroupData[{
Cell[485480, 11991, 669, 21, 32, "Input",ExpressionUUID->"017f198a-1d40-4f76-92fc-73bdd04994bb"],
Cell[486152, 12014, 87, 0, 34, "Output",ExpressionUUID->"b175b8c8-2f62-4727-a4b8-689c3d5bfc9a"]
}, Open  ]],
Cell[486254, 12017, 234, 4, 35, "Text",ExpressionUUID->"915328fe-f531-42b0-9435-6f1fe8c3dbc2"],
Cell[CellGroupData[{
Cell[486513, 12025, 429, 14, 30, "Input",ExpressionUUID->"ba4dca08-60d9-4239-a596-785f4e55cf97"],
Cell[486945, 12041, 83, 0, 34, "Output",ExpressionUUID->"58a92ea4-ecc2-4098-8c2c-563151e72b66"]
}, Open  ]],
Cell[487043, 12044, 218, 4, 35, "Text",ExpressionUUID->"fe658ef1-4772-4982-ae18-17fd97b624eb"],
Cell[CellGroupData[{
Cell[487286, 12052, 527, 16, 30, "Input",ExpressionUUID->"ea655c14-47b6-41b8-a086-bf016b2dc8e5"],
Cell[487816, 12070, 528, 16, 34, "Output",ExpressionUUID->"38c943d3-5fe5-4da4-9fc0-37f40c960e02"]
}, Open  ]],
Cell[488359, 12089, 174, 4, 35, "Text",ExpressionUUID->"24435a80-aa8d-456c-a32a-f3a279a4dbfd"],
Cell[CellGroupData[{
Cell[488558, 12097, 634, 19, 30, "Input",ExpressionUUID->"42ffd901-2b2a-445f-a3c7-59b69bca3c6c"],
Cell[489195, 12118, 128, 2, 34, "Output",ExpressionUUID->"59b63216-b85f-4f73-8850-717760ea1914"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[489372, 12126, 133, 0, 29, "Subsubsection",ExpressionUUID->"9b48e21f-6439-4560-9947-44742395f378"],
Cell[CellGroupData[{
Cell[489530, 12130, 122, 1, 30, "Input",ExpressionUUID->"24f936d2-86d6-4d74-b05f-d44e2af80435"],
Cell[489655, 12133, 12422, 298, 95, "Output",ExpressionUUID->"8c0b9bc9-4ecd-41dc-bfa6-ca21fe5789e6"]
}, Open  ]],
Cell[502092, 12434, 168, 3, 35, "Text",ExpressionUUID->"570dc34f-af15-4716-a563-d211b013047a"],
Cell[CellGroupData[{
Cell[502285, 12441, 1087, 32, 52, "Input",ExpressionUUID->"bfddd506-3a0e-43f3-8731-5b738e5b78db"],
Cell[503375, 12475, 11953, 268, 99, "Output",ExpressionUUID->"5008adfe-cca1-4503-a2b4-06c9aa5f06cf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[515365, 12748, 165, 3, 30, "Input",ExpressionUUID->"38083ec1-97a6-4b35-b232-e1aef210eb45"],
Cell[515533, 12753, 10345, 210, 62, "Output",ExpressionUUID->"019ea727-589f-424a-8da7-c923672aa48f"]
}, Open  ]],
Cell[525893, 12966, 171, 4, 35, "Text",ExpressionUUID->"e1436a1e-c952-4385-8193-9428467cfd32"],
Cell[CellGroupData[{
Cell[526089, 12974, 178, 3, 52, "Input",ExpressionUUID->"f2050765-ab42-448f-882a-f77b8ede984d"],
Cell[526270, 12979, 317, 9, 34, "Output",ExpressionUUID->"b3d3f9d6-6f46-4c62-a8d1-ab42a764e309"],
Cell[526590, 12990, 571, 17, 76, "Output",ExpressionUUID->"a0cd9af1-4cce-4188-aa78-a6804d59d58a"]
}, Open  ]],
Cell[527176, 13010, 146, 3, 30, "Input",ExpressionUUID->"dc352312-54ae-453a-9caa-e0010386ac50"]
}, Closed]],
Cell[CellGroupData[{
Cell[527359, 13018, 129, 0, 29, "Subsubsection",ExpressionUUID->"034e0583-0a75-4732-b69e-8499b17750c8"],
Cell[CellGroupData[{
Cell[527513, 13022, 118, 1, 30, "Input",ExpressionUUID->"7bebd2cd-a426-4419-81a0-fc898a1d36d3"],
Cell[527634, 13025, 30115, 643, 119, "Output",ExpressionUUID->"424901bd-15a6-45b9-84c6-735f5354b252"]
}, Open  ]],
Cell[557764, 13671, 203, 3, 35, "Text",ExpressionUUID->"778669e6-4647-4539-9b18-92fc8d8c0230"],
Cell[CellGroupData[{
Cell[557992, 13678, 843, 25, 32, "Input",ExpressionUUID->"96113ed0-eb30-469a-8af6-f6983c131080"],
Cell[558838, 13705, 872, 28, 34, "Output",ExpressionUUID->"c73ac245-7eb5-4db9-b88b-4b482c6d038b"]
}, Open  ]],
Cell[559725, 13736, 337, 7, 35, "Text",ExpressionUUID->"6b95fc73-ea68-4e5c-8042-3479f9037ed4"],
Cell[CellGroupData[{
Cell[560087, 13747, 435, 12, 30, "Input",ExpressionUUID->"0600415f-3554-44fa-8e45-444486404896"],
Cell[560525, 13761, 791, 25, 34, "Output",ExpressionUUID->"47632ef2-2045-4fab-bd33-c3bf3db3868a"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[561365, 13792, 123, 0, 29, "Subsubsection",ExpressionUUID->"ea23605b-8797-4bf4-bd70-bef40fcce30f"],
Cell[CellGroupData[{
Cell[561513, 13796, 112, 1, 30, "Input",ExpressionUUID->"a87348bc-ea6c-473a-b600-ab2b53601bc8"],
Cell[561628, 13799, 32788, 731, 95, "Output",ExpressionUUID->"6a2cd6a8-bb8a-49a3-bd91-b9d7a67fd508"]
}, Open  ]],
Cell[CellGroupData[{
Cell[594453, 14535, 769, 23, 30, "Input",ExpressionUUID->"8ef4d691-2118-4e1f-876e-83bfb1d13ce7"],
Cell[595225, 14560, 10070, 225, 125, "Output",ExpressionUUID->"8fa0be89-db6c-4369-a416-5b7c50eaf31f"]
}, Open  ]],
Cell[605310, 14788, 171, 3, 35, "Text",ExpressionUUID->"8e587c58-d108-43ee-b383-8e8a6368e53d"],
Cell[CellGroupData[{
Cell[605506, 14795, 117, 1, 30, "Input",ExpressionUUID->"3021c92c-5a13-4246-886d-d95ffcdd7377"],
Cell[605626, 14798, 83, 0, 34, "Output",ExpressionUUID->"495d697c-0847-4a55-b44b-fe7d7e9b8fdc"]
}, Open  ]],
Cell[605724, 14801, 328, 7, 35, "Text",ExpressionUUID->"e6f39d98-5287-44cd-a815-d7ca446a838a"],
Cell[CellGroupData[{
Cell[606077, 14812, 120, 1, 30, "Input",ExpressionUUID->"3cc7fcdf-9fdf-4257-8ef3-a9110fe616a2"],
Cell[606200, 14815, 83, 0, 34, "Output",ExpressionUUID->"bf4cc161-c31d-4fa5-a783-892241807914"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[606332, 14821, 131, 0, 29, "Subsubsection",ExpressionUUID->"dca2b7d5-f65e-46b7-b6ee-466e2264b060"],
Cell[CellGroupData[{
Cell[606488, 14825, 120, 1, 30, "Input",ExpressionUUID->"2498ef0c-0b72-45c1-8b6f-2548f48c73ab"],
Cell[606611, 14828, 15159, 358, 95, "Output",ExpressionUUID->"66ea1f66-923b-4260-9f08-df289961df69"]
}, Open  ]],
Cell[CellGroupData[{
Cell[621807, 15191, 777, 23, 30, "Input",ExpressionUUID->"2cfe824c-f0a1-4246-a16e-ce0c9764ef9e"],
Cell[622587, 15216, 128, 2, 34, "Output",ExpressionUUID->"8bc9f844-e3e0-4009-a441-69d5eb20f910"]
}, Open  ]],
Cell[622730, 15221, 218, 4, 35, "Text",ExpressionUUID->"b6cac220-48ab-46f9-82b5-012302f15fa5"],
Cell[CellGroupData[{
Cell[622973, 15229, 527, 16, 30, "Input",ExpressionUUID->"fbb1a6e4-c53e-4660-bb78-252d610b9d39"],
Cell[623503, 15247, 528, 16, 34, "Output",ExpressionUUID->"c7ae6a7d-c836-4685-a6b3-9c260b51b7ff"]
}, Open  ]],
Cell[624046, 15266, 174, 4, 35, "Text",ExpressionUUID->"ef6a23d0-5fb5-4d34-b9a3-776889029783"],
Cell[CellGroupData[{
Cell[624245, 15274, 634, 19, 30, "Input",ExpressionUUID->"87daa88c-1ee6-43f5-812e-a730c4cafae5"],
Cell[624882, 15295, 128, 2, 34, "Output",ExpressionUUID->"999b6268-982a-4892-a4a6-3bf8e0e359bc"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[625059, 15303, 126, 0, 29, "Subsubsection",ExpressionUUID->"f46ad575-685f-4561-a871-a493f97df26e"],
Cell[CellGroupData[{
Cell[625210, 15307, 115, 1, 30, "Input",ExpressionUUID->"706e438e-a423-4bd3-af42-63b32558083e"],
Cell[625328, 15310, 62029, 1285, 95, "Output",ExpressionUUID->"31656271-6326-4a7d-a926-5d2923259d50"]
}, Open  ]],
Cell[687372, 16598, 412, 12, 35, "Text",ExpressionUUID->"9fccbf90-cf44-4aa3-985e-08945557582e"],
Cell[CellGroupData[{
Cell[687809, 16614, 1489, 42, 94, "Input",ExpressionUUID->"0169e122-a23f-40b8-ae0f-6069406166d9"],
Cell[689301, 16658, 14614, 324, 129, "Output",ExpressionUUID->"55b22f33-ce2b-4746-9e9f-e0b52840f072"],
Cell[703918, 16984, 11424, 258, 187, "Output",ExpressionUUID->"4efc9054-7121-4bf4-a017-9588de548076"]
}, Open  ]],
Cell[CellGroupData[{
Cell[715379, 17247, 1063, 30, 94, "Input",ExpressionUUID->"e534e932-80d2-43e6-a0e2-19a6a6304069"],
Cell[716445, 17279, 10954, 249, 191, "Output",ExpressionUUID->"35df49fa-7909-448a-9617-6006f6948a39"],
Cell[727402, 17530, 7103, 165, 83, "Output",ExpressionUUID->"1bf1dbd4-ba21-4a0f-9274-5d9f5565b816"]
}, Open  ]],
Cell[734520, 17698, 155, 3, 35, "Text",ExpressionUUID->"97ee25cb-79e0-47fe-937a-c72531be6aa3"],
Cell[CellGroupData[{
Cell[734700, 17705, 1239, 36, 94, "Input",ExpressionUUID->"52f21e1b-7e2f-4537-b0d9-6cdbf663ad6d"],
Cell[735942, 17743, 13683, 305, 310, "Output",ExpressionUUID->"db59b4ef-e78d-4012-99b3-fc69e47e3868"],
Cell[749628, 18050, 11522, 259, 187, "Output",ExpressionUUID->"4bbf7b2a-8747-4f7a-b692-2b7861af3d4d"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[761199, 18315, 132, 0, 29, "Subsubsection",ExpressionUUID->"8ddc4c2a-6139-408d-81a7-e55c05e6b113"],
Cell[CellGroupData[{
Cell[761356, 18319, 121, 1, 30, "Input",ExpressionUUID->"cae2d5c3-7755-460c-98ea-79c1eecf4840"],
Cell[761480, 18322, 15148, 360, 95, "Output",ExpressionUUID->"01d8960e-6e76-49ee-86d0-1932b401b16e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[776665, 18687, 778, 23, 30, "Input",ExpressionUUID->"48c7f847-af77-484e-9ec9-e2543f53af1a"],
Cell[777446, 18712, 151, 3, 34, "Output",ExpressionUUID->"4f4ec6a0-f0b7-4ebd-8d67-562391cfb512"]
}, Open  ]],
Cell[777612, 18718, 150, 2, 35, "Text",ExpressionUUID->"640d86eb-2677-4558-b010-c3aaf9b70885"],
Cell[CellGroupData[{
Cell[777787, 18724, 628, 19, 30, "Input",ExpressionUUID->"cf230374-7ab5-43ec-b0b1-d33ee7551e7c"],
Cell[778418, 18745, 128, 2, 34, "Output",ExpressionUUID->"cc271a56-0623-4085-8fb5-6993ff89d4d5"]
}, Open  ]],
Cell[778561, 18750, 338, 5, 58, "Text",ExpressionUUID->"76e47816-cd06-4df7-b1c0-ed33f4d09dd6"],
Cell[CellGroupData[{
Cell[778924, 18759, 736, 21, 32, "Input",ExpressionUUID->"8b345189-2218-46b7-a25f-ab604089add4"],
Cell[779663, 18782, 116, 1, 34, "Output",ExpressionUUID->"0fe760e1-d3e2-442c-9bc8-4c3367e7e860"]
}, Open  ]],
Cell[779794, 18786, 443, 7, 58, "Text",ExpressionUUID->"93d83f9a-b569-4e78-b303-102313eabde4"],
Cell[CellGroupData[{
Cell[780262, 18797, 559, 15, 30, "Input",ExpressionUUID->"45e9965b-900a-4e2f-9b8e-8fa79d6e689c"],
Cell[780824, 18814, 151, 3, 34, "Output",ExpressionUUID->"537f568c-92e4-42c4-9716-a0db5c1ce110"]
}, Open  ]],
Cell[780990, 18820, 237, 4, 35, "Text",ExpressionUUID->"af0b9fee-df4f-466e-a12a-573aefcd49b8"],
Cell[CellGroupData[{
Cell[781252, 18828, 532, 14, 30, "Input",ExpressionUUID->"e7d31a89-fe6e-4dd5-ad0a-468e5c146983"],
Cell[781787, 18844, 116, 1, 34, "Output",ExpressionUUID->"502973be-86bf-4a19-952e-93345af1fbd6"]
}, Open  ]],
Cell[781918, 18848, 230, 4, 35, "Text",ExpressionUUID->"977e4a62-8c8e-4783-8f54-d06ba5107387"],
Cell[CellGroupData[{
Cell[782173, 18856, 528, 16, 30, "Input",ExpressionUUID->"91c7ca46-1f40-48a0-9050-dbe4c973155b"],
Cell[782704, 18874, 146, 3, 34, "Output",ExpressionUUID->"02954fa7-a1f6-4ce3-b689-3811abdddd64"]
}, Open  ]],
Cell[782865, 18880, 272, 5, 35, "Text",ExpressionUUID->"3ecedb6f-922d-4cdc-b90d-aebf5d204b4e"],
Cell[CellGroupData[{
Cell[783162, 18889, 482, 13, 32, "Input",ExpressionUUID->"34e5f86d-0f35-4172-abc6-d94a60c4baf3"],
Cell[783647, 18904, 299, 6, 24, "Message",ExpressionUUID->"06cb95d4-a301-4d90-b030-b33221f4c262"],
Cell[783949, 18912, 483, 13, 36, "Output",ExpressionUUID->"408eafa3-f819-4290-8718-6044492db9c5"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[784481, 18931, 129, 0, 29, "Subsubsection",ExpressionUUID->"21f17e7b-02b1-4f28-ae40-40f71f3b6e55"],
Cell[CellGroupData[{
Cell[784635, 18935, 118, 1, 30, "Input",ExpressionUUID->"90b58b6f-0691-4c69-adf7-ad344ec4d01f"],
Cell[784756, 18938, 13815, 336, 95, "Output",ExpressionUUID->"bef07f9f-cb3d-4c42-b0c4-7dd2bc2be8db"]
}, Open  ]],
Cell[CellGroupData[{
Cell[798608, 19279, 775, 23, 30, "Input",ExpressionUUID->"9f10e2c6-c7c6-4285-a23e-f67ad9ccae88"],
Cell[799386, 19304, 211, 5, 34, "Output",ExpressionUUID->"fd85ca2f-df1f-4c21-9eca-900a7131ffb0"]
}, Open  ]],
Cell[799612, 19312, 142, 2, 35, "Text",ExpressionUUID->"da4409cb-fb7a-43e7-af76-2a8abe0ededf"],
Cell[CellGroupData[{
Cell[799779, 19318, 816, 24, 30, "Input",ExpressionUUID->"06a3af3a-f3bf-476e-a818-415ffcc645d3"],
Cell[800598, 19344, 6148, 128, 62, "Output",ExpressionUUID->"f621307a-adb4-40c3-b04b-74c503c7f97c"]
}, Open  ]],
Cell[806761, 19475, 204, 4, 35, "Text",ExpressionUUID->"4ec0c993-bc0b-409f-adbc-ebc32b9bd11b"],
Cell[CellGroupData[{
Cell[806990, 19483, 625, 19, 30, "Input",ExpressionUUID->"5c6ce4c1-0728-44b8-9de0-2d33bc8ab841"],
Cell[807618, 19504, 100, 1, 34, "Output",ExpressionUUID->"ec4e7e38-5daa-484f-9637-a74ec973ac64"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[807767, 19511, 125, 0, 29, "Subsubsection",ExpressionUUID->"566b4614-90c3-4f69-9cdf-5cad9112da44"],
Cell[CellGroupData[{
Cell[807917, 19515, 114, 1, 30, "Input",ExpressionUUID->"bf596cbe-2b8f-4a31-bc83-e918a1445f75"],
Cell[808034, 19518, 35312, 748, 119, "Output",ExpressionUUID->"26d9ddcd-6772-44d5-898b-0e20b5495287"]
}, Open  ]],
Cell[CellGroupData[{
Cell[843383, 20271, 1251, 38, 30, "Input",ExpressionUUID->"28386c1d-ac2a-4fac-9580-3f8ad0cb1812"],
Cell[844637, 20311, 10652, 233, 125, "Output",ExpressionUUID->"8652b0eb-f0d5-4bf8-aee9-2146568506f5"]
}, Open  ]],
Cell[855304, 20547, 228, 4, 35, "Text",ExpressionUUID->"4802a7c1-89dc-4f83-8c6f-957566655432"],
Cell[CellGroupData[{
Cell[855557, 20555, 1303, 39, 52, "Input",ExpressionUUID->"194c5323-9f2b-4363-b80d-321639e63e1c"],
Cell[856863, 20596, 18281, 395, 348, "Output",ExpressionUUID->"5bfdc02d-d431-4eac-a32e-5d777e147878"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[875193, 20997, 119, 0, 29, "Subsubsection",ExpressionUUID->"666158a3-d23b-4e92-b6f8-3429db8c8e31"],
Cell[CellGroupData[{
Cell[875337, 21001, 108, 1, 30, "Input",ExpressionUUID->"9f0a936a-3c13-4e8a-b6bf-94c45b504451"],
Cell[875448, 21004, 15611, 369, 95, "Output",ExpressionUUID->"8b65ab92-14e6-4998-894a-dbdb846fc384"]
}, Open  ]],
Cell[CellGroupData[{
Cell[891096, 21378, 615, 19, 30, "Input",ExpressionUUID->"6d4d1c10-1057-477c-b6b9-298d5b4b53c6"],
Cell[891714, 21399, 86, 0, 34, "Output",ExpressionUUID->"a1e72b23-4ead-4986-a206-227ded31dd5d"]
}, Open  ]],
Cell[891815, 21402, 156, 2, 35, "Text",ExpressionUUID->"66086fc1-48cd-459e-847b-5ca533cd212e"],
Cell[CellGroupData[{
Cell[891996, 21408, 615, 19, 30, "Input",ExpressionUUID->"23cf5dd8-b8d8-4492-911e-a8c360530388"],
Cell[892614, 21429, 87, 0, 34, "Output",ExpressionUUID->"ac29e90e-3ab6-443f-a9ea-b4c049b7c87e"]
}, Open  ]],
Cell[892716, 21432, 151, 4, 35, "Text",ExpressionUUID->"264373a0-eea3-4a5c-8955-81759cf681db"],
Cell[CellGroupData[{
Cell[892892, 21440, 327, 9, 32, "Input",ExpressionUUID->"b2c07b0c-854f-497a-a926-c83a1b922441"],
Cell[893222, 21451, 87, 0, 34, "Output",ExpressionUUID->"f1205fd9-1bed-4146-b7ee-9ea0a67e8f76"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[893358, 21457, 125, 0, 29, "Subsubsection",ExpressionUUID->"0b2e5af6-d1b4-40be-b40d-5202033dcb46"],
Cell[CellGroupData[{
Cell[893508, 21461, 114, 1, 30, "Input",ExpressionUUID->"b0e2a9e9-b308-40c3-a401-0eb14aa6efb6"],
Cell[893625, 21464, 46224, 956, 95, "Output",ExpressionUUID->"6921f9ab-ebcc-4e35-865b-66f77d092754"]
}, Open  ]],
Cell[939864, 22423, 170, 3, 35, "Text",ExpressionUUID->"fd1084a4-3960-4eac-bd2b-86a841d9f814"],
Cell[CellGroupData[{
Cell[940059, 22430, 1190, 34, 94, "Input",ExpressionUUID->"0c11da5e-556c-4305-a6aa-072c354cd089"],
Cell[941252, 22466, 83, 0, 34, "Output",ExpressionUUID->"71d03c30-d88e-4e40-b162-5aaf3d25af44"],
Cell[941338, 22468, 83, 0, 34, "Output",ExpressionUUID->"b3661eef-49bf-4829-beac-1a3d0a06d75a"]
}, Open  ]],
Cell[941436, 22471, 161, 3, 35, "Text",ExpressionUUID->"f4c69851-8e0f-41a3-a43d-e989d4c9de71"],
Cell[CellGroupData[{
Cell[941622, 22478, 1440, 41, 94, "Input",ExpressionUUID->"6989bd30-3b36-4761-8ff1-e04a0c368d3c"],
Cell[943065, 22521, 83, 0, 34, "Output",ExpressionUUID->"cc631a48-d7f2-4f3c-8cf2-51c6494b6e8a"],
Cell[943151, 22523, 83, 0, 34, "Output",ExpressionUUID->"2d714e84-04b2-40bd-b912-83e11fadfeb9"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[943283, 22529, 128, 0, 29, "Subsubsection",ExpressionUUID->"9a553607-fbdf-4b78-917c-5bc53f37ddcb"],
Cell[CellGroupData[{
Cell[943436, 22533, 117, 1, 30, "Input",ExpressionUUID->"90074494-18d3-47b5-88ad-394fea657209"],
Cell[943556, 22536, 12053, 294, 95, "Output",ExpressionUUID->"714a7abc-5271-4f98-a8fc-40ea6a0c4298"]
}, Open  ]],
Cell[CellGroupData[{
Cell[955646, 22835, 774, 23, 30, "Input",ExpressionUUID->"3fb5409e-d725-49a0-bb54-3fc9ffe9540f"],
Cell[956423, 22860, 83, 0, 34, "Output",ExpressionUUID->"f993a1fd-9a23-402f-9106-0f93fda21185"]
}, Open  ]],
Cell[956521, 22863, 116, 0, 35, "Text",ExpressionUUID->"efa3c3e9-bdb1-4ffe-86ad-585054b8314e"],
Cell[CellGroupData[{
Cell[956662, 22867, 479, 14, 32, "Input",ExpressionUUID->"c3de7c83-1ea9-4943-b948-216cdacebf1e"],
Cell[957144, 22883, 83, 0, 34, "Output",ExpressionUUID->"60c00abd-9177-42d0-adb1-0b613c48c2f0"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[957276, 22889, 127, 0, 29, "Subsubsection",ExpressionUUID->"e2008761-7c57-4727-a1d7-030919615e59"],
Cell[CellGroupData[{
Cell[957428, 22893, 116, 1, 30, "Input",ExpressionUUID->"bfbc4d1d-8de6-4141-9f15-a55e49864862"],
Cell[957547, 22896, 12296, 300, 95, "Output",ExpressionUUID->"e42c7111-76a5-40f0-a486-a9bbcd219a1f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[969880, 23201, 773, 23, 30, "Input",ExpressionUUID->"2409eedf-d3cd-447c-bd6e-574cfc9fa1ad"],
Cell[970656, 23226, 128, 2, 34, "Output",ExpressionUUID->"259303dc-65cd-4157-97da-314d0d87f663"]
}, Open  ]],
Cell[970799, 23231, 103, 0, 35, "Text",ExpressionUUID->"6ff72ff5-4cc8-42d3-95e1-4ecd90836954"],
Cell[CellGroupData[{
Cell[970927, 23235, 478, 14, 32, "Input",ExpressionUUID->"6b065b32-ba32-4dc7-9266-25e394075b63"],
Cell[971408, 23251, 128, 2, 34, "Output",ExpressionUUID->"30d4e06d-386e-4339-83eb-1e26bad6bc21"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[971585, 23259, 118, 0, 29, "Subsubsection",ExpressionUUID->"e6cd527a-3146-482a-b72b-898292889367"],
Cell[CellGroupData[{
Cell[971728, 23263, 107, 1, 30, "Input",ExpressionUUID->"084a0083-7f8a-4789-ae5b-e00d486df897"],
Cell[971838, 23266, 12683, 307, 95, "Output",ExpressionUUID->"077be775-c09f-4596-8841-c25a2932d20d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[984558, 23578, 235, 6, 30, "Input",ExpressionUUID->"fcc69194-fab4-48b1-b671-06dd51b01991"],
Cell[984796, 23586, 449, 8, 34, "Output",ExpressionUUID->"b8c935f9-6079-41e1-96cb-bcde51a7f24c"]
}, Open  ]],
Cell[985260, 23597, 156, 4, 35, "Text",ExpressionUUID->"5b15fdef-c402-403a-a278-e7b0d791d42d"],
Cell[CellGroupData[{
Cell[985441, 23605, 193, 4, 30, "Input",ExpressionUUID->"b816e291-fc21-48ab-9bc9-f71acb8f7ea6"],
Cell[985637, 23611, 1051, 31, 34, "Output",ExpressionUUID->"ef372e57-cae1-4c71-8fc6-9235dc43cc15"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[986737, 23648, 122, 0, 29, "Subsubsection",ExpressionUUID->"3895d377-11c2-4083-b441-ee99fea09754"],
Cell[CellGroupData[{
Cell[986884, 23652, 135, 3, 30, "Input",ExpressionUUID->"88892b9c-ff23-4781-b25e-7d5d7476a785"],
Cell[987022, 23657, 15251, 349, 95, "Output",ExpressionUUID->"e41d0a73-7fe1-4c44-ab4c-1c56bbe438c6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1002310, 24011, 284, 7, 30, "Input",ExpressionUUID->"c7999442-90df-4d74-b922-9b08fb62945f"],
Cell[1002597, 24020, 402, 12, 34, "Output",ExpressionUUID->"91a758a5-3a22-4811-8730-263d54bfd1d2"]
}, Open  ]],
Cell[1003014, 24035, 181, 3, 35, "Text",ExpressionUUID->"0d982386-43c3-4a29-ac37-9e50964581d4"],
Cell[CellGroupData[{
Cell[1003220, 24042, 570, 18, 57, "Input",ExpressionUUID->"4312047a-41f7-4ca5-bcd8-49a4fb694169"],
Cell[1003793, 24062, 3290, 120, 56, "Output",ExpressionUUID->"537d7a03-ee0c-414c-9f53-fd9c6114a7c2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1007120, 24187, 527, 15, 33, "Input",ExpressionUUID->"8aa1a91b-c65c-4dfb-9987-f6bfa0eb67c2"],
Cell[1007650, 24204, 3290, 120, 56, "Output",ExpressionUUID->"06a79119-f8d3-4e5b-906c-56b0baf9206f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1010977, 24329, 112, 1, 30, "Input",ExpressionUUID->"14c2c9f9-02ed-4a6f-94e0-4f10407c3bc5"],
Cell[1011092, 24332, 86, 0, 34, "Output",ExpressionUUID->"91f033ad-bf3d-49e4-8744-cbe6b5804298"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1011227, 24338, 127, 0, 29, "Subsubsection",ExpressionUUID->"68a3a6a1-f30c-4d13-a98c-463d92f9a1f0"],
Cell[CellGroupData[{
Cell[1011379, 24342, 116, 1, 30, "Input",ExpressionUUID->"b8eaebad-2d64-4159-8a7b-b198d0d033b7"],
Cell[1011498, 24345, 16016, 376, 95, "Output",ExpressionUUID->"5781b221-5532-43ce-b491-13b286167b2e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1027551, 24726, 623, 19, 30, "Input",ExpressionUUID->"7ba4513f-1a8a-4d59-9348-8ac061e0cd62"],
Cell[1028177, 24747, 86, 0, 34, "Output",ExpressionUUID->"5620a612-76e7-4f89-9407-4e66f6d13a91"]
}, Open  ]],
Cell[1028278, 24750, 267, 6, 35, "Text",ExpressionUUID->"8914f406-c989-48f7-8b33-968c15383805"],
Cell[CellGroupData[{
Cell[1028570, 24760, 523, 16, 30, "Input",ExpressionUUID->"4767d844-5171-4f0e-be6c-8ee581040c08"],
Cell[1029096, 24778, 87, 0, 34, "Output",ExpressionUUID->"d41f7442-5977-4519-a083-6abc1813c262"]
}, Open  ]],
Cell[1029198, 24781, 221, 3, 35, "Text",ExpressionUUID->"79e3471f-2974-4919-b523-29602923089e"],
Cell[CellGroupData[{
Cell[1029444, 24788, 423, 13, 30, "Input",ExpressionUUID->"42355484-4513-4d32-8424-7e8505d36d4b"],
Cell[1029870, 24803, 86, 0, 34, "Output",ExpressionUUID->"60512f00-f025-40aa-b3b1-e5e2cddb9c45"]
}, Open  ]],
Cell[1029971, 24806, 226, 6, 35, "Text",ExpressionUUID->"d09a6535-1e06-4f0d-8d66-0a8502e6dfc9"],
Cell[CellGroupData[{
Cell[1030222, 24816, 478, 14, 32, "Input",ExpressionUUID->"5fcf3c51-5d8b-41fe-8141-6c9383305afb"],
Cell[1030703, 24832, 290, 6, 24, "Message",ExpressionUUID->"8e89824c-d649-47f8-84c9-c0d2e64abc83"],
Cell[1030996, 24840, 87, 0, 34, "Output",ExpressionUUID->"a7b493cb-01f3-4185-852f-cdc661d18d1a"]
}, Open  ]],
Cell[1031098, 24843, 174, 4, 35, "Text",ExpressionUUID->"7adee4d3-82de-4718-ae65-0927dbec248d"],
Cell[CellGroupData[{
Cell[1031297, 24851, 583, 17, 32, "Input",ExpressionUUID->"5f888e27-20fc-46e4-8da1-c798c4ffca1a"],
Cell[1031883, 24870, 86, 0, 34, "Output",ExpressionUUID->"8b3f7ffc-5a5e-46cf-bd8f-e9c1c6df080e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1032006, 24875, 848, 25, 32, "Input",ExpressionUUID->"c6ab2e50-cf73-4e18-8a3a-f0ecb46eb429"],
Cell[1032857, 24902, 86, 0, 34, "Output",ExpressionUUID->"3f745a4c-3771-4d91-9e35-87400fa4e53e"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1032992, 24908, 129, 0, 29, "Subsubsection",ExpressionUUID->"1df66e86-e669-45da-9331-abe1686cce8d"],
Cell[CellGroupData[{
Cell[1033146, 24912, 118, 1, 30, "Input",ExpressionUUID->"bdfcedd8-8f7b-4ae4-8e71-14effc299a0b"],
Cell[1033267, 24915, 20665, 465, 119, "Output",ExpressionUUID->"7ae9714c-b546-49a8-aea1-01f0a0654a33"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1053969, 25385, 269, 7, 47, "Input",ExpressionUUID->"352ec906-064e-4069-8eee-acbe80466a52"],
Cell[1054241, 25394, 86, 0, 34, "Output",ExpressionUUID->"f51bb7fb-8a3f-4d7c-a261-c77e881c7db1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1054364, 25399, 394, 11, 47, "Input",ExpressionUUID->"cb42df8e-38d2-4ce6-bf5d-ff78360dc213"],
Cell[1054761, 25412, 238, 5, 34, "Output",ExpressionUUID->"c0e57e03-1db3-48e1-a414-5639d200dc4f"]
}, Open  ]],
Cell[1055014, 25420, 154, 2, 35, "Text",ExpressionUUID->"46dcabe2-d81a-4347-8dfb-1e95b4b815e8"],
Cell[CellGroupData[{
Cell[1055193, 25426, 434, 12, 69, "Input",ExpressionUUID->"ea0b9622-3d5e-471d-9d29-57b8d2372f8a"],
Cell[1055630, 25440, 243, 5, 34, "Output",ExpressionUUID->"7d40c128-242a-4fea-82f8-00a31f8d9ba9"],
Cell[1055876, 25447, 243, 5, 34, "Output",ExpressionUUID->"e38467af-6538-4293-90d1-00f1b5053c8b"]
}, Open  ]],
Cell[1056134, 25455, 183, 3, 35, "Text",ExpressionUUID->"01807f20-e49a-4db6-8c56-c333823f7fb5"],
Cell[CellGroupData[{
Cell[1056342, 25462, 434, 12, 47, "Input",ExpressionUUID->"f0a9d19e-23cf-403f-8509-bbafbab840ee"],
Cell[1056779, 25476, 3171, 90, 77, "Output",ExpressionUUID->"9289263f-10bb-4286-a197-dcb635279a62"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1059999, 25572, 137, 1, 29, "Subsubsection",ExpressionUUID->"5e1b955e-3e1f-41a4-b12d-615975328f89"],
Cell[CellGroupData[{
Cell[1060161, 25577, 124, 1, 30, "Input",ExpressionUUID->"e2f3c42f-200f-4828-8c8d-1d6fe63e236d"],
Cell[1060288, 25580, 18269, 419, 95, "Output",ExpressionUUID->"51c468e6-13d3-4171-9bfd-a5f4a1a56904"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1078594, 26004, 200, 4, 30, "Input",ExpressionUUID->"604360a2-f11c-4c25-98fb-4f0c9c6689bc"],
Cell[1078797, 26010, 314, 7, 55, "Output",ExpressionUUID->"03e41964-ef2e-4749-9563-2291dd03237c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1079148, 26022, 200, 4, 30, "Input",ExpressionUUID->"7b5acf6d-f2a5-4695-a5b4-a00ef02f90ea"],
Cell[1079351, 26028, 343, 9, 55, "Output",ExpressionUUID->"f8caeb67-f9e0-467f-8e8e-dbd172917e4d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1079731, 26042, 198, 4, 30, "Input",ExpressionUUID->"b43dabff-a79a-44a7-97d3-3ee6b605e594"],
Cell[1079932, 26048, 1634, 37, 60, "Output",ExpressionUUID->"e391c2d6-8f95-4d1d-986f-32b73363a192"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1081615, 26091, 132, 0, 29, "Subsubsection",ExpressionUUID->"52e02f2a-9c78-4643-b26b-6a225d62e0ec"],
Cell[CellGroupData[{
Cell[1081772, 26095, 121, 1, 30, "Input",ExpressionUUID->"a684d106-4a30-40c4-91e4-668c630690ba"],
Cell[1081896, 26098, 15855, 374, 95, "Output",ExpressionUUID->"e0c60b13-adc1-4cc0-a74f-573b70b92faf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1097788, 26477, 628, 19, 30, "Input",ExpressionUUID->"4c839cba-65cd-4a44-bfd3-3e574541a9b0"],
Cell[1098419, 26498, 86, 0, 34, "Output",ExpressionUUID->"ebeaa52e-8416-491c-bb65-b974702e5055"]
}, Open  ]],
Cell[1098520, 26501, 267, 6, 35, "Text",ExpressionUUID->"bd9bdae1-b380-4af0-907e-90d54862e512"],
Cell[CellGroupData[{
Cell[1098812, 26511, 528, 16, 30, "Input",ExpressionUUID->"2e5ae8f9-46db-4be0-8a0a-dfb7f9938070"],
Cell[1099343, 26529, 87, 0, 34, "Output",ExpressionUUID->"2e94614a-de87-4789-bac1-dd1c196577d5"]
}, Open  ]],
Cell[1099445, 26532, 226, 3, 35, "Text",ExpressionUUID->"d46941ca-0161-45a0-a4e6-71a798a7a11a"],
Cell[CellGroupData[{
Cell[1099696, 26539, 428, 13, 30, "Input",ExpressionUUID->"a5882090-0ff6-48e7-b8af-5beb10979047"],
Cell[1100127, 26554, 86, 0, 34, "Output",ExpressionUUID->"bcfefc27-32d8-4084-a43f-27696404ab41"]
}, Open  ]],
Cell[1100228, 26557, 231, 6, 35, "Text",ExpressionUUID->"9046bdda-b0e3-4305-bb41-5af820dd33d0"],
Cell[CellGroupData[{
Cell[1100484, 26567, 483, 14, 32, "Input",ExpressionUUID->"9e28ba5a-192e-42f9-936e-03a619193a4d"],
Cell[1100970, 26583, 300, 6, 24, "Message",ExpressionUUID->"7ef80bc6-4a29-47de-9d21-d1a2890451a2"],
Cell[1101273, 26591, 87, 0, 34, "Output",ExpressionUUID->"7ad555b7-f0a7-4847-8080-0c49de5fc3b9"]
}, Open  ]],
Cell[1101375, 26594, 174, 4, 35, "Text",ExpressionUUID->"8b052f44-e974-4478-905f-2a37e11493f7"],
Cell[CellGroupData[{
Cell[1101574, 26602, 588, 17, 32, "Input",ExpressionUUID->"76c5c2ac-3677-498e-ae77-a6ba8720c0a5"],
Cell[1102165, 26621, 86, 0, 34, "Output",ExpressionUUID->"26bb13ff-c86b-4cd4-908e-d85237d3adbb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1102288, 26626, 853, 25, 32, "Input",ExpressionUUID->"10e92620-6dc4-4826-a252-7a25595eccf1"],
Cell[1103144, 26653, 86, 0, 34, "Output",ExpressionUUID->"8e0417c6-6590-40be-9093-b04201fb3206"]
}, Open  ]],
Cell[1103245, 26656, 128, 0, 35, "Text",ExpressionUUID->"bad04811-22e6-45ea-af86-153a9f47833f"],
Cell[CellGroupData[{
Cell[1103398, 26660, 535, 16, 30, "Input",ExpressionUUID->"a1cdd969-bbdb-4bb0-bbec-62453a832287"],
Cell[1103936, 26678, 87, 0, 34, "Output",ExpressionUUID->"67b9f93c-c350-4220-8dc6-cee49a6c0ce4"]
}, Open  ]],
Cell[1104038, 26681, 254, 4, 35, "Text",ExpressionUUID->"e5da2a0f-c759-4b8c-9922-0e34f7e64da6"],
Cell[CellGroupData[{
Cell[1104317, 26689, 659, 19, 32, "Input",ExpressionUUID->"361be6c2-e70d-4de5-9778-2822521f1551"],
Cell[1104979, 26710, 87, 0, 34, "Output",ExpressionUUID->"2ed34949-4073-4ae4-9a7c-553593ee77ec"]
}, Open  ]],
Cell[1105081, 26713, 171, 3, 35, "Text",ExpressionUUID->"e3149dde-3b68-4c39-96e6-75c402ec2b25"],
Cell[CellGroupData[{
Cell[1105277, 26720, 660, 20, 32, "Input",ExpressionUUID->"e4b77cdf-236c-4e61-8ea7-fb1e75aecbd9"],
Cell[1105940, 26742, 83, 0, 34, "Output",ExpressionUUID->"7b7e38a9-5a4e-41dc-b0ab-46ea09522058"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1106072, 26748, 125, 0, 29, "Subsubsection",ExpressionUUID->"60dc40b3-9cf8-4b81-ac83-cbdad86434f7"],
Cell[CellGroupData[{
Cell[1106222, 26752, 114, 1, 30, "Input",ExpressionUUID->"af6e8712-b486-465f-8d0a-e181bb90c563"],
Cell[1106339, 26755, 23614, 518, 119, "Output",ExpressionUUID->"f7794773-1cfb-43c7-87a4-6c9f57670a62"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1129990, 27278, 289, 8, 50, "Input",ExpressionUUID->"fd8524d6-5813-44e2-9fbf-34a940057b2e"],
Cell[1130282, 27288, 88, 0, 34, "Output",ExpressionUUID->"856236da-9f74-4ea9-8555-584129899bd1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1130407, 27293, 416, 12, 50, "Input",ExpressionUUID->"cad63792-179c-4023-9ee1-0cfa0965cf69"],
Cell[1130826, 27307, 249, 5, 34, "Output",ExpressionUUID->"09265ce3-770b-4ece-ae2e-013817c1edfe"]
}, Open  ]],
Cell[1131090, 27315, 149, 2, 35, "Text",ExpressionUUID->"33609500-f724-4576-9642-210207573316"],
Cell[CellGroupData[{
Cell[1131264, 27321, 577, 18, 75, "Input",ExpressionUUID->"60038cca-29f9-42a9-a545-d3b2e9799fbd"],
Cell[1131844, 27341, 243, 5, 34, "Output",ExpressionUUID->"104bb69e-13d9-4ec5-9df5-67f9217e160a"],
Cell[1132090, 27348, 243, 5, 34, "Output",ExpressionUUID->"d06e55f0-ba86-4f96-89b1-5c9419250099"]
}, Open  ]],
Cell[1132348, 27356, 178, 3, 35, "Text",ExpressionUUID->"22dd23d2-4b18-49c5-83e5-7042759c8716"],
Cell[CellGroupData[{
Cell[1132551, 27363, 600, 18, 51, "Input",ExpressionUUID->"3aca60d1-6b0d-485f-887f-e4d4dd61c45f"],
Cell[1133154, 27383, 3171, 90, 77, "Output",ExpressionUUID->"e2235848-285e-4dbd-8180-3c30f2065962"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1136374, 27479, 131, 0, 29, "Subsubsection",ExpressionUUID->"95d3d5a8-78ac-47fe-ace8-9ea1bbfa1c4d"],
Cell[CellGroupData[{
Cell[1136530, 27483, 120, 1, 30, "Input",ExpressionUUID->"bf1db247-4eaa-4fe0-9e97-46fa3e5373c1"],
Cell[1136653, 27486, 45053, 964, 95, "Output",ExpressionUUID->"63aeed93-d77d-46bc-a389-fffaf0262c59"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1181743, 28455, 196, 4, 30, "Input",ExpressionUUID->"13ab273d-ccca-4124-8306-0cf5b3415422"],
Cell[1181942, 28461, 474, 14, 60, "Output",ExpressionUUID->"50817e74-e206-402c-9dfe-d3fe51688bd9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1182453, 28480, 196, 4, 30, "Input",ExpressionUUID->"2056eadd-85ce-4db6-a20c-7d6144a3e7a7"],
Cell[1182652, 28486, 518, 15, 63, "Output",ExpressionUUID->"017be8bf-4bf0-41ce-b9e1-f5f1a6c407dd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1183207, 28506, 194, 4, 30, "Input",ExpressionUUID->"ae0e99ae-7f3c-4815-821a-c5dce408dc65"],
Cell[1183404, 28512, 642, 18, 57, "Output",ExpressionUUID->"4484a900-902f-458a-87d4-a3770b553665"]
}, Open  ]],
Cell[1184061, 28533, 147, 2, 35, "Text",ExpressionUUID->"61368ccd-c11d-497e-a4d6-9a4a825f1044"],
Cell[CellGroupData[{
Cell[1184233, 28539, 399, 11, 33, "Input",ExpressionUUID->"a5f3c22a-0e40-43c6-8ffd-7068f41d6d4b"],
Cell[1184635, 28552, 482, 14, 62, "Output",ExpressionUUID->"6997d449-d0e3-4722-a21e-4f0e78d81d29"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1185154, 28571, 916, 24, 33, "Input",ExpressionUUID->"e9a1956f-0e35-4db4-a416-f1eeed769dee"],
Cell[1186073, 28597, 722, 20, 64, "Output",ExpressionUUID->"a888cef4-a5dc-4049-90cc-2e120b571df4"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1186844, 28623, 267, 7, 32, "Subsubsection",ExpressionUUID->"875918a0-9833-4ce7-ba19-3205078e7736"],
Cell[CellGroupData[{
Cell[1187136, 28634, 106, 1, 30, "Input",ExpressionUUID->"02087ce3-ebb8-4d94-8e34-e49c31c074df"],
Cell[1187245, 28637, 15081, 347, 119, "Output",ExpressionUUID->"4370a7f5-27de-410a-bc06-b129c7daea60"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1202363, 28989, 254, 7, 30, "Input",ExpressionUUID->"ed8a71b5-2d1a-4699-9fd7-cb695049023a"],
Cell[1202620, 28998, 181, 3, 34, "Output",ExpressionUUID->"b34735ee-0749-48f5-8a50-a4b27b45bd07"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1202838, 29006, 144, 3, 30, "Input",ExpressionUUID->"9dfb93a8-34a1-45c3-a1ff-f809ed803c81"],
Cell[1202985, 29011, 181, 3, 34, "Output",ExpressionUUID->"4095ec1d-9697-4929-bfe0-4de6720ca550"]
}, Open  ]],
Cell[1203181, 29017, 153, 3, 35, "Text",ExpressionUUID->"8eb24b75-f89a-4517-8b5c-f908f5401ec5"],
Cell[CellGroupData[{
Cell[1203359, 29024, 164, 4, 30, "Input",ExpressionUUID->"680c9b25-acb7-47ff-ac1c-850f0ba75112"],
Cell[1203526, 29030, 207, 5, 34, "Output",ExpressionUUID->"bd1173ed-93df-4825-a04b-04df27fef0d3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1203770, 29040, 277, 8, 30, "Input",ExpressionUUID->"67943154-9326-46f9-8963-9b39780534e7"],
Cell[1204050, 29050, 227, 5, 34, "Output",ExpressionUUID->"5ef85561-673d-4b3f-8401-f842b454ac5f"]
}, Open  ]],
Cell[1204292, 29058, 160, 4, 35, "Text",ExpressionUUID->"586826f8-dafe-492f-ad8b-c32af345c74b"],
Cell[CellGroupData[{
Cell[1204477, 29066, 315, 8, 30, "Input",ExpressionUUID->"494f7175-235a-4a35-9f2c-4617b2961a67"],
Cell[1204795, 29076, 86, 0, 34, "Output",ExpressionUUID->"bf982b76-c346-4400-b00c-bcadd99549a6"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1204930, 29082, 287, 7, 32, "Subsubsection",ExpressionUUID->"afaf1c56-c153-4140-8448-3f5b85309547"],
Cell[CellGroupData[{
Cell[1205242, 29093, 107, 1, 30, "Input",ExpressionUUID->"00bbb479-76f0-4d92-8502-a6a1903ad475"],
Cell[1205352, 29096, 31696, 686, 191, "Output",ExpressionUUID->"d42f7ca2-a540-4290-9c9c-8e1473aad9d0"]
}, Open  ]],
Cell[1237063, 29785, 248, 5, 35, "Text",ExpressionUUID->"251beddc-2192-44db-918a-794782fb4a82"],
Cell[CellGroupData[{
Cell[1237336, 29794, 164, 4, 30, "Input",ExpressionUUID->"5735fa84-ccee-47fd-92ff-5b66f4640d1c"],
Cell[1237503, 29800, 207, 5, 34, "Output",ExpressionUUID->"7822341f-692b-425d-a4ec-db9afa47b865"]
}, Open  ]],
Cell[1237725, 29808, 160, 4, 35, "Text",ExpressionUUID->"44bbb765-2ff3-4b1f-bd8f-5a0266297b0c"],
Cell[CellGroupData[{
Cell[1237910, 29816, 295, 8, 30, "Input",ExpressionUUID->"b443ef97-9897-4299-9bcb-73c81d333cea"],
Cell[1238208, 29826, 86, 0, 34, "Output",ExpressionUUID->"d659af08-4b9c-466c-aa2b-9d772e78764a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1238331, 29831, 161, 3, 30, "Input",ExpressionUUID->"cb5c5dfa-ee23-4da3-acec-681ed57d44db"],
Cell[1238495, 29836, 171, 3, 34, "Output",ExpressionUUID->"3fb1dc3d-975c-4d94-97a8-44c3a1939fa6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1238703, 29844, 255, 6, 30, "Input",ExpressionUUID->"31bcd606-498e-4f62-91f2-d79364b7b2ad"],
Cell[1238961, 29852, 86, 0, 34, "Output",ExpressionUUID->"fe2d8f7c-6658-40b9-96f5-677444020180"]
}, Open  ]],
Cell[1239062, 29855, 205, 6, 35, "Text",ExpressionUUID->"7e32c66e-c5f3-4346-ba3f-7b77d7b5d2ef"],
Cell[CellGroupData[{
Cell[1239292, 29865, 146, 3, 30, "Input",ExpressionUUID->"319c85b5-6da0-41e7-b85f-ab94ae9bf647"],
Cell[1239441, 29870, 105, 1, 34, "Output",ExpressionUUID->"03ec8848-cd02-4048-b166-4a264d6340e1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1239583, 29876, 142, 3, 30, "Input",ExpressionUUID->"5a370115-41c6-41ba-a334-0ce04a8940af"],
Cell[1239728, 29881, 100, 1, 34, "Output",ExpressionUUID->"9bf77f6a-2fca-4ab1-9970-5ea3f2f29443"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1239877, 29888, 274, 7, 32, "Subsubsection",ExpressionUUID->"d5168dd9-d6bf-44bd-ae64-5aa4b181e641"],
Cell[CellGroupData[{
Cell[1240176, 29899, 109, 1, 30, "Input",ExpressionUUID->"d8264fb4-e886-4079-8be1-305de71e5908"],
Cell[1240288, 29902, 18560, 412, 119, "Output",ExpressionUUID->"d1afab34-abc1-42c8-8dce-42675578c27a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1258885, 30319, 213, 5, 30, "Input",ExpressionUUID->"ac1fdb0c-c671-417d-8ca0-6fe224a34b5d"],
Cell[1259101, 30326, 83, 0, 34, "Output",ExpressionUUID->"b86c374c-7aa7-4de6-bdf6-99914414449e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1259221, 30331, 223, 5, 30, "Input",ExpressionUUID->"4d91a446-cca5-43e5-9b27-7928a04d0a14"],
Cell[1259447, 30338, 83, 0, 34, "Output",ExpressionUUID->"3e4a123c-f164-4db9-bf6a-250446921fc4"]
}, Open  ]],
Cell[1259545, 30341, 207, 4, 35, "Text",ExpressionUUID->"942c8a48-37f0-4a4e-8a4a-e99e2927555c"],
Cell[CellGroupData[{
Cell[1259777, 30349, 276, 7, 30, "Input",ExpressionUUID->"99a717c4-f1d3-4134-aa9c-3e54a25b47ad"],
Cell[1260056, 30358, 83, 0, 34, "Output",ExpressionUUID->"39e305b7-bd9b-400b-82e0-51595da9536b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1260176, 30363, 290, 7, 30, "Input",ExpressionUUID->"3a96ba39-c82c-4e35-8efa-37d80e8979eb"],
Cell[1260469, 30372, 83, 0, 34, "Output",ExpressionUUID->"013e6986-38c6-4de6-b035-233744158f88"]
}, Open  ]],
Cell[1260567, 30375, 204, 6, 35, "Text",ExpressionUUID->"f66440f6-7305-47fb-a4d4-eace9b2a5a67"],
Cell[CellGroupData[{
Cell[1260796, 30385, 153, 3, 30, "Input",ExpressionUUID->"d4d3bb87-607c-422b-bbd9-d616e9aab561"],
Cell[1260952, 30390, 83, 0, 34, "Output",ExpressionUUID->"cd64df4e-79a3-4e7c-b637-e37a70cd2ce2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1261072, 30395, 154, 3, 30, "Input",ExpressionUUID->"be1cc029-9a52-4132-a2ce-b72cbde75796"],
Cell[1261229, 30400, 83, 0, 34, "Output",ExpressionUUID->"6a2391fa-7592-4ee4-9f39-fd0064701387"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1261361, 30406, 123, 0, 29, "Subsubsection",ExpressionUUID->"32808583-4180-4299-a49d-79ecfc0d2f2a"],
Cell[CellGroupData[{
Cell[1261509, 30410, 112, 1, 30, "Input",ExpressionUUID->"36ebc6b1-a12b-4dab-8730-4d7bd7f64b90"],
Cell[1261624, 30413, 17072, 395, 119, "Output",ExpressionUUID->"82a7a77c-e9e4-4c86-b54a-a798cb028c22"]
}, Open  ]],
Cell[1278711, 30811, 255, 7, 35, "Text",ExpressionUUID->"75c759c5-96f5-461f-80b7-5e11333ee9b1"],
Cell[CellGroupData[{
Cell[1278991, 30822, 340, 9, 33, "Input",ExpressionUUID->"b2d2b48a-eed0-4f98-97b4-395487571975"],
Cell[1279334, 30833, 170, 3, 34, "Output",ExpressionUUID->"6e35dfb9-5c0c-4669-bdad-1d2ec08a84a2"]
}, Open  ]],
Cell[1279519, 30839, 117, 0, 35, "Text",ExpressionUUID->"727c4e74-0349-4e57-b31a-308f6409c928"],
Cell[1279639, 30841, 777, 15, 94, "Input",ExpressionUUID->"37e671ce-6863-4b8a-b3a3-787416e3b638"],
Cell[CellGroupData[{
Cell[1280441, 30860, 176, 4, 30, "Input",ExpressionUUID->"44ae08a4-627b-4e82-8833-704d42028a5d"],
Cell[1280620, 30866, 165, 3, 34, "Output",ExpressionUUID->"d8a21884-99ac-4fda-b3ff-fa450ed1b9bf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1280822, 30874, 458, 12, 30, "Input",ExpressionUUID->"a52810b0-f40a-4f06-9684-2d91008e7e79"],
Cell[1281283, 30888, 9534, 174, 233, "Output",ExpressionUUID->"a6d52ac8-f6cf-4e47-b728-76404c92b9e2"]
}, Open  ]],
Cell[1290832, 31065, 180, 3, 35, "Text",ExpressionUUID->"ec79ccae-c637-4de0-a5cb-16410900e76e"],
Cell[CellGroupData[{
Cell[1291037, 31072, 405, 11, 30, "Input",ExpressionUUID->"7ca83005-3d2e-4c6d-8f8f-211355516752"],
Cell[1291445, 31085, 3702, 79, 247, "Output",ExpressionUUID->"fc54b962-979d-4dc3-a1fa-cd75f88fce41"]
}, Open  ]],
Cell[1295162, 31167, 143, 3, 30, "Input",ExpressionUUID->"bd6aaac0-e357-4a2a-98f1-b82c45c371e4"]
}, Closed]],
Cell[CellGroupData[{
Cell[1295342, 31175, 119, 0, 29, "Subsubsection",ExpressionUUID->"aeb6f77e-ef28-4b37-b60b-c8835eafb1ca"],
Cell[CellGroupData[{
Cell[1295486, 31179, 108, 1, 30, "Input",ExpressionUUID->"0f243e45-0452-4ccc-8994-c2d6c05eded7"],
Cell[1295597, 31182, 15979, 382, 95, "Output",ExpressionUUID->"cfe9a4d6-a20c-4b55-b272-c494bea72f87"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1311613, 31569, 347, 10, 30, "Input",ExpressionUUID->"0b08cc13-b515-4798-b778-c6b30ec8584a"],
Cell[1311963, 31581, 2546, 81, 223, "Output",ExpressionUUID->"b4421bff-19eb-42d4-acf5-5ec765b6c2b5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1314546, 31667, 151, 3, 30, "Input",ExpressionUUID->"fdad8d0a-cad4-4ba7-b8a2-ef1c5bb9f462"],
Cell[1314700, 31672, 705, 18, 38, "Output",ExpressionUUID->"6695e6c4-8916-4396-8c89-fd078a34191a"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1315454, 31696, 119, 0, 29, "Subsubsection",ExpressionUUID->"9924d723-03ec-4c27-881a-8b1c0be622fe"],
Cell[CellGroupData[{
Cell[1315598, 31700, 108, 1, 30, "Input",ExpressionUUID->"92632273-90c4-4673-9d70-f6ae37e1f07d"],
Cell[1315709, 31703, 26886, 614, 119, "Output",ExpressionUUID->"b5d5a524-54bc-4509-bd5b-cda0e797ed22"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1342632, 32322, 203, 5, 33, "Input",ExpressionUUID->"e50769d0-290b-4d71-b224-e1d4c8184ed8"],
Cell[1342838, 32329, 2419, 49, 373, "Output",ExpressionUUID->"d23ea1d2-f0a2-42c9-a1b2-79a3d17e9a55"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1345294, 32383, 226, 5, 30, "Input",ExpressionUUID->"d9508aa2-8437-42e6-bcc0-9a7aca6468d4"],
Cell[1345523, 32390, 2222, 68, 299, "Output",ExpressionUUID->"c5b721ed-5d16-4607-a0d8-e8e9cfd6f35c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1347782, 32463, 215, 5, 30, "Input",ExpressionUUID->"438f68ff-d8ac-42c2-bb46-e1b70b4909fa"],
Cell[1348000, 32470, 4613, 120, 373, "Output",ExpressionUUID->"104d0b61-16ed-4210-ae88-e12f59105fbe"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1352662, 32596, 141, 1, 29, "Subsubsection",ExpressionUUID->"552f135b-4fb9-4929-a3de-e1382a750a2f"],
Cell[CellGroupData[{
Cell[1352828, 32601, 128, 1, 30, "Input",ExpressionUUID->"494c5594-519b-4b3f-84bc-35ef23cf690a"],
Cell[1352959, 32604, 18973, 407, 119, "Output",ExpressionUUID->"255270c9-4e4b-4a65-aba3-c15a13785681"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1371969, 33016, 262, 6, 30, "Input",ExpressionUUID->"c3a208a1-11fa-4bd5-8292-9ccc072115e6"],
Cell[1372234, 33024, 687, 22, 34, "Output",ExpressionUUID->"8b59397c-e590-4ff5-b0a4-11ce672a1c7b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1372958, 33051, 208, 5, 30, "Input",ExpressionUUID->"83c158a1-bebc-4d04-a865-145950ce7249"],
Cell[1373169, 33058, 281, 6, 34, "Output",ExpressionUUID->"7015f364-7f53-4ce8-845e-9f08383a3288"]
}, Open  ]],
Cell[1373465, 33067, 229, 6, 35, "Text",ExpressionUUID->"f151021c-93e6-4703-b376-8acc6a5e791f"],
Cell[CellGroupData[{
Cell[1373719, 33077, 491, 13, 30, "Input",ExpressionUUID->"d26e40db-6e82-4795-a9bf-d6e259ef5b0f"],
Cell[1374213, 33092, 1527, 49, 34, "Output",ExpressionUUID->"75f79ed4-49d0-43ba-a04f-128d46d8f9d2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1375777, 33146, 412, 11, 30, "Input",ExpressionUUID->"84735f3c-14c9-4b77-8cf8-3d9ec1f9da06"],
Cell[1376192, 33159, 1074, 24, 376, "Output",ExpressionUUID->"e374ecd2-7556-4823-aa0e-f7d9b464dbf6"]
}, Open  ]],
Cell[1377281, 33186, 159, 3, 35, "Text",ExpressionUUID->"25807244-35ed-47e7-8c6d-657ab3c92ebd"],
Cell[CellGroupData[{
Cell[1377465, 33193, 146, 2, 30, "Input",ExpressionUUID->"8d4416e2-b5c6-47cb-bd24-00054bff950e"],
Cell[1377614, 33197, 281, 6, 34, "Output",ExpressionUUID->"e05160fd-47bc-4069-a098-b6a8577d1eae"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1377932, 33208, 115, 1, 30, "Input",ExpressionUUID->"c1826f7e-6b6f-4ff5-a1e4-47774e6a488d"],
Cell[1378050, 33211, 8977, 224, 95, "Output",ExpressionUUID->"8bcd87ad-f0d8-4fc1-afc1-f53982df6f39"]
}, Open  ]],
Cell[1387042, 33438, 432, 11, 35, "Text",ExpressionUUID->"2446aae2-e764-41d0-aeb2-9a608701d830"],
Cell[CellGroupData[{
Cell[1387499, 33453, 533, 13, 52, "Input",ExpressionUUID->"bfe98ee5-be36-4fde-8a19-4cdda6b681a8"],
Cell[1388035, 33468, 687, 22, 34, "Output",ExpressionUUID->"e2b05f48-01f9-4a1e-9ac2-dd0ef010d1dd"],
Cell[1388725, 33492, 1285, 43, 34, "Output",ExpressionUUID->"57cb37ce-b273-4e47-93fc-874667c1d27a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1390047, 33540, 118, 1, 30, "Input",ExpressionUUID->"b72acae9-486e-4a46-bdb7-a90f1df97145"],
Cell[1390168, 33543, 10986, 253, 95, "Output",ExpressionUUID->"8ebd3713-7275-4602-a541-91696476665a"]
}, Open  ]],
Cell[1401169, 33799, 284, 5, 35, "Text",ExpressionUUID->"e4ae8198-ad49-43ad-becb-5f8ab85e6a4c"],
Cell[CellGroupData[{
Cell[1401478, 33808, 536, 13, 52, "Input",ExpressionUUID->"a9abe5a7-0062-43e3-bb23-f371c8539148"],
Cell[1402017, 33823, 687, 22, 34, "Output",ExpressionUUID->"06fc18c6-0b36-4a33-a51b-c4b378a1a8ea"],
Cell[1402707, 33847, 795, 25, 34, "Output",ExpressionUUID->"8df72dcc-46a9-4237-94d8-92be33a46d9a"]
}, Open  ]],
Cell[1403517, 33875, 159, 4, 35, "Text",ExpressionUUID->"4d29d71f-24fc-42c3-97cc-18983d66b96b"],
Cell[CellGroupData[{
Cell[1403701, 33883, 437, 11, 30, "Input",ExpressionUUID->"370abb14-d527-42d6-bff3-f2c2003e4384"],
Cell[1404141, 33896, 84, 0, 34, "Output",ExpressionUUID->"bcea2d38-daa8-460d-ac3d-6e170d3d9abe"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1404274, 33902, 140, 1, 29, "Subsubsection",ExpressionUUID->"aed96deb-d3c7-48c1-b7fe-a6ea72715a16"],
Cell[CellGroupData[{
Cell[1404439, 33907, 127, 1, 30, "Input",ExpressionUUID->"8b39c3b1-ab74-455b-9dd8-aae17d2ba931"],
Cell[1404569, 33910, 39703, 812, 143, "Output",ExpressionUUID->"3bf303e8-7a27-41e2-92f8-b578c3a01cc1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1444309, 34727, 288, 7, 30, "Input",ExpressionUUID->"32ade8e7-6c6a-4ad2-8c50-a0adb3ed3586"],
Cell[1444600, 34736, 796, 24, 34, "Output",ExpressionUUID->"77c39be9-10ab-4c5d-af8d-f7474fb0214f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1445433, 34765, 227, 6, 30, "Input",ExpressionUUID->"353795f0-ca55-4fee-88b7-7a2a271c8234"],
Cell[1445663, 34773, 281, 6, 34, "Output",ExpressionUUID->"8feb05b3-ed28-4823-a09b-c233bc5521b2"]
}, Open  ]],
Cell[1445959, 34782, 113, 1, 30, "Input",ExpressionUUID->"27a976a5-2b9e-4414-9f71-f1469fa039ad"],
Cell[1446075, 34785, 229, 6, 35, "Text",ExpressionUUID->"6b91be58-38fb-4500-a618-e8c6ef22fce5"],
Cell[CellGroupData[{
Cell[1446329, 34795, 525, 14, 30, "Input",ExpressionUUID->"4e5e9fcb-c41f-4cea-ab56-e2cbd42f353b"],
Cell[1446857, 34811, 1738, 53, 56, "Output",ExpressionUUID->"4215144b-dd2a-4c88-b284-79f66d086d7a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1448632, 34869, 365, 10, 30, "Input",ExpressionUUID->"c6653512-cae8-411d-a74b-00aeace60369"],
Cell[1449000, 34881, 1074, 24, 376, "Output",ExpressionUUID->"2f631c0b-1069-4f77-ab32-e82f107d9a6f"]
}, Open  ]],
Cell[1450089, 34908, 113, 1, 30, "Input",ExpressionUUID->"cf2363ca-6239-4ce8-8811-00bea40d52c3"],
Cell[1450205, 34911, 224, 5, 35, "Text",ExpressionUUID->"e0f2ae17-8796-4aba-b82f-7b53a47b77c4"],
Cell[CellGroupData[{
Cell[1450454, 34920, 145, 2, 30, "Input",ExpressionUUID->"8c0f0e9b-c720-43aa-8981-042c647e1cb3"],
Cell[1450602, 34924, 281, 6, 34, "Output",ExpressionUUID->"56f11eca-95ef-4349-81cf-21da32670935"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1450932, 34936, 142, 1, 29, "Subsubsection",ExpressionUUID->"f307f14a-4a88-4c0a-a331-c1b752167aad"],
Cell[CellGroupData[{
Cell[1451099, 34941, 129, 1, 30, "Input",ExpressionUUID->"264b63a2-b76e-485a-ab22-765e9cbb03ee"],
Cell[1451231, 34944, 32235, 665, 119, "Output",ExpressionUUID->"f0fdb04e-e401-42d9-89f5-1df0ef4961a8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1483503, 35614, 302, 7, 30, "Input",ExpressionUUID->"594e8f4d-09d4-4262-8776-930e89ef5c4e"],
Cell[1483808, 35623, 686, 21, 34, "Output",ExpressionUUID->"bea56d40-b6d4-482d-bb73-2b398c332314"]
}, Open  ]],
Cell[1484509, 35647, 229, 6, 35, "Text",ExpressionUUID->"60aeca87-6136-4160-884b-aa130eec8041"],
Cell[CellGroupData[{
Cell[1484763, 35657, 555, 15, 30, "Input",ExpressionUUID->"a17222d3-491f-4698-be0b-b55e378b6444"],
Cell[1485321, 35674, 1687, 55, 56, "Output",ExpressionUUID->"d874cd7e-8716-450e-8ad8-6ca65f239896"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1487057, 35735, 283, 7, 32, "Subsubsection",ExpressionUUID->"6c33381a-ce66-40ff-b12d-ebe53ffbf7b1"],
Cell[CellGroupData[{
Cell[1487365, 35746, 112, 1, 30, "Input",ExpressionUUID->"fd0b30d9-c703-4836-a291-8467d9690bd4"],
Cell[1487480, 35749, 27890, 588, 144, "Output",ExpressionUUID->"77f735e0-cffa-4841-aa06-99c0fe0f861d"]
}, Open  ]],
Cell[1515385, 36340, 92, 0, 35, "Text",ExpressionUUID->"2b3afcf7-78f7-4636-ac03-39bbec57e8ad"],
Cell[CellGroupData[{
Cell[1515502, 36344, 268, 8, 33, "Input",ExpressionUUID->"dbbd333d-0e7e-456f-8bb0-268e9de6af5d"],
Cell[1515773, 36354, 217, 6, 34, "Output",ExpressionUUID->"ed29a693-f4e7-432e-8d80-2c206944aff3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1516027, 36365, 289, 8, 30, "Input",ExpressionUUID->"d874efab-c35c-473a-931c-12e0abb5c2b0"],
Cell[1516319, 36375, 182, 5, 34, "Output",ExpressionUUID->"87847f3d-a6ef-4af1-9148-2c76bf5c0a57"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1516538, 36385, 318, 9, 30, "Input",ExpressionUUID->"31aac141-d9b4-4433-adf4-464de0d62055"],
Cell[1516859, 36396, 129, 2, 34, "Output",ExpressionUUID->"6042c820-0c55-4b9b-86db-e7a7913a2233"]
}, Open  ]],
Cell[1517003, 36401, 92, 0, 35, "Text",ExpressionUUID->"411db7f6-3228-4da9-bac1-7a9cebbfa980"],
Cell[CellGroupData[{
Cell[1517120, 36405, 496, 15, 33, "Input",ExpressionUUID->"75495265-470a-4891-b88e-e4f92c9c64c1"],
Cell[1517619, 36422, 366, 9, 34, "Output",ExpressionUUID->"93283693-b896-417b-90d7-303bf09bb9b7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1518022, 36436, 496, 14, 30, "Input",ExpressionUUID->"99108cce-49c8-426d-afeb-2260779432f8"],
Cell[1518521, 36452, 299, 9, 34, "Output",ExpressionUUID->"1deeb0cf-6b57-40a3-985b-088af0316363"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1518857, 36466, 810, 23, 33, "Input",ExpressionUUID->"9649441a-5c74-450c-b231-74157f9285fe"],
Cell[1519670, 36491, 382, 11, 34, "Output",ExpressionUUID->"7d9d1189-f1aa-43aa-a01d-a3f1a7d0cab2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1520089, 36507, 879, 25, 33, "Input",ExpressionUUID->"c1bd5ced-04e7-42a8-8a5c-84494867fc86"],
Cell[1520971, 36534, 382, 11, 34, "Output",ExpressionUUID->"c01d87e6-3334-4b50-b44a-6d002983f788"]
}, Open  ]],
Cell[1521368, 36548, 162, 3, 35, "Text",ExpressionUUID->"7b491606-2010-4663-a053-5db3048cd6b8"],
Cell[CellGroupData[{
Cell[1521555, 36555, 118, 1, 30, "Input",ExpressionUUID->"b8843b2d-21d0-4088-afa2-e1204f1d6186"],
Cell[1521676, 36558, 8864, 222, 95, "Output",ExpressionUUID->"d1f83d7e-21b5-421c-8806-7605930030b0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1530577, 36785, 6340, 188, 192, "Input",ExpressionUUID->"14b7f248-9f7e-49d3-aac1-206251595ed1"],
Cell[1536920, 36975, 1868, 53, 60, "Output",ExpressionUUID->"54e2ebdf-26de-42c2-b8d4-bd7548b96d5c"],
Cell[1538791, 37030, 86, 0, 34, "Output",ExpressionUUID->"b325efe7-033e-4167-bb4a-381b4f240043"]
}, Open  ]],
Cell[1538892, 37033, 168, 3, 35, "Text",ExpressionUUID->"70fe5c06-56d4-4b78-91e3-24fd68c8ca2b"],
Cell[CellGroupData[{
Cell[1539085, 37040, 6378, 186, 171, "Input",ExpressionUUID->"39610476-4d5c-4afe-8d72-780cff74547e"],
Cell[1545466, 37228, 146, 3, 34, "Output",ExpressionUUID->"6452b14e-f66e-4da2-b4b1-d042d24acc89"]
}, Open  ]],
Cell[1545627, 37234, 494, 14, 35, "Text",ExpressionUUID->"72964d9f-df61-48cb-b949-8955d6eb4106"],
Cell[CellGroupData[{
Cell[1546146, 37252, 1040, 28, 73, "Input",ExpressionUUID->"ceb4f334-6404-49c3-a1de-b78c07364a5b"],
Cell[1547189, 37282, 9252, 261, 152, "Output",ExpressionUUID->"8b15c18b-85a5-4c15-aa75-f9d602c3f0ad"],
Cell[1556444, 37545, 87, 0, 34, "Output",ExpressionUUID->"b699214d-9c29-4bca-9693-dfefd6a9c7d2"]
}, Open  ]],
Cell[1556546, 37548, 423, 10, 35, "Text",ExpressionUUID->"486a4d97-d2fc-4c36-9b9c-56d34fbad0ea"],
Cell[CellGroupData[{
Cell[1556994, 37562, 562, 14, 30, "Input",ExpressionUUID->"d110938a-10a0-4795-9b0d-6d5fc46866bf"],
Cell[1557559, 37578, 147, 3, 34, "Output",ExpressionUUID->"e4cd75ea-fbcb-4697-8ca0-c035cf586408"]
}, Open  ]],
Cell[1557721, 37584, 122, 1, 30, "Input",ExpressionUUID->"c6ed27ae-7032-44f0-a08a-f8c2feefb723"]
}, Closed]],
Cell[CellGroupData[{
Cell[1557880, 37590, 128, 0, 29, "Subsubsection",ExpressionUUID->"665bc1e7-0822-4d63-bd8b-f603980b2f73"],
Cell[CellGroupData[{
Cell[1558033, 37594, 117, 1, 30, "Input",ExpressionUUID->"768aafdc-126c-43e3-b5b7-016abd5b6b26"],
Cell[1558153, 37597, 19498, 434, 119, "Output",ExpressionUUID->"84ac1d6a-ddfc-44a0-b528-388b176cf221"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1577688, 38036, 665, 13, 52, "Input",ExpressionUUID->"3ffc01ee-fa4c-481e-8773-46ea605ad4e0"],
Cell[1578356, 38051, 3275, 102, 207, "Output",ExpressionUUID->"399a67b7-0ff1-4996-828c-841b5d3ba7ba"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1581668, 38158, 188, 5, 30, "Input",ExpressionUUID->"c6388edd-b50c-4922-a127-c8fceb0f4de5"],
Cell[1581859, 38165, 535, 9, 34, "Output",ExpressionUUID->"791ffaf7-9828-4402-a5a6-8e1974375b5d"]
}, Open  ]],
Cell[1582409, 38177, 113, 1, 30, "Input",ExpressionUUID->"e93f4b7d-b297-4913-b3f3-4a9e5e165bb0"],
Cell[1582525, 38180, 227, 6, 35, "Text",ExpressionUUID->"29e75374-3182-4be0-b1f0-9f9d7727eb80"],
Cell[CellGroupData[{
Cell[1582777, 38190, 675, 13, 52, "Input",ExpressionUUID->"5ab9c388-c440-4702-bd5c-a991ecf5558b"],
Cell[1583455, 38205, 3434, 107, 207, "Output",ExpressionUUID->"850f38d2-99ce-4ab9-8c03-16a04738e21b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1586926, 38317, 198, 5, 30, "Input",ExpressionUUID->"e9c2366e-c8eb-475e-aeab-14a8cb4538f4"],
Cell[1587127, 38324, 535, 9, 34, "Output",ExpressionUUID->"bcf2fae8-2952-4f08-9df9-62e182ed2d00"]
}, Open  ]],
Cell[1587677, 38336, 113, 1, 30, "Input",ExpressionUUID->"0cdf56b2-493c-4a4d-bcda-f1802822cc51"]
}, Closed]],
Cell[CellGroupData[{
Cell[1587827, 38342, 138, 1, 29, "Subsubsection",ExpressionUUID->"306c7e2f-84ca-460a-a6a4-eb0c2e048d15"],
Cell[CellGroupData[{
Cell[1587990, 38347, 125, 1, 30, "Input",ExpressionUUID->"56423750-c766-4f88-842c-eb83530a6035"],
Cell[1588118, 38350, 32658, 685, 143, "Output",ExpressionUUID->"3959a34e-f0d5-486b-a62d-d618f0bd0717"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1620813, 39040, 391, 10, 30, "Input",ExpressionUUID->"31752ba0-7b9c-486d-9013-339bae2bcaed"],
Cell[1621207, 39052, 675, 22, 34, "Output",ExpressionUUID->"5c2e8adb-9353-4da6-83c6-4ad45084d6ca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1621919, 39079, 227, 6, 30, "Input",ExpressionUUID->"9d165f1a-8d56-4d7b-96cc-32b0dcc291b8"],
Cell[1622149, 39087, 281, 6, 34, "Output",ExpressionUUID->"50b1dd47-3163-4057-bf28-7193f419ad5d"]
}, Open  ]],
Cell[1622445, 39096, 113, 1, 30, "Input",ExpressionUUID->"9f04fb1c-e2f6-431f-86dc-42e72b9d6172"],
Cell[CellGroupData[{
Cell[1622583, 39101, 512, 14, 33, "Input",ExpressionUUID->"3c3b6684-b06b-45db-b456-68261ac4e9c5"],
Cell[1623098, 39117, 1370, 40, 49, "Output",ExpressionUUID->"349eb96b-aa41-4bec-bc16-1eb0d8f66cbf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1624505, 39162, 1807, 48, 73, "Input",ExpressionUUID->"752937c9-11d2-4053-b63e-f49c4ddc712e"],
Cell[1626315, 39212, 5517, 159, 49, "Output",ExpressionUUID->"0eb6c4dc-3c7c-4a37-93ab-c0610c972eb9"]
}, Open  ]],
Cell[1631847, 39374, 420, 12, 35, "Text",ExpressionUUID->"b074f96e-c501-4207-8577-90a0f20ecc37"],
Cell[CellGroupData[{
Cell[1632292, 39390, 646, 19, 33, "Input",ExpressionUUID->"501c5d08-c2bd-4303-9812-e59d007ab151"],
Cell[1632941, 39411, 311, 8, 45, "Output",ExpressionUUID->"a627248d-26f8-4179-b275-045d5c233427"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1633301, 39425, 140, 1, 29, "Subsubsection",ExpressionUUID->"60080500-3101-4545-985a-bcb2002b013e"],
Cell[CellGroupData[{
Cell[1633466, 39430, 151, 3, 30, "Input",ExpressionUUID->"c88c242f-908f-45ca-ba2f-11e437ee1e13"],
Cell[1633620, 39435, 34849, 721, 119, "Output",ExpressionUUID->"66cad083-046c-407b-b5fc-f77f30e0a48e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1668506, 40161, 422, 11, 30, "Input",ExpressionUUID->"55573042-4c14-402e-a256-901ba9360287"],
Cell[1668931, 40174, 903, 29, 34, "Output",ExpressionUUID->"4c4f1fa1-5905-4a3d-816c-23003ab1e3f0"]
}, Open  ]],
Cell[1669849, 40206, 291, 7, 35, "Text",ExpressionUUID->"be583edf-3107-4b2b-a450-c4cbefa1f246"],
Cell[CellGroupData[{
Cell[1670165, 40217, 1866, 50, 73, "Input",ExpressionUUID->"b98917d6-b533-449b-8ced-7d3853b826a3"],
Cell[1672034, 40269, 4603, 139, 105, "Output",ExpressionUUID->"be0dbe91-7d9a-4d60-b56b-a53bd2fcd047"]
}, Open  ]],
Cell[1676652, 40411, 195, 4, 35, "Text",ExpressionUUID->"c4e513e1-52ac-4b10-bdc5-3a394684f18f"],
Cell[CellGroupData[{
Cell[1676872, 40419, 1923, 51, 73, "Input",ExpressionUUID->"27156d91-6f8e-4222-84ef-426668a25434"],
Cell[1678798, 40472, 6420, 208, 321, "Output",ExpressionUUID->"ebe14671-731d-4b57-a2d8-8f8d6842dd04"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1685267, 40686, 128, 0, 29, "Subsubsection",ExpressionUUID->"4f78f2aa-709c-4648-b0a6-1252954480f5"],
Cell[CellGroupData[{
Cell[1685420, 40690, 117, 1, 30, "Input",ExpressionUUID->"848565a8-2a6b-46cb-aabd-8b109e424b98"],
Cell[1685540, 40693, 17398, 390, 119, "Output",ExpressionUUID->"e0090933-b0e1-4cae-8ad7-2b0dc07e833c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1702975, 41088, 254, 6, 30, "Input",ExpressionUUID->"9e973ac4-de80-4bd2-adf0-a5bfa71f2646"],
Cell[1703232, 41096, 190, 5, 34, "Output",ExpressionUUID->"7f8d04a1-a28a-455f-bd17-965fc99445a9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1703459, 41106, 243, 6, 30, "Input",ExpressionUUID->"5d59486d-5ce8-4c38-9ea6-8c22d55bc0c8"],
Cell[1703705, 41114, 213, 6, 34, "Output",ExpressionUUID->"5cae8430-b334-485a-adbc-08bf38bc4659"]
}, Open  ]],
Cell[1703933, 41123, 198, 5, 35, "Text",ExpressionUUID->"26ad768d-b3ce-474b-92fa-9fdfd3eb6a4b"],
Cell[CellGroupData[{
Cell[1704156, 41132, 222, 5, 30, "Input",ExpressionUUID->"2246c6e6-c1e9-4d22-bcf5-4ce565c08785"],
Cell[1704381, 41139, 246, 7, 34, "Output",ExpressionUUID->"d0ed4af0-d839-4f2b-9f41-3357d1661a6a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1704664, 41151, 321, 9, 33, "Input",ExpressionUUID->"602c2f32-36fd-47b2-a55a-9166d35a5b6d"],
Cell[1704988, 41162, 150, 3, 34, "Output",ExpressionUUID->"1b2573ce-9936-46a4-8279-98e325fa6c6d"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1705187, 41171, 288, 7, 32, "Subsubsection",ExpressionUUID->"e2d28d33-d2a9-4ad0-baef-f84ae3143d48"],
Cell[CellGroupData[{
Cell[1705500, 41182, 111, 1, 30, "Input",ExpressionUUID->"0b1b15fe-3dac-4de5-be1e-f93ae3154809"],
Cell[1705614, 41185, 22062, 480, 143, "Output",ExpressionUUID->"fa8c9dd7-73f8-44a9-9b7b-60adff5d94ca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1727713, 41670, 164, 4, 30, "Input",ExpressionUUID->"ffd52cfb-4d9c-4421-82d8-da7e0ff8ee09"],
Cell[1727880, 41676, 207, 5, 34, "Output",ExpressionUUID->"1744c08c-f546-4580-bd90-4e9aaeeb7556"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1728124, 41686, 295, 8, 30, "Input",ExpressionUUID->"170c49e2-087b-4625-9473-b3158ad3cfab"],
Cell[1728422, 41696, 86, 0, 34, "Output",ExpressionUUID->"83d593da-194e-4d59-a3d4-4a6fd737acc8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1728545, 41701, 161, 3, 30, "Input",ExpressionUUID->"6067c02a-8fef-4043-a640-d2b2dd84f24b"],
Cell[1728709, 41706, 171, 3, 34, "Output",ExpressionUUID->"b47aacd2-dad8-4f7c-a0e4-ebe9054ca8d6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1728917, 41714, 255, 6, 30, "Input",ExpressionUUID->"3c14f70f-d042-4258-8614-6dd99f2ffbae"],
Cell[1729175, 41722, 86, 0, 34, "Output",ExpressionUUID->"42c1df9f-8089-41b7-8f37-aca3e8e54e1e"]
}, Open  ]],
Cell[1729276, 41725, 166, 3, 35, "Text",ExpressionUUID->"9fb298e1-2fc2-4063-a209-d8841a38e9c6"],
Cell[CellGroupData[{
Cell[1729467, 41732, 340, 9, 30, "Input",ExpressionUUID->"dd98c905-7ad1-4593-9dbb-567a016d66f0"],
Cell[1729810, 41743, 89, 0, 34, "Output",ExpressionUUID->"19400f00-ffa6-4085-9e1e-bce6d3817ab8"]
}, Open  ]],
Cell[1729914, 41746, 192, 3, 35, "Text",ExpressionUUID->"5c68ff47-df72-4fde-a66a-648fa03c87ad"],
Cell[CellGroupData[{
Cell[1730131, 41753, 465, 13, 52, "Input",ExpressionUUID->"e3a2e2f0-37a9-41ba-9ed4-5c1f7740c5f3"],
Cell[1730599, 41768, 83, 0, 34, "Output",ExpressionUUID->"8de38bfd-b0ba-4ce1-81d6-63cf53b50c6f"],
Cell[1730685, 41770, 140, 3, 34, "Output",ExpressionUUID->"6e9f0ce4-035e-406c-91d4-781ac308ca1f"]
}, Open  ]],
Cell[1730840, 41776, 182, 3, 35, "Text",ExpressionUUID->"b4a6d65a-c960-46f8-91d4-7245f60c9124"],
Cell[CellGroupData[{
Cell[1731047, 41783, 264, 7, 30, "Input",ExpressionUUID->"98354fb2-0c2b-45a0-9cd6-d5c99d971505"],
Cell[1731314, 41792, 265, 7, 34, "Output",ExpressionUUID->"4f97472a-4623-495c-8305-6c64b1f5a4ee"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1731628, 41805, 123, 0, 29, "Subsubsection",ExpressionUUID->"38453cc0-0181-47d9-b889-0029a7167e7c"],
Cell[CellGroupData[{
Cell[1731776, 41809, 112, 1, 30, "Input",ExpressionUUID->"9dd99250-aeba-48d9-b231-772ff5337bc6"],
Cell[1731891, 41812, 42537, 916, 95, "Output",ExpressionUUID->"e297a289-3825-488e-9827-2175899abda5"]
}, Open  ]],
Cell[1774443, 42731, 168, 4, 35, "Text",ExpressionUUID->"1a00e8f3-b2b8-4775-a407-e29b8c82b98b"],
Cell[CellGroupData[{
Cell[1774636, 42739, 954, 26, 52, "Input",ExpressionUUID->"4b5fbd3d-2e7d-4182-87ad-16637fd402e6"],
Cell[1775593, 42767, 109, 0, 34, "Output",ExpressionUUID->"217bb9d9-9b59-4abe-a8d2-14c772313d40"]
}, Open  ]],
Cell[1775717, 42770, 104, 0, 35, "Text",ExpressionUUID->"eee36610-9935-4a86-99dc-490b14c5034b"],
Cell[CellGroupData[{
Cell[1775846, 42774, 190, 4, 30, "Input",ExpressionUUID->"65f84493-65f1-4e91-b494-e6b51ca11edd"],
Cell[1776039, 42780, 242, 5, 34, "Output",ExpressionUUID->"21eb715c-e23a-4704-ac5f-ee0f22bec9dd"]
}, Open  ]],
Cell[1776296, 42788, 296, 5, 35, "Text",ExpressionUUID->"bd76f4fe-e012-4003-9d9a-909b9c3e5d08"],
Cell[CellGroupData[{
Cell[1776617, 42797, 125, 1, 30, "Input",ExpressionUUID->"cebf1d30-a7c0-4556-bf47-ce0a62e821f6"],
Cell[1776745, 42800, 13884, 330, 310, "Output",ExpressionUUID->"38d2fef3-01ea-4ad2-9b17-7ff4663c415b"]
}, Open  ]],
Cell[1790644, 43133, 320, 7, 35, "Text",ExpressionUUID->"1fdd912f-10d3-4525-a4f8-a72820bb9e4e"],
Cell[CellGroupData[{
Cell[1790989, 43144, 954, 26, 52, "Input",ExpressionUUID->"7dd667b9-f962-407b-9318-23a783610a45"],
Cell[1791946, 43172, 290, 6, 24, "Message",ExpressionUUID->"5fbaaa7c-71b2-4dc2-a5bf-403823e10eaf"],
Cell[1792239, 43180, 853, 24, 56, "Output",ExpressionUUID->"94403cef-b88e-4358-888a-723737f28547"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1793129, 43209, 1044, 28, 73, "Input",ExpressionUUID->"6c4a9d8d-a869-45be-ae9a-63e67951594f"],
Cell[1794176, 43239, 109, 0, 34, "Output",ExpressionUUID->"eb7e335a-079d-4c40-ae87-80d6a2545e76"]
}, Open  ]],
Cell[1794300, 43242, 141, 2, 30, "Input",ExpressionUUID->"f56aac46-779d-4d60-9e96-0e34b3c7ec4b"],
Cell[1794444, 43246, 88, 0, 35, "Text",ExpressionUUID->"ba3f843f-e239-41bb-8694-62b0dfa50076"],
Cell[CellGroupData[{
Cell[1794557, 43250, 871, 24, 52, "Input",ExpressionUUID->"4ccae874-d8bb-4fa7-812e-2466e67257fd"],
Cell[1795431, 43276, 87, 0, 34, "Output",ExpressionUUID->"6b953154-0303-4caa-ae91-8822361ac6cd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1795555, 43281, 168, 4, 30, "Input",ExpressionUUID->"e166722d-eb06-4694-b724-b5b5fa87bf23"],
Cell[1795726, 43287, 431, 8, 56, "Output",ExpressionUUID->"dc66000a-a44a-4a97-ac2a-0ebedc641c3d"]
}, Open  ]],
Cell[1796172, 43298, 117, 1, 30, "Input",ExpressionUUID->"38284a91-a101-4fa2-8fc6-68a003591b97"]
}, Closed]],
Cell[CellGroupData[{
Cell[1796326, 43304, 138, 1, 29, "Subsubsection",ExpressionUUID->"f07624cb-b94b-405b-83b7-e06b38a1bff4"],
Cell[CellGroupData[{
Cell[1796489, 43309, 125, 1, 30, "Input",ExpressionUUID->"bfa68e06-1bd9-4450-b34a-82e7872167d9"],
Cell[1796617, 43312, 47491, 959, 120, "Output",ExpressionUUID->"b58ccb20-58c3-4b3c-81b9-af8f31a61ec1"]
}, Open  ]],
Cell[1844123, 44274, 162, 3, 35, "Text",ExpressionUUID->"54ef3c83-1dfe-4963-8d07-6bdc659f5558"],
Cell[CellGroupData[{
Cell[1844310, 44281, 429, 12, 30, "Input",ExpressionUUID->"69431cf6-a3b7-4937-a380-72a643ca6712"],
Cell[1844742, 44295, 580, 18, 37, "Output",ExpressionUUID->"3077a139-ac67-48b2-a0cc-93b3acd50ff3"]
}, Open  ]],
Cell[1845337, 44316, 110, 0, 35, "Text",ExpressionUUID->"53b74fef-0121-4090-bd23-c53bddfa9aec"],
Cell[CellGroupData[{
Cell[1845472, 44320, 384, 11, 30, "Input",ExpressionUUID->"ea0214a7-fc96-4fde-8de8-2306c6e65348"],
Cell[1845859, 44333, 323, 10, 49, "Output",ExpressionUUID->"cc95b0bb-2a7d-444f-a974-8a7ef6e050ef"]
}, Open  ]],
Cell[1846197, 44346, 113, 0, 35, "Text",ExpressionUUID->"2109778b-72a9-433c-90a9-d5b088085308"],
Cell[CellGroupData[{
Cell[1846335, 44350, 274, 7, 30, "Input",ExpressionUUID->"fa7ba940-c564-4cf2-b669-0f031642d586"],
Cell[1846612, 44359, 946, 28, 37, "Output",ExpressionUUID->"7a0e30d7-b9a5-4585-a0b3-cde3f885c145"]
}, Open  ]],
Cell[1847573, 44390, 279, 5, 35, "Text",ExpressionUUID->"907cfdad-7979-4c98-8d91-3d4ee3ad346a"],
Cell[CellGroupData[{
Cell[1847877, 44399, 1063, 34, 30, "Input",ExpressionUUID->"085ed703-5680-4dd0-806a-0e9e8b6f5345"],
Cell[1848943, 44435, 1190, 39, 34, "Output",ExpressionUUID->"6916c56b-8bdf-4e09-9cbd-4e556616fe48"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1850170, 44479, 1154, 35, 30, "Input",ExpressionUUID->"796c9fdd-a205-434c-8785-c49b36607674"],
Cell[1851327, 44516, 2444, 74, 77, "Output",ExpressionUUID->"58eb89fa-ff65-4606-a0bb-2360032f9282"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1853820, 44596, 123, 0, 29, "Subsubsection",ExpressionUUID->"6cf76b60-7d4e-4507-825c-0c087686c24f"],
Cell[CellGroupData[{
Cell[1853968, 44600, 112, 1, 30, "Input",ExpressionUUID->"a2481af7-af0b-4046-8e79-3ed9393b9766"],
Cell[1854083, 44603, 17722, 400, 119, "Output",ExpressionUUID->"93950f8d-7b89-422d-ac66-c503c6550fad"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1871842, 45008, 183, 4, 30, "Input",ExpressionUUID->"1064ed61-8af9-4df5-9131-e493726866e8"],
Cell[1872028, 45014, 85, 0, 34, "Output",ExpressionUUID->"5baeb87f-3bb6-4b76-9df2-aace973c5381"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1872150, 45019, 181, 4, 30, "Input",ExpressionUUID->"37930d7a-1b32-4fe3-84e0-061f8905b121"],
Cell[1872334, 45025, 84, 0, 34, "Output",ExpressionUUID->"5c129d1d-4942-430a-a428-a0bfe5e63037"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1872455, 45030, 197, 4, 30, "Input",ExpressionUUID->"f78b0245-23c9-4869-98a9-f449c8fdd591"],
Cell[1872655, 45036, 84, 0, 34, "Output",ExpressionUUID->"24e3dc9a-acde-4101-a169-3e9e5b0999d3"]
}, Open  ]],
Cell[1872754, 45039, 103, 0, 35, "Text",ExpressionUUID->"576359d3-e485-4ec3-986d-34426871dae6"],
Cell[CellGroupData[{
Cell[1872882, 45043, 318, 8, 52, "Input",ExpressionUUID->"fd2a30e1-e52c-4dec-b69f-af7ce0e0e1d8"],
Cell[1873203, 45053, 85, 0, 34, "Output",ExpressionUUID->"f3f35746-db7b-4699-98a4-e3571afe2ada"],
Cell[1873291, 45055, 207, 5, 34, "Output",ExpressionUUID->"eb8980d9-e3d1-4051-866e-154619f98ba6"]
}, Open  ]],
Cell[1873513, 45063, 194, 3, 35, "Text",ExpressionUUID->"5c127c1b-8879-4b86-986e-63d2e3a21198"],
Cell[CellGroupData[{
Cell[1873732, 45070, 301, 6, 52, "Input",ExpressionUUID->"270a5842-25eb-4324-883e-5dd7aaa00d70"],
Cell[1874036, 45078, 83, 0, 34, "Output",ExpressionUUID->"e8b64f15-7e15-43e2-a9f4-f7117564a5f8"],
Cell[1874122, 45080, 140, 3, 34, "Output",ExpressionUUID->"ae371274-e1ba-4052-bf04-ae96a9e91d21"]
}, Open  ]],
Cell[1874277, 45086, 279, 7, 35, "Text",ExpressionUUID->"144eb358-3470-4f91-9255-5add39858da1"],
Cell[CellGroupData[{
Cell[1874581, 45097, 206, 5, 30, "Input",ExpressionUUID->"f779c663-6e3f-424d-95c9-44a303531a49"],
Cell[1874790, 45104, 128, 2, 34, "Output",ExpressionUUID->"8f1e5937-a9b7-4942-a44a-2772d4adbba8"]
}, Open  ]],
Cell[1874933, 45109, 170, 3, 35, "Text",ExpressionUUID->"999d70c4-b420-4d02-9d64-8312628d2d3b"],
Cell[CellGroupData[{
Cell[1875128, 45116, 328, 9, 30, "Input",ExpressionUUID->"c4a3f430-d004-4d65-9c02-5002ae33dcfb"],
Cell[1875459, 45127, 235, 5, 34, "Output",ExpressionUUID->"1b7c9f89-4943-434b-a82d-a1c4c775b901"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1875743, 45138, 125, 0, 29, "Subsubsection",ExpressionUUID->"be89f283-10f7-4f0f-86bc-710e503b482d"],
Cell[CellGroupData[{
Cell[1875893, 45142, 114, 1, 30, "Input",ExpressionUUID->"d7b51af3-e365-4444-922f-78cf4b06a360"],
Cell[1876010, 45145, 12424, 299, 95, "Output",ExpressionUUID->"e16f4c67-9807-490e-bdd3-88b28483e6a3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1888471, 45449, 242, 6, 30, "Input",ExpressionUUID->"4cf9c9ae-53cd-4330-ad88-412c97fecccb"],
Cell[1888716, 45457, 380, 7, 34, "Output",ExpressionUUID->"460e98cd-7f41-4d33-bd86-c76498ed0d34"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1889133, 45469, 126, 1, 30, "Input",ExpressionUUID->"318cde52-1319-4861-9678-64bf3d59bb57"],
Cell[1889262, 45472, 112, 0, 34, "Output",ExpressionUUID->"96cae000-353c-4983-bd91-4f6d64bc5161"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1889411, 45477, 126, 1, 30, "Input",ExpressionUUID->"89f152b1-b248-452a-b166-9e83f5ba7a97"],
Cell[1889540, 45480, 198, 3, 34, "Output",ExpressionUUID->"57f855fd-6fa1-45ca-865d-55776a68f3c9"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1889787, 45489, 300, 7, 32, "Subsubsection",ExpressionUUID->"e94a9243-7968-4fe2-a57a-28dc13e23871"],
Cell[CellGroupData[{
Cell[1890112, 45500, 130, 1, 30, "Input",ExpressionUUID->"d561881a-ff2c-46ba-838b-3b0ce7c7a8a4"],
Cell[1890245, 45503, 30287, 631, 145, "Output",ExpressionUUID->"85e6df84-bc1a-4238-9634-3d1f981f5d01"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1920569, 46139, 318, 8, 48, "Input",ExpressionUUID->"cf464cf3-9fd5-41c8-a790-ff4f49805c3e"],
Cell[1920890, 46149, 179, 4, 34, "Output",ExpressionUUID->"76ecd12a-80d0-4c6d-b76b-fb47eab8eab0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1921106, 46158, 398, 11, 48, "Input",ExpressionUUID->"c8a906c1-48f4-4f0d-ae04-6e79c9446590"],
Cell[1921507, 46171, 200, 4, 34, "Output",ExpressionUUID->"928bca50-95a4-46b6-b241-3e2a2be47455"]
}, Open  ]],
Cell[1921722, 46178, 105, 0, 35, "Text",ExpressionUUID->"62bd3c37-5b56-418a-8d48-60f10c98ab42"],
Cell[CellGroupData[{
Cell[1921852, 46182, 373, 10, 50, "Input",ExpressionUUID->"4979ac5d-3488-42d5-ac7d-d2ee46083c62"],
Cell[1922228, 46194, 317, 9, 34, "Output",ExpressionUUID->"22f63008-db33-4a84-9f76-e962a69f8ec8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1922582, 46208, 584, 18, 50, "Input",ExpressionUUID->"f61f272a-2f41-476d-b30d-42b6e57dfc1d"],
Cell[1923169, 46228, 556, 13, 34, "Output",ExpressionUUID->"7f65025f-080b-47e5-bcc8-c7f47b3df3f7"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[1923774, 46247, 132, 0, 29, "Subsubsection",ExpressionUUID->"9b48e21f-6439-4560-9947-44742395f378"],
Cell[CellGroupData[{
Cell[1923931, 46251, 121, 1, 30, "Input",ExpressionUUID->"7a07ab3e-6b19-4e2f-b6a7-54b3e245cdec"],
Cell[1924055, 46254, 36448, 801, 119, "Output",ExpressionUUID->"0ead1ef3-0525-49d9-b873-35f41bde958e"]
}, Open  ]],
Cell[1960518, 47058, 164, 3, 35, "Text",ExpressionUUID->"5e4db500-780c-48fc-a9c8-db4207f967d3"],
Cell[CellGroupData[{
Cell[1960707, 47065, 364, 8, 30, "Input",ExpressionUUID->"bbc4ab6f-e387-48be-b64c-e13a693d0580"],
Cell[1961074, 47075, 10345, 210, 62, "Output",ExpressionUUID->"d5d3fb75-e448-4a11-88e6-949a257b0bd6"]
}, Open  ]],
Cell[1971434, 47288, 171, 4, 35, "Text",ExpressionUUID->"50c94659-2097-4dac-94d3-eda1236243f8"],
Cell[CellGroupData[{
Cell[1971630, 47296, 178, 3, 52, "Input",ExpressionUUID->"41a9adbc-19ab-46f2-a602-f00ef547ed70"],
Cell[1971811, 47301, 317, 9, 34, "Output",ExpressionUUID->"fd08ca6c-b35e-4497-ba20-e40afb9e26ad"],
Cell[1972131, 47312, 571, 17, 76, "Output",ExpressionUUID->"061eb6ce-d401-46bc-95d5-3435dfdaa817"]
}, Open  ]],
Cell[1972717, 47332, 227, 4, 35, "Text",ExpressionUUID->"9769a820-d680-4c7b-bb22-e37b64955625"],
Cell[CellGroupData[{
Cell[1972969, 47340, 152, 3, 30, "Input",ExpressionUUID->"eca936de-f05c-42ff-8b90-f307ce44cf6f"],
Cell[1973124, 47345, 681, 21, 76, "Output",ExpressionUUID->"e88800f3-9266-45ef-8d21-16479300e138"]
}, Open  ]],
Cell[1973820, 47369, 501, 9, 58, "Text",ExpressionUUID->"5ef99266-a624-4416-ac8d-ae1bfe126dd8"],
Cell[CellGroupData[{
Cell[1974346, 47382, 290, 8, 30, "Input",ExpressionUUID->"e501b8c7-3a25-47d7-81d3-92379c58d2a3"],
Cell[1974639, 47392, 206, 6, 51, "Output",ExpressionUUID->"109110db-2810-4a7e-ae4e-520ae56ba408"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1974882, 47403, 591, 15, 69, "Input",ExpressionUUID->"94d9f6cb-256a-42d0-b737-55601436ba60"],
Cell[1975476, 47420, 307, 7, 37, "Output",ExpressionUUID->"45df96be-ffca-4002-a7d8-1454aa23dc0c"],
Cell[1975786, 47429, 349, 7, 37, "Output",ExpressionUUID->"1fa0604f-161f-47f2-89cd-dbd64eb1dd76"]
}, Open  ]],
Cell[1976150, 47439, 113, 1, 30, "Input",ExpressionUUID->"3198201b-40d3-4e2a-9796-f5a81fc6cdc3"],
Cell[1976266, 47442, 106, 0, 35, "Text",ExpressionUUID->"d5a6784a-f87b-44df-ac34-d1c1875bc00b"],
Cell[CellGroupData[{
Cell[1976397, 47446, 490, 12, 30, "Input",ExpressionUUID->"0cc85ba6-146f-4bb1-bf3a-800d5606eb0b"],
Cell[1976890, 47460, 681, 21, 76, "Output",ExpressionUUID->"7dd3307c-7efb-438d-87f8-f01652b148b5"]
}, Open  ]],
Cell[1977586, 47484, 174, 3, 35, "Text",ExpressionUUID->"9417b6eb-5ef5-43a5-bc98-20a5c7c00883"],
Cell[CellGroupData[{
Cell[1977785, 47491, 489, 15, 30, "Input",ExpressionUUID->"42310979-cd93-4f2d-bc8e-e98383d17230"],
Cell[1978277, 47508, 681, 21, 76, "Output",ExpressionUUID->"b48a97a7-4f28-46b7-9c21-3d792a0b77a1"]
}, Open  ]],
Cell[1978973, 47532, 177, 3, 35, "Text",ExpressionUUID->"50d593c9-54ed-4a31-91e0-4cff7ebc6f84"],
Cell[CellGroupData[{
Cell[1979175, 47539, 843, 27, 30, "Input",ExpressionUUID->"fa153f17-9935-4315-8580-c94d1512f864"],
Cell[1980021, 47568, 697, 21, 76, "Output",ExpressionUUID->"da40e021-fcf0-409a-b971-be9c292ffebc"]
}, Open  ]],
Cell[1980733, 47592, 255, 6, 35, "Text",ExpressionUUID->"469ac06e-50a3-43eb-87f2-8fec10f4a6e6"],
Cell[CellGroupData[{
Cell[1981013, 47602, 412, 12, 30, "Input",ExpressionUUID->"0c000267-d189-4fff-9ec5-e3d48b9aa0a4"],
Cell[1981428, 47616, 689, 21, 76, "Output",ExpressionUUID->"dff4fb47-0c03-49fd-b849-67b1d182a04a"]
}, Open  ]],
Cell[1982132, 47640, 263, 6, 35, "Text",ExpressionUUID->"f751e4e1-23d2-4de5-ad80-9725971b5c87"]
}, Closed]],
Cell[CellGroupData[{
Cell[1982432, 47651, 122, 0, 29, "Subsubsection",ExpressionUUID->"26931785-5df9-420e-b30d-30186e437c7e"],
Cell[CellGroupData[{
Cell[1982579, 47655, 111, 1, 30, "Input",ExpressionUUID->"0d46bc55-728d-4b20-8e51-328b34020884"],
Cell[1982693, 47658, 17949, 423, 95, "Output",ExpressionUUID->"eb857219-fe00-4ee5-9b7b-c7c21872a2d9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2000679, 48086, 412, 9, 30, "Input",ExpressionUUID->"4fea25f5-8091-42a9-b002-b0b29adbe629"],
Cell[2001094, 48097, 362, 7, 34, "Output",ExpressionUUID->"32777d7d-5701-4bae-b813-007320f28d66"]
}, Open  ]],
Cell[2001471, 48107, 164, 3, 35, "Text",ExpressionUUID->"5d8561d9-9c05-415b-b495-4a4cc0600b38"],
Cell[CellGroupData[{
Cell[2001660, 48114, 466, 14, 30, "Input",ExpressionUUID->"25159341-cdf2-4856-91e4-e816340afe2c"],
Cell[2002129, 48130, 602, 18, 34, "Output",ExpressionUUID->"57273d69-9574-42d5-a56c-99607ded0162"]
}, Open  ]],
Cell[2002746, 48151, 167, 3, 35, "Text",ExpressionUUID->"e8d245de-0a1e-49dd-84f5-210d13c5db80"],
Cell[CellGroupData[{
Cell[2002938, 48158, 821, 26, 30, "Input",ExpressionUUID->"dbebb16d-2133-40ef-89fc-6115416c7dbb"],
Cell[2003762, 48186, 1344, 36, 56, "Output",ExpressionUUID->"c0f4d2f7-3707-42e4-8af5-4ffa24a60d70"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2005155, 48228, 122, 0, 29, "Subsubsection",ExpressionUUID->"c399e241-5643-43b3-a8a3-49246ae7ab36"],
Cell[CellGroupData[{
Cell[2005302, 48232, 111, 1, 30, "Input",ExpressionUUID->"3b1d649d-29d3-4f04-882c-67aa94399f50"],
Cell[2005416, 48235, 17822, 422, 95, "Output",ExpressionUUID->"1b26bd76-60d9-4d33-818c-fa972a5634e3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2023275, 48662, 239, 6, 30, "Input",ExpressionUUID->"2c65f3b6-7a1a-4eba-b6d2-b87e29f38ab4"],
Cell[2023517, 48670, 398, 7, 34, "Output",ExpressionUUID->"506f422b-4761-42ef-ae5a-1f1d8f9ed630"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2023952, 48682, 123, 1, 30, "Input",ExpressionUUID->"664a1f5e-1cc3-48b3-b681-95cc88e5533d"],
Cell[2024078, 48685, 127, 0, 34, "Output",ExpressionUUID->"e405c65c-0195-41df-9ce3-dea88c04e163"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2024242, 48690, 123, 1, 30, "Input",ExpressionUUID->"d8defd22-f380-49f3-af1e-6ac4968f0f1a"],
Cell[2024368, 48693, 99, 0, 34, "Output",ExpressionUUID->"e62e9647-1f8c-46fa-9888-b4a586610eae"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2024516, 48699, 122, 0, 29, "Subsubsection",ExpressionUUID->"cf4c0eae-1ca8-4dc6-ac64-0175d26ae6f4"],
Cell[CellGroupData[{
Cell[2024663, 48703, 111, 1, 30, "Input",ExpressionUUID->"f3fcdacd-a9f9-4ede-90d3-f351442b2f61"],
Cell[2024777, 48706, 15165, 348, 119, "Output",ExpressionUUID->"81eb06b1-535c-4f45-aa30-425d805f8289"]
}, Open  ]],
Cell[2039957, 49057, 117, 0, 35, "Text",ExpressionUUID->"5837eb82-be95-4d27-9631-5c1ccaa61f3b"],
Cell[2040077, 49059, 222, 5, 30, "Input",ExpressionUUID->"c379fe2d-1b3d-499d-8fb7-5752a9b5a38c"],
Cell[2040302, 49066, 109, 0, 35, "Text",ExpressionUUID->"668b192a-cea7-4422-957b-47188ac7cf06"],
Cell[2040414, 49068, 137, 2, 30, "Input",ExpressionUUID->"e58f811b-1f13-4370-8d96-181fe791a9e3"]
}, Closed]],
Cell[CellGroupData[{
Cell[2040588, 49075, 122, 0, 29, "Subsubsection",ExpressionUUID->"cf4c0eae-1ca8-4dc6-ac64-0175d26ae6f4"],
Cell[CellGroupData[{
Cell[2040735, 49079, 111, 1, 30, "Input",ExpressionUUID->"d488c47b-19cb-44bd-95db-18aa5aad3734"],
Cell[2040849, 49082, 36509, 772, 119, "Output",ExpressionUUID->"553b5461-9f19-4134-b22c-48c9ac0af671"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2077395, 49859, 258, 7, 33, "Input",ExpressionUUID->"023c14e0-345e-4141-8957-c97b88b217c6"],
Cell[2077656, 49868, 238, 7, 34, "Output",ExpressionUUID->"2604f6bc-6bd6-4155-a8e6-776d52695fbc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2077931, 49880, 396, 12, 33, "Input",ExpressionUUID->"aa93d241-4958-4a96-9910-3c64872641b2"],
Cell[2078330, 49894, 406, 14, 34, "Output",ExpressionUUID->"7eed6fc0-e3c4-4f91-aab8-eff57f374c7e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2078773, 49913, 442, 13, 33, "Input",ExpressionUUID->"67ba744f-40b5-4d6f-a87b-1860389d7f2d"],
Cell[2079218, 49928, 286, 9, 34, "Output",ExpressionUUID->"0325f25a-9c47-4c2f-b0a7-b3bdcb40df92"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2079541, 49942, 442, 13, 33, "Input",ExpressionUUID->"d31fb748-d8f3-4127-b865-a801a73692b8"],
Cell[2079986, 49957, 1716, 52, 37, "Output",ExpressionUUID->"0ce7efee-c789-43ee-a649-6a0ea8332745"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2081751, 50015, 116, 0, 29, "Subsubsection",ExpressionUUID->"d5f21202-6070-4856-83fc-5a556a916b5b"],
Cell[CellGroupData[{
Cell[2081892, 50019, 105, 1, 30, "Input",ExpressionUUID->"0ad8c736-f7ac-4f54-82a3-92005896f628"],
Cell[2082000, 50022, 12041, 294, 95, "Output",ExpressionUUID->"79ee4136-19de-44e7-a095-b68f9d66574d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2094078, 50321, 117, 1, 30, "Input",ExpressionUUID->"97d0ad66-909a-4dae-90b7-afc579f2e340"],
Cell[2094198, 50324, 84, 0, 34, "Output",ExpressionUUID->"1bf678a0-02c9-42eb-99ee-5d744b871bbc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2094319, 50329, 150, 3, 30, "Input",ExpressionUUID->"69699e71-9a8a-4fd0-9b95-6887ed7210af"],
Cell[2094472, 50334, 329, 6, 34, "Output",ExpressionUUID->"2c6d11aa-f637-48c2-b2ec-0fa6cdf83dcc"]
}, Open  ]],
Cell[2094816, 50343, 194, 3, 35, "Text",ExpressionUUID->"4e9b3f22-5307-4419-bfcf-a8831019ee83"],
Cell[CellGroupData[{
Cell[2095035, 50350, 210, 5, 33, "Input",ExpressionUUID->"e652ddd0-1712-429c-8ee6-6ff3ddac0f78"],
Cell[2095248, 50357, 215, 5, 34, "Output",ExpressionUUID->"7dfad00f-a833-4e75-8aa3-d87974773dee"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2095512, 50368, 124, 0, 29, "Subsubsection",ExpressionUUID->"80731580-7f25-445f-9ef1-2b7ecb7b5e8d"],
Cell[CellGroupData[{
Cell[2095661, 50372, 113, 1, 30, "Input",ExpressionUUID->"a9972da9-9b21-4c0b-b454-b62f926d69cd"],
Cell[2095777, 50375, 35916, 729, 147, "Output",ExpressionUUID->"53baa8f8-db1f-4bb7-b584-cf8dac45ae49"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2131730, 51109, 765, 25, 30, "Input",ExpressionUUID->"c54137fa-02d4-4b46-b047-8198f0e45b4b"],
Cell[2132498, 51136, 449, 8, 34, "Output",ExpressionUUID->"350ab85d-47e5-4fc6-81b6-168433aa366b"]
}, Open  ]],
Cell[2132962, 51147, 291, 7, 35, "Text",ExpressionUUID->"fc045635-8f76-480a-a1a4-f89059572645"],
Cell[CellGroupData[{
Cell[2133278, 51158, 942, 28, 30, "Input",ExpressionUUID->"84e28ffb-6e8e-474e-b668-2d66fc4803b3"],
Cell[2134223, 51188, 1074, 24, 376, "Output",ExpressionUUID->"5a8245d8-287f-466d-af6a-b0547d378a4f"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2135346, 51218, 140, 1, 29, "Subsubsection",ExpressionUUID->"661954d6-9ec9-43c4-a3cb-bcae04d55bd5"],
Cell[CellGroupData[{
Cell[2135511, 51223, 127, 1, 30, "Input",ExpressionUUID->"49466a3a-55f0-467b-ae1e-2690cde4c42c"],
Cell[2135641, 51226, 25097, 533, 119, "Output",ExpressionUUID->"4050e733-cc6b-48f7-adea-0dfdfba30ff9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2160775, 51764, 300, 8, 30, "Input",ExpressionUUID->"a47819c3-7f45-462c-9617-511b47f9e73d"],
Cell[2161078, 51774, 675, 22, 34, "Output",ExpressionUUID->"124c72a4-96a8-4f18-870e-32e6977d5957"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2161790, 51801, 185, 4, 30, "Input",ExpressionUUID->"44b79d99-d9d3-4af2-8f71-88315830fd53"],
Cell[2161978, 51807, 886, 17, 56, "Output",ExpressionUUID->"8dc6b153-4da9-46a9-b449-9357921d1ce5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2162901, 51829, 1708, 46, 73, "Input",ExpressionUUID->"15bad9d5-0cd4-429f-931d-dea56d70a72b"],
Cell[2164612, 51877, 2242, 72, 56, "Output",ExpressionUUID->"fd152e4c-e86d-4487-9fe9-ca9411b597f9"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2166891, 51954, 269, 7, 30, "Input",ExpressionUUID->"bb2fe576-9d70-41aa-a853-0d508ed001f6"],
Cell[2167163, 51963, 5933, 153, 140, "Output",ExpressionUUID->"e8deb172-ab92-435e-8e69-1a654a6ad3b8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2173133, 52121, 118, 1, 30, "Input",ExpressionUUID->"a8535322-0ae7-40c6-86a2-29824b2a0eb9"],
Cell[2173254, 52124, 150, 3, 34, "Output",ExpressionUUID->"44e53b6c-9409-4ba8-98b0-fd63cb2a90c8"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2173453, 52133, 134, 0, 29, "Subsubsection",ExpressionUUID->"ae2de193-f1da-40a5-9661-248daa68e789"],
Cell[CellGroupData[{
Cell[2173612, 52137, 123, 1, 30, "Input",ExpressionUUID->"317363ee-3f7c-4176-bcd7-f278589d65b5"],
Cell[2173738, 52140, 14500, 340, 95, "Output",ExpressionUUID->"626bb1e4-ee29-4b38-8490-b58829029e82"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2188275, 52485, 300, 8, 30, "Input",ExpressionUUID->"d4b3e55c-62dc-4419-ad21-d630270bfc03"],
Cell[2188578, 52495, 675, 22, 34, "Output",ExpressionUUID->"7f7bc753-0915-436b-af9a-5478453a4de1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2189290, 52522, 133, 1, 30, "Input",ExpressionUUID->"a2a50433-327c-4310-8c30-4ba4dd8c3043"],
Cell[2189426, 52525, 1370, 40, 49, "Output",ExpressionUUID->"23bbd5e4-9c18-4c17-8ce2-e33471ed6505"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2190845, 52571, 138, 1, 29, "Subsubsection",ExpressionUUID->"b9ff8d9d-6815-41a9-8c12-cb1267a64b25"],
Cell[CellGroupData[{
Cell[2191008, 52576, 125, 1, 30, "Input",ExpressionUUID->"167922a2-85b7-4e5a-b5b0-6223d31ab23e"],
Cell[2191136, 52579, 12839, 307, 95, "Output",ExpressionUUID->"ca2089bc-cde6-4596-a327-933437f4bb7e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2204012, 52891, 300, 8, 30, "Input",ExpressionUUID->"530e029f-ad6d-4043-affa-a240951c0724"],
Cell[2204315, 52901, 675, 22, 34, "Output",ExpressionUUID->"55977277-9de3-4b6d-ab02-906431ff3702"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2205027, 52928, 137, 2, 30, "Input",ExpressionUUID->"c19d185d-88e3-4c2e-860b-6c63fc18b760"],
Cell[2205167, 52932, 83, 0, 34, "Output",ExpressionUUID->"e0a6213a-ed41-421a-b4c1-0f9624d7e763"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2205299, 52938, 134, 0, 29, "Subsubsection",ExpressionUUID->"a1767e5a-7657-4f34-bdf6-b3f9e53ad990"],
Cell[CellGroupData[{
Cell[2205458, 52942, 123, 1, 30, "Input",ExpressionUUID->"73ccf739-f82b-4003-b88b-993b68f93e06"],
Cell[2205584, 52945, 24558, 530, 119, "Output",ExpressionUUID->"6ff44786-b79e-4081-8427-2df294a9657a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2230179, 53480, 300, 8, 30, "Input",ExpressionUUID->"2bc47405-28d9-456f-b209-78f872ae3dec"],
Cell[2230482, 53490, 675, 22, 34, "Output",ExpressionUUID->"714a5869-31a4-4da5-88e6-1613f2d9495c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2231194, 53517, 187, 4, 30, "Input",ExpressionUUID->"8347ae95-86ad-4e04-9d0b-56432ffa9cdf"],
Cell[2231384, 53523, 1504, 49, 34, "Output",ExpressionUUID->"efac85fa-8b21-4f2f-b235-eaf16406cfea"]
}, Open  ]],
Cell[2232903, 53575, 357, 8, 35, "Text",ExpressionUUID->"c043a7d9-43f5-4f6d-be9a-0036c5428a4a"],
Cell[CellGroupData[{
Cell[2233285, 53587, 341, 9, 30, "Input",ExpressionUUID->"1be3142d-e193-41fa-8986-888add1cbe9c"],
Cell[2233629, 53598, 903, 29, 34, "Output",ExpressionUUID->"c0c3010c-4c6f-46b3-bd17-1a5a0224d640"]
}, Open  ]],
Cell[2234547, 53630, 223, 6, 35, "Text",ExpressionUUID->"b2b27b01-b6ed-4145-902a-a8d9d6b44232"],
Cell[CellGroupData[{
Cell[2234795, 53640, 1707, 46, 73, "Input",ExpressionUUID->"90e68aff-e045-4371-98ce-4b7f4f528c15"],
Cell[2236505, 53688, 2242, 72, 56, "Output",ExpressionUUID->"e5e00330-cda2-437d-81cc-611fb415be1e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2238784, 53765, 222, 5, 30, "Input",ExpressionUUID->"ac65f5fd-cd31-4a81-b533-a657e8861f7d"],
Cell[2239009, 53772, 8369, 238, 140, "Output",ExpressionUUID->"fa328649-4d0e-4a49-8bb9-5bbf58b4e59b"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2247427, 54016, 130, 0, 29, "Subsubsection",ExpressionUUID->"353ccfa4-2916-41aa-91e4-dd0d65220132"],
Cell[CellGroupData[{
Cell[2247582, 54020, 119, 1, 30, "Input",ExpressionUUID->"3fd1d8cf-0ca2-4c23-8e55-0e577d1dab68"],
Cell[2247704, 54023, 88968, 1921, 119, "Output",ExpressionUUID->"d829681f-a420-4571-8bc4-02e81b85a962"]
}, Open  ]],
Cell[2336687, 55947, 119, 0, 35, "Text",ExpressionUUID->"6dd2771b-c5d4-4120-aacd-2812ecc5ccd1"],
Cell[CellGroupData[{
Cell[2336831, 55951, 191, 4, 30, "Input",ExpressionUUID->"60093d2f-e810-413d-be71-dc5aef56b4b2"],
Cell[2337025, 55957, 698, 22, 34, "Output",ExpressionUUID->"1a267ec9-499f-4a3a-90e1-855f72562d2a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2337760, 55984, 194, 4, 30, "Input",ExpressionUUID->"8f7facdb-e955-4a08-b4c6-3cb9fe5bc9e4"],
Cell[2337957, 55990, 724, 23, 34, "Output",ExpressionUUID->"653aca36-0eac-453f-bdd9-86f6cbfcfe1f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2338718, 56018, 195, 4, 30, "Input",ExpressionUUID->"18428efc-2194-44e9-abb6-8abdfb2fc916"],
Cell[2338916, 56024, 942, 27, 34, "Output",ExpressionUUID->"dcf08e0e-e6d0-461b-b5e1-ed81b064845a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2339895, 56056, 195, 4, 30, "Input",ExpressionUUID->"78f49bd1-6e99-48b4-a63c-2dec56644c74"],
Cell[2340093, 56062, 3698, 111, 77, "Output",ExpressionUUID->"9d9bd6c4-edb5-464e-9e5d-94c90791cd2c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2343828, 56178, 248, 6, 30, "Input",ExpressionUUID->"8b19df35-0d46-415c-975b-d2bac4482163"],
Cell[2344079, 56186, 1322, 43, 34, "Output",ExpressionUUID->"f25a514b-b168-42bb-b97c-6bb86da440c4"]
}, Open  ]],
Cell[2345416, 56232, 108, 0, 35, "Text",ExpressionUUID->"c6e1d516-8c61-4321-a3f4-2f8696c57906"],
Cell[CellGroupData[{
Cell[2345549, 56236, 3958, 106, 68, "Input",ExpressionUUID->"bba22f74-6fdb-4006-8b66-0ff030d57221"],
Cell[2349510, 56344, 1777, 51, 83, "Output",ExpressionUUID->"ee6cd53a-5f30-4833-a475-a7cb85332658"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2351324, 56400, 3958, 106, 68, "Input",ExpressionUUID->"def5e9ac-645b-4e2f-ae32-7023df6b1629"],
Cell[2355285, 56508, 1885, 55, 83, "Output",ExpressionUUID->"a024cd72-d4f8-4bce-99a4-6df3f11034ec"]
}, Open  ]],
Cell[2357185, 56566, 243, 6, 35, "Text",ExpressionUUID->"bdf8a7ed-f4c5-4ae1-8124-f2ccd4951021"],
Cell[CellGroupData[{
Cell[2357453, 56576, 193, 4, 30, "Input",ExpressionUUID->"6437441e-8962-4bda-8da3-f7e4078d667f"],
Cell[2357649, 56582, 724, 23, 34, "Output",ExpressionUUID->"0312401b-b198-4c28-8363-2a6f857f5781"]
}, Open  ]],
Cell[2358388, 56608, 120, 0, 35, "Text",ExpressionUUID->"d1a74aeb-b633-4feb-8786-a157d5d92169"],
Cell[CellGroupData[{
Cell[2358533, 56612, 191, 4, 30, "Input",ExpressionUUID->"414c6439-1dd5-4981-9c53-28f07f58d096"],
Cell[2358727, 56618, 698, 22, 34, "Output",ExpressionUUID->"675604fd-a6d9-41ff-bf30-d517adc6f2ca"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2359462, 56645, 920, 27, 30, "Input",ExpressionUUID->"5c209e78-8978-4bb4-b794-7bc53af68c17"],
Cell[2360385, 56674, 18962, 376, 62, "Output",ExpressionUUID->"60dc7032-3d13-4da3-b22c-67f6f3d03da6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2379384, 57055, 967, 28, 30, "Input",ExpressionUUID->"3a46ecf3-2c47-4822-8788-46f99a225a27"],
Cell[2380354, 57085, 18962, 376, 62, "Output",ExpressionUUID->"3010d63d-6054-4281-8cd1-c2935dd4a62b"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2399365, 57467, 123, 0, 29, "Subsubsection",ExpressionUUID->"38e51894-5214-41fc-bfe4-e9e9f3a12128"],
Cell[CellGroupData[{
Cell[2399513, 57471, 112, 1, 30, "Input",ExpressionUUID->"20bedb7b-1867-432c-a472-258c3d5a0c6e"],
Cell[2399628, 57474, 16357, 367, 95, "Output",ExpressionUUID->"d3a62d23-132c-4ec0-b786-c6c4e5a653b2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2416022, 57846, 288, 8, 33, "Input",ExpressionUUID->"99017012-0341-4a48-ab18-5066a43357af"],
Cell[2416313, 57856, 1838, 57, 111, "Output",ExpressionUUID->"4a8b6503-6889-4b17-8dc3-51fc26994f06"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2418188, 57918, 188, 5, 30, "Input",ExpressionUUID->"0cbccedf-9697-4607-8111-b228608954a7"],
Cell[2418379, 57925, 453, 8, 34, "Output",ExpressionUUID->"bf447098-710b-499a-bca8-719fcff6022a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2418869, 57938, 342, 10, 33, "Input",ExpressionUUID->"8af9164d-dff0-4f1e-ac80-de8fa04ede61"],
Cell[2419214, 57950, 453, 8, 34, "Output",ExpressionUUID->"e0462d67-4639-49a0-aa28-e885adac367a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2419704, 57963, 179, 4, 30, "Input",ExpressionUUID->"02cd65ab-4212-43f9-87f1-c995c8559e10"],
Cell[2419886, 57969, 584, 15, 34, "Output",ExpressionUUID->"3018db80-9976-4ffe-9e3d-4f96b7784150"]
}, Open  ]],
Cell[2420485, 57987, 113, 1, 30, "Input",ExpressionUUID->"b2243762-a020-4f34-b5a7-0d7f831df86b"]
}, Closed]],
Cell[CellGroupData[{
Cell[2420635, 57993, 119, 0, 29, "Subsubsection",ExpressionUUID->"116ecaa3-4a22-4415-b6d2-4ba08c6ac9fd"],
Cell[CellGroupData[{
Cell[2420779, 57997, 108, 1, 30, "Input",ExpressionUUID->"650d6130-0457-4942-b23f-c382c4bd28c5"],
Cell[2420890, 58000, 12312, 287, 95, "Output",ExpressionUUID->"59752180-7692-4523-aa0c-2cec724449e5"]
}, Open  ]],
Cell[2433217, 58290, 156, 3, 35, "Text",ExpressionUUID->"18cbc121-392d-4af0-b6fe-e23a0452e9b7"],
Cell[CellGroupData[{
Cell[2433398, 58297, 657, 18, 38, "Input",ExpressionUUID->"1e61c93e-847c-4f23-89b3-1a2140d2d138"],
Cell[2434058, 58317, 87, 0, 34, "Output",ExpressionUUID->"6864ab47-94fe-4a34-acdb-8310c610bd9c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2434182, 58322, 805, 22, 38, "Input",ExpressionUUID->"5e759348-7515-47cb-9884-629d2722ec49"],
Cell[2434990, 58346, 243, 5, 34, "Output",ExpressionUUID->"d05557e1-d2f7-4157-9fd3-a928d2be6ce3"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2435282, 58357, 120, 0, 29, "Subsubsection",ExpressionUUID->"ce239e91-3c3e-45c4-88a1-bbaba71ab3f4"],
Cell[CellGroupData[{
Cell[2435427, 58361, 109, 1, 30, "Input",ExpressionUUID->"70296fcc-921a-421b-ba08-45877d359b0c"],
Cell[2435539, 58364, 30768, 677, 95, "Output",ExpressionUUID->"4aec5da3-f811-4972-b3af-322fb43be7c4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2466344, 59046, 378, 11, 30, "Input",ExpressionUUID->"1e9003cd-008f-4e1f-9bd3-89b06e9ff166"],
Cell[2466725, 59059, 1495, 46, 37, "Output",ExpressionUUID->"58b4138e-061b-436d-aece-974dea40b74b"]
}, Open  ]],
Cell[2468235, 59108, 384, 10, 35, "Text",ExpressionUUID->"4146148e-2f8c-49c3-96e0-8d616e9d2d13"],
Cell[CellGroupData[{
Cell[2468644, 59122, 452, 13, 33, "Input",ExpressionUUID->"803674e0-32bb-4f18-80e4-54ac7c05c266"],
Cell[2469099, 59137, 4396, 134, 97, "Output",ExpressionUUID->"9cfc246c-f619-4685-9c10-7480cc0f9b84"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2473532, 59276, 636, 19, 33, "Input",ExpressionUUID->"f260ae56-5011-4eb5-a09b-bbdecf18b87d"],
Cell[2474171, 59297, 4827, 148, 136, "Output",ExpressionUUID->"8b3d047e-d649-46a3-a7e1-80def129ae71"]
}, Open  ]],
Cell[2479013, 59448, 174, 5, 35, "Text",ExpressionUUID->"0bd5d8e8-95d1-4031-b014-b5ed75470da6"],
Cell[CellGroupData[{
Cell[2479212, 59457, 568, 16, 33, "Input",ExpressionUUID->"3b4c3a2b-3637-49b8-9bea-9bb9a31b2ab8"],
Cell[2479783, 59475, 2862, 83, 60, "Output",ExpressionUUID->"ce4519be-fdc8-4037-a38a-10273fbffcc8"]
}, Open  ]],
Cell[2482660, 59561, 200, 4, 35, "Text",ExpressionUUID->"291af936-3d5b-4d5b-aba2-879dcb9d74a9"],
Cell[CellGroupData[{
Cell[2482885, 59569, 452, 13, 30, "Input",ExpressionUUID->"f1be5ea1-4bce-435b-b73b-b6866b402720"],
Cell[2483340, 59584, 892, 27, 37, "Output",ExpressionUUID->"1748219f-7d4b-4974-89c1-37b9a288540d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2484269, 59616, 453, 13, 30, "Input",ExpressionUUID->"630b07f1-49f0-4475-b4cf-a2d9906d314c"],
Cell[2484725, 59631, 100, 1, 34, "Output",ExpressionUUID->"1e58f864-bdda-4fa4-b561-5728ac01b29a"]
}, Open  ]],
Cell[2484840, 59635, 147, 2, 35, "Text",ExpressionUUID->"bb144686-432b-4ecb-abdb-bf03d1ce7b3f"],
Cell[CellGroupData[{
Cell[2485012, 59641, 807, 24, 33, "Input",ExpressionUUID->"6b67fd1e-b460-4db7-8c91-bc4c36330201"],
Cell[2485822, 59667, 2829, 70, 37, "Output",ExpressionUUID->"52ecbb1e-29c7-435d-92c1-e05d392a2aa8"]
}, Open  ]],
Cell[2488666, 59740, 362, 9, 35, "Text",ExpressionUUID->"5012c60e-1482-4563-b718-972189b3308b"],
Cell[CellGroupData[{
Cell[2489053, 59753, 917, 26, 33, "Input",ExpressionUUID->"79045e21-a191-4846-9a83-2db7e0d8aa1d"],
Cell[2489973, 59781, 90, 0, 34, "Output",ExpressionUUID->"89122552-9eb4-48a5-b419-2bb44171f810"]
}, Open  ]],
Cell[2490078, 59784, 179, 4, 35, "Text",ExpressionUUID->"0d53bda7-aff9-4e4d-816d-deb47eecc6b0"],
Cell[CellGroupData[{
Cell[2490282, 59792, 860, 25, 33, "Input",ExpressionUUID->"90a59159-4d7c-4995-b047-8c2dee73917f"],
Cell[2491145, 59819, 656, 18, 37, "Output",ExpressionUUID->"2abad8c9-45f5-4c3a-bebb-562450802842"]
}, Open  ]],
Cell[2491816, 59840, 180, 3, 35, "Text",ExpressionUUID->"f59373f6-a7ed-4bf3-8e6f-397edef006aa"],
Cell[CellGroupData[{
Cell[2492021, 59847, 331, 9, 33, "Input",ExpressionUUID->"f6abacc7-a5d5-439b-ac2e-460d64bb2203"],
Cell[2492355, 59858, 347, 10, 37, "Output",ExpressionUUID->"324594bc-b3d7-4b84-8090-aa369b33cc8e"]
}, Open  ]],
Cell[2492717, 59871, 248, 5, 35, "Text",ExpressionUUID->"e0fa60cb-8170-460d-8002-08d9fe72a7b3"],
Cell[CellGroupData[{
Cell[2492990, 59880, 636, 19, 33, "Input",ExpressionUUID->"e0cb42cd-dd13-4a3f-a93d-c2aee4d60ec9"],
Cell[2493629, 59901, 4200, 59, 100, "Message",ExpressionUUID->"b563e7d6-e237-49fb-9c32-39abd7341a80"],
Cell[2497832, 59962, 4200, 59, 100, "Message",ExpressionUUID->"7cb5d2c6-d7b2-4d17-a74b-c4bdf3dccf3e"],
Cell[2502035, 60023, 4200, 59, 100, "Message",ExpressionUUID->"eb82f956-dff5-481a-ba11-56abba53b8e5"],
Cell[2506238, 60084, 362, 7, 24, "Message",ExpressionUUID->"f3564bb1-2d38-4362-bc3c-85f0b24ea519"],
Cell[2506603, 60093, 15758, 377, 98, "Output",ExpressionUUID->"db548b7b-2402-4e81-8b8d-6a29abcce49d"]
}, Open  ]],
Cell[2522376, 60473, 203, 4, 35, "Text",ExpressionUUID->"bab547a6-2636-4ca7-826d-b62c19d02160"],
Cell[CellGroupData[{
Cell[2522604, 60481, 703, 20, 33, "Input",ExpressionUUID->"1eff6307-a1d5-46a1-b57d-49918be81cba"],
Cell[2523310, 60503, 15758, 377, 98, "Output",ExpressionUUID->"5e49ad64-1a70-450b-9c8a-f7a97265152a"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2539117, 60886, 120, 0, 29, "Subsubsection",ExpressionUUID->"116ecaa3-4a22-4415-b6d2-4ba08c6ac9fd"],
Cell[CellGroupData[{
Cell[2539262, 60890, 109, 1, 30, "Input",ExpressionUUID->"650d6130-0457-4942-b23f-c382c4bd28c5"],
Cell[2539374, 60893, 12782, 309, 95, "Output",ExpressionUUID->"d92ba2b4-127e-4eb4-83ec-563f538e39f3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2552193, 61207, 237, 6, 30, "Input",ExpressionUUID->"02c4769b-3fdc-4e24-a701-8240cc3887b5"],
Cell[2552433, 61215, 449, 8, 34, "Output",ExpressionUUID->"814c1270-daca-4b9a-917a-8ffe806bba21"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2552919, 61228, 216, 5, 30, "Input",ExpressionUUID->"31ac014f-a05b-4548-92e8-be61e7d82b8e"],
Cell[2553138, 61235, 2018, 49, 247, "Output",ExpressionUUID->"55a5776e-f901-4a76-b496-b56004439364"]
}, Open  ]],
Cell[2555171, 61287, 155, 4, 35, "Text",ExpressionUUID->"2cfaab34-25e2-4090-83d6-ca25be8eef6f"],
Cell[CellGroupData[{
Cell[2555351, 61295, 193, 4, 30, "Input",ExpressionUUID->"5e26ea2d-9e79-4e37-9764-ecfffd4ae5a8"],
Cell[2555547, 61301, 724, 23, 34, "Output",ExpressionUUID->"f15cdd46-cf36-44d0-ba05-57cfe1e54f43"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2556308, 61329, 368, 9, 33, "Input",ExpressionUUID->"18e586a8-08a7-41a1-8f49-0275506c9071"],
Cell[2556679, 61340, 1181, 39, 105, "Output",ExpressionUUID->"e8b28b77-59ab-4032-b6da-1878da31c190"]
}, Open  ]]
}, Closed]],
Cell[CellGroupData[{
Cell[2557909, 61385, 119, 0, 29, "Subsubsection",ExpressionUUID->"be6c3f44-0ea2-4783-a546-974a2588b37d"],
Cell[CellGroupData[{
Cell[2558053, 61389, 108, 1, 30, "Input",ExpressionUUID->"b3c6c3db-8f23-4cb6-b3e3-9d76938d2955"],
Cell[2558164, 61392, 11700, 285, 95, "Output",ExpressionUUID->"10d687b4-fb2e-4347-a048-d598951c592b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2569901, 61682, 236, 6, 30, "Input",ExpressionUUID->"9e5a3fff-c8ad-4287-85de-9e6d6f9d39f6"],
Cell[2570140, 61690, 231, 5, 34, "Output",ExpressionUUID->"297e6457-a2ef-4fbe-b309-a8cb74edc574"]
}, Open  ]],
Cell[2570386, 61698, 178, 3, 35, "Text",ExpressionUUID->"bcf85333-ca8c-45b8-bca2-db8fd96a1ea3"],
Cell[CellGroupData[{
Cell[2570589, 61705, 589, 16, 30, "Input",ExpressionUUID->"c3162f3c-d575-4c25-a1e0-97ae01f5d8c8"],
Cell[2571181, 61723, 259, 5, 34, "Output",ExpressionUUID->"413f77d3-6c06-489c-8261-b7d3ba295704"]
}, Open  ]],
Cell[2571455, 61731, 165, 3, 35, "Text",ExpressionUUID->"b4289a75-fcb7-46e2-978d-05993aa69104"],
Cell[CellGroupData[{
Cell[2571645, 61738, 654, 17, 30, "Input",ExpressionUUID->"8571ccce-f704-4ae8-a135-fe4bd00d2641"],
Cell[2572302, 61757, 263, 5, 34, "Output",ExpressionUUID->"6eb02a92-d94e-4e62-817d-c103bb382aac"]
}, Open  ]]
}, Closed]]
}, Open  ]]
}, Open  ]]
}
]
*)

